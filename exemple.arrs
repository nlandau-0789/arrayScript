# Bob possède un mur divisé en N sections. Il lui arrive de repeidre Ki sections adjacentes, a savoir les sections Ii à Ji. On demandera, après R repeintes, de donner le nombre de fois que chaque section à été repeinte.
# 
# Entrée:
# N un entier, le nombre de sections
# R un entier, le nombre de repeintes
# sur les R lignes suivantes :
# Ii et Ji deux entiers séparés par un espace : les index de début et de fin de l'intervalle repeinte (0-indexed)


struct bad_struct :
    nums a,b
    list c

operator{"op","goodname",5}("{a} op {b}"):
    pass

operator { "S", "s_combinator" , 0}("S {f} {g} {x}"):
    lambda x: f(x, g(x))

operator { "op2", "goodname2" , 9.7}("op2 {a}"):
    pass

func dummy(num ):
    pass

N = nums::input()
R = nums::input()
sections = static_array(N, nums) # N:nombre d'items, nums: type
for i in range(R):
    I, J = nums::split::input()
    sections[I]++
    sections[J]--
sections = + -> sections
output(" " -+- sections)

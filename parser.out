Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts
Rule 2     program -> newline stmts
Rule 3     program -> newline stmts newline
Rule 4     newline -> NEWLINE
Rule 5     newline -> NEWLINE newline
Rule 6     stmts -> stmt
Rule 7     stmts -> stmts newline stmt
Rule 8     stmt -> line_stmt
Rule 9     stmt -> block_stmt
Rule 10    TYPE -> type_type
Rule 11    TYPE -> type_num
Rule 12    TYPE -> type_bool
Rule 13    TYPE -> type_any
Rule 14    TYPE -> type_u64
Rule 15    TYPE -> type_u32
Rule 16    TYPE -> type_u16
Rule 17    TYPE -> type_u8
Rule 18    TYPE -> type_i64
Rule 19    TYPE -> type_i32
Rule 20    TYPE -> type_i16
Rule 21    TYPE -> type_i8
Rule 22    TYPE -> type_f32
Rule 23    TYPE -> type_f64
Rule 24    TYPE -> type_str
Rule 25    TYPE -> type_list
Rule 26    TYPE -> type_tuple
Rule 27    TYPE -> type_array
Rule 28    TYPE -> type_vector
Rule 29    TYPE -> type_dict
Rule 30    TYPE -> type_generator
Rule 31    TYPE -> type_linked_list
Rule 32    TYPE -> type_doubly_linked_list
Rule 33    TYPE -> type_deque
Rule 34    TYPE -> type_heap
Rule 35    TYPE -> type_fibonacci_heap
Rule 36    TYPE -> type_tree
Rule 37    TYPE -> type_trie
Rule 38    TYPE -> type_stack
Rule 39    TYPE -> type_queue
Rule 40    TYPE -> type_binary_search_tree
Rule 41    TYPE -> type_bitset
Rule 42    TYPE -> type_set
Rule 43    TYPE -> type_map
Rule 44    TYPE -> type_range
Rule 45    TYPE -> type_bad_struct
Rule 46    TYPE -> type_bad_struct2
Rule 47    line_stmt -> return_stmt
Rule 48    line_stmt -> expr
Rule 49    line_stmt -> del_stmt
Rule 50    line_stmt -> declaration_stmt
Rule 51    line_stmt -> pass
Rule 52    line_stmt -> continue
Rule 53    line_stmt -> break
Rule 54    line_stmt -> assign_stmt
Rule 55    item -> expr [ arguments ]
Rule 56    simple_slice -> expr [ arguments : arguments ]
Rule 57    full_slice -> expr [ arguments : arguments : arguments ]
Rule 58    expr -> item
Rule 59    expr -> simple_slice
Rule 60    expr -> full_slice
Rule 61    lambda_decl -> lambda comma_separated_names : expr
Rule 62    return_stmt -> return expr
Rule 63    del_stmt -> del expr
Rule 64    assign_stmt -> comma_separated_names = expr
Rule 65    assign_stmt -> item = expr
Rule 66    assign_stmt -> simple_slice = expr
Rule 67    assign_stmt -> full_slice = expr
Rule 68    declaration_stmt -> TYPE comma_separated_names
Rule 69    comma_separated_names -> VAR
Rule 70    comma_separated_names -> VAR , comma_separated_names
Rule 71    block_stmt -> block_decl { stmts }
Rule 72    block_decl -> for_decl
Rule 73    block_decl -> if_decl
Rule 74    block_decl -> else
Rule 75    block_decl -> elif_decl
Rule 76    block_decl -> operator_decl
Rule 77    block_decl -> struct_decl
Rule 78    block_decl -> while_decl
Rule 79    block_decl -> func_decl
Rule 80    for_decl -> for comma_separated_names operator_contains expr
Rule 81    if_decl -> if expr
Rule 82    elif_decl -> elif expr
Rule 83    operator_decl -> operator ( arguments )
Rule 84    struct_decl -> struct TYPE
Rule 85    while_decl -> while expr
Rule 86    func_decl -> func VAR ( def_arguments )
Rule 87    def_arguments -> declaration_stmt
Rule 88    def_arguments -> declaration_stmt ; def_arguments
Rule 89    const_val -> FLOAT
Rule 90    const_val -> NUM
Rule 91    const_val -> STRING_3SQ
Rule 92    const_val -> STRING_3DQ
Rule 93    const_val -> STRING_SQ
Rule 94    const_val -> STRING_DQ
Rule 95    const_val -> true
Rule 96    const_val -> Null
Rule 97    const_val -> false
Rule 98    expr -> ( expr )
Rule 99    expr -> expr operator_add expr
Rule 100   expr -> expr operator_sub expr
Rule 101   expr -> expr operator_mul expr
Rule 102   expr -> expr operator_div expr
Rule 103   expr -> expr operator_trudiv expr
Rule 104   expr -> expr operator_pow expr
Rule 105   expr -> expr operator_join expr
Rule 106   expr -> expr operator_split expr
Rule 107   expr -> expr operator_scan expr
Rule 108   expr -> expr operator_reduc expr
Rule 109   expr -> expr operator_bitand expr
Rule 110   expr -> expr operator_bitor expr
Rule 111   expr -> expr operator_bitxor expr
Rule 112   expr -> expr operator_bitshiftleft expr
Rule 113   expr -> expr operator_bitshiftright expr
Rule 114   expr -> expr operator_and expr
Rule 115   expr -> expr operator_or expr
Rule 116   expr -> expr operator_xor expr
Rule 117   expr -> expr operator_contains expr
Rule 118   expr -> operator_bitnot expr
Rule 119   expr -> operator_not expr
Rule 120   expr -> expr operator_incr
Rule 121   expr -> expr operator_decr
Rule 122   expr -> expr operator_outer expr expr
Rule 123   expr -> expr expr operator_inner expr expr
Rule 124   expr -> operator_reverse expr
Rule 125   expr -> expr operator_rotate expr
Rule 126   expr -> expr operator_apply expr
Rule 127   expr -> expr operator_compose expr
Rule 128   expr -> expr operator_over expr
Rule 129   expr -> expr operator_map
Rule 130   expr -> operator_sorted_incr expr
Rule 131   expr -> operator_sorted_decr expr
Rule 132   expr -> expr operator_less_than expr
Rule 133   expr -> expr operator_less_than_equals expr
Rule 134   expr -> expr operator_greater_than expr
Rule 135   expr -> expr operator_greater_than_equals expr
Rule 136   expr -> expr operator_equals expr
Rule 137   expr -> expr operator_not_equals expr
Rule 138   expr -> expr operator_smallest expr
Rule 139   expr -> expr operator_greatest expr
Rule 140   expr -> expr operator_goodname expr
Rule 141   expr -> operator_s_combinator expr expr expr
Rule 142   expr -> operator_s2_combinator expr expr expr
Rule 143   expr -> operator_goodname2 expr
Rule 144   expr -> VAR
Rule 145   return_val -> type_type ( arguments )
Rule 146   return_val -> type_num ( arguments )
Rule 147   return_val -> type_bool ( arguments )
Rule 148   return_val -> type_any ( arguments )
Rule 149   return_val -> type_u64 ( arguments )
Rule 150   return_val -> type_u32 ( arguments )
Rule 151   return_val -> type_u16 ( arguments )
Rule 152   return_val -> type_u8 ( arguments )
Rule 153   return_val -> type_i64 ( arguments )
Rule 154   return_val -> type_i32 ( arguments )
Rule 155   return_val -> type_i16 ( arguments )
Rule 156   return_val -> type_i8 ( arguments )
Rule 157   return_val -> type_f32 ( arguments )
Rule 158   return_val -> type_f64 ( arguments )
Rule 159   return_val -> type_str ( arguments )
Rule 160   return_val -> type_list ( arguments )
Rule 161   return_val -> type_tuple ( arguments )
Rule 162   return_val -> type_array ( arguments )
Rule 163   return_val -> type_vector ( arguments )
Rule 164   return_val -> type_dict ( arguments )
Rule 165   return_val -> type_generator ( arguments )
Rule 166   return_val -> type_linked_list ( arguments )
Rule 167   return_val -> type_doubly_linked_list ( arguments )
Rule 168   return_val -> type_deque ( arguments )
Rule 169   return_val -> type_heap ( arguments )
Rule 170   return_val -> type_fibonacci_heap ( arguments )
Rule 171   return_val -> type_tree ( arguments )
Rule 172   return_val -> type_trie ( arguments )
Rule 173   return_val -> type_stack ( arguments )
Rule 174   return_val -> type_queue ( arguments )
Rule 175   return_val -> type_binary_search_tree ( arguments )
Rule 176   return_val -> type_bitset ( arguments )
Rule 177   return_val -> type_set ( arguments )
Rule 178   return_val -> type_map ( arguments )
Rule 179   return_val -> type_range ( arguments )
Rule 180   return_val -> type_bad_struct ( arguments )
Rule 181   return_val -> type_bad_struct2 ( arguments )
Rule 182   return_val -> VAR ( arguments )
Rule 183   expr -> const_val
Rule 184   expr -> return_val
Rule 185   expr -> lambda_decl
Rule 186   expr -> TYPE
Rule 187   empty -> <empty>
Rule 188   arguments -> expr
Rule 189   arguments -> arguments , arguments
Rule 190   arguments -> empty

Terminals, with rules where they appear

(                    : 83 86 98 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
)                    : 83 86 98 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182
,                    : 70 189
:                    : 56 57 57 61
;                    : 88
=                    : 64 65 66 67
FLOAT                : 89
NEWLINE              : 4 5
NUM                  : 90
Null                 : 96
STRING_3DQ           : 92
STRING_3SQ           : 91
STRING_DQ            : 94
STRING_SQ            : 93
VAR                  : 69 70 86 144 182
[                    : 55 56 57
]                    : 55 56 57
break                : 53
continue             : 52
del                  : 63
elif                 : 82
else                 : 74
error                : 
false                : 97
for                  : 80
func                 : 86
if                   : 81
lambda               : 61
operator             : 83
operator_add         : 99
operator_and         : 114
operator_apply       : 126
operator_bitand      : 109
operator_bitnot      : 118
operator_bitor       : 110
operator_bitshiftleft : 112
operator_bitshiftright : 113
operator_bitxor      : 111
operator_compose     : 127
operator_contains    : 80 117
operator_decr        : 121
operator_div         : 102
operator_equals      : 136
operator_goodname    : 140
operator_goodname2   : 143
operator_greater_than : 134
operator_greater_than_equals : 135
operator_greatest    : 139
operator_incr        : 120
operator_inner       : 123
operator_join        : 105
operator_less_than   : 132
operator_less_than_equals : 133
operator_map         : 129
operator_mul         : 101
operator_not         : 119
operator_not_equals  : 137
operator_or          : 115
operator_outer       : 122
operator_over        : 128
operator_pow         : 104
operator_reduc       : 108
operator_reverse     : 124
operator_rotate      : 125
operator_s2_combinator : 142
operator_s_combinator : 141
operator_scan        : 107
operator_smallest    : 138
operator_sorted_decr : 131
operator_sorted_incr : 130
operator_split       : 106
operator_sub         : 100
operator_trudiv      : 103
operator_xor         : 116
pass                 : 51
return               : 62
struct               : 84
true                 : 95
type_any             : 13 148
type_array           : 27 162
type_bad_struct      : 45 180
type_bad_struct2     : 46 181
type_binary_search_tree : 40 175
type_bitset          : 41 176
type_bool            : 12 147
type_deque           : 33 168
type_dict            : 29 164
type_doubly_linked_list : 32 167
type_f32             : 22 157
type_f64             : 23 158
type_fibonacci_heap  : 35 170
type_generator       : 30 165
type_heap            : 34 169
type_i16             : 20 155
type_i32             : 19 154
type_i64             : 18 153
type_i8              : 21 156
type_linked_list     : 31 166
type_list            : 25 160
type_map             : 43 178
type_num             : 11 146
type_queue           : 39 174
type_range           : 44 179
type_set             : 42 177
type_stack           : 38 173
type_str             : 24 159
type_tree            : 36 171
type_trie            : 37 172
type_tuple           : 26 161
type_type            : 10 145
type_u16             : 16 151
type_u32             : 15 150
type_u64             : 14 149
type_u8              : 17 152
type_vector          : 28 163
while                : 85
{                    : 71
}                    : 71

Nonterminals, with rules where they appear

TYPE                 : 68 84 186
arguments            : 55 56 56 57 57 57 83 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 189 189
assign_stmt          : 54
block_decl           : 71
block_stmt           : 9
comma_separated_names : 61 64 68 70 80
const_val            : 183
declaration_stmt     : 50 87 88
def_arguments        : 86 88
del_stmt             : 49
elif_decl            : 75
empty                : 190
expr                 : 48 55 56 57 61 62 63 64 65 66 67 80 81 82 85 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 119 120 121 122 122 122 123 123 123 123 124 125 125 126 126 127 127 128 128 129 130 131 132 132 133 133 134 134 135 135 136 136 137 137 138 138 139 139 140 140 141 141 141 142 142 142 143 188
for_decl             : 72
full_slice           : 60 67
func_decl            : 79
if_decl              : 73
item                 : 58 65
lambda_decl          : 185
line_stmt            : 8
newline              : 2 3 3 5 7
operator_decl        : 76
program              : 0
return_stmt          : 47
return_val           : 184
simple_slice         : 59 66
stmt                 : 6 7
stmts                : 1 2 3 7 71
struct_decl          : 77
while_decl           : 78

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts
    (2) program -> . newline stmts
    (3) program -> . newline stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (72) block_decl -> . for_decl
    (73) block_decl -> . if_decl
    (74) block_decl -> . else
    (75) block_decl -> . elif_decl
    (76) block_decl -> . operator_decl
    (77) block_decl -> . struct_decl
    (78) block_decl -> . while_decl
    (79) block_decl -> . func_decl
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (80) for_decl -> . for comma_separated_names operator_contains expr
    (81) if_decl -> . if expr
    (82) elif_decl -> . elif expr
    (83) operator_decl -> . operator ( arguments )
    (84) struct_decl -> . struct TYPE
    (85) while_decl -> . while expr
    (86) func_decl -> . func VAR ( def_arguments )

    NEWLINE         shift and go to state 5
    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 30
    del             shift and go to state 35
    else            shift and go to state 39
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91
    for             shift and go to state 92
    if              shift and go to state 93
    elif            shift and go to state 94
    operator        shift and go to state 95
    struct          shift and go to state 96
    while           shift and go to state 97
    func            shift and go to state 98

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    newline                        shift and go to state 3
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 34
    comma_separated_names          shift and go to state 36
    for_decl                       shift and go to state 37
    if_decl                        shift and go to state 38
    elif_decl                      shift and go to state 40
    operator_decl                  shift and go to state 41
    struct_decl                    shift and go to state 42
    while_decl                     shift and go to state 43
    func_decl                      shift and go to state 44

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts .
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 1 (program -> stmts .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 99

state 3

    (2) program -> newline . stmts
    (3) program -> newline . stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (72) block_decl -> . for_decl
    (73) block_decl -> . if_decl
    (74) block_decl -> . else
    (75) block_decl -> . elif_decl
    (76) block_decl -> . operator_decl
    (77) block_decl -> . struct_decl
    (78) block_decl -> . while_decl
    (79) block_decl -> . func_decl
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (80) for_decl -> . for comma_separated_names operator_contains expr
    (81) if_decl -> . if expr
    (82) elif_decl -> . elif expr
    (83) operator_decl -> . operator ( arguments )
    (84) struct_decl -> . struct TYPE
    (85) while_decl -> . while expr
    (86) func_decl -> . func VAR ( def_arguments )

    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 30
    del             shift and go to state 35
    else            shift and go to state 39
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91
    for             shift and go to state 92
    if              shift and go to state 93
    elif            shift and go to state 94
    operator        shift and go to state 95
    struct          shift and go to state 96
    while           shift and go to state 97
    func            shift and go to state 98

    stmts                          shift and go to state 100
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 34
    comma_separated_names          shift and go to state 36
    for_decl                       shift and go to state 37
    if_decl                        shift and go to state 38
    elif_decl                      shift and go to state 40
    operator_decl                  shift and go to state 41
    struct_decl                    shift and go to state 42
    while_decl                     shift and go to state 43
    func_decl                      shift and go to state 44

state 4

    (6) stmts -> stmt .

    NEWLINE         reduce using rule 6 (stmts -> stmt .)
    $end            reduce using rule 6 (stmts -> stmt .)
    }               reduce using rule 6 (stmts -> stmt .)


state 5

    (4) newline -> NEWLINE .
    (5) newline -> NEWLINE . newline
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    pass            reduce using rule 4 (newline -> NEWLINE .)
    continue        reduce using rule 4 (newline -> NEWLINE .)
    break           reduce using rule 4 (newline -> NEWLINE .)
    return          reduce using rule 4 (newline -> NEWLINE .)
    (               reduce using rule 4 (newline -> NEWLINE .)
    operator_bitnot reduce using rule 4 (newline -> NEWLINE .)
    operator_not    reduce using rule 4 (newline -> NEWLINE .)
    operator_reverse reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_incr reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_decr reduce using rule 4 (newline -> NEWLINE .)
    operator_s_combinator reduce using rule 4 (newline -> NEWLINE .)
    operator_s2_combinator reduce using rule 4 (newline -> NEWLINE .)
    operator_goodname2 reduce using rule 4 (newline -> NEWLINE .)
    VAR             reduce using rule 4 (newline -> NEWLINE .)
    del             reduce using rule 4 (newline -> NEWLINE .)
    else            reduce using rule 4 (newline -> NEWLINE .)
    FLOAT           reduce using rule 4 (newline -> NEWLINE .)
    NUM             reduce using rule 4 (newline -> NEWLINE .)
    STRING_3SQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_3DQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_SQ       reduce using rule 4 (newline -> NEWLINE .)
    STRING_DQ       reduce using rule 4 (newline -> NEWLINE .)
    true            reduce using rule 4 (newline -> NEWLINE .)
    Null            reduce using rule 4 (newline -> NEWLINE .)
    false           reduce using rule 4 (newline -> NEWLINE .)
    type_type       reduce using rule 4 (newline -> NEWLINE .)
    type_num        reduce using rule 4 (newline -> NEWLINE .)
    type_bool       reduce using rule 4 (newline -> NEWLINE .)
    type_any        reduce using rule 4 (newline -> NEWLINE .)
    type_u64        reduce using rule 4 (newline -> NEWLINE .)
    type_u32        reduce using rule 4 (newline -> NEWLINE .)
    type_u16        reduce using rule 4 (newline -> NEWLINE .)
    type_u8         reduce using rule 4 (newline -> NEWLINE .)
    type_i64        reduce using rule 4 (newline -> NEWLINE .)
    type_i32        reduce using rule 4 (newline -> NEWLINE .)
    type_i16        reduce using rule 4 (newline -> NEWLINE .)
    type_i8         reduce using rule 4 (newline -> NEWLINE .)
    type_f32        reduce using rule 4 (newline -> NEWLINE .)
    type_f64        reduce using rule 4 (newline -> NEWLINE .)
    type_str        reduce using rule 4 (newline -> NEWLINE .)
    type_list       reduce using rule 4 (newline -> NEWLINE .)
    type_tuple      reduce using rule 4 (newline -> NEWLINE .)
    type_array      reduce using rule 4 (newline -> NEWLINE .)
    type_vector     reduce using rule 4 (newline -> NEWLINE .)
    type_dict       reduce using rule 4 (newline -> NEWLINE .)
    type_generator  reduce using rule 4 (newline -> NEWLINE .)
    type_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_doubly_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_deque      reduce using rule 4 (newline -> NEWLINE .)
    type_heap       reduce using rule 4 (newline -> NEWLINE .)
    type_fibonacci_heap reduce using rule 4 (newline -> NEWLINE .)
    type_tree       reduce using rule 4 (newline -> NEWLINE .)
    type_trie       reduce using rule 4 (newline -> NEWLINE .)
    type_stack      reduce using rule 4 (newline -> NEWLINE .)
    type_queue      reduce using rule 4 (newline -> NEWLINE .)
    type_binary_search_tree reduce using rule 4 (newline -> NEWLINE .)
    type_bitset     reduce using rule 4 (newline -> NEWLINE .)
    type_set        reduce using rule 4 (newline -> NEWLINE .)
    type_map        reduce using rule 4 (newline -> NEWLINE .)
    type_range      reduce using rule 4 (newline -> NEWLINE .)
    type_bad_struct reduce using rule 4 (newline -> NEWLINE .)
    type_bad_struct2 reduce using rule 4 (newline -> NEWLINE .)
    lambda          reduce using rule 4 (newline -> NEWLINE .)
    for             reduce using rule 4 (newline -> NEWLINE .)
    if              reduce using rule 4 (newline -> NEWLINE .)
    elif            reduce using rule 4 (newline -> NEWLINE .)
    operator        reduce using rule 4 (newline -> NEWLINE .)
    struct          reduce using rule 4 (newline -> NEWLINE .)
    while           reduce using rule 4 (newline -> NEWLINE .)
    func            reduce using rule 4 (newline -> NEWLINE .)
    $end            reduce using rule 4 (newline -> NEWLINE .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 101

state 6

    (8) stmt -> line_stmt .

    NEWLINE         reduce using rule 8 (stmt -> line_stmt .)
    $end            reduce using rule 8 (stmt -> line_stmt .)
    }               reduce using rule 8 (stmt -> line_stmt .)


state 7

    (9) stmt -> block_stmt .

    NEWLINE         reduce using rule 9 (stmt -> block_stmt .)
    $end            reduce using rule 9 (stmt -> block_stmt .)
    }               reduce using rule 9 (stmt -> block_stmt .)


state 8

    (47) line_stmt -> return_stmt .

    NEWLINE         reduce using rule 47 (line_stmt -> return_stmt .)
    $end            reduce using rule 47 (line_stmt -> return_stmt .)
    }               reduce using rule 47 (line_stmt -> return_stmt .)


state 9

    (48) line_stmt -> expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 48 (line_stmt -> expr .)
    $end            reduce using rule 48 (line_stmt -> expr .)
    }               reduce using rule 48 (line_stmt -> expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 10

    (49) line_stmt -> del_stmt .

    NEWLINE         reduce using rule 49 (line_stmt -> del_stmt .)
    $end            reduce using rule 49 (line_stmt -> del_stmt .)
    }               reduce using rule 49 (line_stmt -> del_stmt .)


state 11

    (50) line_stmt -> declaration_stmt .

    NEWLINE         reduce using rule 50 (line_stmt -> declaration_stmt .)
    $end            reduce using rule 50 (line_stmt -> declaration_stmt .)
    }               reduce using rule 50 (line_stmt -> declaration_stmt .)


state 12

    (51) line_stmt -> pass .

    NEWLINE         reduce using rule 51 (line_stmt -> pass .)
    $end            reduce using rule 51 (line_stmt -> pass .)
    }               reduce using rule 51 (line_stmt -> pass .)


state 13

    (52) line_stmt -> continue .

    NEWLINE         reduce using rule 52 (line_stmt -> continue .)
    $end            reduce using rule 52 (line_stmt -> continue .)
    }               reduce using rule 52 (line_stmt -> continue .)


state 14

    (53) line_stmt -> break .

    NEWLINE         reduce using rule 53 (line_stmt -> break .)
    $end            reduce using rule 53 (line_stmt -> break .)
    }               reduce using rule 53 (line_stmt -> break .)


state 15

    (54) line_stmt -> assign_stmt .

    NEWLINE         reduce using rule 54 (line_stmt -> assign_stmt .)
    $end            reduce using rule 54 (line_stmt -> assign_stmt .)
    }               reduce using rule 54 (line_stmt -> assign_stmt .)


state 16

    (71) block_stmt -> block_decl . { stmts }

    {               shift and go to state 145


state 17

    (62) return_stmt -> return . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 146
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 18

    (58) expr -> item .
    (65) assign_stmt -> item . = expr

    operator_add    reduce using rule 58 (expr -> item .)
    operator_sub    reduce using rule 58 (expr -> item .)
    operator_mul    reduce using rule 58 (expr -> item .)
    operator_div    reduce using rule 58 (expr -> item .)
    operator_trudiv reduce using rule 58 (expr -> item .)
    operator_pow    reduce using rule 58 (expr -> item .)
    operator_join   reduce using rule 58 (expr -> item .)
    operator_split  reduce using rule 58 (expr -> item .)
    operator_scan   reduce using rule 58 (expr -> item .)
    operator_reduc  reduce using rule 58 (expr -> item .)
    operator_bitand reduce using rule 58 (expr -> item .)
    operator_bitor  reduce using rule 58 (expr -> item .)
    operator_bitxor reduce using rule 58 (expr -> item .)
    operator_bitshiftleft reduce using rule 58 (expr -> item .)
    operator_bitshiftright reduce using rule 58 (expr -> item .)
    operator_and    reduce using rule 58 (expr -> item .)
    operator_or     reduce using rule 58 (expr -> item .)
    operator_xor    reduce using rule 58 (expr -> item .)
    operator_contains reduce using rule 58 (expr -> item .)
    operator_incr   reduce using rule 58 (expr -> item .)
    operator_decr   reduce using rule 58 (expr -> item .)
    operator_outer  reduce using rule 58 (expr -> item .)
    operator_rotate reduce using rule 58 (expr -> item .)
    operator_apply  reduce using rule 58 (expr -> item .)
    operator_compose reduce using rule 58 (expr -> item .)
    operator_over   reduce using rule 58 (expr -> item .)
    operator_map    reduce using rule 58 (expr -> item .)
    operator_less_than reduce using rule 58 (expr -> item .)
    operator_less_than_equals reduce using rule 58 (expr -> item .)
    operator_greater_than reduce using rule 58 (expr -> item .)
    operator_greater_than_equals reduce using rule 58 (expr -> item .)
    operator_equals reduce using rule 58 (expr -> item .)
    operator_not_equals reduce using rule 58 (expr -> item .)
    operator_smallest reduce using rule 58 (expr -> item .)
    operator_greatest reduce using rule 58 (expr -> item .)
    operator_goodname reduce using rule 58 (expr -> item .)
    [               reduce using rule 58 (expr -> item .)
    (               reduce using rule 58 (expr -> item .)
    operator_bitnot reduce using rule 58 (expr -> item .)
    operator_not    reduce using rule 58 (expr -> item .)
    operator_reverse reduce using rule 58 (expr -> item .)
    operator_sorted_incr reduce using rule 58 (expr -> item .)
    operator_sorted_decr reduce using rule 58 (expr -> item .)
    operator_s_combinator reduce using rule 58 (expr -> item .)
    operator_s2_combinator reduce using rule 58 (expr -> item .)
    operator_goodname2 reduce using rule 58 (expr -> item .)
    VAR             reduce using rule 58 (expr -> item .)
    FLOAT           reduce using rule 58 (expr -> item .)
    NUM             reduce using rule 58 (expr -> item .)
    STRING_3SQ      reduce using rule 58 (expr -> item .)
    STRING_3DQ      reduce using rule 58 (expr -> item .)
    STRING_SQ       reduce using rule 58 (expr -> item .)
    STRING_DQ       reduce using rule 58 (expr -> item .)
    true            reduce using rule 58 (expr -> item .)
    Null            reduce using rule 58 (expr -> item .)
    false           reduce using rule 58 (expr -> item .)
    type_type       reduce using rule 58 (expr -> item .)
    type_num        reduce using rule 58 (expr -> item .)
    type_bool       reduce using rule 58 (expr -> item .)
    type_any        reduce using rule 58 (expr -> item .)
    type_u64        reduce using rule 58 (expr -> item .)
    type_u32        reduce using rule 58 (expr -> item .)
    type_u16        reduce using rule 58 (expr -> item .)
    type_u8         reduce using rule 58 (expr -> item .)
    type_i64        reduce using rule 58 (expr -> item .)
    type_i32        reduce using rule 58 (expr -> item .)
    type_i16        reduce using rule 58 (expr -> item .)
    type_i8         reduce using rule 58 (expr -> item .)
    type_f32        reduce using rule 58 (expr -> item .)
    type_f64        reduce using rule 58 (expr -> item .)
    type_str        reduce using rule 58 (expr -> item .)
    type_list       reduce using rule 58 (expr -> item .)
    type_tuple      reduce using rule 58 (expr -> item .)
    type_array      reduce using rule 58 (expr -> item .)
    type_vector     reduce using rule 58 (expr -> item .)
    type_dict       reduce using rule 58 (expr -> item .)
    type_generator  reduce using rule 58 (expr -> item .)
    type_linked_list reduce using rule 58 (expr -> item .)
    type_doubly_linked_list reduce using rule 58 (expr -> item .)
    type_deque      reduce using rule 58 (expr -> item .)
    type_heap       reduce using rule 58 (expr -> item .)
    type_fibonacci_heap reduce using rule 58 (expr -> item .)
    type_tree       reduce using rule 58 (expr -> item .)
    type_trie       reduce using rule 58 (expr -> item .)
    type_stack      reduce using rule 58 (expr -> item .)
    type_queue      reduce using rule 58 (expr -> item .)
    type_binary_search_tree reduce using rule 58 (expr -> item .)
    type_bitset     reduce using rule 58 (expr -> item .)
    type_set        reduce using rule 58 (expr -> item .)
    type_map        reduce using rule 58 (expr -> item .)
    type_range      reduce using rule 58 (expr -> item .)
    type_bad_struct reduce using rule 58 (expr -> item .)
    type_bad_struct2 reduce using rule 58 (expr -> item .)
    lambda          reduce using rule 58 (expr -> item .)
    NEWLINE         reduce using rule 58 (expr -> item .)
    $end            reduce using rule 58 (expr -> item .)
    }               reduce using rule 58 (expr -> item .)
    =               shift and go to state 147


state 19

    (59) expr -> simple_slice .
    (66) assign_stmt -> simple_slice . = expr

    operator_add    reduce using rule 59 (expr -> simple_slice .)
    operator_sub    reduce using rule 59 (expr -> simple_slice .)
    operator_mul    reduce using rule 59 (expr -> simple_slice .)
    operator_div    reduce using rule 59 (expr -> simple_slice .)
    operator_trudiv reduce using rule 59 (expr -> simple_slice .)
    operator_pow    reduce using rule 59 (expr -> simple_slice .)
    operator_join   reduce using rule 59 (expr -> simple_slice .)
    operator_split  reduce using rule 59 (expr -> simple_slice .)
    operator_scan   reduce using rule 59 (expr -> simple_slice .)
    operator_reduc  reduce using rule 59 (expr -> simple_slice .)
    operator_bitand reduce using rule 59 (expr -> simple_slice .)
    operator_bitor  reduce using rule 59 (expr -> simple_slice .)
    operator_bitxor reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 59 (expr -> simple_slice .)
    operator_and    reduce using rule 59 (expr -> simple_slice .)
    operator_or     reduce using rule 59 (expr -> simple_slice .)
    operator_xor    reduce using rule 59 (expr -> simple_slice .)
    operator_contains reduce using rule 59 (expr -> simple_slice .)
    operator_incr   reduce using rule 59 (expr -> simple_slice .)
    operator_decr   reduce using rule 59 (expr -> simple_slice .)
    operator_outer  reduce using rule 59 (expr -> simple_slice .)
    operator_rotate reduce using rule 59 (expr -> simple_slice .)
    operator_apply  reduce using rule 59 (expr -> simple_slice .)
    operator_compose reduce using rule 59 (expr -> simple_slice .)
    operator_over   reduce using rule 59 (expr -> simple_slice .)
    operator_map    reduce using rule 59 (expr -> simple_slice .)
    operator_less_than reduce using rule 59 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_equals reduce using rule 59 (expr -> simple_slice .)
    operator_not_equals reduce using rule 59 (expr -> simple_slice .)
    operator_smallest reduce using rule 59 (expr -> simple_slice .)
    operator_greatest reduce using rule 59 (expr -> simple_slice .)
    operator_goodname reduce using rule 59 (expr -> simple_slice .)
    [               reduce using rule 59 (expr -> simple_slice .)
    (               reduce using rule 59 (expr -> simple_slice .)
    operator_bitnot reduce using rule 59 (expr -> simple_slice .)
    operator_not    reduce using rule 59 (expr -> simple_slice .)
    operator_reverse reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_s2_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_goodname2 reduce using rule 59 (expr -> simple_slice .)
    VAR             reduce using rule 59 (expr -> simple_slice .)
    FLOAT           reduce using rule 59 (expr -> simple_slice .)
    NUM             reduce using rule 59 (expr -> simple_slice .)
    STRING_3SQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_3DQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_SQ       reduce using rule 59 (expr -> simple_slice .)
    STRING_DQ       reduce using rule 59 (expr -> simple_slice .)
    true            reduce using rule 59 (expr -> simple_slice .)
    Null            reduce using rule 59 (expr -> simple_slice .)
    false           reduce using rule 59 (expr -> simple_slice .)
    type_type       reduce using rule 59 (expr -> simple_slice .)
    type_num        reduce using rule 59 (expr -> simple_slice .)
    type_bool       reduce using rule 59 (expr -> simple_slice .)
    type_any        reduce using rule 59 (expr -> simple_slice .)
    type_u64        reduce using rule 59 (expr -> simple_slice .)
    type_u32        reduce using rule 59 (expr -> simple_slice .)
    type_u16        reduce using rule 59 (expr -> simple_slice .)
    type_u8         reduce using rule 59 (expr -> simple_slice .)
    type_i64        reduce using rule 59 (expr -> simple_slice .)
    type_i32        reduce using rule 59 (expr -> simple_slice .)
    type_i16        reduce using rule 59 (expr -> simple_slice .)
    type_i8         reduce using rule 59 (expr -> simple_slice .)
    type_f32        reduce using rule 59 (expr -> simple_slice .)
    type_f64        reduce using rule 59 (expr -> simple_slice .)
    type_str        reduce using rule 59 (expr -> simple_slice .)
    type_list       reduce using rule 59 (expr -> simple_slice .)
    type_tuple      reduce using rule 59 (expr -> simple_slice .)
    type_array      reduce using rule 59 (expr -> simple_slice .)
    type_vector     reduce using rule 59 (expr -> simple_slice .)
    type_dict       reduce using rule 59 (expr -> simple_slice .)
    type_generator  reduce using rule 59 (expr -> simple_slice .)
    type_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_doubly_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_deque      reduce using rule 59 (expr -> simple_slice .)
    type_heap       reduce using rule 59 (expr -> simple_slice .)
    type_fibonacci_heap reduce using rule 59 (expr -> simple_slice .)
    type_tree       reduce using rule 59 (expr -> simple_slice .)
    type_trie       reduce using rule 59 (expr -> simple_slice .)
    type_stack      reduce using rule 59 (expr -> simple_slice .)
    type_queue      reduce using rule 59 (expr -> simple_slice .)
    type_binary_search_tree reduce using rule 59 (expr -> simple_slice .)
    type_bitset     reduce using rule 59 (expr -> simple_slice .)
    type_set        reduce using rule 59 (expr -> simple_slice .)
    type_map        reduce using rule 59 (expr -> simple_slice .)
    type_range      reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct2 reduce using rule 59 (expr -> simple_slice .)
    lambda          reduce using rule 59 (expr -> simple_slice .)
    NEWLINE         reduce using rule 59 (expr -> simple_slice .)
    $end            reduce using rule 59 (expr -> simple_slice .)
    }               reduce using rule 59 (expr -> simple_slice .)
    =               shift and go to state 148


state 20

    (60) expr -> full_slice .
    (67) assign_stmt -> full_slice . = expr

    operator_add    reduce using rule 60 (expr -> full_slice .)
    operator_sub    reduce using rule 60 (expr -> full_slice .)
    operator_mul    reduce using rule 60 (expr -> full_slice .)
    operator_div    reduce using rule 60 (expr -> full_slice .)
    operator_trudiv reduce using rule 60 (expr -> full_slice .)
    operator_pow    reduce using rule 60 (expr -> full_slice .)
    operator_join   reduce using rule 60 (expr -> full_slice .)
    operator_split  reduce using rule 60 (expr -> full_slice .)
    operator_scan   reduce using rule 60 (expr -> full_slice .)
    operator_reduc  reduce using rule 60 (expr -> full_slice .)
    operator_bitand reduce using rule 60 (expr -> full_slice .)
    operator_bitor  reduce using rule 60 (expr -> full_slice .)
    operator_bitxor reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 60 (expr -> full_slice .)
    operator_and    reduce using rule 60 (expr -> full_slice .)
    operator_or     reduce using rule 60 (expr -> full_slice .)
    operator_xor    reduce using rule 60 (expr -> full_slice .)
    operator_contains reduce using rule 60 (expr -> full_slice .)
    operator_incr   reduce using rule 60 (expr -> full_slice .)
    operator_decr   reduce using rule 60 (expr -> full_slice .)
    operator_outer  reduce using rule 60 (expr -> full_slice .)
    operator_rotate reduce using rule 60 (expr -> full_slice .)
    operator_apply  reduce using rule 60 (expr -> full_slice .)
    operator_compose reduce using rule 60 (expr -> full_slice .)
    operator_over   reduce using rule 60 (expr -> full_slice .)
    operator_map    reduce using rule 60 (expr -> full_slice .)
    operator_less_than reduce using rule 60 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_greater_than reduce using rule 60 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_equals reduce using rule 60 (expr -> full_slice .)
    operator_not_equals reduce using rule 60 (expr -> full_slice .)
    operator_smallest reduce using rule 60 (expr -> full_slice .)
    operator_greatest reduce using rule 60 (expr -> full_slice .)
    operator_goodname reduce using rule 60 (expr -> full_slice .)
    [               reduce using rule 60 (expr -> full_slice .)
    (               reduce using rule 60 (expr -> full_slice .)
    operator_bitnot reduce using rule 60 (expr -> full_slice .)
    operator_not    reduce using rule 60 (expr -> full_slice .)
    operator_reverse reduce using rule 60 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 60 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator reduce using rule 60 (expr -> full_slice .)
    operator_s2_combinator reduce using rule 60 (expr -> full_slice .)
    operator_goodname2 reduce using rule 60 (expr -> full_slice .)
    VAR             reduce using rule 60 (expr -> full_slice .)
    FLOAT           reduce using rule 60 (expr -> full_slice .)
    NUM             reduce using rule 60 (expr -> full_slice .)
    STRING_3SQ      reduce using rule 60 (expr -> full_slice .)
    STRING_3DQ      reduce using rule 60 (expr -> full_slice .)
    STRING_SQ       reduce using rule 60 (expr -> full_slice .)
    STRING_DQ       reduce using rule 60 (expr -> full_slice .)
    true            reduce using rule 60 (expr -> full_slice .)
    Null            reduce using rule 60 (expr -> full_slice .)
    false           reduce using rule 60 (expr -> full_slice .)
    type_type       reduce using rule 60 (expr -> full_slice .)
    type_num        reduce using rule 60 (expr -> full_slice .)
    type_bool       reduce using rule 60 (expr -> full_slice .)
    type_any        reduce using rule 60 (expr -> full_slice .)
    type_u64        reduce using rule 60 (expr -> full_slice .)
    type_u32        reduce using rule 60 (expr -> full_slice .)
    type_u16        reduce using rule 60 (expr -> full_slice .)
    type_u8         reduce using rule 60 (expr -> full_slice .)
    type_i64        reduce using rule 60 (expr -> full_slice .)
    type_i32        reduce using rule 60 (expr -> full_slice .)
    type_i16        reduce using rule 60 (expr -> full_slice .)
    type_i8         reduce using rule 60 (expr -> full_slice .)
    type_f32        reduce using rule 60 (expr -> full_slice .)
    type_f64        reduce using rule 60 (expr -> full_slice .)
    type_str        reduce using rule 60 (expr -> full_slice .)
    type_list       reduce using rule 60 (expr -> full_slice .)
    type_tuple      reduce using rule 60 (expr -> full_slice .)
    type_array      reduce using rule 60 (expr -> full_slice .)
    type_vector     reduce using rule 60 (expr -> full_slice .)
    type_dict       reduce using rule 60 (expr -> full_slice .)
    type_generator  reduce using rule 60 (expr -> full_slice .)
    type_linked_list reduce using rule 60 (expr -> full_slice .)
    type_doubly_linked_list reduce using rule 60 (expr -> full_slice .)
    type_deque      reduce using rule 60 (expr -> full_slice .)
    type_heap       reduce using rule 60 (expr -> full_slice .)
    type_fibonacci_heap reduce using rule 60 (expr -> full_slice .)
    type_tree       reduce using rule 60 (expr -> full_slice .)
    type_trie       reduce using rule 60 (expr -> full_slice .)
    type_stack      reduce using rule 60 (expr -> full_slice .)
    type_queue      reduce using rule 60 (expr -> full_slice .)
    type_binary_search_tree reduce using rule 60 (expr -> full_slice .)
    type_bitset     reduce using rule 60 (expr -> full_slice .)
    type_set        reduce using rule 60 (expr -> full_slice .)
    type_map        reduce using rule 60 (expr -> full_slice .)
    type_range      reduce using rule 60 (expr -> full_slice .)
    type_bad_struct reduce using rule 60 (expr -> full_slice .)
    type_bad_struct2 reduce using rule 60 (expr -> full_slice .)
    lambda          reduce using rule 60 (expr -> full_slice .)
    NEWLINE         reduce using rule 60 (expr -> full_slice .)
    $end            reduce using rule 60 (expr -> full_slice .)
    }               reduce using rule 60 (expr -> full_slice .)
    =               shift and go to state 149


state 21

    (98) expr -> ( . expr )
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 150
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 22

    (118) expr -> operator_bitnot . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 151
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 23

    (119) expr -> operator_not . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 152
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 24

    (124) expr -> operator_reverse . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 153
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 25

    (130) expr -> operator_sorted_incr . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 154
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 26

    (131) expr -> operator_sorted_decr . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 155
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 27

    (141) expr -> operator_s_combinator . expr expr expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 156
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 28

    (142) expr -> operator_s2_combinator . expr expr expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 157
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 29

    (143) expr -> operator_goodname2 . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 158
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 30

    (144) expr -> VAR .
    (182) return_val -> VAR . ( arguments )
    (69) comma_separated_names -> VAR .
    (70) comma_separated_names -> VAR . , comma_separated_names

  ! shift/reduce conflict for ( resolved as shift
    operator_add    reduce using rule 144 (expr -> VAR .)
    operator_sub    reduce using rule 144 (expr -> VAR .)
    operator_mul    reduce using rule 144 (expr -> VAR .)
    operator_div    reduce using rule 144 (expr -> VAR .)
    operator_trudiv reduce using rule 144 (expr -> VAR .)
    operator_pow    reduce using rule 144 (expr -> VAR .)
    operator_join   reduce using rule 144 (expr -> VAR .)
    operator_split  reduce using rule 144 (expr -> VAR .)
    operator_scan   reduce using rule 144 (expr -> VAR .)
    operator_reduc  reduce using rule 144 (expr -> VAR .)
    operator_bitand reduce using rule 144 (expr -> VAR .)
    operator_bitor  reduce using rule 144 (expr -> VAR .)
    operator_bitxor reduce using rule 144 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 144 (expr -> VAR .)
    operator_bitshiftright reduce using rule 144 (expr -> VAR .)
    operator_and    reduce using rule 144 (expr -> VAR .)
    operator_or     reduce using rule 144 (expr -> VAR .)
    operator_xor    reduce using rule 144 (expr -> VAR .)
    operator_contains reduce using rule 144 (expr -> VAR .)
    operator_incr   reduce using rule 144 (expr -> VAR .)
    operator_decr   reduce using rule 144 (expr -> VAR .)
    operator_outer  reduce using rule 144 (expr -> VAR .)
    operator_rotate reduce using rule 144 (expr -> VAR .)
    operator_apply  reduce using rule 144 (expr -> VAR .)
    operator_compose reduce using rule 144 (expr -> VAR .)
    operator_over   reduce using rule 144 (expr -> VAR .)
    operator_map    reduce using rule 144 (expr -> VAR .)
    operator_less_than reduce using rule 144 (expr -> VAR .)
    operator_less_than_equals reduce using rule 144 (expr -> VAR .)
    operator_greater_than reduce using rule 144 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 144 (expr -> VAR .)
    operator_equals reduce using rule 144 (expr -> VAR .)
    operator_not_equals reduce using rule 144 (expr -> VAR .)
    operator_smallest reduce using rule 144 (expr -> VAR .)
    operator_greatest reduce using rule 144 (expr -> VAR .)
    operator_goodname reduce using rule 144 (expr -> VAR .)
    [               reduce using rule 144 (expr -> VAR .)
    operator_bitnot reduce using rule 144 (expr -> VAR .)
    operator_not    reduce using rule 144 (expr -> VAR .)
    operator_reverse reduce using rule 144 (expr -> VAR .)
    operator_sorted_incr reduce using rule 144 (expr -> VAR .)
    operator_sorted_decr reduce using rule 144 (expr -> VAR .)
    operator_s_combinator reduce using rule 144 (expr -> VAR .)
    operator_s2_combinator reduce using rule 144 (expr -> VAR .)
    operator_goodname2 reduce using rule 144 (expr -> VAR .)
    VAR             reduce using rule 144 (expr -> VAR .)
    FLOAT           reduce using rule 144 (expr -> VAR .)
    NUM             reduce using rule 144 (expr -> VAR .)
    STRING_3SQ      reduce using rule 144 (expr -> VAR .)
    STRING_3DQ      reduce using rule 144 (expr -> VAR .)
    STRING_SQ       reduce using rule 144 (expr -> VAR .)
    STRING_DQ       reduce using rule 144 (expr -> VAR .)
    true            reduce using rule 144 (expr -> VAR .)
    Null            reduce using rule 144 (expr -> VAR .)
    false           reduce using rule 144 (expr -> VAR .)
    type_type       reduce using rule 144 (expr -> VAR .)
    type_num        reduce using rule 144 (expr -> VAR .)
    type_bool       reduce using rule 144 (expr -> VAR .)
    type_any        reduce using rule 144 (expr -> VAR .)
    type_u64        reduce using rule 144 (expr -> VAR .)
    type_u32        reduce using rule 144 (expr -> VAR .)
    type_u16        reduce using rule 144 (expr -> VAR .)
    type_u8         reduce using rule 144 (expr -> VAR .)
    type_i64        reduce using rule 144 (expr -> VAR .)
    type_i32        reduce using rule 144 (expr -> VAR .)
    type_i16        reduce using rule 144 (expr -> VAR .)
    type_i8         reduce using rule 144 (expr -> VAR .)
    type_f32        reduce using rule 144 (expr -> VAR .)
    type_f64        reduce using rule 144 (expr -> VAR .)
    type_str        reduce using rule 144 (expr -> VAR .)
    type_list       reduce using rule 144 (expr -> VAR .)
    type_tuple      reduce using rule 144 (expr -> VAR .)
    type_array      reduce using rule 144 (expr -> VAR .)
    type_vector     reduce using rule 144 (expr -> VAR .)
    type_dict       reduce using rule 144 (expr -> VAR .)
    type_generator  reduce using rule 144 (expr -> VAR .)
    type_linked_list reduce using rule 144 (expr -> VAR .)
    type_doubly_linked_list reduce using rule 144 (expr -> VAR .)
    type_deque      reduce using rule 144 (expr -> VAR .)
    type_heap       reduce using rule 144 (expr -> VAR .)
    type_fibonacci_heap reduce using rule 144 (expr -> VAR .)
    type_tree       reduce using rule 144 (expr -> VAR .)
    type_trie       reduce using rule 144 (expr -> VAR .)
    type_stack      reduce using rule 144 (expr -> VAR .)
    type_queue      reduce using rule 144 (expr -> VAR .)
    type_binary_search_tree reduce using rule 144 (expr -> VAR .)
    type_bitset     reduce using rule 144 (expr -> VAR .)
    type_set        reduce using rule 144 (expr -> VAR .)
    type_map        reduce using rule 144 (expr -> VAR .)
    type_range      reduce using rule 144 (expr -> VAR .)
    type_bad_struct reduce using rule 144 (expr -> VAR .)
    type_bad_struct2 reduce using rule 144 (expr -> VAR .)
    lambda          reduce using rule 144 (expr -> VAR .)
    NEWLINE         reduce using rule 144 (expr -> VAR .)
    $end            reduce using rule 144 (expr -> VAR .)
    }               reduce using rule 144 (expr -> VAR .)
    (               shift and go to state 159
    =               reduce using rule 69 (comma_separated_names -> VAR .)
    ,               shift and go to state 160

  ! (               [ reduce using rule 144 (expr -> VAR .) ]


state 31

    (183) expr -> const_val .

    operator_add    reduce using rule 183 (expr -> const_val .)
    operator_sub    reduce using rule 183 (expr -> const_val .)
    operator_mul    reduce using rule 183 (expr -> const_val .)
    operator_div    reduce using rule 183 (expr -> const_val .)
    operator_trudiv reduce using rule 183 (expr -> const_val .)
    operator_pow    reduce using rule 183 (expr -> const_val .)
    operator_join   reduce using rule 183 (expr -> const_val .)
    operator_split  reduce using rule 183 (expr -> const_val .)
    operator_scan   reduce using rule 183 (expr -> const_val .)
    operator_reduc  reduce using rule 183 (expr -> const_val .)
    operator_bitand reduce using rule 183 (expr -> const_val .)
    operator_bitor  reduce using rule 183 (expr -> const_val .)
    operator_bitxor reduce using rule 183 (expr -> const_val .)
    operator_bitshiftleft reduce using rule 183 (expr -> const_val .)
    operator_bitshiftright reduce using rule 183 (expr -> const_val .)
    operator_and    reduce using rule 183 (expr -> const_val .)
    operator_or     reduce using rule 183 (expr -> const_val .)
    operator_xor    reduce using rule 183 (expr -> const_val .)
    operator_contains reduce using rule 183 (expr -> const_val .)
    operator_incr   reduce using rule 183 (expr -> const_val .)
    operator_decr   reduce using rule 183 (expr -> const_val .)
    operator_outer  reduce using rule 183 (expr -> const_val .)
    operator_rotate reduce using rule 183 (expr -> const_val .)
    operator_apply  reduce using rule 183 (expr -> const_val .)
    operator_compose reduce using rule 183 (expr -> const_val .)
    operator_over   reduce using rule 183 (expr -> const_val .)
    operator_map    reduce using rule 183 (expr -> const_val .)
    operator_less_than reduce using rule 183 (expr -> const_val .)
    operator_less_than_equals reduce using rule 183 (expr -> const_val .)
    operator_greater_than reduce using rule 183 (expr -> const_val .)
    operator_greater_than_equals reduce using rule 183 (expr -> const_val .)
    operator_equals reduce using rule 183 (expr -> const_val .)
    operator_not_equals reduce using rule 183 (expr -> const_val .)
    operator_smallest reduce using rule 183 (expr -> const_val .)
    operator_greatest reduce using rule 183 (expr -> const_val .)
    operator_goodname reduce using rule 183 (expr -> const_val .)
    [               reduce using rule 183 (expr -> const_val .)
    (               reduce using rule 183 (expr -> const_val .)
    operator_bitnot reduce using rule 183 (expr -> const_val .)
    operator_not    reduce using rule 183 (expr -> const_val .)
    operator_reverse reduce using rule 183 (expr -> const_val .)
    operator_sorted_incr reduce using rule 183 (expr -> const_val .)
    operator_sorted_decr reduce using rule 183 (expr -> const_val .)
    operator_s_combinator reduce using rule 183 (expr -> const_val .)
    operator_s2_combinator reduce using rule 183 (expr -> const_val .)
    operator_goodname2 reduce using rule 183 (expr -> const_val .)
    VAR             reduce using rule 183 (expr -> const_val .)
    FLOAT           reduce using rule 183 (expr -> const_val .)
    NUM             reduce using rule 183 (expr -> const_val .)
    STRING_3SQ      reduce using rule 183 (expr -> const_val .)
    STRING_3DQ      reduce using rule 183 (expr -> const_val .)
    STRING_SQ       reduce using rule 183 (expr -> const_val .)
    STRING_DQ       reduce using rule 183 (expr -> const_val .)
    true            reduce using rule 183 (expr -> const_val .)
    Null            reduce using rule 183 (expr -> const_val .)
    false           reduce using rule 183 (expr -> const_val .)
    type_type       reduce using rule 183 (expr -> const_val .)
    type_num        reduce using rule 183 (expr -> const_val .)
    type_bool       reduce using rule 183 (expr -> const_val .)
    type_any        reduce using rule 183 (expr -> const_val .)
    type_u64        reduce using rule 183 (expr -> const_val .)
    type_u32        reduce using rule 183 (expr -> const_val .)
    type_u16        reduce using rule 183 (expr -> const_val .)
    type_u8         reduce using rule 183 (expr -> const_val .)
    type_i64        reduce using rule 183 (expr -> const_val .)
    type_i32        reduce using rule 183 (expr -> const_val .)
    type_i16        reduce using rule 183 (expr -> const_val .)
    type_i8         reduce using rule 183 (expr -> const_val .)
    type_f32        reduce using rule 183 (expr -> const_val .)
    type_f64        reduce using rule 183 (expr -> const_val .)
    type_str        reduce using rule 183 (expr -> const_val .)
    type_list       reduce using rule 183 (expr -> const_val .)
    type_tuple      reduce using rule 183 (expr -> const_val .)
    type_array      reduce using rule 183 (expr -> const_val .)
    type_vector     reduce using rule 183 (expr -> const_val .)
    type_dict       reduce using rule 183 (expr -> const_val .)
    type_generator  reduce using rule 183 (expr -> const_val .)
    type_linked_list reduce using rule 183 (expr -> const_val .)
    type_doubly_linked_list reduce using rule 183 (expr -> const_val .)
    type_deque      reduce using rule 183 (expr -> const_val .)
    type_heap       reduce using rule 183 (expr -> const_val .)
    type_fibonacci_heap reduce using rule 183 (expr -> const_val .)
    type_tree       reduce using rule 183 (expr -> const_val .)
    type_trie       reduce using rule 183 (expr -> const_val .)
    type_stack      reduce using rule 183 (expr -> const_val .)
    type_queue      reduce using rule 183 (expr -> const_val .)
    type_binary_search_tree reduce using rule 183 (expr -> const_val .)
    type_bitset     reduce using rule 183 (expr -> const_val .)
    type_set        reduce using rule 183 (expr -> const_val .)
    type_map        reduce using rule 183 (expr -> const_val .)
    type_range      reduce using rule 183 (expr -> const_val .)
    type_bad_struct reduce using rule 183 (expr -> const_val .)
    type_bad_struct2 reduce using rule 183 (expr -> const_val .)
    lambda          reduce using rule 183 (expr -> const_val .)
    NEWLINE         reduce using rule 183 (expr -> const_val .)
    $end            reduce using rule 183 (expr -> const_val .)
    operator_inner  reduce using rule 183 (expr -> const_val .)
    }               reduce using rule 183 (expr -> const_val .)
    )               reduce using rule 183 (expr -> const_val .)
    {               reduce using rule 183 (expr -> const_val .)
    ]               reduce using rule 183 (expr -> const_val .)
    :               reduce using rule 183 (expr -> const_val .)
    ,               reduce using rule 183 (expr -> const_val .)


state 32

    (184) expr -> return_val .

    operator_add    reduce using rule 184 (expr -> return_val .)
    operator_sub    reduce using rule 184 (expr -> return_val .)
    operator_mul    reduce using rule 184 (expr -> return_val .)
    operator_div    reduce using rule 184 (expr -> return_val .)
    operator_trudiv reduce using rule 184 (expr -> return_val .)
    operator_pow    reduce using rule 184 (expr -> return_val .)
    operator_join   reduce using rule 184 (expr -> return_val .)
    operator_split  reduce using rule 184 (expr -> return_val .)
    operator_scan   reduce using rule 184 (expr -> return_val .)
    operator_reduc  reduce using rule 184 (expr -> return_val .)
    operator_bitand reduce using rule 184 (expr -> return_val .)
    operator_bitor  reduce using rule 184 (expr -> return_val .)
    operator_bitxor reduce using rule 184 (expr -> return_val .)
    operator_bitshiftleft reduce using rule 184 (expr -> return_val .)
    operator_bitshiftright reduce using rule 184 (expr -> return_val .)
    operator_and    reduce using rule 184 (expr -> return_val .)
    operator_or     reduce using rule 184 (expr -> return_val .)
    operator_xor    reduce using rule 184 (expr -> return_val .)
    operator_contains reduce using rule 184 (expr -> return_val .)
    operator_incr   reduce using rule 184 (expr -> return_val .)
    operator_decr   reduce using rule 184 (expr -> return_val .)
    operator_outer  reduce using rule 184 (expr -> return_val .)
    operator_rotate reduce using rule 184 (expr -> return_val .)
    operator_apply  reduce using rule 184 (expr -> return_val .)
    operator_compose reduce using rule 184 (expr -> return_val .)
    operator_over   reduce using rule 184 (expr -> return_val .)
    operator_map    reduce using rule 184 (expr -> return_val .)
    operator_less_than reduce using rule 184 (expr -> return_val .)
    operator_less_than_equals reduce using rule 184 (expr -> return_val .)
    operator_greater_than reduce using rule 184 (expr -> return_val .)
    operator_greater_than_equals reduce using rule 184 (expr -> return_val .)
    operator_equals reduce using rule 184 (expr -> return_val .)
    operator_not_equals reduce using rule 184 (expr -> return_val .)
    operator_smallest reduce using rule 184 (expr -> return_val .)
    operator_greatest reduce using rule 184 (expr -> return_val .)
    operator_goodname reduce using rule 184 (expr -> return_val .)
    [               reduce using rule 184 (expr -> return_val .)
    (               reduce using rule 184 (expr -> return_val .)
    operator_bitnot reduce using rule 184 (expr -> return_val .)
    operator_not    reduce using rule 184 (expr -> return_val .)
    operator_reverse reduce using rule 184 (expr -> return_val .)
    operator_sorted_incr reduce using rule 184 (expr -> return_val .)
    operator_sorted_decr reduce using rule 184 (expr -> return_val .)
    operator_s_combinator reduce using rule 184 (expr -> return_val .)
    operator_s2_combinator reduce using rule 184 (expr -> return_val .)
    operator_goodname2 reduce using rule 184 (expr -> return_val .)
    VAR             reduce using rule 184 (expr -> return_val .)
    FLOAT           reduce using rule 184 (expr -> return_val .)
    NUM             reduce using rule 184 (expr -> return_val .)
    STRING_3SQ      reduce using rule 184 (expr -> return_val .)
    STRING_3DQ      reduce using rule 184 (expr -> return_val .)
    STRING_SQ       reduce using rule 184 (expr -> return_val .)
    STRING_DQ       reduce using rule 184 (expr -> return_val .)
    true            reduce using rule 184 (expr -> return_val .)
    Null            reduce using rule 184 (expr -> return_val .)
    false           reduce using rule 184 (expr -> return_val .)
    type_type       reduce using rule 184 (expr -> return_val .)
    type_num        reduce using rule 184 (expr -> return_val .)
    type_bool       reduce using rule 184 (expr -> return_val .)
    type_any        reduce using rule 184 (expr -> return_val .)
    type_u64        reduce using rule 184 (expr -> return_val .)
    type_u32        reduce using rule 184 (expr -> return_val .)
    type_u16        reduce using rule 184 (expr -> return_val .)
    type_u8         reduce using rule 184 (expr -> return_val .)
    type_i64        reduce using rule 184 (expr -> return_val .)
    type_i32        reduce using rule 184 (expr -> return_val .)
    type_i16        reduce using rule 184 (expr -> return_val .)
    type_i8         reduce using rule 184 (expr -> return_val .)
    type_f32        reduce using rule 184 (expr -> return_val .)
    type_f64        reduce using rule 184 (expr -> return_val .)
    type_str        reduce using rule 184 (expr -> return_val .)
    type_list       reduce using rule 184 (expr -> return_val .)
    type_tuple      reduce using rule 184 (expr -> return_val .)
    type_array      reduce using rule 184 (expr -> return_val .)
    type_vector     reduce using rule 184 (expr -> return_val .)
    type_dict       reduce using rule 184 (expr -> return_val .)
    type_generator  reduce using rule 184 (expr -> return_val .)
    type_linked_list reduce using rule 184 (expr -> return_val .)
    type_doubly_linked_list reduce using rule 184 (expr -> return_val .)
    type_deque      reduce using rule 184 (expr -> return_val .)
    type_heap       reduce using rule 184 (expr -> return_val .)
    type_fibonacci_heap reduce using rule 184 (expr -> return_val .)
    type_tree       reduce using rule 184 (expr -> return_val .)
    type_trie       reduce using rule 184 (expr -> return_val .)
    type_stack      reduce using rule 184 (expr -> return_val .)
    type_queue      reduce using rule 184 (expr -> return_val .)
    type_binary_search_tree reduce using rule 184 (expr -> return_val .)
    type_bitset     reduce using rule 184 (expr -> return_val .)
    type_set        reduce using rule 184 (expr -> return_val .)
    type_map        reduce using rule 184 (expr -> return_val .)
    type_range      reduce using rule 184 (expr -> return_val .)
    type_bad_struct reduce using rule 184 (expr -> return_val .)
    type_bad_struct2 reduce using rule 184 (expr -> return_val .)
    lambda          reduce using rule 184 (expr -> return_val .)
    NEWLINE         reduce using rule 184 (expr -> return_val .)
    $end            reduce using rule 184 (expr -> return_val .)
    operator_inner  reduce using rule 184 (expr -> return_val .)
    }               reduce using rule 184 (expr -> return_val .)
    )               reduce using rule 184 (expr -> return_val .)
    {               reduce using rule 184 (expr -> return_val .)
    ]               reduce using rule 184 (expr -> return_val .)
    :               reduce using rule 184 (expr -> return_val .)
    ,               reduce using rule 184 (expr -> return_val .)


state 33

    (185) expr -> lambda_decl .

    operator_add    reduce using rule 185 (expr -> lambda_decl .)
    operator_sub    reduce using rule 185 (expr -> lambda_decl .)
    operator_mul    reduce using rule 185 (expr -> lambda_decl .)
    operator_div    reduce using rule 185 (expr -> lambda_decl .)
    operator_trudiv reduce using rule 185 (expr -> lambda_decl .)
    operator_pow    reduce using rule 185 (expr -> lambda_decl .)
    operator_join   reduce using rule 185 (expr -> lambda_decl .)
    operator_split  reduce using rule 185 (expr -> lambda_decl .)
    operator_scan   reduce using rule 185 (expr -> lambda_decl .)
    operator_reduc  reduce using rule 185 (expr -> lambda_decl .)
    operator_bitand reduce using rule 185 (expr -> lambda_decl .)
    operator_bitor  reduce using rule 185 (expr -> lambda_decl .)
    operator_bitxor reduce using rule 185 (expr -> lambda_decl .)
    operator_bitshiftleft reduce using rule 185 (expr -> lambda_decl .)
    operator_bitshiftright reduce using rule 185 (expr -> lambda_decl .)
    operator_and    reduce using rule 185 (expr -> lambda_decl .)
    operator_or     reduce using rule 185 (expr -> lambda_decl .)
    operator_xor    reduce using rule 185 (expr -> lambda_decl .)
    operator_contains reduce using rule 185 (expr -> lambda_decl .)
    operator_incr   reduce using rule 185 (expr -> lambda_decl .)
    operator_decr   reduce using rule 185 (expr -> lambda_decl .)
    operator_outer  reduce using rule 185 (expr -> lambda_decl .)
    operator_rotate reduce using rule 185 (expr -> lambda_decl .)
    operator_apply  reduce using rule 185 (expr -> lambda_decl .)
    operator_compose reduce using rule 185 (expr -> lambda_decl .)
    operator_over   reduce using rule 185 (expr -> lambda_decl .)
    operator_map    reduce using rule 185 (expr -> lambda_decl .)
    operator_less_than reduce using rule 185 (expr -> lambda_decl .)
    operator_less_than_equals reduce using rule 185 (expr -> lambda_decl .)
    operator_greater_than reduce using rule 185 (expr -> lambda_decl .)
    operator_greater_than_equals reduce using rule 185 (expr -> lambda_decl .)
    operator_equals reduce using rule 185 (expr -> lambda_decl .)
    operator_not_equals reduce using rule 185 (expr -> lambda_decl .)
    operator_smallest reduce using rule 185 (expr -> lambda_decl .)
    operator_greatest reduce using rule 185 (expr -> lambda_decl .)
    operator_goodname reduce using rule 185 (expr -> lambda_decl .)
    [               reduce using rule 185 (expr -> lambda_decl .)
    (               reduce using rule 185 (expr -> lambda_decl .)
    operator_bitnot reduce using rule 185 (expr -> lambda_decl .)
    operator_not    reduce using rule 185 (expr -> lambda_decl .)
    operator_reverse reduce using rule 185 (expr -> lambda_decl .)
    operator_sorted_incr reduce using rule 185 (expr -> lambda_decl .)
    operator_sorted_decr reduce using rule 185 (expr -> lambda_decl .)
    operator_s_combinator reduce using rule 185 (expr -> lambda_decl .)
    operator_s2_combinator reduce using rule 185 (expr -> lambda_decl .)
    operator_goodname2 reduce using rule 185 (expr -> lambda_decl .)
    VAR             reduce using rule 185 (expr -> lambda_decl .)
    FLOAT           reduce using rule 185 (expr -> lambda_decl .)
    NUM             reduce using rule 185 (expr -> lambda_decl .)
    STRING_3SQ      reduce using rule 185 (expr -> lambda_decl .)
    STRING_3DQ      reduce using rule 185 (expr -> lambda_decl .)
    STRING_SQ       reduce using rule 185 (expr -> lambda_decl .)
    STRING_DQ       reduce using rule 185 (expr -> lambda_decl .)
    true            reduce using rule 185 (expr -> lambda_decl .)
    Null            reduce using rule 185 (expr -> lambda_decl .)
    false           reduce using rule 185 (expr -> lambda_decl .)
    type_type       reduce using rule 185 (expr -> lambda_decl .)
    type_num        reduce using rule 185 (expr -> lambda_decl .)
    type_bool       reduce using rule 185 (expr -> lambda_decl .)
    type_any        reduce using rule 185 (expr -> lambda_decl .)
    type_u64        reduce using rule 185 (expr -> lambda_decl .)
    type_u32        reduce using rule 185 (expr -> lambda_decl .)
    type_u16        reduce using rule 185 (expr -> lambda_decl .)
    type_u8         reduce using rule 185 (expr -> lambda_decl .)
    type_i64        reduce using rule 185 (expr -> lambda_decl .)
    type_i32        reduce using rule 185 (expr -> lambda_decl .)
    type_i16        reduce using rule 185 (expr -> lambda_decl .)
    type_i8         reduce using rule 185 (expr -> lambda_decl .)
    type_f32        reduce using rule 185 (expr -> lambda_decl .)
    type_f64        reduce using rule 185 (expr -> lambda_decl .)
    type_str        reduce using rule 185 (expr -> lambda_decl .)
    type_list       reduce using rule 185 (expr -> lambda_decl .)
    type_tuple      reduce using rule 185 (expr -> lambda_decl .)
    type_array      reduce using rule 185 (expr -> lambda_decl .)
    type_vector     reduce using rule 185 (expr -> lambda_decl .)
    type_dict       reduce using rule 185 (expr -> lambda_decl .)
    type_generator  reduce using rule 185 (expr -> lambda_decl .)
    type_linked_list reduce using rule 185 (expr -> lambda_decl .)
    type_doubly_linked_list reduce using rule 185 (expr -> lambda_decl .)
    type_deque      reduce using rule 185 (expr -> lambda_decl .)
    type_heap       reduce using rule 185 (expr -> lambda_decl .)
    type_fibonacci_heap reduce using rule 185 (expr -> lambda_decl .)
    type_tree       reduce using rule 185 (expr -> lambda_decl .)
    type_trie       reduce using rule 185 (expr -> lambda_decl .)
    type_stack      reduce using rule 185 (expr -> lambda_decl .)
    type_queue      reduce using rule 185 (expr -> lambda_decl .)
    type_binary_search_tree reduce using rule 185 (expr -> lambda_decl .)
    type_bitset     reduce using rule 185 (expr -> lambda_decl .)
    type_set        reduce using rule 185 (expr -> lambda_decl .)
    type_map        reduce using rule 185 (expr -> lambda_decl .)
    type_range      reduce using rule 185 (expr -> lambda_decl .)
    type_bad_struct reduce using rule 185 (expr -> lambda_decl .)
    type_bad_struct2 reduce using rule 185 (expr -> lambda_decl .)
    lambda          reduce using rule 185 (expr -> lambda_decl .)
    NEWLINE         reduce using rule 185 (expr -> lambda_decl .)
    $end            reduce using rule 185 (expr -> lambda_decl .)
    operator_inner  reduce using rule 185 (expr -> lambda_decl .)
    }               reduce using rule 185 (expr -> lambda_decl .)
    )               reduce using rule 185 (expr -> lambda_decl .)
    {               reduce using rule 185 (expr -> lambda_decl .)
    ]               reduce using rule 185 (expr -> lambda_decl .)
    :               reduce using rule 185 (expr -> lambda_decl .)
    ,               reduce using rule 185 (expr -> lambda_decl .)


state 34

    (186) expr -> TYPE .
    (68) declaration_stmt -> TYPE . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

  ! shift/reduce conflict for VAR resolved as shift
    operator_add    reduce using rule 186 (expr -> TYPE .)
    operator_sub    reduce using rule 186 (expr -> TYPE .)
    operator_mul    reduce using rule 186 (expr -> TYPE .)
    operator_div    reduce using rule 186 (expr -> TYPE .)
    operator_trudiv reduce using rule 186 (expr -> TYPE .)
    operator_pow    reduce using rule 186 (expr -> TYPE .)
    operator_join   reduce using rule 186 (expr -> TYPE .)
    operator_split  reduce using rule 186 (expr -> TYPE .)
    operator_scan   reduce using rule 186 (expr -> TYPE .)
    operator_reduc  reduce using rule 186 (expr -> TYPE .)
    operator_bitand reduce using rule 186 (expr -> TYPE .)
    operator_bitor  reduce using rule 186 (expr -> TYPE .)
    operator_bitxor reduce using rule 186 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 186 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 186 (expr -> TYPE .)
    operator_and    reduce using rule 186 (expr -> TYPE .)
    operator_or     reduce using rule 186 (expr -> TYPE .)
    operator_xor    reduce using rule 186 (expr -> TYPE .)
    operator_contains reduce using rule 186 (expr -> TYPE .)
    operator_incr   reduce using rule 186 (expr -> TYPE .)
    operator_decr   reduce using rule 186 (expr -> TYPE .)
    operator_outer  reduce using rule 186 (expr -> TYPE .)
    operator_rotate reduce using rule 186 (expr -> TYPE .)
    operator_apply  reduce using rule 186 (expr -> TYPE .)
    operator_compose reduce using rule 186 (expr -> TYPE .)
    operator_over   reduce using rule 186 (expr -> TYPE .)
    operator_map    reduce using rule 186 (expr -> TYPE .)
    operator_less_than reduce using rule 186 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 186 (expr -> TYPE .)
    operator_greater_than reduce using rule 186 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 186 (expr -> TYPE .)
    operator_equals reduce using rule 186 (expr -> TYPE .)
    operator_not_equals reduce using rule 186 (expr -> TYPE .)
    operator_smallest reduce using rule 186 (expr -> TYPE .)
    operator_greatest reduce using rule 186 (expr -> TYPE .)
    operator_goodname reduce using rule 186 (expr -> TYPE .)
    [               reduce using rule 186 (expr -> TYPE .)
    (               reduce using rule 186 (expr -> TYPE .)
    operator_bitnot reduce using rule 186 (expr -> TYPE .)
    operator_not    reduce using rule 186 (expr -> TYPE .)
    operator_reverse reduce using rule 186 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 186 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 186 (expr -> TYPE .)
    operator_s_combinator reduce using rule 186 (expr -> TYPE .)
    operator_s2_combinator reduce using rule 186 (expr -> TYPE .)
    operator_goodname2 reduce using rule 186 (expr -> TYPE .)
    FLOAT           reduce using rule 186 (expr -> TYPE .)
    NUM             reduce using rule 186 (expr -> TYPE .)
    STRING_3SQ      reduce using rule 186 (expr -> TYPE .)
    STRING_3DQ      reduce using rule 186 (expr -> TYPE .)
    STRING_SQ       reduce using rule 186 (expr -> TYPE .)
    STRING_DQ       reduce using rule 186 (expr -> TYPE .)
    true            reduce using rule 186 (expr -> TYPE .)
    Null            reduce using rule 186 (expr -> TYPE .)
    false           reduce using rule 186 (expr -> TYPE .)
    type_type       reduce using rule 186 (expr -> TYPE .)
    type_num        reduce using rule 186 (expr -> TYPE .)
    type_bool       reduce using rule 186 (expr -> TYPE .)
    type_any        reduce using rule 186 (expr -> TYPE .)
    type_u64        reduce using rule 186 (expr -> TYPE .)
    type_u32        reduce using rule 186 (expr -> TYPE .)
    type_u16        reduce using rule 186 (expr -> TYPE .)
    type_u8         reduce using rule 186 (expr -> TYPE .)
    type_i64        reduce using rule 186 (expr -> TYPE .)
    type_i32        reduce using rule 186 (expr -> TYPE .)
    type_i16        reduce using rule 186 (expr -> TYPE .)
    type_i8         reduce using rule 186 (expr -> TYPE .)
    type_f32        reduce using rule 186 (expr -> TYPE .)
    type_f64        reduce using rule 186 (expr -> TYPE .)
    type_str        reduce using rule 186 (expr -> TYPE .)
    type_list       reduce using rule 186 (expr -> TYPE .)
    type_tuple      reduce using rule 186 (expr -> TYPE .)
    type_array      reduce using rule 186 (expr -> TYPE .)
    type_vector     reduce using rule 186 (expr -> TYPE .)
    type_dict       reduce using rule 186 (expr -> TYPE .)
    type_generator  reduce using rule 186 (expr -> TYPE .)
    type_linked_list reduce using rule 186 (expr -> TYPE .)
    type_doubly_linked_list reduce using rule 186 (expr -> TYPE .)
    type_deque      reduce using rule 186 (expr -> TYPE .)
    type_heap       reduce using rule 186 (expr -> TYPE .)
    type_fibonacci_heap reduce using rule 186 (expr -> TYPE .)
    type_tree       reduce using rule 186 (expr -> TYPE .)
    type_trie       reduce using rule 186 (expr -> TYPE .)
    type_stack      reduce using rule 186 (expr -> TYPE .)
    type_queue      reduce using rule 186 (expr -> TYPE .)
    type_binary_search_tree reduce using rule 186 (expr -> TYPE .)
    type_bitset     reduce using rule 186 (expr -> TYPE .)
    type_set        reduce using rule 186 (expr -> TYPE .)
    type_map        reduce using rule 186 (expr -> TYPE .)
    type_range      reduce using rule 186 (expr -> TYPE .)
    type_bad_struct reduce using rule 186 (expr -> TYPE .)
    type_bad_struct2 reduce using rule 186 (expr -> TYPE .)
    lambda          reduce using rule 186 (expr -> TYPE .)
    NEWLINE         reduce using rule 186 (expr -> TYPE .)
    $end            reduce using rule 186 (expr -> TYPE .)
    }               reduce using rule 186 (expr -> TYPE .)
    VAR             shift and go to state 162

  ! VAR             [ reduce using rule 186 (expr -> TYPE .) ]

    comma_separated_names          shift and go to state 161

state 35

    (63) del_stmt -> del . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 163
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 36

    (64) assign_stmt -> comma_separated_names . = expr

    =               shift and go to state 164


state 37

    (72) block_decl -> for_decl .

    {               reduce using rule 72 (block_decl -> for_decl .)


state 38

    (73) block_decl -> if_decl .

    {               reduce using rule 73 (block_decl -> if_decl .)


state 39

    (74) block_decl -> else .

    {               reduce using rule 74 (block_decl -> else .)


state 40

    (75) block_decl -> elif_decl .

    {               reduce using rule 75 (block_decl -> elif_decl .)


state 41

    (76) block_decl -> operator_decl .

    {               reduce using rule 76 (block_decl -> operator_decl .)


state 42

    (77) block_decl -> struct_decl .

    {               reduce using rule 77 (block_decl -> struct_decl .)


state 43

    (78) block_decl -> while_decl .

    {               reduce using rule 78 (block_decl -> while_decl .)


state 44

    (79) block_decl -> func_decl .

    {               reduce using rule 79 (block_decl -> func_decl .)


state 45

    (89) const_val -> FLOAT .

    operator_add    reduce using rule 89 (const_val -> FLOAT .)
    operator_sub    reduce using rule 89 (const_val -> FLOAT .)
    operator_mul    reduce using rule 89 (const_val -> FLOAT .)
    operator_div    reduce using rule 89 (const_val -> FLOAT .)
    operator_trudiv reduce using rule 89 (const_val -> FLOAT .)
    operator_pow    reduce using rule 89 (const_val -> FLOAT .)
    operator_join   reduce using rule 89 (const_val -> FLOAT .)
    operator_split  reduce using rule 89 (const_val -> FLOAT .)
    operator_scan   reduce using rule 89 (const_val -> FLOAT .)
    operator_reduc  reduce using rule 89 (const_val -> FLOAT .)
    operator_bitand reduce using rule 89 (const_val -> FLOAT .)
    operator_bitor  reduce using rule 89 (const_val -> FLOAT .)
    operator_bitxor reduce using rule 89 (const_val -> FLOAT .)
    operator_bitshiftleft reduce using rule 89 (const_val -> FLOAT .)
    operator_bitshiftright reduce using rule 89 (const_val -> FLOAT .)
    operator_and    reduce using rule 89 (const_val -> FLOAT .)
    operator_or     reduce using rule 89 (const_val -> FLOAT .)
    operator_xor    reduce using rule 89 (const_val -> FLOAT .)
    operator_contains reduce using rule 89 (const_val -> FLOAT .)
    operator_incr   reduce using rule 89 (const_val -> FLOAT .)
    operator_decr   reduce using rule 89 (const_val -> FLOAT .)
    operator_outer  reduce using rule 89 (const_val -> FLOAT .)
    operator_rotate reduce using rule 89 (const_val -> FLOAT .)
    operator_apply  reduce using rule 89 (const_val -> FLOAT .)
    operator_compose reduce using rule 89 (const_val -> FLOAT .)
    operator_over   reduce using rule 89 (const_val -> FLOAT .)
    operator_map    reduce using rule 89 (const_val -> FLOAT .)
    operator_less_than reduce using rule 89 (const_val -> FLOAT .)
    operator_less_than_equals reduce using rule 89 (const_val -> FLOAT .)
    operator_greater_than reduce using rule 89 (const_val -> FLOAT .)
    operator_greater_than_equals reduce using rule 89 (const_val -> FLOAT .)
    operator_equals reduce using rule 89 (const_val -> FLOAT .)
    operator_not_equals reduce using rule 89 (const_val -> FLOAT .)
    operator_smallest reduce using rule 89 (const_val -> FLOAT .)
    operator_greatest reduce using rule 89 (const_val -> FLOAT .)
    operator_goodname reduce using rule 89 (const_val -> FLOAT .)
    [               reduce using rule 89 (const_val -> FLOAT .)
    (               reduce using rule 89 (const_val -> FLOAT .)
    operator_bitnot reduce using rule 89 (const_val -> FLOAT .)
    operator_not    reduce using rule 89 (const_val -> FLOAT .)
    operator_reverse reduce using rule 89 (const_val -> FLOAT .)
    operator_sorted_incr reduce using rule 89 (const_val -> FLOAT .)
    operator_sorted_decr reduce using rule 89 (const_val -> FLOAT .)
    operator_s_combinator reduce using rule 89 (const_val -> FLOAT .)
    operator_s2_combinator reduce using rule 89 (const_val -> FLOAT .)
    operator_goodname2 reduce using rule 89 (const_val -> FLOAT .)
    VAR             reduce using rule 89 (const_val -> FLOAT .)
    FLOAT           reduce using rule 89 (const_val -> FLOAT .)
    NUM             reduce using rule 89 (const_val -> FLOAT .)
    STRING_3SQ      reduce using rule 89 (const_val -> FLOAT .)
    STRING_3DQ      reduce using rule 89 (const_val -> FLOAT .)
    STRING_SQ       reduce using rule 89 (const_val -> FLOAT .)
    STRING_DQ       reduce using rule 89 (const_val -> FLOAT .)
    true            reduce using rule 89 (const_val -> FLOAT .)
    Null            reduce using rule 89 (const_val -> FLOAT .)
    false           reduce using rule 89 (const_val -> FLOAT .)
    type_type       reduce using rule 89 (const_val -> FLOAT .)
    type_num        reduce using rule 89 (const_val -> FLOAT .)
    type_bool       reduce using rule 89 (const_val -> FLOAT .)
    type_any        reduce using rule 89 (const_val -> FLOAT .)
    type_u64        reduce using rule 89 (const_val -> FLOAT .)
    type_u32        reduce using rule 89 (const_val -> FLOAT .)
    type_u16        reduce using rule 89 (const_val -> FLOAT .)
    type_u8         reduce using rule 89 (const_val -> FLOAT .)
    type_i64        reduce using rule 89 (const_val -> FLOAT .)
    type_i32        reduce using rule 89 (const_val -> FLOAT .)
    type_i16        reduce using rule 89 (const_val -> FLOAT .)
    type_i8         reduce using rule 89 (const_val -> FLOAT .)
    type_f32        reduce using rule 89 (const_val -> FLOAT .)
    type_f64        reduce using rule 89 (const_val -> FLOAT .)
    type_str        reduce using rule 89 (const_val -> FLOAT .)
    type_list       reduce using rule 89 (const_val -> FLOAT .)
    type_tuple      reduce using rule 89 (const_val -> FLOAT .)
    type_array      reduce using rule 89 (const_val -> FLOAT .)
    type_vector     reduce using rule 89 (const_val -> FLOAT .)
    type_dict       reduce using rule 89 (const_val -> FLOAT .)
    type_generator  reduce using rule 89 (const_val -> FLOAT .)
    type_linked_list reduce using rule 89 (const_val -> FLOAT .)
    type_doubly_linked_list reduce using rule 89 (const_val -> FLOAT .)
    type_deque      reduce using rule 89 (const_val -> FLOAT .)
    type_heap       reduce using rule 89 (const_val -> FLOAT .)
    type_fibonacci_heap reduce using rule 89 (const_val -> FLOAT .)
    type_tree       reduce using rule 89 (const_val -> FLOAT .)
    type_trie       reduce using rule 89 (const_val -> FLOAT .)
    type_stack      reduce using rule 89 (const_val -> FLOAT .)
    type_queue      reduce using rule 89 (const_val -> FLOAT .)
    type_binary_search_tree reduce using rule 89 (const_val -> FLOAT .)
    type_bitset     reduce using rule 89 (const_val -> FLOAT .)
    type_set        reduce using rule 89 (const_val -> FLOAT .)
    type_map        reduce using rule 89 (const_val -> FLOAT .)
    type_range      reduce using rule 89 (const_val -> FLOAT .)
    type_bad_struct reduce using rule 89 (const_val -> FLOAT .)
    type_bad_struct2 reduce using rule 89 (const_val -> FLOAT .)
    lambda          reduce using rule 89 (const_val -> FLOAT .)
    NEWLINE         reduce using rule 89 (const_val -> FLOAT .)
    $end            reduce using rule 89 (const_val -> FLOAT .)
    operator_inner  reduce using rule 89 (const_val -> FLOAT .)
    }               reduce using rule 89 (const_val -> FLOAT .)
    )               reduce using rule 89 (const_val -> FLOAT .)
    {               reduce using rule 89 (const_val -> FLOAT .)
    ]               reduce using rule 89 (const_val -> FLOAT .)
    :               reduce using rule 89 (const_val -> FLOAT .)
    ,               reduce using rule 89 (const_val -> FLOAT .)


state 46

    (90) const_val -> NUM .

    operator_add    reduce using rule 90 (const_val -> NUM .)
    operator_sub    reduce using rule 90 (const_val -> NUM .)
    operator_mul    reduce using rule 90 (const_val -> NUM .)
    operator_div    reduce using rule 90 (const_val -> NUM .)
    operator_trudiv reduce using rule 90 (const_val -> NUM .)
    operator_pow    reduce using rule 90 (const_val -> NUM .)
    operator_join   reduce using rule 90 (const_val -> NUM .)
    operator_split  reduce using rule 90 (const_val -> NUM .)
    operator_scan   reduce using rule 90 (const_val -> NUM .)
    operator_reduc  reduce using rule 90 (const_val -> NUM .)
    operator_bitand reduce using rule 90 (const_val -> NUM .)
    operator_bitor  reduce using rule 90 (const_val -> NUM .)
    operator_bitxor reduce using rule 90 (const_val -> NUM .)
    operator_bitshiftleft reduce using rule 90 (const_val -> NUM .)
    operator_bitshiftright reduce using rule 90 (const_val -> NUM .)
    operator_and    reduce using rule 90 (const_val -> NUM .)
    operator_or     reduce using rule 90 (const_val -> NUM .)
    operator_xor    reduce using rule 90 (const_val -> NUM .)
    operator_contains reduce using rule 90 (const_val -> NUM .)
    operator_incr   reduce using rule 90 (const_val -> NUM .)
    operator_decr   reduce using rule 90 (const_val -> NUM .)
    operator_outer  reduce using rule 90 (const_val -> NUM .)
    operator_rotate reduce using rule 90 (const_val -> NUM .)
    operator_apply  reduce using rule 90 (const_val -> NUM .)
    operator_compose reduce using rule 90 (const_val -> NUM .)
    operator_over   reduce using rule 90 (const_val -> NUM .)
    operator_map    reduce using rule 90 (const_val -> NUM .)
    operator_less_than reduce using rule 90 (const_val -> NUM .)
    operator_less_than_equals reduce using rule 90 (const_val -> NUM .)
    operator_greater_than reduce using rule 90 (const_val -> NUM .)
    operator_greater_than_equals reduce using rule 90 (const_val -> NUM .)
    operator_equals reduce using rule 90 (const_val -> NUM .)
    operator_not_equals reduce using rule 90 (const_val -> NUM .)
    operator_smallest reduce using rule 90 (const_val -> NUM .)
    operator_greatest reduce using rule 90 (const_val -> NUM .)
    operator_goodname reduce using rule 90 (const_val -> NUM .)
    [               reduce using rule 90 (const_val -> NUM .)
    (               reduce using rule 90 (const_val -> NUM .)
    operator_bitnot reduce using rule 90 (const_val -> NUM .)
    operator_not    reduce using rule 90 (const_val -> NUM .)
    operator_reverse reduce using rule 90 (const_val -> NUM .)
    operator_sorted_incr reduce using rule 90 (const_val -> NUM .)
    operator_sorted_decr reduce using rule 90 (const_val -> NUM .)
    operator_s_combinator reduce using rule 90 (const_val -> NUM .)
    operator_s2_combinator reduce using rule 90 (const_val -> NUM .)
    operator_goodname2 reduce using rule 90 (const_val -> NUM .)
    VAR             reduce using rule 90 (const_val -> NUM .)
    FLOAT           reduce using rule 90 (const_val -> NUM .)
    NUM             reduce using rule 90 (const_val -> NUM .)
    STRING_3SQ      reduce using rule 90 (const_val -> NUM .)
    STRING_3DQ      reduce using rule 90 (const_val -> NUM .)
    STRING_SQ       reduce using rule 90 (const_val -> NUM .)
    STRING_DQ       reduce using rule 90 (const_val -> NUM .)
    true            reduce using rule 90 (const_val -> NUM .)
    Null            reduce using rule 90 (const_val -> NUM .)
    false           reduce using rule 90 (const_val -> NUM .)
    type_type       reduce using rule 90 (const_val -> NUM .)
    type_num        reduce using rule 90 (const_val -> NUM .)
    type_bool       reduce using rule 90 (const_val -> NUM .)
    type_any        reduce using rule 90 (const_val -> NUM .)
    type_u64        reduce using rule 90 (const_val -> NUM .)
    type_u32        reduce using rule 90 (const_val -> NUM .)
    type_u16        reduce using rule 90 (const_val -> NUM .)
    type_u8         reduce using rule 90 (const_val -> NUM .)
    type_i64        reduce using rule 90 (const_val -> NUM .)
    type_i32        reduce using rule 90 (const_val -> NUM .)
    type_i16        reduce using rule 90 (const_val -> NUM .)
    type_i8         reduce using rule 90 (const_val -> NUM .)
    type_f32        reduce using rule 90 (const_val -> NUM .)
    type_f64        reduce using rule 90 (const_val -> NUM .)
    type_str        reduce using rule 90 (const_val -> NUM .)
    type_list       reduce using rule 90 (const_val -> NUM .)
    type_tuple      reduce using rule 90 (const_val -> NUM .)
    type_array      reduce using rule 90 (const_val -> NUM .)
    type_vector     reduce using rule 90 (const_val -> NUM .)
    type_dict       reduce using rule 90 (const_val -> NUM .)
    type_generator  reduce using rule 90 (const_val -> NUM .)
    type_linked_list reduce using rule 90 (const_val -> NUM .)
    type_doubly_linked_list reduce using rule 90 (const_val -> NUM .)
    type_deque      reduce using rule 90 (const_val -> NUM .)
    type_heap       reduce using rule 90 (const_val -> NUM .)
    type_fibonacci_heap reduce using rule 90 (const_val -> NUM .)
    type_tree       reduce using rule 90 (const_val -> NUM .)
    type_trie       reduce using rule 90 (const_val -> NUM .)
    type_stack      reduce using rule 90 (const_val -> NUM .)
    type_queue      reduce using rule 90 (const_val -> NUM .)
    type_binary_search_tree reduce using rule 90 (const_val -> NUM .)
    type_bitset     reduce using rule 90 (const_val -> NUM .)
    type_set        reduce using rule 90 (const_val -> NUM .)
    type_map        reduce using rule 90 (const_val -> NUM .)
    type_range      reduce using rule 90 (const_val -> NUM .)
    type_bad_struct reduce using rule 90 (const_val -> NUM .)
    type_bad_struct2 reduce using rule 90 (const_val -> NUM .)
    lambda          reduce using rule 90 (const_val -> NUM .)
    NEWLINE         reduce using rule 90 (const_val -> NUM .)
    $end            reduce using rule 90 (const_val -> NUM .)
    operator_inner  reduce using rule 90 (const_val -> NUM .)
    }               reduce using rule 90 (const_val -> NUM .)
    )               reduce using rule 90 (const_val -> NUM .)
    {               reduce using rule 90 (const_val -> NUM .)
    ]               reduce using rule 90 (const_val -> NUM .)
    :               reduce using rule 90 (const_val -> NUM .)
    ,               reduce using rule 90 (const_val -> NUM .)


state 47

    (91) const_val -> STRING_3SQ .

    operator_add    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_sub    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_mul    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_div    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_trudiv reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_pow    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_join   reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_split  reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_scan   reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_reduc  reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitand reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitor  reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitxor reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitshiftleft reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitshiftright reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_and    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_or     reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_xor    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_contains reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_incr   reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_decr   reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_outer  reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_rotate reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_apply  reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_compose reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_over   reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_map    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_less_than reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_less_than_equals reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_greater_than reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_greater_than_equals reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_equals reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_not_equals reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_smallest reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_greatest reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_goodname reduce using rule 91 (const_val -> STRING_3SQ .)
    [               reduce using rule 91 (const_val -> STRING_3SQ .)
    (               reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_bitnot reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_not    reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_reverse reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_sorted_incr reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_sorted_decr reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_s_combinator reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_s2_combinator reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_goodname2 reduce using rule 91 (const_val -> STRING_3SQ .)
    VAR             reduce using rule 91 (const_val -> STRING_3SQ .)
    FLOAT           reduce using rule 91 (const_val -> STRING_3SQ .)
    NUM             reduce using rule 91 (const_val -> STRING_3SQ .)
    STRING_3SQ      reduce using rule 91 (const_val -> STRING_3SQ .)
    STRING_3DQ      reduce using rule 91 (const_val -> STRING_3SQ .)
    STRING_SQ       reduce using rule 91 (const_val -> STRING_3SQ .)
    STRING_DQ       reduce using rule 91 (const_val -> STRING_3SQ .)
    true            reduce using rule 91 (const_val -> STRING_3SQ .)
    Null            reduce using rule 91 (const_val -> STRING_3SQ .)
    false           reduce using rule 91 (const_val -> STRING_3SQ .)
    type_type       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_num        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_bool       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_any        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_u64        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_u32        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_u16        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_u8         reduce using rule 91 (const_val -> STRING_3SQ .)
    type_i64        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_i32        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_i16        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_i8         reduce using rule 91 (const_val -> STRING_3SQ .)
    type_f32        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_f64        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_str        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_list       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_tuple      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_array      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_vector     reduce using rule 91 (const_val -> STRING_3SQ .)
    type_dict       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_generator  reduce using rule 91 (const_val -> STRING_3SQ .)
    type_linked_list reduce using rule 91 (const_val -> STRING_3SQ .)
    type_doubly_linked_list reduce using rule 91 (const_val -> STRING_3SQ .)
    type_deque      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_heap       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_fibonacci_heap reduce using rule 91 (const_val -> STRING_3SQ .)
    type_tree       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_trie       reduce using rule 91 (const_val -> STRING_3SQ .)
    type_stack      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_queue      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_binary_search_tree reduce using rule 91 (const_val -> STRING_3SQ .)
    type_bitset     reduce using rule 91 (const_val -> STRING_3SQ .)
    type_set        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_map        reduce using rule 91 (const_val -> STRING_3SQ .)
    type_range      reduce using rule 91 (const_val -> STRING_3SQ .)
    type_bad_struct reduce using rule 91 (const_val -> STRING_3SQ .)
    type_bad_struct2 reduce using rule 91 (const_val -> STRING_3SQ .)
    lambda          reduce using rule 91 (const_val -> STRING_3SQ .)
    NEWLINE         reduce using rule 91 (const_val -> STRING_3SQ .)
    $end            reduce using rule 91 (const_val -> STRING_3SQ .)
    operator_inner  reduce using rule 91 (const_val -> STRING_3SQ .)
    }               reduce using rule 91 (const_val -> STRING_3SQ .)
    )               reduce using rule 91 (const_val -> STRING_3SQ .)
    {               reduce using rule 91 (const_val -> STRING_3SQ .)
    ]               reduce using rule 91 (const_val -> STRING_3SQ .)
    :               reduce using rule 91 (const_val -> STRING_3SQ .)
    ,               reduce using rule 91 (const_val -> STRING_3SQ .)


state 48

    (92) const_val -> STRING_3DQ .

    operator_add    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_sub    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_mul    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_div    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_trudiv reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_pow    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_join   reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_split  reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_scan   reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_reduc  reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitand reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitor  reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitxor reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitshiftleft reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitshiftright reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_and    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_or     reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_xor    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_contains reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_incr   reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_decr   reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_outer  reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_rotate reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_apply  reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_compose reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_over   reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_map    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_less_than reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_less_than_equals reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_greater_than reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_greater_than_equals reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_equals reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_not_equals reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_smallest reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_greatest reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_goodname reduce using rule 92 (const_val -> STRING_3DQ .)
    [               reduce using rule 92 (const_val -> STRING_3DQ .)
    (               reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_bitnot reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_not    reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_reverse reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_sorted_incr reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_sorted_decr reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_s_combinator reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_s2_combinator reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_goodname2 reduce using rule 92 (const_val -> STRING_3DQ .)
    VAR             reduce using rule 92 (const_val -> STRING_3DQ .)
    FLOAT           reduce using rule 92 (const_val -> STRING_3DQ .)
    NUM             reduce using rule 92 (const_val -> STRING_3DQ .)
    STRING_3SQ      reduce using rule 92 (const_val -> STRING_3DQ .)
    STRING_3DQ      reduce using rule 92 (const_val -> STRING_3DQ .)
    STRING_SQ       reduce using rule 92 (const_val -> STRING_3DQ .)
    STRING_DQ       reduce using rule 92 (const_val -> STRING_3DQ .)
    true            reduce using rule 92 (const_val -> STRING_3DQ .)
    Null            reduce using rule 92 (const_val -> STRING_3DQ .)
    false           reduce using rule 92 (const_val -> STRING_3DQ .)
    type_type       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_num        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_bool       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_any        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_u64        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_u32        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_u16        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_u8         reduce using rule 92 (const_val -> STRING_3DQ .)
    type_i64        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_i32        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_i16        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_i8         reduce using rule 92 (const_val -> STRING_3DQ .)
    type_f32        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_f64        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_str        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_list       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_tuple      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_array      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_vector     reduce using rule 92 (const_val -> STRING_3DQ .)
    type_dict       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_generator  reduce using rule 92 (const_val -> STRING_3DQ .)
    type_linked_list reduce using rule 92 (const_val -> STRING_3DQ .)
    type_doubly_linked_list reduce using rule 92 (const_val -> STRING_3DQ .)
    type_deque      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_heap       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_fibonacci_heap reduce using rule 92 (const_val -> STRING_3DQ .)
    type_tree       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_trie       reduce using rule 92 (const_val -> STRING_3DQ .)
    type_stack      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_queue      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_binary_search_tree reduce using rule 92 (const_val -> STRING_3DQ .)
    type_bitset     reduce using rule 92 (const_val -> STRING_3DQ .)
    type_set        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_map        reduce using rule 92 (const_val -> STRING_3DQ .)
    type_range      reduce using rule 92 (const_val -> STRING_3DQ .)
    type_bad_struct reduce using rule 92 (const_val -> STRING_3DQ .)
    type_bad_struct2 reduce using rule 92 (const_val -> STRING_3DQ .)
    lambda          reduce using rule 92 (const_val -> STRING_3DQ .)
    NEWLINE         reduce using rule 92 (const_val -> STRING_3DQ .)
    $end            reduce using rule 92 (const_val -> STRING_3DQ .)
    operator_inner  reduce using rule 92 (const_val -> STRING_3DQ .)
    }               reduce using rule 92 (const_val -> STRING_3DQ .)
    )               reduce using rule 92 (const_val -> STRING_3DQ .)
    {               reduce using rule 92 (const_val -> STRING_3DQ .)
    ]               reduce using rule 92 (const_val -> STRING_3DQ .)
    :               reduce using rule 92 (const_val -> STRING_3DQ .)
    ,               reduce using rule 92 (const_val -> STRING_3DQ .)


state 49

    (93) const_val -> STRING_SQ .

    operator_add    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_sub    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_mul    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_div    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_trudiv reduce using rule 93 (const_val -> STRING_SQ .)
    operator_pow    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_join   reduce using rule 93 (const_val -> STRING_SQ .)
    operator_split  reduce using rule 93 (const_val -> STRING_SQ .)
    operator_scan   reduce using rule 93 (const_val -> STRING_SQ .)
    operator_reduc  reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitand reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitor  reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitxor reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitshiftleft reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitshiftright reduce using rule 93 (const_val -> STRING_SQ .)
    operator_and    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_or     reduce using rule 93 (const_val -> STRING_SQ .)
    operator_xor    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_contains reduce using rule 93 (const_val -> STRING_SQ .)
    operator_incr   reduce using rule 93 (const_val -> STRING_SQ .)
    operator_decr   reduce using rule 93 (const_val -> STRING_SQ .)
    operator_outer  reduce using rule 93 (const_val -> STRING_SQ .)
    operator_rotate reduce using rule 93 (const_val -> STRING_SQ .)
    operator_apply  reduce using rule 93 (const_val -> STRING_SQ .)
    operator_compose reduce using rule 93 (const_val -> STRING_SQ .)
    operator_over   reduce using rule 93 (const_val -> STRING_SQ .)
    operator_map    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_less_than reduce using rule 93 (const_val -> STRING_SQ .)
    operator_less_than_equals reduce using rule 93 (const_val -> STRING_SQ .)
    operator_greater_than reduce using rule 93 (const_val -> STRING_SQ .)
    operator_greater_than_equals reduce using rule 93 (const_val -> STRING_SQ .)
    operator_equals reduce using rule 93 (const_val -> STRING_SQ .)
    operator_not_equals reduce using rule 93 (const_val -> STRING_SQ .)
    operator_smallest reduce using rule 93 (const_val -> STRING_SQ .)
    operator_greatest reduce using rule 93 (const_val -> STRING_SQ .)
    operator_goodname reduce using rule 93 (const_val -> STRING_SQ .)
    [               reduce using rule 93 (const_val -> STRING_SQ .)
    (               reduce using rule 93 (const_val -> STRING_SQ .)
    operator_bitnot reduce using rule 93 (const_val -> STRING_SQ .)
    operator_not    reduce using rule 93 (const_val -> STRING_SQ .)
    operator_reverse reduce using rule 93 (const_val -> STRING_SQ .)
    operator_sorted_incr reduce using rule 93 (const_val -> STRING_SQ .)
    operator_sorted_decr reduce using rule 93 (const_val -> STRING_SQ .)
    operator_s_combinator reduce using rule 93 (const_val -> STRING_SQ .)
    operator_s2_combinator reduce using rule 93 (const_val -> STRING_SQ .)
    operator_goodname2 reduce using rule 93 (const_val -> STRING_SQ .)
    VAR             reduce using rule 93 (const_val -> STRING_SQ .)
    FLOAT           reduce using rule 93 (const_val -> STRING_SQ .)
    NUM             reduce using rule 93 (const_val -> STRING_SQ .)
    STRING_3SQ      reduce using rule 93 (const_val -> STRING_SQ .)
    STRING_3DQ      reduce using rule 93 (const_val -> STRING_SQ .)
    STRING_SQ       reduce using rule 93 (const_val -> STRING_SQ .)
    STRING_DQ       reduce using rule 93 (const_val -> STRING_SQ .)
    true            reduce using rule 93 (const_val -> STRING_SQ .)
    Null            reduce using rule 93 (const_val -> STRING_SQ .)
    false           reduce using rule 93 (const_val -> STRING_SQ .)
    type_type       reduce using rule 93 (const_val -> STRING_SQ .)
    type_num        reduce using rule 93 (const_val -> STRING_SQ .)
    type_bool       reduce using rule 93 (const_val -> STRING_SQ .)
    type_any        reduce using rule 93 (const_val -> STRING_SQ .)
    type_u64        reduce using rule 93 (const_val -> STRING_SQ .)
    type_u32        reduce using rule 93 (const_val -> STRING_SQ .)
    type_u16        reduce using rule 93 (const_val -> STRING_SQ .)
    type_u8         reduce using rule 93 (const_val -> STRING_SQ .)
    type_i64        reduce using rule 93 (const_val -> STRING_SQ .)
    type_i32        reduce using rule 93 (const_val -> STRING_SQ .)
    type_i16        reduce using rule 93 (const_val -> STRING_SQ .)
    type_i8         reduce using rule 93 (const_val -> STRING_SQ .)
    type_f32        reduce using rule 93 (const_val -> STRING_SQ .)
    type_f64        reduce using rule 93 (const_val -> STRING_SQ .)
    type_str        reduce using rule 93 (const_val -> STRING_SQ .)
    type_list       reduce using rule 93 (const_val -> STRING_SQ .)
    type_tuple      reduce using rule 93 (const_val -> STRING_SQ .)
    type_array      reduce using rule 93 (const_val -> STRING_SQ .)
    type_vector     reduce using rule 93 (const_val -> STRING_SQ .)
    type_dict       reduce using rule 93 (const_val -> STRING_SQ .)
    type_generator  reduce using rule 93 (const_val -> STRING_SQ .)
    type_linked_list reduce using rule 93 (const_val -> STRING_SQ .)
    type_doubly_linked_list reduce using rule 93 (const_val -> STRING_SQ .)
    type_deque      reduce using rule 93 (const_val -> STRING_SQ .)
    type_heap       reduce using rule 93 (const_val -> STRING_SQ .)
    type_fibonacci_heap reduce using rule 93 (const_val -> STRING_SQ .)
    type_tree       reduce using rule 93 (const_val -> STRING_SQ .)
    type_trie       reduce using rule 93 (const_val -> STRING_SQ .)
    type_stack      reduce using rule 93 (const_val -> STRING_SQ .)
    type_queue      reduce using rule 93 (const_val -> STRING_SQ .)
    type_binary_search_tree reduce using rule 93 (const_val -> STRING_SQ .)
    type_bitset     reduce using rule 93 (const_val -> STRING_SQ .)
    type_set        reduce using rule 93 (const_val -> STRING_SQ .)
    type_map        reduce using rule 93 (const_val -> STRING_SQ .)
    type_range      reduce using rule 93 (const_val -> STRING_SQ .)
    type_bad_struct reduce using rule 93 (const_val -> STRING_SQ .)
    type_bad_struct2 reduce using rule 93 (const_val -> STRING_SQ .)
    lambda          reduce using rule 93 (const_val -> STRING_SQ .)
    NEWLINE         reduce using rule 93 (const_val -> STRING_SQ .)
    $end            reduce using rule 93 (const_val -> STRING_SQ .)
    operator_inner  reduce using rule 93 (const_val -> STRING_SQ .)
    }               reduce using rule 93 (const_val -> STRING_SQ .)
    )               reduce using rule 93 (const_val -> STRING_SQ .)
    {               reduce using rule 93 (const_val -> STRING_SQ .)
    ]               reduce using rule 93 (const_val -> STRING_SQ .)
    :               reduce using rule 93 (const_val -> STRING_SQ .)
    ,               reduce using rule 93 (const_val -> STRING_SQ .)


state 50

    (94) const_val -> STRING_DQ .

    operator_add    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_sub    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_mul    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_div    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_trudiv reduce using rule 94 (const_val -> STRING_DQ .)
    operator_pow    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_join   reduce using rule 94 (const_val -> STRING_DQ .)
    operator_split  reduce using rule 94 (const_val -> STRING_DQ .)
    operator_scan   reduce using rule 94 (const_val -> STRING_DQ .)
    operator_reduc  reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitand reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitor  reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitxor reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitshiftleft reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitshiftright reduce using rule 94 (const_val -> STRING_DQ .)
    operator_and    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_or     reduce using rule 94 (const_val -> STRING_DQ .)
    operator_xor    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_contains reduce using rule 94 (const_val -> STRING_DQ .)
    operator_incr   reduce using rule 94 (const_val -> STRING_DQ .)
    operator_decr   reduce using rule 94 (const_val -> STRING_DQ .)
    operator_outer  reduce using rule 94 (const_val -> STRING_DQ .)
    operator_rotate reduce using rule 94 (const_val -> STRING_DQ .)
    operator_apply  reduce using rule 94 (const_val -> STRING_DQ .)
    operator_compose reduce using rule 94 (const_val -> STRING_DQ .)
    operator_over   reduce using rule 94 (const_val -> STRING_DQ .)
    operator_map    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_less_than reduce using rule 94 (const_val -> STRING_DQ .)
    operator_less_than_equals reduce using rule 94 (const_val -> STRING_DQ .)
    operator_greater_than reduce using rule 94 (const_val -> STRING_DQ .)
    operator_greater_than_equals reduce using rule 94 (const_val -> STRING_DQ .)
    operator_equals reduce using rule 94 (const_val -> STRING_DQ .)
    operator_not_equals reduce using rule 94 (const_val -> STRING_DQ .)
    operator_smallest reduce using rule 94 (const_val -> STRING_DQ .)
    operator_greatest reduce using rule 94 (const_val -> STRING_DQ .)
    operator_goodname reduce using rule 94 (const_val -> STRING_DQ .)
    [               reduce using rule 94 (const_val -> STRING_DQ .)
    (               reduce using rule 94 (const_val -> STRING_DQ .)
    operator_bitnot reduce using rule 94 (const_val -> STRING_DQ .)
    operator_not    reduce using rule 94 (const_val -> STRING_DQ .)
    operator_reverse reduce using rule 94 (const_val -> STRING_DQ .)
    operator_sorted_incr reduce using rule 94 (const_val -> STRING_DQ .)
    operator_sorted_decr reduce using rule 94 (const_val -> STRING_DQ .)
    operator_s_combinator reduce using rule 94 (const_val -> STRING_DQ .)
    operator_s2_combinator reduce using rule 94 (const_val -> STRING_DQ .)
    operator_goodname2 reduce using rule 94 (const_val -> STRING_DQ .)
    VAR             reduce using rule 94 (const_val -> STRING_DQ .)
    FLOAT           reduce using rule 94 (const_val -> STRING_DQ .)
    NUM             reduce using rule 94 (const_val -> STRING_DQ .)
    STRING_3SQ      reduce using rule 94 (const_val -> STRING_DQ .)
    STRING_3DQ      reduce using rule 94 (const_val -> STRING_DQ .)
    STRING_SQ       reduce using rule 94 (const_val -> STRING_DQ .)
    STRING_DQ       reduce using rule 94 (const_val -> STRING_DQ .)
    true            reduce using rule 94 (const_val -> STRING_DQ .)
    Null            reduce using rule 94 (const_val -> STRING_DQ .)
    false           reduce using rule 94 (const_val -> STRING_DQ .)
    type_type       reduce using rule 94 (const_val -> STRING_DQ .)
    type_num        reduce using rule 94 (const_val -> STRING_DQ .)
    type_bool       reduce using rule 94 (const_val -> STRING_DQ .)
    type_any        reduce using rule 94 (const_val -> STRING_DQ .)
    type_u64        reduce using rule 94 (const_val -> STRING_DQ .)
    type_u32        reduce using rule 94 (const_val -> STRING_DQ .)
    type_u16        reduce using rule 94 (const_val -> STRING_DQ .)
    type_u8         reduce using rule 94 (const_val -> STRING_DQ .)
    type_i64        reduce using rule 94 (const_val -> STRING_DQ .)
    type_i32        reduce using rule 94 (const_val -> STRING_DQ .)
    type_i16        reduce using rule 94 (const_val -> STRING_DQ .)
    type_i8         reduce using rule 94 (const_val -> STRING_DQ .)
    type_f32        reduce using rule 94 (const_val -> STRING_DQ .)
    type_f64        reduce using rule 94 (const_val -> STRING_DQ .)
    type_str        reduce using rule 94 (const_val -> STRING_DQ .)
    type_list       reduce using rule 94 (const_val -> STRING_DQ .)
    type_tuple      reduce using rule 94 (const_val -> STRING_DQ .)
    type_array      reduce using rule 94 (const_val -> STRING_DQ .)
    type_vector     reduce using rule 94 (const_val -> STRING_DQ .)
    type_dict       reduce using rule 94 (const_val -> STRING_DQ .)
    type_generator  reduce using rule 94 (const_val -> STRING_DQ .)
    type_linked_list reduce using rule 94 (const_val -> STRING_DQ .)
    type_doubly_linked_list reduce using rule 94 (const_val -> STRING_DQ .)
    type_deque      reduce using rule 94 (const_val -> STRING_DQ .)
    type_heap       reduce using rule 94 (const_val -> STRING_DQ .)
    type_fibonacci_heap reduce using rule 94 (const_val -> STRING_DQ .)
    type_tree       reduce using rule 94 (const_val -> STRING_DQ .)
    type_trie       reduce using rule 94 (const_val -> STRING_DQ .)
    type_stack      reduce using rule 94 (const_val -> STRING_DQ .)
    type_queue      reduce using rule 94 (const_val -> STRING_DQ .)
    type_binary_search_tree reduce using rule 94 (const_val -> STRING_DQ .)
    type_bitset     reduce using rule 94 (const_val -> STRING_DQ .)
    type_set        reduce using rule 94 (const_val -> STRING_DQ .)
    type_map        reduce using rule 94 (const_val -> STRING_DQ .)
    type_range      reduce using rule 94 (const_val -> STRING_DQ .)
    type_bad_struct reduce using rule 94 (const_val -> STRING_DQ .)
    type_bad_struct2 reduce using rule 94 (const_val -> STRING_DQ .)
    lambda          reduce using rule 94 (const_val -> STRING_DQ .)
    NEWLINE         reduce using rule 94 (const_val -> STRING_DQ .)
    $end            reduce using rule 94 (const_val -> STRING_DQ .)
    operator_inner  reduce using rule 94 (const_val -> STRING_DQ .)
    }               reduce using rule 94 (const_val -> STRING_DQ .)
    )               reduce using rule 94 (const_val -> STRING_DQ .)
    {               reduce using rule 94 (const_val -> STRING_DQ .)
    ]               reduce using rule 94 (const_val -> STRING_DQ .)
    :               reduce using rule 94 (const_val -> STRING_DQ .)
    ,               reduce using rule 94 (const_val -> STRING_DQ .)


state 51

    (95) const_val -> true .

    operator_add    reduce using rule 95 (const_val -> true .)
    operator_sub    reduce using rule 95 (const_val -> true .)
    operator_mul    reduce using rule 95 (const_val -> true .)
    operator_div    reduce using rule 95 (const_val -> true .)
    operator_trudiv reduce using rule 95 (const_val -> true .)
    operator_pow    reduce using rule 95 (const_val -> true .)
    operator_join   reduce using rule 95 (const_val -> true .)
    operator_split  reduce using rule 95 (const_val -> true .)
    operator_scan   reduce using rule 95 (const_val -> true .)
    operator_reduc  reduce using rule 95 (const_val -> true .)
    operator_bitand reduce using rule 95 (const_val -> true .)
    operator_bitor  reduce using rule 95 (const_val -> true .)
    operator_bitxor reduce using rule 95 (const_val -> true .)
    operator_bitshiftleft reduce using rule 95 (const_val -> true .)
    operator_bitshiftright reduce using rule 95 (const_val -> true .)
    operator_and    reduce using rule 95 (const_val -> true .)
    operator_or     reduce using rule 95 (const_val -> true .)
    operator_xor    reduce using rule 95 (const_val -> true .)
    operator_contains reduce using rule 95 (const_val -> true .)
    operator_incr   reduce using rule 95 (const_val -> true .)
    operator_decr   reduce using rule 95 (const_val -> true .)
    operator_outer  reduce using rule 95 (const_val -> true .)
    operator_rotate reduce using rule 95 (const_val -> true .)
    operator_apply  reduce using rule 95 (const_val -> true .)
    operator_compose reduce using rule 95 (const_val -> true .)
    operator_over   reduce using rule 95 (const_val -> true .)
    operator_map    reduce using rule 95 (const_val -> true .)
    operator_less_than reduce using rule 95 (const_val -> true .)
    operator_less_than_equals reduce using rule 95 (const_val -> true .)
    operator_greater_than reduce using rule 95 (const_val -> true .)
    operator_greater_than_equals reduce using rule 95 (const_val -> true .)
    operator_equals reduce using rule 95 (const_val -> true .)
    operator_not_equals reduce using rule 95 (const_val -> true .)
    operator_smallest reduce using rule 95 (const_val -> true .)
    operator_greatest reduce using rule 95 (const_val -> true .)
    operator_goodname reduce using rule 95 (const_val -> true .)
    [               reduce using rule 95 (const_val -> true .)
    (               reduce using rule 95 (const_val -> true .)
    operator_bitnot reduce using rule 95 (const_val -> true .)
    operator_not    reduce using rule 95 (const_val -> true .)
    operator_reverse reduce using rule 95 (const_val -> true .)
    operator_sorted_incr reduce using rule 95 (const_val -> true .)
    operator_sorted_decr reduce using rule 95 (const_val -> true .)
    operator_s_combinator reduce using rule 95 (const_val -> true .)
    operator_s2_combinator reduce using rule 95 (const_val -> true .)
    operator_goodname2 reduce using rule 95 (const_val -> true .)
    VAR             reduce using rule 95 (const_val -> true .)
    FLOAT           reduce using rule 95 (const_val -> true .)
    NUM             reduce using rule 95 (const_val -> true .)
    STRING_3SQ      reduce using rule 95 (const_val -> true .)
    STRING_3DQ      reduce using rule 95 (const_val -> true .)
    STRING_SQ       reduce using rule 95 (const_val -> true .)
    STRING_DQ       reduce using rule 95 (const_val -> true .)
    true            reduce using rule 95 (const_val -> true .)
    Null            reduce using rule 95 (const_val -> true .)
    false           reduce using rule 95 (const_val -> true .)
    type_type       reduce using rule 95 (const_val -> true .)
    type_num        reduce using rule 95 (const_val -> true .)
    type_bool       reduce using rule 95 (const_val -> true .)
    type_any        reduce using rule 95 (const_val -> true .)
    type_u64        reduce using rule 95 (const_val -> true .)
    type_u32        reduce using rule 95 (const_val -> true .)
    type_u16        reduce using rule 95 (const_val -> true .)
    type_u8         reduce using rule 95 (const_val -> true .)
    type_i64        reduce using rule 95 (const_val -> true .)
    type_i32        reduce using rule 95 (const_val -> true .)
    type_i16        reduce using rule 95 (const_val -> true .)
    type_i8         reduce using rule 95 (const_val -> true .)
    type_f32        reduce using rule 95 (const_val -> true .)
    type_f64        reduce using rule 95 (const_val -> true .)
    type_str        reduce using rule 95 (const_val -> true .)
    type_list       reduce using rule 95 (const_val -> true .)
    type_tuple      reduce using rule 95 (const_val -> true .)
    type_array      reduce using rule 95 (const_val -> true .)
    type_vector     reduce using rule 95 (const_val -> true .)
    type_dict       reduce using rule 95 (const_val -> true .)
    type_generator  reduce using rule 95 (const_val -> true .)
    type_linked_list reduce using rule 95 (const_val -> true .)
    type_doubly_linked_list reduce using rule 95 (const_val -> true .)
    type_deque      reduce using rule 95 (const_val -> true .)
    type_heap       reduce using rule 95 (const_val -> true .)
    type_fibonacci_heap reduce using rule 95 (const_val -> true .)
    type_tree       reduce using rule 95 (const_val -> true .)
    type_trie       reduce using rule 95 (const_val -> true .)
    type_stack      reduce using rule 95 (const_val -> true .)
    type_queue      reduce using rule 95 (const_val -> true .)
    type_binary_search_tree reduce using rule 95 (const_val -> true .)
    type_bitset     reduce using rule 95 (const_val -> true .)
    type_set        reduce using rule 95 (const_val -> true .)
    type_map        reduce using rule 95 (const_val -> true .)
    type_range      reduce using rule 95 (const_val -> true .)
    type_bad_struct reduce using rule 95 (const_val -> true .)
    type_bad_struct2 reduce using rule 95 (const_val -> true .)
    lambda          reduce using rule 95 (const_val -> true .)
    NEWLINE         reduce using rule 95 (const_val -> true .)
    $end            reduce using rule 95 (const_val -> true .)
    operator_inner  reduce using rule 95 (const_val -> true .)
    }               reduce using rule 95 (const_val -> true .)
    )               reduce using rule 95 (const_val -> true .)
    {               reduce using rule 95 (const_val -> true .)
    ]               reduce using rule 95 (const_val -> true .)
    :               reduce using rule 95 (const_val -> true .)
    ,               reduce using rule 95 (const_val -> true .)


state 52

    (96) const_val -> Null .

    operator_add    reduce using rule 96 (const_val -> Null .)
    operator_sub    reduce using rule 96 (const_val -> Null .)
    operator_mul    reduce using rule 96 (const_val -> Null .)
    operator_div    reduce using rule 96 (const_val -> Null .)
    operator_trudiv reduce using rule 96 (const_val -> Null .)
    operator_pow    reduce using rule 96 (const_val -> Null .)
    operator_join   reduce using rule 96 (const_val -> Null .)
    operator_split  reduce using rule 96 (const_val -> Null .)
    operator_scan   reduce using rule 96 (const_val -> Null .)
    operator_reduc  reduce using rule 96 (const_val -> Null .)
    operator_bitand reduce using rule 96 (const_val -> Null .)
    operator_bitor  reduce using rule 96 (const_val -> Null .)
    operator_bitxor reduce using rule 96 (const_val -> Null .)
    operator_bitshiftleft reduce using rule 96 (const_val -> Null .)
    operator_bitshiftright reduce using rule 96 (const_val -> Null .)
    operator_and    reduce using rule 96 (const_val -> Null .)
    operator_or     reduce using rule 96 (const_val -> Null .)
    operator_xor    reduce using rule 96 (const_val -> Null .)
    operator_contains reduce using rule 96 (const_val -> Null .)
    operator_incr   reduce using rule 96 (const_val -> Null .)
    operator_decr   reduce using rule 96 (const_val -> Null .)
    operator_outer  reduce using rule 96 (const_val -> Null .)
    operator_rotate reduce using rule 96 (const_val -> Null .)
    operator_apply  reduce using rule 96 (const_val -> Null .)
    operator_compose reduce using rule 96 (const_val -> Null .)
    operator_over   reduce using rule 96 (const_val -> Null .)
    operator_map    reduce using rule 96 (const_val -> Null .)
    operator_less_than reduce using rule 96 (const_val -> Null .)
    operator_less_than_equals reduce using rule 96 (const_val -> Null .)
    operator_greater_than reduce using rule 96 (const_val -> Null .)
    operator_greater_than_equals reduce using rule 96 (const_val -> Null .)
    operator_equals reduce using rule 96 (const_val -> Null .)
    operator_not_equals reduce using rule 96 (const_val -> Null .)
    operator_smallest reduce using rule 96 (const_val -> Null .)
    operator_greatest reduce using rule 96 (const_val -> Null .)
    operator_goodname reduce using rule 96 (const_val -> Null .)
    [               reduce using rule 96 (const_val -> Null .)
    (               reduce using rule 96 (const_val -> Null .)
    operator_bitnot reduce using rule 96 (const_val -> Null .)
    operator_not    reduce using rule 96 (const_val -> Null .)
    operator_reverse reduce using rule 96 (const_val -> Null .)
    operator_sorted_incr reduce using rule 96 (const_val -> Null .)
    operator_sorted_decr reduce using rule 96 (const_val -> Null .)
    operator_s_combinator reduce using rule 96 (const_val -> Null .)
    operator_s2_combinator reduce using rule 96 (const_val -> Null .)
    operator_goodname2 reduce using rule 96 (const_val -> Null .)
    VAR             reduce using rule 96 (const_val -> Null .)
    FLOAT           reduce using rule 96 (const_val -> Null .)
    NUM             reduce using rule 96 (const_val -> Null .)
    STRING_3SQ      reduce using rule 96 (const_val -> Null .)
    STRING_3DQ      reduce using rule 96 (const_val -> Null .)
    STRING_SQ       reduce using rule 96 (const_val -> Null .)
    STRING_DQ       reduce using rule 96 (const_val -> Null .)
    true            reduce using rule 96 (const_val -> Null .)
    Null            reduce using rule 96 (const_val -> Null .)
    false           reduce using rule 96 (const_val -> Null .)
    type_type       reduce using rule 96 (const_val -> Null .)
    type_num        reduce using rule 96 (const_val -> Null .)
    type_bool       reduce using rule 96 (const_val -> Null .)
    type_any        reduce using rule 96 (const_val -> Null .)
    type_u64        reduce using rule 96 (const_val -> Null .)
    type_u32        reduce using rule 96 (const_val -> Null .)
    type_u16        reduce using rule 96 (const_val -> Null .)
    type_u8         reduce using rule 96 (const_val -> Null .)
    type_i64        reduce using rule 96 (const_val -> Null .)
    type_i32        reduce using rule 96 (const_val -> Null .)
    type_i16        reduce using rule 96 (const_val -> Null .)
    type_i8         reduce using rule 96 (const_val -> Null .)
    type_f32        reduce using rule 96 (const_val -> Null .)
    type_f64        reduce using rule 96 (const_val -> Null .)
    type_str        reduce using rule 96 (const_val -> Null .)
    type_list       reduce using rule 96 (const_val -> Null .)
    type_tuple      reduce using rule 96 (const_val -> Null .)
    type_array      reduce using rule 96 (const_val -> Null .)
    type_vector     reduce using rule 96 (const_val -> Null .)
    type_dict       reduce using rule 96 (const_val -> Null .)
    type_generator  reduce using rule 96 (const_val -> Null .)
    type_linked_list reduce using rule 96 (const_val -> Null .)
    type_doubly_linked_list reduce using rule 96 (const_val -> Null .)
    type_deque      reduce using rule 96 (const_val -> Null .)
    type_heap       reduce using rule 96 (const_val -> Null .)
    type_fibonacci_heap reduce using rule 96 (const_val -> Null .)
    type_tree       reduce using rule 96 (const_val -> Null .)
    type_trie       reduce using rule 96 (const_val -> Null .)
    type_stack      reduce using rule 96 (const_val -> Null .)
    type_queue      reduce using rule 96 (const_val -> Null .)
    type_binary_search_tree reduce using rule 96 (const_val -> Null .)
    type_bitset     reduce using rule 96 (const_val -> Null .)
    type_set        reduce using rule 96 (const_val -> Null .)
    type_map        reduce using rule 96 (const_val -> Null .)
    type_range      reduce using rule 96 (const_val -> Null .)
    type_bad_struct reduce using rule 96 (const_val -> Null .)
    type_bad_struct2 reduce using rule 96 (const_val -> Null .)
    lambda          reduce using rule 96 (const_val -> Null .)
    NEWLINE         reduce using rule 96 (const_val -> Null .)
    $end            reduce using rule 96 (const_val -> Null .)
    operator_inner  reduce using rule 96 (const_val -> Null .)
    }               reduce using rule 96 (const_val -> Null .)
    )               reduce using rule 96 (const_val -> Null .)
    {               reduce using rule 96 (const_val -> Null .)
    ]               reduce using rule 96 (const_val -> Null .)
    :               reduce using rule 96 (const_val -> Null .)
    ,               reduce using rule 96 (const_val -> Null .)


state 53

    (97) const_val -> false .

    operator_add    reduce using rule 97 (const_val -> false .)
    operator_sub    reduce using rule 97 (const_val -> false .)
    operator_mul    reduce using rule 97 (const_val -> false .)
    operator_div    reduce using rule 97 (const_val -> false .)
    operator_trudiv reduce using rule 97 (const_val -> false .)
    operator_pow    reduce using rule 97 (const_val -> false .)
    operator_join   reduce using rule 97 (const_val -> false .)
    operator_split  reduce using rule 97 (const_val -> false .)
    operator_scan   reduce using rule 97 (const_val -> false .)
    operator_reduc  reduce using rule 97 (const_val -> false .)
    operator_bitand reduce using rule 97 (const_val -> false .)
    operator_bitor  reduce using rule 97 (const_val -> false .)
    operator_bitxor reduce using rule 97 (const_val -> false .)
    operator_bitshiftleft reduce using rule 97 (const_val -> false .)
    operator_bitshiftright reduce using rule 97 (const_val -> false .)
    operator_and    reduce using rule 97 (const_val -> false .)
    operator_or     reduce using rule 97 (const_val -> false .)
    operator_xor    reduce using rule 97 (const_val -> false .)
    operator_contains reduce using rule 97 (const_val -> false .)
    operator_incr   reduce using rule 97 (const_val -> false .)
    operator_decr   reduce using rule 97 (const_val -> false .)
    operator_outer  reduce using rule 97 (const_val -> false .)
    operator_rotate reduce using rule 97 (const_val -> false .)
    operator_apply  reduce using rule 97 (const_val -> false .)
    operator_compose reduce using rule 97 (const_val -> false .)
    operator_over   reduce using rule 97 (const_val -> false .)
    operator_map    reduce using rule 97 (const_val -> false .)
    operator_less_than reduce using rule 97 (const_val -> false .)
    operator_less_than_equals reduce using rule 97 (const_val -> false .)
    operator_greater_than reduce using rule 97 (const_val -> false .)
    operator_greater_than_equals reduce using rule 97 (const_val -> false .)
    operator_equals reduce using rule 97 (const_val -> false .)
    operator_not_equals reduce using rule 97 (const_val -> false .)
    operator_smallest reduce using rule 97 (const_val -> false .)
    operator_greatest reduce using rule 97 (const_val -> false .)
    operator_goodname reduce using rule 97 (const_val -> false .)
    [               reduce using rule 97 (const_val -> false .)
    (               reduce using rule 97 (const_val -> false .)
    operator_bitnot reduce using rule 97 (const_val -> false .)
    operator_not    reduce using rule 97 (const_val -> false .)
    operator_reverse reduce using rule 97 (const_val -> false .)
    operator_sorted_incr reduce using rule 97 (const_val -> false .)
    operator_sorted_decr reduce using rule 97 (const_val -> false .)
    operator_s_combinator reduce using rule 97 (const_val -> false .)
    operator_s2_combinator reduce using rule 97 (const_val -> false .)
    operator_goodname2 reduce using rule 97 (const_val -> false .)
    VAR             reduce using rule 97 (const_val -> false .)
    FLOAT           reduce using rule 97 (const_val -> false .)
    NUM             reduce using rule 97 (const_val -> false .)
    STRING_3SQ      reduce using rule 97 (const_val -> false .)
    STRING_3DQ      reduce using rule 97 (const_val -> false .)
    STRING_SQ       reduce using rule 97 (const_val -> false .)
    STRING_DQ       reduce using rule 97 (const_val -> false .)
    true            reduce using rule 97 (const_val -> false .)
    Null            reduce using rule 97 (const_val -> false .)
    false           reduce using rule 97 (const_val -> false .)
    type_type       reduce using rule 97 (const_val -> false .)
    type_num        reduce using rule 97 (const_val -> false .)
    type_bool       reduce using rule 97 (const_val -> false .)
    type_any        reduce using rule 97 (const_val -> false .)
    type_u64        reduce using rule 97 (const_val -> false .)
    type_u32        reduce using rule 97 (const_val -> false .)
    type_u16        reduce using rule 97 (const_val -> false .)
    type_u8         reduce using rule 97 (const_val -> false .)
    type_i64        reduce using rule 97 (const_val -> false .)
    type_i32        reduce using rule 97 (const_val -> false .)
    type_i16        reduce using rule 97 (const_val -> false .)
    type_i8         reduce using rule 97 (const_val -> false .)
    type_f32        reduce using rule 97 (const_val -> false .)
    type_f64        reduce using rule 97 (const_val -> false .)
    type_str        reduce using rule 97 (const_val -> false .)
    type_list       reduce using rule 97 (const_val -> false .)
    type_tuple      reduce using rule 97 (const_val -> false .)
    type_array      reduce using rule 97 (const_val -> false .)
    type_vector     reduce using rule 97 (const_val -> false .)
    type_dict       reduce using rule 97 (const_val -> false .)
    type_generator  reduce using rule 97 (const_val -> false .)
    type_linked_list reduce using rule 97 (const_val -> false .)
    type_doubly_linked_list reduce using rule 97 (const_val -> false .)
    type_deque      reduce using rule 97 (const_val -> false .)
    type_heap       reduce using rule 97 (const_val -> false .)
    type_fibonacci_heap reduce using rule 97 (const_val -> false .)
    type_tree       reduce using rule 97 (const_val -> false .)
    type_trie       reduce using rule 97 (const_val -> false .)
    type_stack      reduce using rule 97 (const_val -> false .)
    type_queue      reduce using rule 97 (const_val -> false .)
    type_binary_search_tree reduce using rule 97 (const_val -> false .)
    type_bitset     reduce using rule 97 (const_val -> false .)
    type_set        reduce using rule 97 (const_val -> false .)
    type_map        reduce using rule 97 (const_val -> false .)
    type_range      reduce using rule 97 (const_val -> false .)
    type_bad_struct reduce using rule 97 (const_val -> false .)
    type_bad_struct2 reduce using rule 97 (const_val -> false .)
    lambda          reduce using rule 97 (const_val -> false .)
    NEWLINE         reduce using rule 97 (const_val -> false .)
    $end            reduce using rule 97 (const_val -> false .)
    operator_inner  reduce using rule 97 (const_val -> false .)
    }               reduce using rule 97 (const_val -> false .)
    )               reduce using rule 97 (const_val -> false .)
    {               reduce using rule 97 (const_val -> false .)
    ]               reduce using rule 97 (const_val -> false .)
    :               reduce using rule 97 (const_val -> false .)
    ,               reduce using rule 97 (const_val -> false .)


state 54

    (145) return_val -> type_type . ( arguments )
    (10) TYPE -> type_type .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 165
    VAR             reduce using rule 10 (TYPE -> type_type .)
    operator_add    reduce using rule 10 (TYPE -> type_type .)
    operator_sub    reduce using rule 10 (TYPE -> type_type .)
    operator_mul    reduce using rule 10 (TYPE -> type_type .)
    operator_div    reduce using rule 10 (TYPE -> type_type .)
    operator_trudiv reduce using rule 10 (TYPE -> type_type .)
    operator_pow    reduce using rule 10 (TYPE -> type_type .)
    operator_join   reduce using rule 10 (TYPE -> type_type .)
    operator_split  reduce using rule 10 (TYPE -> type_type .)
    operator_scan   reduce using rule 10 (TYPE -> type_type .)
    operator_reduc  reduce using rule 10 (TYPE -> type_type .)
    operator_bitand reduce using rule 10 (TYPE -> type_type .)
    operator_bitor  reduce using rule 10 (TYPE -> type_type .)
    operator_bitxor reduce using rule 10 (TYPE -> type_type .)
    operator_bitshiftleft reduce using rule 10 (TYPE -> type_type .)
    operator_bitshiftright reduce using rule 10 (TYPE -> type_type .)
    operator_and    reduce using rule 10 (TYPE -> type_type .)
    operator_or     reduce using rule 10 (TYPE -> type_type .)
    operator_xor    reduce using rule 10 (TYPE -> type_type .)
    operator_contains reduce using rule 10 (TYPE -> type_type .)
    operator_incr   reduce using rule 10 (TYPE -> type_type .)
    operator_decr   reduce using rule 10 (TYPE -> type_type .)
    operator_outer  reduce using rule 10 (TYPE -> type_type .)
    operator_rotate reduce using rule 10 (TYPE -> type_type .)
    operator_apply  reduce using rule 10 (TYPE -> type_type .)
    operator_compose reduce using rule 10 (TYPE -> type_type .)
    operator_over   reduce using rule 10 (TYPE -> type_type .)
    operator_map    reduce using rule 10 (TYPE -> type_type .)
    operator_less_than reduce using rule 10 (TYPE -> type_type .)
    operator_less_than_equals reduce using rule 10 (TYPE -> type_type .)
    operator_greater_than reduce using rule 10 (TYPE -> type_type .)
    operator_greater_than_equals reduce using rule 10 (TYPE -> type_type .)
    operator_equals reduce using rule 10 (TYPE -> type_type .)
    operator_not_equals reduce using rule 10 (TYPE -> type_type .)
    operator_smallest reduce using rule 10 (TYPE -> type_type .)
    operator_greatest reduce using rule 10 (TYPE -> type_type .)
    operator_goodname reduce using rule 10 (TYPE -> type_type .)
    [               reduce using rule 10 (TYPE -> type_type .)
    operator_bitnot reduce using rule 10 (TYPE -> type_type .)
    operator_not    reduce using rule 10 (TYPE -> type_type .)
    operator_reverse reduce using rule 10 (TYPE -> type_type .)
    operator_sorted_incr reduce using rule 10 (TYPE -> type_type .)
    operator_sorted_decr reduce using rule 10 (TYPE -> type_type .)
    operator_s_combinator reduce using rule 10 (TYPE -> type_type .)
    operator_s2_combinator reduce using rule 10 (TYPE -> type_type .)
    operator_goodname2 reduce using rule 10 (TYPE -> type_type .)
    FLOAT           reduce using rule 10 (TYPE -> type_type .)
    NUM             reduce using rule 10 (TYPE -> type_type .)
    STRING_3SQ      reduce using rule 10 (TYPE -> type_type .)
    STRING_3DQ      reduce using rule 10 (TYPE -> type_type .)
    STRING_SQ       reduce using rule 10 (TYPE -> type_type .)
    STRING_DQ       reduce using rule 10 (TYPE -> type_type .)
    true            reduce using rule 10 (TYPE -> type_type .)
    Null            reduce using rule 10 (TYPE -> type_type .)
    false           reduce using rule 10 (TYPE -> type_type .)
    type_type       reduce using rule 10 (TYPE -> type_type .)
    type_num        reduce using rule 10 (TYPE -> type_type .)
    type_bool       reduce using rule 10 (TYPE -> type_type .)
    type_any        reduce using rule 10 (TYPE -> type_type .)
    type_u64        reduce using rule 10 (TYPE -> type_type .)
    type_u32        reduce using rule 10 (TYPE -> type_type .)
    type_u16        reduce using rule 10 (TYPE -> type_type .)
    type_u8         reduce using rule 10 (TYPE -> type_type .)
    type_i64        reduce using rule 10 (TYPE -> type_type .)
    type_i32        reduce using rule 10 (TYPE -> type_type .)
    type_i16        reduce using rule 10 (TYPE -> type_type .)
    type_i8         reduce using rule 10 (TYPE -> type_type .)
    type_f32        reduce using rule 10 (TYPE -> type_type .)
    type_f64        reduce using rule 10 (TYPE -> type_type .)
    type_str        reduce using rule 10 (TYPE -> type_type .)
    type_list       reduce using rule 10 (TYPE -> type_type .)
    type_tuple      reduce using rule 10 (TYPE -> type_type .)
    type_array      reduce using rule 10 (TYPE -> type_type .)
    type_vector     reduce using rule 10 (TYPE -> type_type .)
    type_dict       reduce using rule 10 (TYPE -> type_type .)
    type_generator  reduce using rule 10 (TYPE -> type_type .)
    type_linked_list reduce using rule 10 (TYPE -> type_type .)
    type_doubly_linked_list reduce using rule 10 (TYPE -> type_type .)
    type_deque      reduce using rule 10 (TYPE -> type_type .)
    type_heap       reduce using rule 10 (TYPE -> type_type .)
    type_fibonacci_heap reduce using rule 10 (TYPE -> type_type .)
    type_tree       reduce using rule 10 (TYPE -> type_type .)
    type_trie       reduce using rule 10 (TYPE -> type_type .)
    type_stack      reduce using rule 10 (TYPE -> type_type .)
    type_queue      reduce using rule 10 (TYPE -> type_type .)
    type_binary_search_tree reduce using rule 10 (TYPE -> type_type .)
    type_bitset     reduce using rule 10 (TYPE -> type_type .)
    type_set        reduce using rule 10 (TYPE -> type_type .)
    type_map        reduce using rule 10 (TYPE -> type_type .)
    type_range      reduce using rule 10 (TYPE -> type_type .)
    type_bad_struct reduce using rule 10 (TYPE -> type_type .)
    type_bad_struct2 reduce using rule 10 (TYPE -> type_type .)
    lambda          reduce using rule 10 (TYPE -> type_type .)
    NEWLINE         reduce using rule 10 (TYPE -> type_type .)
    $end            reduce using rule 10 (TYPE -> type_type .)
    operator_inner  reduce using rule 10 (TYPE -> type_type .)
    }               reduce using rule 10 (TYPE -> type_type .)
    )               reduce using rule 10 (TYPE -> type_type .)
    {               reduce using rule 10 (TYPE -> type_type .)
    ]               reduce using rule 10 (TYPE -> type_type .)
    :               reduce using rule 10 (TYPE -> type_type .)
    ,               reduce using rule 10 (TYPE -> type_type .)

  ! (               [ reduce using rule 10 (TYPE -> type_type .) ]


state 55

    (146) return_val -> type_num . ( arguments )
    (11) TYPE -> type_num .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 166
    VAR             reduce using rule 11 (TYPE -> type_num .)
    operator_add    reduce using rule 11 (TYPE -> type_num .)
    operator_sub    reduce using rule 11 (TYPE -> type_num .)
    operator_mul    reduce using rule 11 (TYPE -> type_num .)
    operator_div    reduce using rule 11 (TYPE -> type_num .)
    operator_trudiv reduce using rule 11 (TYPE -> type_num .)
    operator_pow    reduce using rule 11 (TYPE -> type_num .)
    operator_join   reduce using rule 11 (TYPE -> type_num .)
    operator_split  reduce using rule 11 (TYPE -> type_num .)
    operator_scan   reduce using rule 11 (TYPE -> type_num .)
    operator_reduc  reduce using rule 11 (TYPE -> type_num .)
    operator_bitand reduce using rule 11 (TYPE -> type_num .)
    operator_bitor  reduce using rule 11 (TYPE -> type_num .)
    operator_bitxor reduce using rule 11 (TYPE -> type_num .)
    operator_bitshiftleft reduce using rule 11 (TYPE -> type_num .)
    operator_bitshiftright reduce using rule 11 (TYPE -> type_num .)
    operator_and    reduce using rule 11 (TYPE -> type_num .)
    operator_or     reduce using rule 11 (TYPE -> type_num .)
    operator_xor    reduce using rule 11 (TYPE -> type_num .)
    operator_contains reduce using rule 11 (TYPE -> type_num .)
    operator_incr   reduce using rule 11 (TYPE -> type_num .)
    operator_decr   reduce using rule 11 (TYPE -> type_num .)
    operator_outer  reduce using rule 11 (TYPE -> type_num .)
    operator_rotate reduce using rule 11 (TYPE -> type_num .)
    operator_apply  reduce using rule 11 (TYPE -> type_num .)
    operator_compose reduce using rule 11 (TYPE -> type_num .)
    operator_over   reduce using rule 11 (TYPE -> type_num .)
    operator_map    reduce using rule 11 (TYPE -> type_num .)
    operator_less_than reduce using rule 11 (TYPE -> type_num .)
    operator_less_than_equals reduce using rule 11 (TYPE -> type_num .)
    operator_greater_than reduce using rule 11 (TYPE -> type_num .)
    operator_greater_than_equals reduce using rule 11 (TYPE -> type_num .)
    operator_equals reduce using rule 11 (TYPE -> type_num .)
    operator_not_equals reduce using rule 11 (TYPE -> type_num .)
    operator_smallest reduce using rule 11 (TYPE -> type_num .)
    operator_greatest reduce using rule 11 (TYPE -> type_num .)
    operator_goodname reduce using rule 11 (TYPE -> type_num .)
    [               reduce using rule 11 (TYPE -> type_num .)
    operator_bitnot reduce using rule 11 (TYPE -> type_num .)
    operator_not    reduce using rule 11 (TYPE -> type_num .)
    operator_reverse reduce using rule 11 (TYPE -> type_num .)
    operator_sorted_incr reduce using rule 11 (TYPE -> type_num .)
    operator_sorted_decr reduce using rule 11 (TYPE -> type_num .)
    operator_s_combinator reduce using rule 11 (TYPE -> type_num .)
    operator_s2_combinator reduce using rule 11 (TYPE -> type_num .)
    operator_goodname2 reduce using rule 11 (TYPE -> type_num .)
    FLOAT           reduce using rule 11 (TYPE -> type_num .)
    NUM             reduce using rule 11 (TYPE -> type_num .)
    STRING_3SQ      reduce using rule 11 (TYPE -> type_num .)
    STRING_3DQ      reduce using rule 11 (TYPE -> type_num .)
    STRING_SQ       reduce using rule 11 (TYPE -> type_num .)
    STRING_DQ       reduce using rule 11 (TYPE -> type_num .)
    true            reduce using rule 11 (TYPE -> type_num .)
    Null            reduce using rule 11 (TYPE -> type_num .)
    false           reduce using rule 11 (TYPE -> type_num .)
    type_type       reduce using rule 11 (TYPE -> type_num .)
    type_num        reduce using rule 11 (TYPE -> type_num .)
    type_bool       reduce using rule 11 (TYPE -> type_num .)
    type_any        reduce using rule 11 (TYPE -> type_num .)
    type_u64        reduce using rule 11 (TYPE -> type_num .)
    type_u32        reduce using rule 11 (TYPE -> type_num .)
    type_u16        reduce using rule 11 (TYPE -> type_num .)
    type_u8         reduce using rule 11 (TYPE -> type_num .)
    type_i64        reduce using rule 11 (TYPE -> type_num .)
    type_i32        reduce using rule 11 (TYPE -> type_num .)
    type_i16        reduce using rule 11 (TYPE -> type_num .)
    type_i8         reduce using rule 11 (TYPE -> type_num .)
    type_f32        reduce using rule 11 (TYPE -> type_num .)
    type_f64        reduce using rule 11 (TYPE -> type_num .)
    type_str        reduce using rule 11 (TYPE -> type_num .)
    type_list       reduce using rule 11 (TYPE -> type_num .)
    type_tuple      reduce using rule 11 (TYPE -> type_num .)
    type_array      reduce using rule 11 (TYPE -> type_num .)
    type_vector     reduce using rule 11 (TYPE -> type_num .)
    type_dict       reduce using rule 11 (TYPE -> type_num .)
    type_generator  reduce using rule 11 (TYPE -> type_num .)
    type_linked_list reduce using rule 11 (TYPE -> type_num .)
    type_doubly_linked_list reduce using rule 11 (TYPE -> type_num .)
    type_deque      reduce using rule 11 (TYPE -> type_num .)
    type_heap       reduce using rule 11 (TYPE -> type_num .)
    type_fibonacci_heap reduce using rule 11 (TYPE -> type_num .)
    type_tree       reduce using rule 11 (TYPE -> type_num .)
    type_trie       reduce using rule 11 (TYPE -> type_num .)
    type_stack      reduce using rule 11 (TYPE -> type_num .)
    type_queue      reduce using rule 11 (TYPE -> type_num .)
    type_binary_search_tree reduce using rule 11 (TYPE -> type_num .)
    type_bitset     reduce using rule 11 (TYPE -> type_num .)
    type_set        reduce using rule 11 (TYPE -> type_num .)
    type_map        reduce using rule 11 (TYPE -> type_num .)
    type_range      reduce using rule 11 (TYPE -> type_num .)
    type_bad_struct reduce using rule 11 (TYPE -> type_num .)
    type_bad_struct2 reduce using rule 11 (TYPE -> type_num .)
    lambda          reduce using rule 11 (TYPE -> type_num .)
    NEWLINE         reduce using rule 11 (TYPE -> type_num .)
    $end            reduce using rule 11 (TYPE -> type_num .)
    operator_inner  reduce using rule 11 (TYPE -> type_num .)
    }               reduce using rule 11 (TYPE -> type_num .)
    )               reduce using rule 11 (TYPE -> type_num .)
    {               reduce using rule 11 (TYPE -> type_num .)
    ]               reduce using rule 11 (TYPE -> type_num .)
    :               reduce using rule 11 (TYPE -> type_num .)
    ,               reduce using rule 11 (TYPE -> type_num .)

  ! (               [ reduce using rule 11 (TYPE -> type_num .) ]


state 56

    (147) return_val -> type_bool . ( arguments )
    (12) TYPE -> type_bool .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 167
    VAR             reduce using rule 12 (TYPE -> type_bool .)
    operator_add    reduce using rule 12 (TYPE -> type_bool .)
    operator_sub    reduce using rule 12 (TYPE -> type_bool .)
    operator_mul    reduce using rule 12 (TYPE -> type_bool .)
    operator_div    reduce using rule 12 (TYPE -> type_bool .)
    operator_trudiv reduce using rule 12 (TYPE -> type_bool .)
    operator_pow    reduce using rule 12 (TYPE -> type_bool .)
    operator_join   reduce using rule 12 (TYPE -> type_bool .)
    operator_split  reduce using rule 12 (TYPE -> type_bool .)
    operator_scan   reduce using rule 12 (TYPE -> type_bool .)
    operator_reduc  reduce using rule 12 (TYPE -> type_bool .)
    operator_bitand reduce using rule 12 (TYPE -> type_bool .)
    operator_bitor  reduce using rule 12 (TYPE -> type_bool .)
    operator_bitxor reduce using rule 12 (TYPE -> type_bool .)
    operator_bitshiftleft reduce using rule 12 (TYPE -> type_bool .)
    operator_bitshiftright reduce using rule 12 (TYPE -> type_bool .)
    operator_and    reduce using rule 12 (TYPE -> type_bool .)
    operator_or     reduce using rule 12 (TYPE -> type_bool .)
    operator_xor    reduce using rule 12 (TYPE -> type_bool .)
    operator_contains reduce using rule 12 (TYPE -> type_bool .)
    operator_incr   reduce using rule 12 (TYPE -> type_bool .)
    operator_decr   reduce using rule 12 (TYPE -> type_bool .)
    operator_outer  reduce using rule 12 (TYPE -> type_bool .)
    operator_rotate reduce using rule 12 (TYPE -> type_bool .)
    operator_apply  reduce using rule 12 (TYPE -> type_bool .)
    operator_compose reduce using rule 12 (TYPE -> type_bool .)
    operator_over   reduce using rule 12 (TYPE -> type_bool .)
    operator_map    reduce using rule 12 (TYPE -> type_bool .)
    operator_less_than reduce using rule 12 (TYPE -> type_bool .)
    operator_less_than_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_greater_than reduce using rule 12 (TYPE -> type_bool .)
    operator_greater_than_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_not_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_smallest reduce using rule 12 (TYPE -> type_bool .)
    operator_greatest reduce using rule 12 (TYPE -> type_bool .)
    operator_goodname reduce using rule 12 (TYPE -> type_bool .)
    [               reduce using rule 12 (TYPE -> type_bool .)
    operator_bitnot reduce using rule 12 (TYPE -> type_bool .)
    operator_not    reduce using rule 12 (TYPE -> type_bool .)
    operator_reverse reduce using rule 12 (TYPE -> type_bool .)
    operator_sorted_incr reduce using rule 12 (TYPE -> type_bool .)
    operator_sorted_decr reduce using rule 12 (TYPE -> type_bool .)
    operator_s_combinator reduce using rule 12 (TYPE -> type_bool .)
    operator_s2_combinator reduce using rule 12 (TYPE -> type_bool .)
    operator_goodname2 reduce using rule 12 (TYPE -> type_bool .)
    FLOAT           reduce using rule 12 (TYPE -> type_bool .)
    NUM             reduce using rule 12 (TYPE -> type_bool .)
    STRING_3SQ      reduce using rule 12 (TYPE -> type_bool .)
    STRING_3DQ      reduce using rule 12 (TYPE -> type_bool .)
    STRING_SQ       reduce using rule 12 (TYPE -> type_bool .)
    STRING_DQ       reduce using rule 12 (TYPE -> type_bool .)
    true            reduce using rule 12 (TYPE -> type_bool .)
    Null            reduce using rule 12 (TYPE -> type_bool .)
    false           reduce using rule 12 (TYPE -> type_bool .)
    type_type       reduce using rule 12 (TYPE -> type_bool .)
    type_num        reduce using rule 12 (TYPE -> type_bool .)
    type_bool       reduce using rule 12 (TYPE -> type_bool .)
    type_any        reduce using rule 12 (TYPE -> type_bool .)
    type_u64        reduce using rule 12 (TYPE -> type_bool .)
    type_u32        reduce using rule 12 (TYPE -> type_bool .)
    type_u16        reduce using rule 12 (TYPE -> type_bool .)
    type_u8         reduce using rule 12 (TYPE -> type_bool .)
    type_i64        reduce using rule 12 (TYPE -> type_bool .)
    type_i32        reduce using rule 12 (TYPE -> type_bool .)
    type_i16        reduce using rule 12 (TYPE -> type_bool .)
    type_i8         reduce using rule 12 (TYPE -> type_bool .)
    type_f32        reduce using rule 12 (TYPE -> type_bool .)
    type_f64        reduce using rule 12 (TYPE -> type_bool .)
    type_str        reduce using rule 12 (TYPE -> type_bool .)
    type_list       reduce using rule 12 (TYPE -> type_bool .)
    type_tuple      reduce using rule 12 (TYPE -> type_bool .)
    type_array      reduce using rule 12 (TYPE -> type_bool .)
    type_vector     reduce using rule 12 (TYPE -> type_bool .)
    type_dict       reduce using rule 12 (TYPE -> type_bool .)
    type_generator  reduce using rule 12 (TYPE -> type_bool .)
    type_linked_list reduce using rule 12 (TYPE -> type_bool .)
    type_doubly_linked_list reduce using rule 12 (TYPE -> type_bool .)
    type_deque      reduce using rule 12 (TYPE -> type_bool .)
    type_heap       reduce using rule 12 (TYPE -> type_bool .)
    type_fibonacci_heap reduce using rule 12 (TYPE -> type_bool .)
    type_tree       reduce using rule 12 (TYPE -> type_bool .)
    type_trie       reduce using rule 12 (TYPE -> type_bool .)
    type_stack      reduce using rule 12 (TYPE -> type_bool .)
    type_queue      reduce using rule 12 (TYPE -> type_bool .)
    type_binary_search_tree reduce using rule 12 (TYPE -> type_bool .)
    type_bitset     reduce using rule 12 (TYPE -> type_bool .)
    type_set        reduce using rule 12 (TYPE -> type_bool .)
    type_map        reduce using rule 12 (TYPE -> type_bool .)
    type_range      reduce using rule 12 (TYPE -> type_bool .)
    type_bad_struct reduce using rule 12 (TYPE -> type_bool .)
    type_bad_struct2 reduce using rule 12 (TYPE -> type_bool .)
    lambda          reduce using rule 12 (TYPE -> type_bool .)
    NEWLINE         reduce using rule 12 (TYPE -> type_bool .)
    $end            reduce using rule 12 (TYPE -> type_bool .)
    operator_inner  reduce using rule 12 (TYPE -> type_bool .)
    }               reduce using rule 12 (TYPE -> type_bool .)
    )               reduce using rule 12 (TYPE -> type_bool .)
    {               reduce using rule 12 (TYPE -> type_bool .)
    ]               reduce using rule 12 (TYPE -> type_bool .)
    :               reduce using rule 12 (TYPE -> type_bool .)
    ,               reduce using rule 12 (TYPE -> type_bool .)

  ! (               [ reduce using rule 12 (TYPE -> type_bool .) ]


state 57

    (148) return_val -> type_any . ( arguments )
    (13) TYPE -> type_any .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 168
    VAR             reduce using rule 13 (TYPE -> type_any .)
    operator_add    reduce using rule 13 (TYPE -> type_any .)
    operator_sub    reduce using rule 13 (TYPE -> type_any .)
    operator_mul    reduce using rule 13 (TYPE -> type_any .)
    operator_div    reduce using rule 13 (TYPE -> type_any .)
    operator_trudiv reduce using rule 13 (TYPE -> type_any .)
    operator_pow    reduce using rule 13 (TYPE -> type_any .)
    operator_join   reduce using rule 13 (TYPE -> type_any .)
    operator_split  reduce using rule 13 (TYPE -> type_any .)
    operator_scan   reduce using rule 13 (TYPE -> type_any .)
    operator_reduc  reduce using rule 13 (TYPE -> type_any .)
    operator_bitand reduce using rule 13 (TYPE -> type_any .)
    operator_bitor  reduce using rule 13 (TYPE -> type_any .)
    operator_bitxor reduce using rule 13 (TYPE -> type_any .)
    operator_bitshiftleft reduce using rule 13 (TYPE -> type_any .)
    operator_bitshiftright reduce using rule 13 (TYPE -> type_any .)
    operator_and    reduce using rule 13 (TYPE -> type_any .)
    operator_or     reduce using rule 13 (TYPE -> type_any .)
    operator_xor    reduce using rule 13 (TYPE -> type_any .)
    operator_contains reduce using rule 13 (TYPE -> type_any .)
    operator_incr   reduce using rule 13 (TYPE -> type_any .)
    operator_decr   reduce using rule 13 (TYPE -> type_any .)
    operator_outer  reduce using rule 13 (TYPE -> type_any .)
    operator_rotate reduce using rule 13 (TYPE -> type_any .)
    operator_apply  reduce using rule 13 (TYPE -> type_any .)
    operator_compose reduce using rule 13 (TYPE -> type_any .)
    operator_over   reduce using rule 13 (TYPE -> type_any .)
    operator_map    reduce using rule 13 (TYPE -> type_any .)
    operator_less_than reduce using rule 13 (TYPE -> type_any .)
    operator_less_than_equals reduce using rule 13 (TYPE -> type_any .)
    operator_greater_than reduce using rule 13 (TYPE -> type_any .)
    operator_greater_than_equals reduce using rule 13 (TYPE -> type_any .)
    operator_equals reduce using rule 13 (TYPE -> type_any .)
    operator_not_equals reduce using rule 13 (TYPE -> type_any .)
    operator_smallest reduce using rule 13 (TYPE -> type_any .)
    operator_greatest reduce using rule 13 (TYPE -> type_any .)
    operator_goodname reduce using rule 13 (TYPE -> type_any .)
    [               reduce using rule 13 (TYPE -> type_any .)
    operator_bitnot reduce using rule 13 (TYPE -> type_any .)
    operator_not    reduce using rule 13 (TYPE -> type_any .)
    operator_reverse reduce using rule 13 (TYPE -> type_any .)
    operator_sorted_incr reduce using rule 13 (TYPE -> type_any .)
    operator_sorted_decr reduce using rule 13 (TYPE -> type_any .)
    operator_s_combinator reduce using rule 13 (TYPE -> type_any .)
    operator_s2_combinator reduce using rule 13 (TYPE -> type_any .)
    operator_goodname2 reduce using rule 13 (TYPE -> type_any .)
    FLOAT           reduce using rule 13 (TYPE -> type_any .)
    NUM             reduce using rule 13 (TYPE -> type_any .)
    STRING_3SQ      reduce using rule 13 (TYPE -> type_any .)
    STRING_3DQ      reduce using rule 13 (TYPE -> type_any .)
    STRING_SQ       reduce using rule 13 (TYPE -> type_any .)
    STRING_DQ       reduce using rule 13 (TYPE -> type_any .)
    true            reduce using rule 13 (TYPE -> type_any .)
    Null            reduce using rule 13 (TYPE -> type_any .)
    false           reduce using rule 13 (TYPE -> type_any .)
    type_type       reduce using rule 13 (TYPE -> type_any .)
    type_num        reduce using rule 13 (TYPE -> type_any .)
    type_bool       reduce using rule 13 (TYPE -> type_any .)
    type_any        reduce using rule 13 (TYPE -> type_any .)
    type_u64        reduce using rule 13 (TYPE -> type_any .)
    type_u32        reduce using rule 13 (TYPE -> type_any .)
    type_u16        reduce using rule 13 (TYPE -> type_any .)
    type_u8         reduce using rule 13 (TYPE -> type_any .)
    type_i64        reduce using rule 13 (TYPE -> type_any .)
    type_i32        reduce using rule 13 (TYPE -> type_any .)
    type_i16        reduce using rule 13 (TYPE -> type_any .)
    type_i8         reduce using rule 13 (TYPE -> type_any .)
    type_f32        reduce using rule 13 (TYPE -> type_any .)
    type_f64        reduce using rule 13 (TYPE -> type_any .)
    type_str        reduce using rule 13 (TYPE -> type_any .)
    type_list       reduce using rule 13 (TYPE -> type_any .)
    type_tuple      reduce using rule 13 (TYPE -> type_any .)
    type_array      reduce using rule 13 (TYPE -> type_any .)
    type_vector     reduce using rule 13 (TYPE -> type_any .)
    type_dict       reduce using rule 13 (TYPE -> type_any .)
    type_generator  reduce using rule 13 (TYPE -> type_any .)
    type_linked_list reduce using rule 13 (TYPE -> type_any .)
    type_doubly_linked_list reduce using rule 13 (TYPE -> type_any .)
    type_deque      reduce using rule 13 (TYPE -> type_any .)
    type_heap       reduce using rule 13 (TYPE -> type_any .)
    type_fibonacci_heap reduce using rule 13 (TYPE -> type_any .)
    type_tree       reduce using rule 13 (TYPE -> type_any .)
    type_trie       reduce using rule 13 (TYPE -> type_any .)
    type_stack      reduce using rule 13 (TYPE -> type_any .)
    type_queue      reduce using rule 13 (TYPE -> type_any .)
    type_binary_search_tree reduce using rule 13 (TYPE -> type_any .)
    type_bitset     reduce using rule 13 (TYPE -> type_any .)
    type_set        reduce using rule 13 (TYPE -> type_any .)
    type_map        reduce using rule 13 (TYPE -> type_any .)
    type_range      reduce using rule 13 (TYPE -> type_any .)
    type_bad_struct reduce using rule 13 (TYPE -> type_any .)
    type_bad_struct2 reduce using rule 13 (TYPE -> type_any .)
    lambda          reduce using rule 13 (TYPE -> type_any .)
    NEWLINE         reduce using rule 13 (TYPE -> type_any .)
    $end            reduce using rule 13 (TYPE -> type_any .)
    operator_inner  reduce using rule 13 (TYPE -> type_any .)
    }               reduce using rule 13 (TYPE -> type_any .)
    )               reduce using rule 13 (TYPE -> type_any .)
    {               reduce using rule 13 (TYPE -> type_any .)
    ]               reduce using rule 13 (TYPE -> type_any .)
    :               reduce using rule 13 (TYPE -> type_any .)
    ,               reduce using rule 13 (TYPE -> type_any .)

  ! (               [ reduce using rule 13 (TYPE -> type_any .) ]


state 58

    (149) return_val -> type_u64 . ( arguments )
    (14) TYPE -> type_u64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 169
    VAR             reduce using rule 14 (TYPE -> type_u64 .)
    operator_add    reduce using rule 14 (TYPE -> type_u64 .)
    operator_sub    reduce using rule 14 (TYPE -> type_u64 .)
    operator_mul    reduce using rule 14 (TYPE -> type_u64 .)
    operator_div    reduce using rule 14 (TYPE -> type_u64 .)
    operator_trudiv reduce using rule 14 (TYPE -> type_u64 .)
    operator_pow    reduce using rule 14 (TYPE -> type_u64 .)
    operator_join   reduce using rule 14 (TYPE -> type_u64 .)
    operator_split  reduce using rule 14 (TYPE -> type_u64 .)
    operator_scan   reduce using rule 14 (TYPE -> type_u64 .)
    operator_reduc  reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitand reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitor  reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitxor reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitshiftleft reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitshiftright reduce using rule 14 (TYPE -> type_u64 .)
    operator_and    reduce using rule 14 (TYPE -> type_u64 .)
    operator_or     reduce using rule 14 (TYPE -> type_u64 .)
    operator_xor    reduce using rule 14 (TYPE -> type_u64 .)
    operator_contains reduce using rule 14 (TYPE -> type_u64 .)
    operator_incr   reduce using rule 14 (TYPE -> type_u64 .)
    operator_decr   reduce using rule 14 (TYPE -> type_u64 .)
    operator_outer  reduce using rule 14 (TYPE -> type_u64 .)
    operator_rotate reduce using rule 14 (TYPE -> type_u64 .)
    operator_apply  reduce using rule 14 (TYPE -> type_u64 .)
    operator_compose reduce using rule 14 (TYPE -> type_u64 .)
    operator_over   reduce using rule 14 (TYPE -> type_u64 .)
    operator_map    reduce using rule 14 (TYPE -> type_u64 .)
    operator_less_than reduce using rule 14 (TYPE -> type_u64 .)
    operator_less_than_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_greater_than reduce using rule 14 (TYPE -> type_u64 .)
    operator_greater_than_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_not_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_smallest reduce using rule 14 (TYPE -> type_u64 .)
    operator_greatest reduce using rule 14 (TYPE -> type_u64 .)
    operator_goodname reduce using rule 14 (TYPE -> type_u64 .)
    [               reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitnot reduce using rule 14 (TYPE -> type_u64 .)
    operator_not    reduce using rule 14 (TYPE -> type_u64 .)
    operator_reverse reduce using rule 14 (TYPE -> type_u64 .)
    operator_sorted_incr reduce using rule 14 (TYPE -> type_u64 .)
    operator_sorted_decr reduce using rule 14 (TYPE -> type_u64 .)
    operator_s_combinator reduce using rule 14 (TYPE -> type_u64 .)
    operator_s2_combinator reduce using rule 14 (TYPE -> type_u64 .)
    operator_goodname2 reduce using rule 14 (TYPE -> type_u64 .)
    FLOAT           reduce using rule 14 (TYPE -> type_u64 .)
    NUM             reduce using rule 14 (TYPE -> type_u64 .)
    STRING_3SQ      reduce using rule 14 (TYPE -> type_u64 .)
    STRING_3DQ      reduce using rule 14 (TYPE -> type_u64 .)
    STRING_SQ       reduce using rule 14 (TYPE -> type_u64 .)
    STRING_DQ       reduce using rule 14 (TYPE -> type_u64 .)
    true            reduce using rule 14 (TYPE -> type_u64 .)
    Null            reduce using rule 14 (TYPE -> type_u64 .)
    false           reduce using rule 14 (TYPE -> type_u64 .)
    type_type       reduce using rule 14 (TYPE -> type_u64 .)
    type_num        reduce using rule 14 (TYPE -> type_u64 .)
    type_bool       reduce using rule 14 (TYPE -> type_u64 .)
    type_any        reduce using rule 14 (TYPE -> type_u64 .)
    type_u64        reduce using rule 14 (TYPE -> type_u64 .)
    type_u32        reduce using rule 14 (TYPE -> type_u64 .)
    type_u16        reduce using rule 14 (TYPE -> type_u64 .)
    type_u8         reduce using rule 14 (TYPE -> type_u64 .)
    type_i64        reduce using rule 14 (TYPE -> type_u64 .)
    type_i32        reduce using rule 14 (TYPE -> type_u64 .)
    type_i16        reduce using rule 14 (TYPE -> type_u64 .)
    type_i8         reduce using rule 14 (TYPE -> type_u64 .)
    type_f32        reduce using rule 14 (TYPE -> type_u64 .)
    type_f64        reduce using rule 14 (TYPE -> type_u64 .)
    type_str        reduce using rule 14 (TYPE -> type_u64 .)
    type_list       reduce using rule 14 (TYPE -> type_u64 .)
    type_tuple      reduce using rule 14 (TYPE -> type_u64 .)
    type_array      reduce using rule 14 (TYPE -> type_u64 .)
    type_vector     reduce using rule 14 (TYPE -> type_u64 .)
    type_dict       reduce using rule 14 (TYPE -> type_u64 .)
    type_generator  reduce using rule 14 (TYPE -> type_u64 .)
    type_linked_list reduce using rule 14 (TYPE -> type_u64 .)
    type_doubly_linked_list reduce using rule 14 (TYPE -> type_u64 .)
    type_deque      reduce using rule 14 (TYPE -> type_u64 .)
    type_heap       reduce using rule 14 (TYPE -> type_u64 .)
    type_fibonacci_heap reduce using rule 14 (TYPE -> type_u64 .)
    type_tree       reduce using rule 14 (TYPE -> type_u64 .)
    type_trie       reduce using rule 14 (TYPE -> type_u64 .)
    type_stack      reduce using rule 14 (TYPE -> type_u64 .)
    type_queue      reduce using rule 14 (TYPE -> type_u64 .)
    type_binary_search_tree reduce using rule 14 (TYPE -> type_u64 .)
    type_bitset     reduce using rule 14 (TYPE -> type_u64 .)
    type_set        reduce using rule 14 (TYPE -> type_u64 .)
    type_map        reduce using rule 14 (TYPE -> type_u64 .)
    type_range      reduce using rule 14 (TYPE -> type_u64 .)
    type_bad_struct reduce using rule 14 (TYPE -> type_u64 .)
    type_bad_struct2 reduce using rule 14 (TYPE -> type_u64 .)
    lambda          reduce using rule 14 (TYPE -> type_u64 .)
    NEWLINE         reduce using rule 14 (TYPE -> type_u64 .)
    $end            reduce using rule 14 (TYPE -> type_u64 .)
    operator_inner  reduce using rule 14 (TYPE -> type_u64 .)
    }               reduce using rule 14 (TYPE -> type_u64 .)
    )               reduce using rule 14 (TYPE -> type_u64 .)
    {               reduce using rule 14 (TYPE -> type_u64 .)
    ]               reduce using rule 14 (TYPE -> type_u64 .)
    :               reduce using rule 14 (TYPE -> type_u64 .)
    ,               reduce using rule 14 (TYPE -> type_u64 .)

  ! (               [ reduce using rule 14 (TYPE -> type_u64 .) ]


state 59

    (150) return_val -> type_u32 . ( arguments )
    (15) TYPE -> type_u32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 170
    VAR             reduce using rule 15 (TYPE -> type_u32 .)
    operator_add    reduce using rule 15 (TYPE -> type_u32 .)
    operator_sub    reduce using rule 15 (TYPE -> type_u32 .)
    operator_mul    reduce using rule 15 (TYPE -> type_u32 .)
    operator_div    reduce using rule 15 (TYPE -> type_u32 .)
    operator_trudiv reduce using rule 15 (TYPE -> type_u32 .)
    operator_pow    reduce using rule 15 (TYPE -> type_u32 .)
    operator_join   reduce using rule 15 (TYPE -> type_u32 .)
    operator_split  reduce using rule 15 (TYPE -> type_u32 .)
    operator_scan   reduce using rule 15 (TYPE -> type_u32 .)
    operator_reduc  reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitand reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitor  reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitxor reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitshiftleft reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitshiftright reduce using rule 15 (TYPE -> type_u32 .)
    operator_and    reduce using rule 15 (TYPE -> type_u32 .)
    operator_or     reduce using rule 15 (TYPE -> type_u32 .)
    operator_xor    reduce using rule 15 (TYPE -> type_u32 .)
    operator_contains reduce using rule 15 (TYPE -> type_u32 .)
    operator_incr   reduce using rule 15 (TYPE -> type_u32 .)
    operator_decr   reduce using rule 15 (TYPE -> type_u32 .)
    operator_outer  reduce using rule 15 (TYPE -> type_u32 .)
    operator_rotate reduce using rule 15 (TYPE -> type_u32 .)
    operator_apply  reduce using rule 15 (TYPE -> type_u32 .)
    operator_compose reduce using rule 15 (TYPE -> type_u32 .)
    operator_over   reduce using rule 15 (TYPE -> type_u32 .)
    operator_map    reduce using rule 15 (TYPE -> type_u32 .)
    operator_less_than reduce using rule 15 (TYPE -> type_u32 .)
    operator_less_than_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_greater_than reduce using rule 15 (TYPE -> type_u32 .)
    operator_greater_than_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_not_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_smallest reduce using rule 15 (TYPE -> type_u32 .)
    operator_greatest reduce using rule 15 (TYPE -> type_u32 .)
    operator_goodname reduce using rule 15 (TYPE -> type_u32 .)
    [               reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitnot reduce using rule 15 (TYPE -> type_u32 .)
    operator_not    reduce using rule 15 (TYPE -> type_u32 .)
    operator_reverse reduce using rule 15 (TYPE -> type_u32 .)
    operator_sorted_incr reduce using rule 15 (TYPE -> type_u32 .)
    operator_sorted_decr reduce using rule 15 (TYPE -> type_u32 .)
    operator_s_combinator reduce using rule 15 (TYPE -> type_u32 .)
    operator_s2_combinator reduce using rule 15 (TYPE -> type_u32 .)
    operator_goodname2 reduce using rule 15 (TYPE -> type_u32 .)
    FLOAT           reduce using rule 15 (TYPE -> type_u32 .)
    NUM             reduce using rule 15 (TYPE -> type_u32 .)
    STRING_3SQ      reduce using rule 15 (TYPE -> type_u32 .)
    STRING_3DQ      reduce using rule 15 (TYPE -> type_u32 .)
    STRING_SQ       reduce using rule 15 (TYPE -> type_u32 .)
    STRING_DQ       reduce using rule 15 (TYPE -> type_u32 .)
    true            reduce using rule 15 (TYPE -> type_u32 .)
    Null            reduce using rule 15 (TYPE -> type_u32 .)
    false           reduce using rule 15 (TYPE -> type_u32 .)
    type_type       reduce using rule 15 (TYPE -> type_u32 .)
    type_num        reduce using rule 15 (TYPE -> type_u32 .)
    type_bool       reduce using rule 15 (TYPE -> type_u32 .)
    type_any        reduce using rule 15 (TYPE -> type_u32 .)
    type_u64        reduce using rule 15 (TYPE -> type_u32 .)
    type_u32        reduce using rule 15 (TYPE -> type_u32 .)
    type_u16        reduce using rule 15 (TYPE -> type_u32 .)
    type_u8         reduce using rule 15 (TYPE -> type_u32 .)
    type_i64        reduce using rule 15 (TYPE -> type_u32 .)
    type_i32        reduce using rule 15 (TYPE -> type_u32 .)
    type_i16        reduce using rule 15 (TYPE -> type_u32 .)
    type_i8         reduce using rule 15 (TYPE -> type_u32 .)
    type_f32        reduce using rule 15 (TYPE -> type_u32 .)
    type_f64        reduce using rule 15 (TYPE -> type_u32 .)
    type_str        reduce using rule 15 (TYPE -> type_u32 .)
    type_list       reduce using rule 15 (TYPE -> type_u32 .)
    type_tuple      reduce using rule 15 (TYPE -> type_u32 .)
    type_array      reduce using rule 15 (TYPE -> type_u32 .)
    type_vector     reduce using rule 15 (TYPE -> type_u32 .)
    type_dict       reduce using rule 15 (TYPE -> type_u32 .)
    type_generator  reduce using rule 15 (TYPE -> type_u32 .)
    type_linked_list reduce using rule 15 (TYPE -> type_u32 .)
    type_doubly_linked_list reduce using rule 15 (TYPE -> type_u32 .)
    type_deque      reduce using rule 15 (TYPE -> type_u32 .)
    type_heap       reduce using rule 15 (TYPE -> type_u32 .)
    type_fibonacci_heap reduce using rule 15 (TYPE -> type_u32 .)
    type_tree       reduce using rule 15 (TYPE -> type_u32 .)
    type_trie       reduce using rule 15 (TYPE -> type_u32 .)
    type_stack      reduce using rule 15 (TYPE -> type_u32 .)
    type_queue      reduce using rule 15 (TYPE -> type_u32 .)
    type_binary_search_tree reduce using rule 15 (TYPE -> type_u32 .)
    type_bitset     reduce using rule 15 (TYPE -> type_u32 .)
    type_set        reduce using rule 15 (TYPE -> type_u32 .)
    type_map        reduce using rule 15 (TYPE -> type_u32 .)
    type_range      reduce using rule 15 (TYPE -> type_u32 .)
    type_bad_struct reduce using rule 15 (TYPE -> type_u32 .)
    type_bad_struct2 reduce using rule 15 (TYPE -> type_u32 .)
    lambda          reduce using rule 15 (TYPE -> type_u32 .)
    NEWLINE         reduce using rule 15 (TYPE -> type_u32 .)
    $end            reduce using rule 15 (TYPE -> type_u32 .)
    operator_inner  reduce using rule 15 (TYPE -> type_u32 .)
    }               reduce using rule 15 (TYPE -> type_u32 .)
    )               reduce using rule 15 (TYPE -> type_u32 .)
    {               reduce using rule 15 (TYPE -> type_u32 .)
    ]               reduce using rule 15 (TYPE -> type_u32 .)
    :               reduce using rule 15 (TYPE -> type_u32 .)
    ,               reduce using rule 15 (TYPE -> type_u32 .)

  ! (               [ reduce using rule 15 (TYPE -> type_u32 .) ]


state 60

    (151) return_val -> type_u16 . ( arguments )
    (16) TYPE -> type_u16 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 171
    VAR             reduce using rule 16 (TYPE -> type_u16 .)
    operator_add    reduce using rule 16 (TYPE -> type_u16 .)
    operator_sub    reduce using rule 16 (TYPE -> type_u16 .)
    operator_mul    reduce using rule 16 (TYPE -> type_u16 .)
    operator_div    reduce using rule 16 (TYPE -> type_u16 .)
    operator_trudiv reduce using rule 16 (TYPE -> type_u16 .)
    operator_pow    reduce using rule 16 (TYPE -> type_u16 .)
    operator_join   reduce using rule 16 (TYPE -> type_u16 .)
    operator_split  reduce using rule 16 (TYPE -> type_u16 .)
    operator_scan   reduce using rule 16 (TYPE -> type_u16 .)
    operator_reduc  reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitand reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitor  reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitxor reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitshiftleft reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitshiftright reduce using rule 16 (TYPE -> type_u16 .)
    operator_and    reduce using rule 16 (TYPE -> type_u16 .)
    operator_or     reduce using rule 16 (TYPE -> type_u16 .)
    operator_xor    reduce using rule 16 (TYPE -> type_u16 .)
    operator_contains reduce using rule 16 (TYPE -> type_u16 .)
    operator_incr   reduce using rule 16 (TYPE -> type_u16 .)
    operator_decr   reduce using rule 16 (TYPE -> type_u16 .)
    operator_outer  reduce using rule 16 (TYPE -> type_u16 .)
    operator_rotate reduce using rule 16 (TYPE -> type_u16 .)
    operator_apply  reduce using rule 16 (TYPE -> type_u16 .)
    operator_compose reduce using rule 16 (TYPE -> type_u16 .)
    operator_over   reduce using rule 16 (TYPE -> type_u16 .)
    operator_map    reduce using rule 16 (TYPE -> type_u16 .)
    operator_less_than reduce using rule 16 (TYPE -> type_u16 .)
    operator_less_than_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_greater_than reduce using rule 16 (TYPE -> type_u16 .)
    operator_greater_than_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_not_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_smallest reduce using rule 16 (TYPE -> type_u16 .)
    operator_greatest reduce using rule 16 (TYPE -> type_u16 .)
    operator_goodname reduce using rule 16 (TYPE -> type_u16 .)
    [               reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitnot reduce using rule 16 (TYPE -> type_u16 .)
    operator_not    reduce using rule 16 (TYPE -> type_u16 .)
    operator_reverse reduce using rule 16 (TYPE -> type_u16 .)
    operator_sorted_incr reduce using rule 16 (TYPE -> type_u16 .)
    operator_sorted_decr reduce using rule 16 (TYPE -> type_u16 .)
    operator_s_combinator reduce using rule 16 (TYPE -> type_u16 .)
    operator_s2_combinator reduce using rule 16 (TYPE -> type_u16 .)
    operator_goodname2 reduce using rule 16 (TYPE -> type_u16 .)
    FLOAT           reduce using rule 16 (TYPE -> type_u16 .)
    NUM             reduce using rule 16 (TYPE -> type_u16 .)
    STRING_3SQ      reduce using rule 16 (TYPE -> type_u16 .)
    STRING_3DQ      reduce using rule 16 (TYPE -> type_u16 .)
    STRING_SQ       reduce using rule 16 (TYPE -> type_u16 .)
    STRING_DQ       reduce using rule 16 (TYPE -> type_u16 .)
    true            reduce using rule 16 (TYPE -> type_u16 .)
    Null            reduce using rule 16 (TYPE -> type_u16 .)
    false           reduce using rule 16 (TYPE -> type_u16 .)
    type_type       reduce using rule 16 (TYPE -> type_u16 .)
    type_num        reduce using rule 16 (TYPE -> type_u16 .)
    type_bool       reduce using rule 16 (TYPE -> type_u16 .)
    type_any        reduce using rule 16 (TYPE -> type_u16 .)
    type_u64        reduce using rule 16 (TYPE -> type_u16 .)
    type_u32        reduce using rule 16 (TYPE -> type_u16 .)
    type_u16        reduce using rule 16 (TYPE -> type_u16 .)
    type_u8         reduce using rule 16 (TYPE -> type_u16 .)
    type_i64        reduce using rule 16 (TYPE -> type_u16 .)
    type_i32        reduce using rule 16 (TYPE -> type_u16 .)
    type_i16        reduce using rule 16 (TYPE -> type_u16 .)
    type_i8         reduce using rule 16 (TYPE -> type_u16 .)
    type_f32        reduce using rule 16 (TYPE -> type_u16 .)
    type_f64        reduce using rule 16 (TYPE -> type_u16 .)
    type_str        reduce using rule 16 (TYPE -> type_u16 .)
    type_list       reduce using rule 16 (TYPE -> type_u16 .)
    type_tuple      reduce using rule 16 (TYPE -> type_u16 .)
    type_array      reduce using rule 16 (TYPE -> type_u16 .)
    type_vector     reduce using rule 16 (TYPE -> type_u16 .)
    type_dict       reduce using rule 16 (TYPE -> type_u16 .)
    type_generator  reduce using rule 16 (TYPE -> type_u16 .)
    type_linked_list reduce using rule 16 (TYPE -> type_u16 .)
    type_doubly_linked_list reduce using rule 16 (TYPE -> type_u16 .)
    type_deque      reduce using rule 16 (TYPE -> type_u16 .)
    type_heap       reduce using rule 16 (TYPE -> type_u16 .)
    type_fibonacci_heap reduce using rule 16 (TYPE -> type_u16 .)
    type_tree       reduce using rule 16 (TYPE -> type_u16 .)
    type_trie       reduce using rule 16 (TYPE -> type_u16 .)
    type_stack      reduce using rule 16 (TYPE -> type_u16 .)
    type_queue      reduce using rule 16 (TYPE -> type_u16 .)
    type_binary_search_tree reduce using rule 16 (TYPE -> type_u16 .)
    type_bitset     reduce using rule 16 (TYPE -> type_u16 .)
    type_set        reduce using rule 16 (TYPE -> type_u16 .)
    type_map        reduce using rule 16 (TYPE -> type_u16 .)
    type_range      reduce using rule 16 (TYPE -> type_u16 .)
    type_bad_struct reduce using rule 16 (TYPE -> type_u16 .)
    type_bad_struct2 reduce using rule 16 (TYPE -> type_u16 .)
    lambda          reduce using rule 16 (TYPE -> type_u16 .)
    NEWLINE         reduce using rule 16 (TYPE -> type_u16 .)
    $end            reduce using rule 16 (TYPE -> type_u16 .)
    operator_inner  reduce using rule 16 (TYPE -> type_u16 .)
    }               reduce using rule 16 (TYPE -> type_u16 .)
    )               reduce using rule 16 (TYPE -> type_u16 .)
    {               reduce using rule 16 (TYPE -> type_u16 .)
    ]               reduce using rule 16 (TYPE -> type_u16 .)
    :               reduce using rule 16 (TYPE -> type_u16 .)
    ,               reduce using rule 16 (TYPE -> type_u16 .)

  ! (               [ reduce using rule 16 (TYPE -> type_u16 .) ]


state 61

    (152) return_val -> type_u8 . ( arguments )
    (17) TYPE -> type_u8 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 172
    VAR             reduce using rule 17 (TYPE -> type_u8 .)
    operator_add    reduce using rule 17 (TYPE -> type_u8 .)
    operator_sub    reduce using rule 17 (TYPE -> type_u8 .)
    operator_mul    reduce using rule 17 (TYPE -> type_u8 .)
    operator_div    reduce using rule 17 (TYPE -> type_u8 .)
    operator_trudiv reduce using rule 17 (TYPE -> type_u8 .)
    operator_pow    reduce using rule 17 (TYPE -> type_u8 .)
    operator_join   reduce using rule 17 (TYPE -> type_u8 .)
    operator_split  reduce using rule 17 (TYPE -> type_u8 .)
    operator_scan   reduce using rule 17 (TYPE -> type_u8 .)
    operator_reduc  reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitand reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitor  reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitxor reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitshiftleft reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitshiftright reduce using rule 17 (TYPE -> type_u8 .)
    operator_and    reduce using rule 17 (TYPE -> type_u8 .)
    operator_or     reduce using rule 17 (TYPE -> type_u8 .)
    operator_xor    reduce using rule 17 (TYPE -> type_u8 .)
    operator_contains reduce using rule 17 (TYPE -> type_u8 .)
    operator_incr   reduce using rule 17 (TYPE -> type_u8 .)
    operator_decr   reduce using rule 17 (TYPE -> type_u8 .)
    operator_outer  reduce using rule 17 (TYPE -> type_u8 .)
    operator_rotate reduce using rule 17 (TYPE -> type_u8 .)
    operator_apply  reduce using rule 17 (TYPE -> type_u8 .)
    operator_compose reduce using rule 17 (TYPE -> type_u8 .)
    operator_over   reduce using rule 17 (TYPE -> type_u8 .)
    operator_map    reduce using rule 17 (TYPE -> type_u8 .)
    operator_less_than reduce using rule 17 (TYPE -> type_u8 .)
    operator_less_than_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_greater_than reduce using rule 17 (TYPE -> type_u8 .)
    operator_greater_than_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_not_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_smallest reduce using rule 17 (TYPE -> type_u8 .)
    operator_greatest reduce using rule 17 (TYPE -> type_u8 .)
    operator_goodname reduce using rule 17 (TYPE -> type_u8 .)
    [               reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitnot reduce using rule 17 (TYPE -> type_u8 .)
    operator_not    reduce using rule 17 (TYPE -> type_u8 .)
    operator_reverse reduce using rule 17 (TYPE -> type_u8 .)
    operator_sorted_incr reduce using rule 17 (TYPE -> type_u8 .)
    operator_sorted_decr reduce using rule 17 (TYPE -> type_u8 .)
    operator_s_combinator reduce using rule 17 (TYPE -> type_u8 .)
    operator_s2_combinator reduce using rule 17 (TYPE -> type_u8 .)
    operator_goodname2 reduce using rule 17 (TYPE -> type_u8 .)
    FLOAT           reduce using rule 17 (TYPE -> type_u8 .)
    NUM             reduce using rule 17 (TYPE -> type_u8 .)
    STRING_3SQ      reduce using rule 17 (TYPE -> type_u8 .)
    STRING_3DQ      reduce using rule 17 (TYPE -> type_u8 .)
    STRING_SQ       reduce using rule 17 (TYPE -> type_u8 .)
    STRING_DQ       reduce using rule 17 (TYPE -> type_u8 .)
    true            reduce using rule 17 (TYPE -> type_u8 .)
    Null            reduce using rule 17 (TYPE -> type_u8 .)
    false           reduce using rule 17 (TYPE -> type_u8 .)
    type_type       reduce using rule 17 (TYPE -> type_u8 .)
    type_num        reduce using rule 17 (TYPE -> type_u8 .)
    type_bool       reduce using rule 17 (TYPE -> type_u8 .)
    type_any        reduce using rule 17 (TYPE -> type_u8 .)
    type_u64        reduce using rule 17 (TYPE -> type_u8 .)
    type_u32        reduce using rule 17 (TYPE -> type_u8 .)
    type_u16        reduce using rule 17 (TYPE -> type_u8 .)
    type_u8         reduce using rule 17 (TYPE -> type_u8 .)
    type_i64        reduce using rule 17 (TYPE -> type_u8 .)
    type_i32        reduce using rule 17 (TYPE -> type_u8 .)
    type_i16        reduce using rule 17 (TYPE -> type_u8 .)
    type_i8         reduce using rule 17 (TYPE -> type_u8 .)
    type_f32        reduce using rule 17 (TYPE -> type_u8 .)
    type_f64        reduce using rule 17 (TYPE -> type_u8 .)
    type_str        reduce using rule 17 (TYPE -> type_u8 .)
    type_list       reduce using rule 17 (TYPE -> type_u8 .)
    type_tuple      reduce using rule 17 (TYPE -> type_u8 .)
    type_array      reduce using rule 17 (TYPE -> type_u8 .)
    type_vector     reduce using rule 17 (TYPE -> type_u8 .)
    type_dict       reduce using rule 17 (TYPE -> type_u8 .)
    type_generator  reduce using rule 17 (TYPE -> type_u8 .)
    type_linked_list reduce using rule 17 (TYPE -> type_u8 .)
    type_doubly_linked_list reduce using rule 17 (TYPE -> type_u8 .)
    type_deque      reduce using rule 17 (TYPE -> type_u8 .)
    type_heap       reduce using rule 17 (TYPE -> type_u8 .)
    type_fibonacci_heap reduce using rule 17 (TYPE -> type_u8 .)
    type_tree       reduce using rule 17 (TYPE -> type_u8 .)
    type_trie       reduce using rule 17 (TYPE -> type_u8 .)
    type_stack      reduce using rule 17 (TYPE -> type_u8 .)
    type_queue      reduce using rule 17 (TYPE -> type_u8 .)
    type_binary_search_tree reduce using rule 17 (TYPE -> type_u8 .)
    type_bitset     reduce using rule 17 (TYPE -> type_u8 .)
    type_set        reduce using rule 17 (TYPE -> type_u8 .)
    type_map        reduce using rule 17 (TYPE -> type_u8 .)
    type_range      reduce using rule 17 (TYPE -> type_u8 .)
    type_bad_struct reduce using rule 17 (TYPE -> type_u8 .)
    type_bad_struct2 reduce using rule 17 (TYPE -> type_u8 .)
    lambda          reduce using rule 17 (TYPE -> type_u8 .)
    NEWLINE         reduce using rule 17 (TYPE -> type_u8 .)
    $end            reduce using rule 17 (TYPE -> type_u8 .)
    operator_inner  reduce using rule 17 (TYPE -> type_u8 .)
    }               reduce using rule 17 (TYPE -> type_u8 .)
    )               reduce using rule 17 (TYPE -> type_u8 .)
    {               reduce using rule 17 (TYPE -> type_u8 .)
    ]               reduce using rule 17 (TYPE -> type_u8 .)
    :               reduce using rule 17 (TYPE -> type_u8 .)
    ,               reduce using rule 17 (TYPE -> type_u8 .)

  ! (               [ reduce using rule 17 (TYPE -> type_u8 .) ]


state 62

    (153) return_val -> type_i64 . ( arguments )
    (18) TYPE -> type_i64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 173
    VAR             reduce using rule 18 (TYPE -> type_i64 .)
    operator_add    reduce using rule 18 (TYPE -> type_i64 .)
    operator_sub    reduce using rule 18 (TYPE -> type_i64 .)
    operator_mul    reduce using rule 18 (TYPE -> type_i64 .)
    operator_div    reduce using rule 18 (TYPE -> type_i64 .)
    operator_trudiv reduce using rule 18 (TYPE -> type_i64 .)
    operator_pow    reduce using rule 18 (TYPE -> type_i64 .)
    operator_join   reduce using rule 18 (TYPE -> type_i64 .)
    operator_split  reduce using rule 18 (TYPE -> type_i64 .)
    operator_scan   reduce using rule 18 (TYPE -> type_i64 .)
    operator_reduc  reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitand reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitor  reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitxor reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitshiftleft reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitshiftright reduce using rule 18 (TYPE -> type_i64 .)
    operator_and    reduce using rule 18 (TYPE -> type_i64 .)
    operator_or     reduce using rule 18 (TYPE -> type_i64 .)
    operator_xor    reduce using rule 18 (TYPE -> type_i64 .)
    operator_contains reduce using rule 18 (TYPE -> type_i64 .)
    operator_incr   reduce using rule 18 (TYPE -> type_i64 .)
    operator_decr   reduce using rule 18 (TYPE -> type_i64 .)
    operator_outer  reduce using rule 18 (TYPE -> type_i64 .)
    operator_rotate reduce using rule 18 (TYPE -> type_i64 .)
    operator_apply  reduce using rule 18 (TYPE -> type_i64 .)
    operator_compose reduce using rule 18 (TYPE -> type_i64 .)
    operator_over   reduce using rule 18 (TYPE -> type_i64 .)
    operator_map    reduce using rule 18 (TYPE -> type_i64 .)
    operator_less_than reduce using rule 18 (TYPE -> type_i64 .)
    operator_less_than_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_greater_than reduce using rule 18 (TYPE -> type_i64 .)
    operator_greater_than_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_not_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_smallest reduce using rule 18 (TYPE -> type_i64 .)
    operator_greatest reduce using rule 18 (TYPE -> type_i64 .)
    operator_goodname reduce using rule 18 (TYPE -> type_i64 .)
    [               reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitnot reduce using rule 18 (TYPE -> type_i64 .)
    operator_not    reduce using rule 18 (TYPE -> type_i64 .)
    operator_reverse reduce using rule 18 (TYPE -> type_i64 .)
    operator_sorted_incr reduce using rule 18 (TYPE -> type_i64 .)
    operator_sorted_decr reduce using rule 18 (TYPE -> type_i64 .)
    operator_s_combinator reduce using rule 18 (TYPE -> type_i64 .)
    operator_s2_combinator reduce using rule 18 (TYPE -> type_i64 .)
    operator_goodname2 reduce using rule 18 (TYPE -> type_i64 .)
    FLOAT           reduce using rule 18 (TYPE -> type_i64 .)
    NUM             reduce using rule 18 (TYPE -> type_i64 .)
    STRING_3SQ      reduce using rule 18 (TYPE -> type_i64 .)
    STRING_3DQ      reduce using rule 18 (TYPE -> type_i64 .)
    STRING_SQ       reduce using rule 18 (TYPE -> type_i64 .)
    STRING_DQ       reduce using rule 18 (TYPE -> type_i64 .)
    true            reduce using rule 18 (TYPE -> type_i64 .)
    Null            reduce using rule 18 (TYPE -> type_i64 .)
    false           reduce using rule 18 (TYPE -> type_i64 .)
    type_type       reduce using rule 18 (TYPE -> type_i64 .)
    type_num        reduce using rule 18 (TYPE -> type_i64 .)
    type_bool       reduce using rule 18 (TYPE -> type_i64 .)
    type_any        reduce using rule 18 (TYPE -> type_i64 .)
    type_u64        reduce using rule 18 (TYPE -> type_i64 .)
    type_u32        reduce using rule 18 (TYPE -> type_i64 .)
    type_u16        reduce using rule 18 (TYPE -> type_i64 .)
    type_u8         reduce using rule 18 (TYPE -> type_i64 .)
    type_i64        reduce using rule 18 (TYPE -> type_i64 .)
    type_i32        reduce using rule 18 (TYPE -> type_i64 .)
    type_i16        reduce using rule 18 (TYPE -> type_i64 .)
    type_i8         reduce using rule 18 (TYPE -> type_i64 .)
    type_f32        reduce using rule 18 (TYPE -> type_i64 .)
    type_f64        reduce using rule 18 (TYPE -> type_i64 .)
    type_str        reduce using rule 18 (TYPE -> type_i64 .)
    type_list       reduce using rule 18 (TYPE -> type_i64 .)
    type_tuple      reduce using rule 18 (TYPE -> type_i64 .)
    type_array      reduce using rule 18 (TYPE -> type_i64 .)
    type_vector     reduce using rule 18 (TYPE -> type_i64 .)
    type_dict       reduce using rule 18 (TYPE -> type_i64 .)
    type_generator  reduce using rule 18 (TYPE -> type_i64 .)
    type_linked_list reduce using rule 18 (TYPE -> type_i64 .)
    type_doubly_linked_list reduce using rule 18 (TYPE -> type_i64 .)
    type_deque      reduce using rule 18 (TYPE -> type_i64 .)
    type_heap       reduce using rule 18 (TYPE -> type_i64 .)
    type_fibonacci_heap reduce using rule 18 (TYPE -> type_i64 .)
    type_tree       reduce using rule 18 (TYPE -> type_i64 .)
    type_trie       reduce using rule 18 (TYPE -> type_i64 .)
    type_stack      reduce using rule 18 (TYPE -> type_i64 .)
    type_queue      reduce using rule 18 (TYPE -> type_i64 .)
    type_binary_search_tree reduce using rule 18 (TYPE -> type_i64 .)
    type_bitset     reduce using rule 18 (TYPE -> type_i64 .)
    type_set        reduce using rule 18 (TYPE -> type_i64 .)
    type_map        reduce using rule 18 (TYPE -> type_i64 .)
    type_range      reduce using rule 18 (TYPE -> type_i64 .)
    type_bad_struct reduce using rule 18 (TYPE -> type_i64 .)
    type_bad_struct2 reduce using rule 18 (TYPE -> type_i64 .)
    lambda          reduce using rule 18 (TYPE -> type_i64 .)
    NEWLINE         reduce using rule 18 (TYPE -> type_i64 .)
    $end            reduce using rule 18 (TYPE -> type_i64 .)
    operator_inner  reduce using rule 18 (TYPE -> type_i64 .)
    }               reduce using rule 18 (TYPE -> type_i64 .)
    )               reduce using rule 18 (TYPE -> type_i64 .)
    {               reduce using rule 18 (TYPE -> type_i64 .)
    ]               reduce using rule 18 (TYPE -> type_i64 .)
    :               reduce using rule 18 (TYPE -> type_i64 .)
    ,               reduce using rule 18 (TYPE -> type_i64 .)

  ! (               [ reduce using rule 18 (TYPE -> type_i64 .) ]


state 63

    (154) return_val -> type_i32 . ( arguments )
    (19) TYPE -> type_i32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 174
    VAR             reduce using rule 19 (TYPE -> type_i32 .)
    operator_add    reduce using rule 19 (TYPE -> type_i32 .)
    operator_sub    reduce using rule 19 (TYPE -> type_i32 .)
    operator_mul    reduce using rule 19 (TYPE -> type_i32 .)
    operator_div    reduce using rule 19 (TYPE -> type_i32 .)
    operator_trudiv reduce using rule 19 (TYPE -> type_i32 .)
    operator_pow    reduce using rule 19 (TYPE -> type_i32 .)
    operator_join   reduce using rule 19 (TYPE -> type_i32 .)
    operator_split  reduce using rule 19 (TYPE -> type_i32 .)
    operator_scan   reduce using rule 19 (TYPE -> type_i32 .)
    operator_reduc  reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitand reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitor  reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitxor reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitshiftleft reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitshiftright reduce using rule 19 (TYPE -> type_i32 .)
    operator_and    reduce using rule 19 (TYPE -> type_i32 .)
    operator_or     reduce using rule 19 (TYPE -> type_i32 .)
    operator_xor    reduce using rule 19 (TYPE -> type_i32 .)
    operator_contains reduce using rule 19 (TYPE -> type_i32 .)
    operator_incr   reduce using rule 19 (TYPE -> type_i32 .)
    operator_decr   reduce using rule 19 (TYPE -> type_i32 .)
    operator_outer  reduce using rule 19 (TYPE -> type_i32 .)
    operator_rotate reduce using rule 19 (TYPE -> type_i32 .)
    operator_apply  reduce using rule 19 (TYPE -> type_i32 .)
    operator_compose reduce using rule 19 (TYPE -> type_i32 .)
    operator_over   reduce using rule 19 (TYPE -> type_i32 .)
    operator_map    reduce using rule 19 (TYPE -> type_i32 .)
    operator_less_than reduce using rule 19 (TYPE -> type_i32 .)
    operator_less_than_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_greater_than reduce using rule 19 (TYPE -> type_i32 .)
    operator_greater_than_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_not_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_smallest reduce using rule 19 (TYPE -> type_i32 .)
    operator_greatest reduce using rule 19 (TYPE -> type_i32 .)
    operator_goodname reduce using rule 19 (TYPE -> type_i32 .)
    [               reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitnot reduce using rule 19 (TYPE -> type_i32 .)
    operator_not    reduce using rule 19 (TYPE -> type_i32 .)
    operator_reverse reduce using rule 19 (TYPE -> type_i32 .)
    operator_sorted_incr reduce using rule 19 (TYPE -> type_i32 .)
    operator_sorted_decr reduce using rule 19 (TYPE -> type_i32 .)
    operator_s_combinator reduce using rule 19 (TYPE -> type_i32 .)
    operator_s2_combinator reduce using rule 19 (TYPE -> type_i32 .)
    operator_goodname2 reduce using rule 19 (TYPE -> type_i32 .)
    FLOAT           reduce using rule 19 (TYPE -> type_i32 .)
    NUM             reduce using rule 19 (TYPE -> type_i32 .)
    STRING_3SQ      reduce using rule 19 (TYPE -> type_i32 .)
    STRING_3DQ      reduce using rule 19 (TYPE -> type_i32 .)
    STRING_SQ       reduce using rule 19 (TYPE -> type_i32 .)
    STRING_DQ       reduce using rule 19 (TYPE -> type_i32 .)
    true            reduce using rule 19 (TYPE -> type_i32 .)
    Null            reduce using rule 19 (TYPE -> type_i32 .)
    false           reduce using rule 19 (TYPE -> type_i32 .)
    type_type       reduce using rule 19 (TYPE -> type_i32 .)
    type_num        reduce using rule 19 (TYPE -> type_i32 .)
    type_bool       reduce using rule 19 (TYPE -> type_i32 .)
    type_any        reduce using rule 19 (TYPE -> type_i32 .)
    type_u64        reduce using rule 19 (TYPE -> type_i32 .)
    type_u32        reduce using rule 19 (TYPE -> type_i32 .)
    type_u16        reduce using rule 19 (TYPE -> type_i32 .)
    type_u8         reduce using rule 19 (TYPE -> type_i32 .)
    type_i64        reduce using rule 19 (TYPE -> type_i32 .)
    type_i32        reduce using rule 19 (TYPE -> type_i32 .)
    type_i16        reduce using rule 19 (TYPE -> type_i32 .)
    type_i8         reduce using rule 19 (TYPE -> type_i32 .)
    type_f32        reduce using rule 19 (TYPE -> type_i32 .)
    type_f64        reduce using rule 19 (TYPE -> type_i32 .)
    type_str        reduce using rule 19 (TYPE -> type_i32 .)
    type_list       reduce using rule 19 (TYPE -> type_i32 .)
    type_tuple      reduce using rule 19 (TYPE -> type_i32 .)
    type_array      reduce using rule 19 (TYPE -> type_i32 .)
    type_vector     reduce using rule 19 (TYPE -> type_i32 .)
    type_dict       reduce using rule 19 (TYPE -> type_i32 .)
    type_generator  reduce using rule 19 (TYPE -> type_i32 .)
    type_linked_list reduce using rule 19 (TYPE -> type_i32 .)
    type_doubly_linked_list reduce using rule 19 (TYPE -> type_i32 .)
    type_deque      reduce using rule 19 (TYPE -> type_i32 .)
    type_heap       reduce using rule 19 (TYPE -> type_i32 .)
    type_fibonacci_heap reduce using rule 19 (TYPE -> type_i32 .)
    type_tree       reduce using rule 19 (TYPE -> type_i32 .)
    type_trie       reduce using rule 19 (TYPE -> type_i32 .)
    type_stack      reduce using rule 19 (TYPE -> type_i32 .)
    type_queue      reduce using rule 19 (TYPE -> type_i32 .)
    type_binary_search_tree reduce using rule 19 (TYPE -> type_i32 .)
    type_bitset     reduce using rule 19 (TYPE -> type_i32 .)
    type_set        reduce using rule 19 (TYPE -> type_i32 .)
    type_map        reduce using rule 19 (TYPE -> type_i32 .)
    type_range      reduce using rule 19 (TYPE -> type_i32 .)
    type_bad_struct reduce using rule 19 (TYPE -> type_i32 .)
    type_bad_struct2 reduce using rule 19 (TYPE -> type_i32 .)
    lambda          reduce using rule 19 (TYPE -> type_i32 .)
    NEWLINE         reduce using rule 19 (TYPE -> type_i32 .)
    $end            reduce using rule 19 (TYPE -> type_i32 .)
    operator_inner  reduce using rule 19 (TYPE -> type_i32 .)
    }               reduce using rule 19 (TYPE -> type_i32 .)
    )               reduce using rule 19 (TYPE -> type_i32 .)
    {               reduce using rule 19 (TYPE -> type_i32 .)
    ]               reduce using rule 19 (TYPE -> type_i32 .)
    :               reduce using rule 19 (TYPE -> type_i32 .)
    ,               reduce using rule 19 (TYPE -> type_i32 .)

  ! (               [ reduce using rule 19 (TYPE -> type_i32 .) ]


state 64

    (155) return_val -> type_i16 . ( arguments )
    (20) TYPE -> type_i16 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 175
    VAR             reduce using rule 20 (TYPE -> type_i16 .)
    operator_add    reduce using rule 20 (TYPE -> type_i16 .)
    operator_sub    reduce using rule 20 (TYPE -> type_i16 .)
    operator_mul    reduce using rule 20 (TYPE -> type_i16 .)
    operator_div    reduce using rule 20 (TYPE -> type_i16 .)
    operator_trudiv reduce using rule 20 (TYPE -> type_i16 .)
    operator_pow    reduce using rule 20 (TYPE -> type_i16 .)
    operator_join   reduce using rule 20 (TYPE -> type_i16 .)
    operator_split  reduce using rule 20 (TYPE -> type_i16 .)
    operator_scan   reduce using rule 20 (TYPE -> type_i16 .)
    operator_reduc  reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitand reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitor  reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitxor reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitshiftleft reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitshiftright reduce using rule 20 (TYPE -> type_i16 .)
    operator_and    reduce using rule 20 (TYPE -> type_i16 .)
    operator_or     reduce using rule 20 (TYPE -> type_i16 .)
    operator_xor    reduce using rule 20 (TYPE -> type_i16 .)
    operator_contains reduce using rule 20 (TYPE -> type_i16 .)
    operator_incr   reduce using rule 20 (TYPE -> type_i16 .)
    operator_decr   reduce using rule 20 (TYPE -> type_i16 .)
    operator_outer  reduce using rule 20 (TYPE -> type_i16 .)
    operator_rotate reduce using rule 20 (TYPE -> type_i16 .)
    operator_apply  reduce using rule 20 (TYPE -> type_i16 .)
    operator_compose reduce using rule 20 (TYPE -> type_i16 .)
    operator_over   reduce using rule 20 (TYPE -> type_i16 .)
    operator_map    reduce using rule 20 (TYPE -> type_i16 .)
    operator_less_than reduce using rule 20 (TYPE -> type_i16 .)
    operator_less_than_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_greater_than reduce using rule 20 (TYPE -> type_i16 .)
    operator_greater_than_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_not_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_smallest reduce using rule 20 (TYPE -> type_i16 .)
    operator_greatest reduce using rule 20 (TYPE -> type_i16 .)
    operator_goodname reduce using rule 20 (TYPE -> type_i16 .)
    [               reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitnot reduce using rule 20 (TYPE -> type_i16 .)
    operator_not    reduce using rule 20 (TYPE -> type_i16 .)
    operator_reverse reduce using rule 20 (TYPE -> type_i16 .)
    operator_sorted_incr reduce using rule 20 (TYPE -> type_i16 .)
    operator_sorted_decr reduce using rule 20 (TYPE -> type_i16 .)
    operator_s_combinator reduce using rule 20 (TYPE -> type_i16 .)
    operator_s2_combinator reduce using rule 20 (TYPE -> type_i16 .)
    operator_goodname2 reduce using rule 20 (TYPE -> type_i16 .)
    FLOAT           reduce using rule 20 (TYPE -> type_i16 .)
    NUM             reduce using rule 20 (TYPE -> type_i16 .)
    STRING_3SQ      reduce using rule 20 (TYPE -> type_i16 .)
    STRING_3DQ      reduce using rule 20 (TYPE -> type_i16 .)
    STRING_SQ       reduce using rule 20 (TYPE -> type_i16 .)
    STRING_DQ       reduce using rule 20 (TYPE -> type_i16 .)
    true            reduce using rule 20 (TYPE -> type_i16 .)
    Null            reduce using rule 20 (TYPE -> type_i16 .)
    false           reduce using rule 20 (TYPE -> type_i16 .)
    type_type       reduce using rule 20 (TYPE -> type_i16 .)
    type_num        reduce using rule 20 (TYPE -> type_i16 .)
    type_bool       reduce using rule 20 (TYPE -> type_i16 .)
    type_any        reduce using rule 20 (TYPE -> type_i16 .)
    type_u64        reduce using rule 20 (TYPE -> type_i16 .)
    type_u32        reduce using rule 20 (TYPE -> type_i16 .)
    type_u16        reduce using rule 20 (TYPE -> type_i16 .)
    type_u8         reduce using rule 20 (TYPE -> type_i16 .)
    type_i64        reduce using rule 20 (TYPE -> type_i16 .)
    type_i32        reduce using rule 20 (TYPE -> type_i16 .)
    type_i16        reduce using rule 20 (TYPE -> type_i16 .)
    type_i8         reduce using rule 20 (TYPE -> type_i16 .)
    type_f32        reduce using rule 20 (TYPE -> type_i16 .)
    type_f64        reduce using rule 20 (TYPE -> type_i16 .)
    type_str        reduce using rule 20 (TYPE -> type_i16 .)
    type_list       reduce using rule 20 (TYPE -> type_i16 .)
    type_tuple      reduce using rule 20 (TYPE -> type_i16 .)
    type_array      reduce using rule 20 (TYPE -> type_i16 .)
    type_vector     reduce using rule 20 (TYPE -> type_i16 .)
    type_dict       reduce using rule 20 (TYPE -> type_i16 .)
    type_generator  reduce using rule 20 (TYPE -> type_i16 .)
    type_linked_list reduce using rule 20 (TYPE -> type_i16 .)
    type_doubly_linked_list reduce using rule 20 (TYPE -> type_i16 .)
    type_deque      reduce using rule 20 (TYPE -> type_i16 .)
    type_heap       reduce using rule 20 (TYPE -> type_i16 .)
    type_fibonacci_heap reduce using rule 20 (TYPE -> type_i16 .)
    type_tree       reduce using rule 20 (TYPE -> type_i16 .)
    type_trie       reduce using rule 20 (TYPE -> type_i16 .)
    type_stack      reduce using rule 20 (TYPE -> type_i16 .)
    type_queue      reduce using rule 20 (TYPE -> type_i16 .)
    type_binary_search_tree reduce using rule 20 (TYPE -> type_i16 .)
    type_bitset     reduce using rule 20 (TYPE -> type_i16 .)
    type_set        reduce using rule 20 (TYPE -> type_i16 .)
    type_map        reduce using rule 20 (TYPE -> type_i16 .)
    type_range      reduce using rule 20 (TYPE -> type_i16 .)
    type_bad_struct reduce using rule 20 (TYPE -> type_i16 .)
    type_bad_struct2 reduce using rule 20 (TYPE -> type_i16 .)
    lambda          reduce using rule 20 (TYPE -> type_i16 .)
    NEWLINE         reduce using rule 20 (TYPE -> type_i16 .)
    $end            reduce using rule 20 (TYPE -> type_i16 .)
    operator_inner  reduce using rule 20 (TYPE -> type_i16 .)
    }               reduce using rule 20 (TYPE -> type_i16 .)
    )               reduce using rule 20 (TYPE -> type_i16 .)
    {               reduce using rule 20 (TYPE -> type_i16 .)
    ]               reduce using rule 20 (TYPE -> type_i16 .)
    :               reduce using rule 20 (TYPE -> type_i16 .)
    ,               reduce using rule 20 (TYPE -> type_i16 .)

  ! (               [ reduce using rule 20 (TYPE -> type_i16 .) ]


state 65

    (156) return_val -> type_i8 . ( arguments )
    (21) TYPE -> type_i8 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 176
    VAR             reduce using rule 21 (TYPE -> type_i8 .)
    operator_add    reduce using rule 21 (TYPE -> type_i8 .)
    operator_sub    reduce using rule 21 (TYPE -> type_i8 .)
    operator_mul    reduce using rule 21 (TYPE -> type_i8 .)
    operator_div    reduce using rule 21 (TYPE -> type_i8 .)
    operator_trudiv reduce using rule 21 (TYPE -> type_i8 .)
    operator_pow    reduce using rule 21 (TYPE -> type_i8 .)
    operator_join   reduce using rule 21 (TYPE -> type_i8 .)
    operator_split  reduce using rule 21 (TYPE -> type_i8 .)
    operator_scan   reduce using rule 21 (TYPE -> type_i8 .)
    operator_reduc  reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitand reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitor  reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitxor reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitshiftleft reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitshiftright reduce using rule 21 (TYPE -> type_i8 .)
    operator_and    reduce using rule 21 (TYPE -> type_i8 .)
    operator_or     reduce using rule 21 (TYPE -> type_i8 .)
    operator_xor    reduce using rule 21 (TYPE -> type_i8 .)
    operator_contains reduce using rule 21 (TYPE -> type_i8 .)
    operator_incr   reduce using rule 21 (TYPE -> type_i8 .)
    operator_decr   reduce using rule 21 (TYPE -> type_i8 .)
    operator_outer  reduce using rule 21 (TYPE -> type_i8 .)
    operator_rotate reduce using rule 21 (TYPE -> type_i8 .)
    operator_apply  reduce using rule 21 (TYPE -> type_i8 .)
    operator_compose reduce using rule 21 (TYPE -> type_i8 .)
    operator_over   reduce using rule 21 (TYPE -> type_i8 .)
    operator_map    reduce using rule 21 (TYPE -> type_i8 .)
    operator_less_than reduce using rule 21 (TYPE -> type_i8 .)
    operator_less_than_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_greater_than reduce using rule 21 (TYPE -> type_i8 .)
    operator_greater_than_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_not_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_smallest reduce using rule 21 (TYPE -> type_i8 .)
    operator_greatest reduce using rule 21 (TYPE -> type_i8 .)
    operator_goodname reduce using rule 21 (TYPE -> type_i8 .)
    [               reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitnot reduce using rule 21 (TYPE -> type_i8 .)
    operator_not    reduce using rule 21 (TYPE -> type_i8 .)
    operator_reverse reduce using rule 21 (TYPE -> type_i8 .)
    operator_sorted_incr reduce using rule 21 (TYPE -> type_i8 .)
    operator_sorted_decr reduce using rule 21 (TYPE -> type_i8 .)
    operator_s_combinator reduce using rule 21 (TYPE -> type_i8 .)
    operator_s2_combinator reduce using rule 21 (TYPE -> type_i8 .)
    operator_goodname2 reduce using rule 21 (TYPE -> type_i8 .)
    FLOAT           reduce using rule 21 (TYPE -> type_i8 .)
    NUM             reduce using rule 21 (TYPE -> type_i8 .)
    STRING_3SQ      reduce using rule 21 (TYPE -> type_i8 .)
    STRING_3DQ      reduce using rule 21 (TYPE -> type_i8 .)
    STRING_SQ       reduce using rule 21 (TYPE -> type_i8 .)
    STRING_DQ       reduce using rule 21 (TYPE -> type_i8 .)
    true            reduce using rule 21 (TYPE -> type_i8 .)
    Null            reduce using rule 21 (TYPE -> type_i8 .)
    false           reduce using rule 21 (TYPE -> type_i8 .)
    type_type       reduce using rule 21 (TYPE -> type_i8 .)
    type_num        reduce using rule 21 (TYPE -> type_i8 .)
    type_bool       reduce using rule 21 (TYPE -> type_i8 .)
    type_any        reduce using rule 21 (TYPE -> type_i8 .)
    type_u64        reduce using rule 21 (TYPE -> type_i8 .)
    type_u32        reduce using rule 21 (TYPE -> type_i8 .)
    type_u16        reduce using rule 21 (TYPE -> type_i8 .)
    type_u8         reduce using rule 21 (TYPE -> type_i8 .)
    type_i64        reduce using rule 21 (TYPE -> type_i8 .)
    type_i32        reduce using rule 21 (TYPE -> type_i8 .)
    type_i16        reduce using rule 21 (TYPE -> type_i8 .)
    type_i8         reduce using rule 21 (TYPE -> type_i8 .)
    type_f32        reduce using rule 21 (TYPE -> type_i8 .)
    type_f64        reduce using rule 21 (TYPE -> type_i8 .)
    type_str        reduce using rule 21 (TYPE -> type_i8 .)
    type_list       reduce using rule 21 (TYPE -> type_i8 .)
    type_tuple      reduce using rule 21 (TYPE -> type_i8 .)
    type_array      reduce using rule 21 (TYPE -> type_i8 .)
    type_vector     reduce using rule 21 (TYPE -> type_i8 .)
    type_dict       reduce using rule 21 (TYPE -> type_i8 .)
    type_generator  reduce using rule 21 (TYPE -> type_i8 .)
    type_linked_list reduce using rule 21 (TYPE -> type_i8 .)
    type_doubly_linked_list reduce using rule 21 (TYPE -> type_i8 .)
    type_deque      reduce using rule 21 (TYPE -> type_i8 .)
    type_heap       reduce using rule 21 (TYPE -> type_i8 .)
    type_fibonacci_heap reduce using rule 21 (TYPE -> type_i8 .)
    type_tree       reduce using rule 21 (TYPE -> type_i8 .)
    type_trie       reduce using rule 21 (TYPE -> type_i8 .)
    type_stack      reduce using rule 21 (TYPE -> type_i8 .)
    type_queue      reduce using rule 21 (TYPE -> type_i8 .)
    type_binary_search_tree reduce using rule 21 (TYPE -> type_i8 .)
    type_bitset     reduce using rule 21 (TYPE -> type_i8 .)
    type_set        reduce using rule 21 (TYPE -> type_i8 .)
    type_map        reduce using rule 21 (TYPE -> type_i8 .)
    type_range      reduce using rule 21 (TYPE -> type_i8 .)
    type_bad_struct reduce using rule 21 (TYPE -> type_i8 .)
    type_bad_struct2 reduce using rule 21 (TYPE -> type_i8 .)
    lambda          reduce using rule 21 (TYPE -> type_i8 .)
    NEWLINE         reduce using rule 21 (TYPE -> type_i8 .)
    $end            reduce using rule 21 (TYPE -> type_i8 .)
    operator_inner  reduce using rule 21 (TYPE -> type_i8 .)
    }               reduce using rule 21 (TYPE -> type_i8 .)
    )               reduce using rule 21 (TYPE -> type_i8 .)
    {               reduce using rule 21 (TYPE -> type_i8 .)
    ]               reduce using rule 21 (TYPE -> type_i8 .)
    :               reduce using rule 21 (TYPE -> type_i8 .)
    ,               reduce using rule 21 (TYPE -> type_i8 .)

  ! (               [ reduce using rule 21 (TYPE -> type_i8 .) ]


state 66

    (157) return_val -> type_f32 . ( arguments )
    (22) TYPE -> type_f32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 177
    VAR             reduce using rule 22 (TYPE -> type_f32 .)
    operator_add    reduce using rule 22 (TYPE -> type_f32 .)
    operator_sub    reduce using rule 22 (TYPE -> type_f32 .)
    operator_mul    reduce using rule 22 (TYPE -> type_f32 .)
    operator_div    reduce using rule 22 (TYPE -> type_f32 .)
    operator_trudiv reduce using rule 22 (TYPE -> type_f32 .)
    operator_pow    reduce using rule 22 (TYPE -> type_f32 .)
    operator_join   reduce using rule 22 (TYPE -> type_f32 .)
    operator_split  reduce using rule 22 (TYPE -> type_f32 .)
    operator_scan   reduce using rule 22 (TYPE -> type_f32 .)
    operator_reduc  reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitand reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitor  reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitxor reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitshiftleft reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitshiftright reduce using rule 22 (TYPE -> type_f32 .)
    operator_and    reduce using rule 22 (TYPE -> type_f32 .)
    operator_or     reduce using rule 22 (TYPE -> type_f32 .)
    operator_xor    reduce using rule 22 (TYPE -> type_f32 .)
    operator_contains reduce using rule 22 (TYPE -> type_f32 .)
    operator_incr   reduce using rule 22 (TYPE -> type_f32 .)
    operator_decr   reduce using rule 22 (TYPE -> type_f32 .)
    operator_outer  reduce using rule 22 (TYPE -> type_f32 .)
    operator_rotate reduce using rule 22 (TYPE -> type_f32 .)
    operator_apply  reduce using rule 22 (TYPE -> type_f32 .)
    operator_compose reduce using rule 22 (TYPE -> type_f32 .)
    operator_over   reduce using rule 22 (TYPE -> type_f32 .)
    operator_map    reduce using rule 22 (TYPE -> type_f32 .)
    operator_less_than reduce using rule 22 (TYPE -> type_f32 .)
    operator_less_than_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_greater_than reduce using rule 22 (TYPE -> type_f32 .)
    operator_greater_than_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_not_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_smallest reduce using rule 22 (TYPE -> type_f32 .)
    operator_greatest reduce using rule 22 (TYPE -> type_f32 .)
    operator_goodname reduce using rule 22 (TYPE -> type_f32 .)
    [               reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitnot reduce using rule 22 (TYPE -> type_f32 .)
    operator_not    reduce using rule 22 (TYPE -> type_f32 .)
    operator_reverse reduce using rule 22 (TYPE -> type_f32 .)
    operator_sorted_incr reduce using rule 22 (TYPE -> type_f32 .)
    operator_sorted_decr reduce using rule 22 (TYPE -> type_f32 .)
    operator_s_combinator reduce using rule 22 (TYPE -> type_f32 .)
    operator_s2_combinator reduce using rule 22 (TYPE -> type_f32 .)
    operator_goodname2 reduce using rule 22 (TYPE -> type_f32 .)
    FLOAT           reduce using rule 22 (TYPE -> type_f32 .)
    NUM             reduce using rule 22 (TYPE -> type_f32 .)
    STRING_3SQ      reduce using rule 22 (TYPE -> type_f32 .)
    STRING_3DQ      reduce using rule 22 (TYPE -> type_f32 .)
    STRING_SQ       reduce using rule 22 (TYPE -> type_f32 .)
    STRING_DQ       reduce using rule 22 (TYPE -> type_f32 .)
    true            reduce using rule 22 (TYPE -> type_f32 .)
    Null            reduce using rule 22 (TYPE -> type_f32 .)
    false           reduce using rule 22 (TYPE -> type_f32 .)
    type_type       reduce using rule 22 (TYPE -> type_f32 .)
    type_num        reduce using rule 22 (TYPE -> type_f32 .)
    type_bool       reduce using rule 22 (TYPE -> type_f32 .)
    type_any        reduce using rule 22 (TYPE -> type_f32 .)
    type_u64        reduce using rule 22 (TYPE -> type_f32 .)
    type_u32        reduce using rule 22 (TYPE -> type_f32 .)
    type_u16        reduce using rule 22 (TYPE -> type_f32 .)
    type_u8         reduce using rule 22 (TYPE -> type_f32 .)
    type_i64        reduce using rule 22 (TYPE -> type_f32 .)
    type_i32        reduce using rule 22 (TYPE -> type_f32 .)
    type_i16        reduce using rule 22 (TYPE -> type_f32 .)
    type_i8         reduce using rule 22 (TYPE -> type_f32 .)
    type_f32        reduce using rule 22 (TYPE -> type_f32 .)
    type_f64        reduce using rule 22 (TYPE -> type_f32 .)
    type_str        reduce using rule 22 (TYPE -> type_f32 .)
    type_list       reduce using rule 22 (TYPE -> type_f32 .)
    type_tuple      reduce using rule 22 (TYPE -> type_f32 .)
    type_array      reduce using rule 22 (TYPE -> type_f32 .)
    type_vector     reduce using rule 22 (TYPE -> type_f32 .)
    type_dict       reduce using rule 22 (TYPE -> type_f32 .)
    type_generator  reduce using rule 22 (TYPE -> type_f32 .)
    type_linked_list reduce using rule 22 (TYPE -> type_f32 .)
    type_doubly_linked_list reduce using rule 22 (TYPE -> type_f32 .)
    type_deque      reduce using rule 22 (TYPE -> type_f32 .)
    type_heap       reduce using rule 22 (TYPE -> type_f32 .)
    type_fibonacci_heap reduce using rule 22 (TYPE -> type_f32 .)
    type_tree       reduce using rule 22 (TYPE -> type_f32 .)
    type_trie       reduce using rule 22 (TYPE -> type_f32 .)
    type_stack      reduce using rule 22 (TYPE -> type_f32 .)
    type_queue      reduce using rule 22 (TYPE -> type_f32 .)
    type_binary_search_tree reduce using rule 22 (TYPE -> type_f32 .)
    type_bitset     reduce using rule 22 (TYPE -> type_f32 .)
    type_set        reduce using rule 22 (TYPE -> type_f32 .)
    type_map        reduce using rule 22 (TYPE -> type_f32 .)
    type_range      reduce using rule 22 (TYPE -> type_f32 .)
    type_bad_struct reduce using rule 22 (TYPE -> type_f32 .)
    type_bad_struct2 reduce using rule 22 (TYPE -> type_f32 .)
    lambda          reduce using rule 22 (TYPE -> type_f32 .)
    NEWLINE         reduce using rule 22 (TYPE -> type_f32 .)
    $end            reduce using rule 22 (TYPE -> type_f32 .)
    operator_inner  reduce using rule 22 (TYPE -> type_f32 .)
    }               reduce using rule 22 (TYPE -> type_f32 .)
    )               reduce using rule 22 (TYPE -> type_f32 .)
    {               reduce using rule 22 (TYPE -> type_f32 .)
    ]               reduce using rule 22 (TYPE -> type_f32 .)
    :               reduce using rule 22 (TYPE -> type_f32 .)
    ,               reduce using rule 22 (TYPE -> type_f32 .)

  ! (               [ reduce using rule 22 (TYPE -> type_f32 .) ]


state 67

    (158) return_val -> type_f64 . ( arguments )
    (23) TYPE -> type_f64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 178
    VAR             reduce using rule 23 (TYPE -> type_f64 .)
    operator_add    reduce using rule 23 (TYPE -> type_f64 .)
    operator_sub    reduce using rule 23 (TYPE -> type_f64 .)
    operator_mul    reduce using rule 23 (TYPE -> type_f64 .)
    operator_div    reduce using rule 23 (TYPE -> type_f64 .)
    operator_trudiv reduce using rule 23 (TYPE -> type_f64 .)
    operator_pow    reduce using rule 23 (TYPE -> type_f64 .)
    operator_join   reduce using rule 23 (TYPE -> type_f64 .)
    operator_split  reduce using rule 23 (TYPE -> type_f64 .)
    operator_scan   reduce using rule 23 (TYPE -> type_f64 .)
    operator_reduc  reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitand reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitor  reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitxor reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitshiftleft reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitshiftright reduce using rule 23 (TYPE -> type_f64 .)
    operator_and    reduce using rule 23 (TYPE -> type_f64 .)
    operator_or     reduce using rule 23 (TYPE -> type_f64 .)
    operator_xor    reduce using rule 23 (TYPE -> type_f64 .)
    operator_contains reduce using rule 23 (TYPE -> type_f64 .)
    operator_incr   reduce using rule 23 (TYPE -> type_f64 .)
    operator_decr   reduce using rule 23 (TYPE -> type_f64 .)
    operator_outer  reduce using rule 23 (TYPE -> type_f64 .)
    operator_rotate reduce using rule 23 (TYPE -> type_f64 .)
    operator_apply  reduce using rule 23 (TYPE -> type_f64 .)
    operator_compose reduce using rule 23 (TYPE -> type_f64 .)
    operator_over   reduce using rule 23 (TYPE -> type_f64 .)
    operator_map    reduce using rule 23 (TYPE -> type_f64 .)
    operator_less_than reduce using rule 23 (TYPE -> type_f64 .)
    operator_less_than_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_greater_than reduce using rule 23 (TYPE -> type_f64 .)
    operator_greater_than_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_not_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_smallest reduce using rule 23 (TYPE -> type_f64 .)
    operator_greatest reduce using rule 23 (TYPE -> type_f64 .)
    operator_goodname reduce using rule 23 (TYPE -> type_f64 .)
    [               reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitnot reduce using rule 23 (TYPE -> type_f64 .)
    operator_not    reduce using rule 23 (TYPE -> type_f64 .)
    operator_reverse reduce using rule 23 (TYPE -> type_f64 .)
    operator_sorted_incr reduce using rule 23 (TYPE -> type_f64 .)
    operator_sorted_decr reduce using rule 23 (TYPE -> type_f64 .)
    operator_s_combinator reduce using rule 23 (TYPE -> type_f64 .)
    operator_s2_combinator reduce using rule 23 (TYPE -> type_f64 .)
    operator_goodname2 reduce using rule 23 (TYPE -> type_f64 .)
    FLOAT           reduce using rule 23 (TYPE -> type_f64 .)
    NUM             reduce using rule 23 (TYPE -> type_f64 .)
    STRING_3SQ      reduce using rule 23 (TYPE -> type_f64 .)
    STRING_3DQ      reduce using rule 23 (TYPE -> type_f64 .)
    STRING_SQ       reduce using rule 23 (TYPE -> type_f64 .)
    STRING_DQ       reduce using rule 23 (TYPE -> type_f64 .)
    true            reduce using rule 23 (TYPE -> type_f64 .)
    Null            reduce using rule 23 (TYPE -> type_f64 .)
    false           reduce using rule 23 (TYPE -> type_f64 .)
    type_type       reduce using rule 23 (TYPE -> type_f64 .)
    type_num        reduce using rule 23 (TYPE -> type_f64 .)
    type_bool       reduce using rule 23 (TYPE -> type_f64 .)
    type_any        reduce using rule 23 (TYPE -> type_f64 .)
    type_u64        reduce using rule 23 (TYPE -> type_f64 .)
    type_u32        reduce using rule 23 (TYPE -> type_f64 .)
    type_u16        reduce using rule 23 (TYPE -> type_f64 .)
    type_u8         reduce using rule 23 (TYPE -> type_f64 .)
    type_i64        reduce using rule 23 (TYPE -> type_f64 .)
    type_i32        reduce using rule 23 (TYPE -> type_f64 .)
    type_i16        reduce using rule 23 (TYPE -> type_f64 .)
    type_i8         reduce using rule 23 (TYPE -> type_f64 .)
    type_f32        reduce using rule 23 (TYPE -> type_f64 .)
    type_f64        reduce using rule 23 (TYPE -> type_f64 .)
    type_str        reduce using rule 23 (TYPE -> type_f64 .)
    type_list       reduce using rule 23 (TYPE -> type_f64 .)
    type_tuple      reduce using rule 23 (TYPE -> type_f64 .)
    type_array      reduce using rule 23 (TYPE -> type_f64 .)
    type_vector     reduce using rule 23 (TYPE -> type_f64 .)
    type_dict       reduce using rule 23 (TYPE -> type_f64 .)
    type_generator  reduce using rule 23 (TYPE -> type_f64 .)
    type_linked_list reduce using rule 23 (TYPE -> type_f64 .)
    type_doubly_linked_list reduce using rule 23 (TYPE -> type_f64 .)
    type_deque      reduce using rule 23 (TYPE -> type_f64 .)
    type_heap       reduce using rule 23 (TYPE -> type_f64 .)
    type_fibonacci_heap reduce using rule 23 (TYPE -> type_f64 .)
    type_tree       reduce using rule 23 (TYPE -> type_f64 .)
    type_trie       reduce using rule 23 (TYPE -> type_f64 .)
    type_stack      reduce using rule 23 (TYPE -> type_f64 .)
    type_queue      reduce using rule 23 (TYPE -> type_f64 .)
    type_binary_search_tree reduce using rule 23 (TYPE -> type_f64 .)
    type_bitset     reduce using rule 23 (TYPE -> type_f64 .)
    type_set        reduce using rule 23 (TYPE -> type_f64 .)
    type_map        reduce using rule 23 (TYPE -> type_f64 .)
    type_range      reduce using rule 23 (TYPE -> type_f64 .)
    type_bad_struct reduce using rule 23 (TYPE -> type_f64 .)
    type_bad_struct2 reduce using rule 23 (TYPE -> type_f64 .)
    lambda          reduce using rule 23 (TYPE -> type_f64 .)
    NEWLINE         reduce using rule 23 (TYPE -> type_f64 .)
    $end            reduce using rule 23 (TYPE -> type_f64 .)
    operator_inner  reduce using rule 23 (TYPE -> type_f64 .)
    }               reduce using rule 23 (TYPE -> type_f64 .)
    )               reduce using rule 23 (TYPE -> type_f64 .)
    {               reduce using rule 23 (TYPE -> type_f64 .)
    ]               reduce using rule 23 (TYPE -> type_f64 .)
    :               reduce using rule 23 (TYPE -> type_f64 .)
    ,               reduce using rule 23 (TYPE -> type_f64 .)

  ! (               [ reduce using rule 23 (TYPE -> type_f64 .) ]


state 68

    (159) return_val -> type_str . ( arguments )
    (24) TYPE -> type_str .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 179
    VAR             reduce using rule 24 (TYPE -> type_str .)
    operator_add    reduce using rule 24 (TYPE -> type_str .)
    operator_sub    reduce using rule 24 (TYPE -> type_str .)
    operator_mul    reduce using rule 24 (TYPE -> type_str .)
    operator_div    reduce using rule 24 (TYPE -> type_str .)
    operator_trudiv reduce using rule 24 (TYPE -> type_str .)
    operator_pow    reduce using rule 24 (TYPE -> type_str .)
    operator_join   reduce using rule 24 (TYPE -> type_str .)
    operator_split  reduce using rule 24 (TYPE -> type_str .)
    operator_scan   reduce using rule 24 (TYPE -> type_str .)
    operator_reduc  reduce using rule 24 (TYPE -> type_str .)
    operator_bitand reduce using rule 24 (TYPE -> type_str .)
    operator_bitor  reduce using rule 24 (TYPE -> type_str .)
    operator_bitxor reduce using rule 24 (TYPE -> type_str .)
    operator_bitshiftleft reduce using rule 24 (TYPE -> type_str .)
    operator_bitshiftright reduce using rule 24 (TYPE -> type_str .)
    operator_and    reduce using rule 24 (TYPE -> type_str .)
    operator_or     reduce using rule 24 (TYPE -> type_str .)
    operator_xor    reduce using rule 24 (TYPE -> type_str .)
    operator_contains reduce using rule 24 (TYPE -> type_str .)
    operator_incr   reduce using rule 24 (TYPE -> type_str .)
    operator_decr   reduce using rule 24 (TYPE -> type_str .)
    operator_outer  reduce using rule 24 (TYPE -> type_str .)
    operator_rotate reduce using rule 24 (TYPE -> type_str .)
    operator_apply  reduce using rule 24 (TYPE -> type_str .)
    operator_compose reduce using rule 24 (TYPE -> type_str .)
    operator_over   reduce using rule 24 (TYPE -> type_str .)
    operator_map    reduce using rule 24 (TYPE -> type_str .)
    operator_less_than reduce using rule 24 (TYPE -> type_str .)
    operator_less_than_equals reduce using rule 24 (TYPE -> type_str .)
    operator_greater_than reduce using rule 24 (TYPE -> type_str .)
    operator_greater_than_equals reduce using rule 24 (TYPE -> type_str .)
    operator_equals reduce using rule 24 (TYPE -> type_str .)
    operator_not_equals reduce using rule 24 (TYPE -> type_str .)
    operator_smallest reduce using rule 24 (TYPE -> type_str .)
    operator_greatest reduce using rule 24 (TYPE -> type_str .)
    operator_goodname reduce using rule 24 (TYPE -> type_str .)
    [               reduce using rule 24 (TYPE -> type_str .)
    operator_bitnot reduce using rule 24 (TYPE -> type_str .)
    operator_not    reduce using rule 24 (TYPE -> type_str .)
    operator_reverse reduce using rule 24 (TYPE -> type_str .)
    operator_sorted_incr reduce using rule 24 (TYPE -> type_str .)
    operator_sorted_decr reduce using rule 24 (TYPE -> type_str .)
    operator_s_combinator reduce using rule 24 (TYPE -> type_str .)
    operator_s2_combinator reduce using rule 24 (TYPE -> type_str .)
    operator_goodname2 reduce using rule 24 (TYPE -> type_str .)
    FLOAT           reduce using rule 24 (TYPE -> type_str .)
    NUM             reduce using rule 24 (TYPE -> type_str .)
    STRING_3SQ      reduce using rule 24 (TYPE -> type_str .)
    STRING_3DQ      reduce using rule 24 (TYPE -> type_str .)
    STRING_SQ       reduce using rule 24 (TYPE -> type_str .)
    STRING_DQ       reduce using rule 24 (TYPE -> type_str .)
    true            reduce using rule 24 (TYPE -> type_str .)
    Null            reduce using rule 24 (TYPE -> type_str .)
    false           reduce using rule 24 (TYPE -> type_str .)
    type_type       reduce using rule 24 (TYPE -> type_str .)
    type_num        reduce using rule 24 (TYPE -> type_str .)
    type_bool       reduce using rule 24 (TYPE -> type_str .)
    type_any        reduce using rule 24 (TYPE -> type_str .)
    type_u64        reduce using rule 24 (TYPE -> type_str .)
    type_u32        reduce using rule 24 (TYPE -> type_str .)
    type_u16        reduce using rule 24 (TYPE -> type_str .)
    type_u8         reduce using rule 24 (TYPE -> type_str .)
    type_i64        reduce using rule 24 (TYPE -> type_str .)
    type_i32        reduce using rule 24 (TYPE -> type_str .)
    type_i16        reduce using rule 24 (TYPE -> type_str .)
    type_i8         reduce using rule 24 (TYPE -> type_str .)
    type_f32        reduce using rule 24 (TYPE -> type_str .)
    type_f64        reduce using rule 24 (TYPE -> type_str .)
    type_str        reduce using rule 24 (TYPE -> type_str .)
    type_list       reduce using rule 24 (TYPE -> type_str .)
    type_tuple      reduce using rule 24 (TYPE -> type_str .)
    type_array      reduce using rule 24 (TYPE -> type_str .)
    type_vector     reduce using rule 24 (TYPE -> type_str .)
    type_dict       reduce using rule 24 (TYPE -> type_str .)
    type_generator  reduce using rule 24 (TYPE -> type_str .)
    type_linked_list reduce using rule 24 (TYPE -> type_str .)
    type_doubly_linked_list reduce using rule 24 (TYPE -> type_str .)
    type_deque      reduce using rule 24 (TYPE -> type_str .)
    type_heap       reduce using rule 24 (TYPE -> type_str .)
    type_fibonacci_heap reduce using rule 24 (TYPE -> type_str .)
    type_tree       reduce using rule 24 (TYPE -> type_str .)
    type_trie       reduce using rule 24 (TYPE -> type_str .)
    type_stack      reduce using rule 24 (TYPE -> type_str .)
    type_queue      reduce using rule 24 (TYPE -> type_str .)
    type_binary_search_tree reduce using rule 24 (TYPE -> type_str .)
    type_bitset     reduce using rule 24 (TYPE -> type_str .)
    type_set        reduce using rule 24 (TYPE -> type_str .)
    type_map        reduce using rule 24 (TYPE -> type_str .)
    type_range      reduce using rule 24 (TYPE -> type_str .)
    type_bad_struct reduce using rule 24 (TYPE -> type_str .)
    type_bad_struct2 reduce using rule 24 (TYPE -> type_str .)
    lambda          reduce using rule 24 (TYPE -> type_str .)
    NEWLINE         reduce using rule 24 (TYPE -> type_str .)
    $end            reduce using rule 24 (TYPE -> type_str .)
    operator_inner  reduce using rule 24 (TYPE -> type_str .)
    }               reduce using rule 24 (TYPE -> type_str .)
    )               reduce using rule 24 (TYPE -> type_str .)
    {               reduce using rule 24 (TYPE -> type_str .)
    ]               reduce using rule 24 (TYPE -> type_str .)
    :               reduce using rule 24 (TYPE -> type_str .)
    ,               reduce using rule 24 (TYPE -> type_str .)

  ! (               [ reduce using rule 24 (TYPE -> type_str .) ]


state 69

    (160) return_val -> type_list . ( arguments )
    (25) TYPE -> type_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 180
    VAR             reduce using rule 25 (TYPE -> type_list .)
    operator_add    reduce using rule 25 (TYPE -> type_list .)
    operator_sub    reduce using rule 25 (TYPE -> type_list .)
    operator_mul    reduce using rule 25 (TYPE -> type_list .)
    operator_div    reduce using rule 25 (TYPE -> type_list .)
    operator_trudiv reduce using rule 25 (TYPE -> type_list .)
    operator_pow    reduce using rule 25 (TYPE -> type_list .)
    operator_join   reduce using rule 25 (TYPE -> type_list .)
    operator_split  reduce using rule 25 (TYPE -> type_list .)
    operator_scan   reduce using rule 25 (TYPE -> type_list .)
    operator_reduc  reduce using rule 25 (TYPE -> type_list .)
    operator_bitand reduce using rule 25 (TYPE -> type_list .)
    operator_bitor  reduce using rule 25 (TYPE -> type_list .)
    operator_bitxor reduce using rule 25 (TYPE -> type_list .)
    operator_bitshiftleft reduce using rule 25 (TYPE -> type_list .)
    operator_bitshiftright reduce using rule 25 (TYPE -> type_list .)
    operator_and    reduce using rule 25 (TYPE -> type_list .)
    operator_or     reduce using rule 25 (TYPE -> type_list .)
    operator_xor    reduce using rule 25 (TYPE -> type_list .)
    operator_contains reduce using rule 25 (TYPE -> type_list .)
    operator_incr   reduce using rule 25 (TYPE -> type_list .)
    operator_decr   reduce using rule 25 (TYPE -> type_list .)
    operator_outer  reduce using rule 25 (TYPE -> type_list .)
    operator_rotate reduce using rule 25 (TYPE -> type_list .)
    operator_apply  reduce using rule 25 (TYPE -> type_list .)
    operator_compose reduce using rule 25 (TYPE -> type_list .)
    operator_over   reduce using rule 25 (TYPE -> type_list .)
    operator_map    reduce using rule 25 (TYPE -> type_list .)
    operator_less_than reduce using rule 25 (TYPE -> type_list .)
    operator_less_than_equals reduce using rule 25 (TYPE -> type_list .)
    operator_greater_than reduce using rule 25 (TYPE -> type_list .)
    operator_greater_than_equals reduce using rule 25 (TYPE -> type_list .)
    operator_equals reduce using rule 25 (TYPE -> type_list .)
    operator_not_equals reduce using rule 25 (TYPE -> type_list .)
    operator_smallest reduce using rule 25 (TYPE -> type_list .)
    operator_greatest reduce using rule 25 (TYPE -> type_list .)
    operator_goodname reduce using rule 25 (TYPE -> type_list .)
    [               reduce using rule 25 (TYPE -> type_list .)
    operator_bitnot reduce using rule 25 (TYPE -> type_list .)
    operator_not    reduce using rule 25 (TYPE -> type_list .)
    operator_reverse reduce using rule 25 (TYPE -> type_list .)
    operator_sorted_incr reduce using rule 25 (TYPE -> type_list .)
    operator_sorted_decr reduce using rule 25 (TYPE -> type_list .)
    operator_s_combinator reduce using rule 25 (TYPE -> type_list .)
    operator_s2_combinator reduce using rule 25 (TYPE -> type_list .)
    operator_goodname2 reduce using rule 25 (TYPE -> type_list .)
    FLOAT           reduce using rule 25 (TYPE -> type_list .)
    NUM             reduce using rule 25 (TYPE -> type_list .)
    STRING_3SQ      reduce using rule 25 (TYPE -> type_list .)
    STRING_3DQ      reduce using rule 25 (TYPE -> type_list .)
    STRING_SQ       reduce using rule 25 (TYPE -> type_list .)
    STRING_DQ       reduce using rule 25 (TYPE -> type_list .)
    true            reduce using rule 25 (TYPE -> type_list .)
    Null            reduce using rule 25 (TYPE -> type_list .)
    false           reduce using rule 25 (TYPE -> type_list .)
    type_type       reduce using rule 25 (TYPE -> type_list .)
    type_num        reduce using rule 25 (TYPE -> type_list .)
    type_bool       reduce using rule 25 (TYPE -> type_list .)
    type_any        reduce using rule 25 (TYPE -> type_list .)
    type_u64        reduce using rule 25 (TYPE -> type_list .)
    type_u32        reduce using rule 25 (TYPE -> type_list .)
    type_u16        reduce using rule 25 (TYPE -> type_list .)
    type_u8         reduce using rule 25 (TYPE -> type_list .)
    type_i64        reduce using rule 25 (TYPE -> type_list .)
    type_i32        reduce using rule 25 (TYPE -> type_list .)
    type_i16        reduce using rule 25 (TYPE -> type_list .)
    type_i8         reduce using rule 25 (TYPE -> type_list .)
    type_f32        reduce using rule 25 (TYPE -> type_list .)
    type_f64        reduce using rule 25 (TYPE -> type_list .)
    type_str        reduce using rule 25 (TYPE -> type_list .)
    type_list       reduce using rule 25 (TYPE -> type_list .)
    type_tuple      reduce using rule 25 (TYPE -> type_list .)
    type_array      reduce using rule 25 (TYPE -> type_list .)
    type_vector     reduce using rule 25 (TYPE -> type_list .)
    type_dict       reduce using rule 25 (TYPE -> type_list .)
    type_generator  reduce using rule 25 (TYPE -> type_list .)
    type_linked_list reduce using rule 25 (TYPE -> type_list .)
    type_doubly_linked_list reduce using rule 25 (TYPE -> type_list .)
    type_deque      reduce using rule 25 (TYPE -> type_list .)
    type_heap       reduce using rule 25 (TYPE -> type_list .)
    type_fibonacci_heap reduce using rule 25 (TYPE -> type_list .)
    type_tree       reduce using rule 25 (TYPE -> type_list .)
    type_trie       reduce using rule 25 (TYPE -> type_list .)
    type_stack      reduce using rule 25 (TYPE -> type_list .)
    type_queue      reduce using rule 25 (TYPE -> type_list .)
    type_binary_search_tree reduce using rule 25 (TYPE -> type_list .)
    type_bitset     reduce using rule 25 (TYPE -> type_list .)
    type_set        reduce using rule 25 (TYPE -> type_list .)
    type_map        reduce using rule 25 (TYPE -> type_list .)
    type_range      reduce using rule 25 (TYPE -> type_list .)
    type_bad_struct reduce using rule 25 (TYPE -> type_list .)
    type_bad_struct2 reduce using rule 25 (TYPE -> type_list .)
    lambda          reduce using rule 25 (TYPE -> type_list .)
    NEWLINE         reduce using rule 25 (TYPE -> type_list .)
    $end            reduce using rule 25 (TYPE -> type_list .)
    operator_inner  reduce using rule 25 (TYPE -> type_list .)
    }               reduce using rule 25 (TYPE -> type_list .)
    )               reduce using rule 25 (TYPE -> type_list .)
    {               reduce using rule 25 (TYPE -> type_list .)
    ]               reduce using rule 25 (TYPE -> type_list .)
    :               reduce using rule 25 (TYPE -> type_list .)
    ,               reduce using rule 25 (TYPE -> type_list .)

  ! (               [ reduce using rule 25 (TYPE -> type_list .) ]


state 70

    (161) return_val -> type_tuple . ( arguments )
    (26) TYPE -> type_tuple .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 181
    VAR             reduce using rule 26 (TYPE -> type_tuple .)
    operator_add    reduce using rule 26 (TYPE -> type_tuple .)
    operator_sub    reduce using rule 26 (TYPE -> type_tuple .)
    operator_mul    reduce using rule 26 (TYPE -> type_tuple .)
    operator_div    reduce using rule 26 (TYPE -> type_tuple .)
    operator_trudiv reduce using rule 26 (TYPE -> type_tuple .)
    operator_pow    reduce using rule 26 (TYPE -> type_tuple .)
    operator_join   reduce using rule 26 (TYPE -> type_tuple .)
    operator_split  reduce using rule 26 (TYPE -> type_tuple .)
    operator_scan   reduce using rule 26 (TYPE -> type_tuple .)
    operator_reduc  reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitand reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitor  reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitxor reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitshiftleft reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitshiftright reduce using rule 26 (TYPE -> type_tuple .)
    operator_and    reduce using rule 26 (TYPE -> type_tuple .)
    operator_or     reduce using rule 26 (TYPE -> type_tuple .)
    operator_xor    reduce using rule 26 (TYPE -> type_tuple .)
    operator_contains reduce using rule 26 (TYPE -> type_tuple .)
    operator_incr   reduce using rule 26 (TYPE -> type_tuple .)
    operator_decr   reduce using rule 26 (TYPE -> type_tuple .)
    operator_outer  reduce using rule 26 (TYPE -> type_tuple .)
    operator_rotate reduce using rule 26 (TYPE -> type_tuple .)
    operator_apply  reduce using rule 26 (TYPE -> type_tuple .)
    operator_compose reduce using rule 26 (TYPE -> type_tuple .)
    operator_over   reduce using rule 26 (TYPE -> type_tuple .)
    operator_map    reduce using rule 26 (TYPE -> type_tuple .)
    operator_less_than reduce using rule 26 (TYPE -> type_tuple .)
    operator_less_than_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_greater_than reduce using rule 26 (TYPE -> type_tuple .)
    operator_greater_than_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_not_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_smallest reduce using rule 26 (TYPE -> type_tuple .)
    operator_greatest reduce using rule 26 (TYPE -> type_tuple .)
    operator_goodname reduce using rule 26 (TYPE -> type_tuple .)
    [               reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitnot reduce using rule 26 (TYPE -> type_tuple .)
    operator_not    reduce using rule 26 (TYPE -> type_tuple .)
    operator_reverse reduce using rule 26 (TYPE -> type_tuple .)
    operator_sorted_incr reduce using rule 26 (TYPE -> type_tuple .)
    operator_sorted_decr reduce using rule 26 (TYPE -> type_tuple .)
    operator_s_combinator reduce using rule 26 (TYPE -> type_tuple .)
    operator_s2_combinator reduce using rule 26 (TYPE -> type_tuple .)
    operator_goodname2 reduce using rule 26 (TYPE -> type_tuple .)
    FLOAT           reduce using rule 26 (TYPE -> type_tuple .)
    NUM             reduce using rule 26 (TYPE -> type_tuple .)
    STRING_3SQ      reduce using rule 26 (TYPE -> type_tuple .)
    STRING_3DQ      reduce using rule 26 (TYPE -> type_tuple .)
    STRING_SQ       reduce using rule 26 (TYPE -> type_tuple .)
    STRING_DQ       reduce using rule 26 (TYPE -> type_tuple .)
    true            reduce using rule 26 (TYPE -> type_tuple .)
    Null            reduce using rule 26 (TYPE -> type_tuple .)
    false           reduce using rule 26 (TYPE -> type_tuple .)
    type_type       reduce using rule 26 (TYPE -> type_tuple .)
    type_num        reduce using rule 26 (TYPE -> type_tuple .)
    type_bool       reduce using rule 26 (TYPE -> type_tuple .)
    type_any        reduce using rule 26 (TYPE -> type_tuple .)
    type_u64        reduce using rule 26 (TYPE -> type_tuple .)
    type_u32        reduce using rule 26 (TYPE -> type_tuple .)
    type_u16        reduce using rule 26 (TYPE -> type_tuple .)
    type_u8         reduce using rule 26 (TYPE -> type_tuple .)
    type_i64        reduce using rule 26 (TYPE -> type_tuple .)
    type_i32        reduce using rule 26 (TYPE -> type_tuple .)
    type_i16        reduce using rule 26 (TYPE -> type_tuple .)
    type_i8         reduce using rule 26 (TYPE -> type_tuple .)
    type_f32        reduce using rule 26 (TYPE -> type_tuple .)
    type_f64        reduce using rule 26 (TYPE -> type_tuple .)
    type_str        reduce using rule 26 (TYPE -> type_tuple .)
    type_list       reduce using rule 26 (TYPE -> type_tuple .)
    type_tuple      reduce using rule 26 (TYPE -> type_tuple .)
    type_array      reduce using rule 26 (TYPE -> type_tuple .)
    type_vector     reduce using rule 26 (TYPE -> type_tuple .)
    type_dict       reduce using rule 26 (TYPE -> type_tuple .)
    type_generator  reduce using rule 26 (TYPE -> type_tuple .)
    type_linked_list reduce using rule 26 (TYPE -> type_tuple .)
    type_doubly_linked_list reduce using rule 26 (TYPE -> type_tuple .)
    type_deque      reduce using rule 26 (TYPE -> type_tuple .)
    type_heap       reduce using rule 26 (TYPE -> type_tuple .)
    type_fibonacci_heap reduce using rule 26 (TYPE -> type_tuple .)
    type_tree       reduce using rule 26 (TYPE -> type_tuple .)
    type_trie       reduce using rule 26 (TYPE -> type_tuple .)
    type_stack      reduce using rule 26 (TYPE -> type_tuple .)
    type_queue      reduce using rule 26 (TYPE -> type_tuple .)
    type_binary_search_tree reduce using rule 26 (TYPE -> type_tuple .)
    type_bitset     reduce using rule 26 (TYPE -> type_tuple .)
    type_set        reduce using rule 26 (TYPE -> type_tuple .)
    type_map        reduce using rule 26 (TYPE -> type_tuple .)
    type_range      reduce using rule 26 (TYPE -> type_tuple .)
    type_bad_struct reduce using rule 26 (TYPE -> type_tuple .)
    type_bad_struct2 reduce using rule 26 (TYPE -> type_tuple .)
    lambda          reduce using rule 26 (TYPE -> type_tuple .)
    NEWLINE         reduce using rule 26 (TYPE -> type_tuple .)
    $end            reduce using rule 26 (TYPE -> type_tuple .)
    operator_inner  reduce using rule 26 (TYPE -> type_tuple .)
    }               reduce using rule 26 (TYPE -> type_tuple .)
    )               reduce using rule 26 (TYPE -> type_tuple .)
    {               reduce using rule 26 (TYPE -> type_tuple .)
    ]               reduce using rule 26 (TYPE -> type_tuple .)
    :               reduce using rule 26 (TYPE -> type_tuple .)
    ,               reduce using rule 26 (TYPE -> type_tuple .)

  ! (               [ reduce using rule 26 (TYPE -> type_tuple .) ]


state 71

    (162) return_val -> type_array . ( arguments )
    (27) TYPE -> type_array .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 182
    VAR             reduce using rule 27 (TYPE -> type_array .)
    operator_add    reduce using rule 27 (TYPE -> type_array .)
    operator_sub    reduce using rule 27 (TYPE -> type_array .)
    operator_mul    reduce using rule 27 (TYPE -> type_array .)
    operator_div    reduce using rule 27 (TYPE -> type_array .)
    operator_trudiv reduce using rule 27 (TYPE -> type_array .)
    operator_pow    reduce using rule 27 (TYPE -> type_array .)
    operator_join   reduce using rule 27 (TYPE -> type_array .)
    operator_split  reduce using rule 27 (TYPE -> type_array .)
    operator_scan   reduce using rule 27 (TYPE -> type_array .)
    operator_reduc  reduce using rule 27 (TYPE -> type_array .)
    operator_bitand reduce using rule 27 (TYPE -> type_array .)
    operator_bitor  reduce using rule 27 (TYPE -> type_array .)
    operator_bitxor reduce using rule 27 (TYPE -> type_array .)
    operator_bitshiftleft reduce using rule 27 (TYPE -> type_array .)
    operator_bitshiftright reduce using rule 27 (TYPE -> type_array .)
    operator_and    reduce using rule 27 (TYPE -> type_array .)
    operator_or     reduce using rule 27 (TYPE -> type_array .)
    operator_xor    reduce using rule 27 (TYPE -> type_array .)
    operator_contains reduce using rule 27 (TYPE -> type_array .)
    operator_incr   reduce using rule 27 (TYPE -> type_array .)
    operator_decr   reduce using rule 27 (TYPE -> type_array .)
    operator_outer  reduce using rule 27 (TYPE -> type_array .)
    operator_rotate reduce using rule 27 (TYPE -> type_array .)
    operator_apply  reduce using rule 27 (TYPE -> type_array .)
    operator_compose reduce using rule 27 (TYPE -> type_array .)
    operator_over   reduce using rule 27 (TYPE -> type_array .)
    operator_map    reduce using rule 27 (TYPE -> type_array .)
    operator_less_than reduce using rule 27 (TYPE -> type_array .)
    operator_less_than_equals reduce using rule 27 (TYPE -> type_array .)
    operator_greater_than reduce using rule 27 (TYPE -> type_array .)
    operator_greater_than_equals reduce using rule 27 (TYPE -> type_array .)
    operator_equals reduce using rule 27 (TYPE -> type_array .)
    operator_not_equals reduce using rule 27 (TYPE -> type_array .)
    operator_smallest reduce using rule 27 (TYPE -> type_array .)
    operator_greatest reduce using rule 27 (TYPE -> type_array .)
    operator_goodname reduce using rule 27 (TYPE -> type_array .)
    [               reduce using rule 27 (TYPE -> type_array .)
    operator_bitnot reduce using rule 27 (TYPE -> type_array .)
    operator_not    reduce using rule 27 (TYPE -> type_array .)
    operator_reverse reduce using rule 27 (TYPE -> type_array .)
    operator_sorted_incr reduce using rule 27 (TYPE -> type_array .)
    operator_sorted_decr reduce using rule 27 (TYPE -> type_array .)
    operator_s_combinator reduce using rule 27 (TYPE -> type_array .)
    operator_s2_combinator reduce using rule 27 (TYPE -> type_array .)
    operator_goodname2 reduce using rule 27 (TYPE -> type_array .)
    FLOAT           reduce using rule 27 (TYPE -> type_array .)
    NUM             reduce using rule 27 (TYPE -> type_array .)
    STRING_3SQ      reduce using rule 27 (TYPE -> type_array .)
    STRING_3DQ      reduce using rule 27 (TYPE -> type_array .)
    STRING_SQ       reduce using rule 27 (TYPE -> type_array .)
    STRING_DQ       reduce using rule 27 (TYPE -> type_array .)
    true            reduce using rule 27 (TYPE -> type_array .)
    Null            reduce using rule 27 (TYPE -> type_array .)
    false           reduce using rule 27 (TYPE -> type_array .)
    type_type       reduce using rule 27 (TYPE -> type_array .)
    type_num        reduce using rule 27 (TYPE -> type_array .)
    type_bool       reduce using rule 27 (TYPE -> type_array .)
    type_any        reduce using rule 27 (TYPE -> type_array .)
    type_u64        reduce using rule 27 (TYPE -> type_array .)
    type_u32        reduce using rule 27 (TYPE -> type_array .)
    type_u16        reduce using rule 27 (TYPE -> type_array .)
    type_u8         reduce using rule 27 (TYPE -> type_array .)
    type_i64        reduce using rule 27 (TYPE -> type_array .)
    type_i32        reduce using rule 27 (TYPE -> type_array .)
    type_i16        reduce using rule 27 (TYPE -> type_array .)
    type_i8         reduce using rule 27 (TYPE -> type_array .)
    type_f32        reduce using rule 27 (TYPE -> type_array .)
    type_f64        reduce using rule 27 (TYPE -> type_array .)
    type_str        reduce using rule 27 (TYPE -> type_array .)
    type_list       reduce using rule 27 (TYPE -> type_array .)
    type_tuple      reduce using rule 27 (TYPE -> type_array .)
    type_array      reduce using rule 27 (TYPE -> type_array .)
    type_vector     reduce using rule 27 (TYPE -> type_array .)
    type_dict       reduce using rule 27 (TYPE -> type_array .)
    type_generator  reduce using rule 27 (TYPE -> type_array .)
    type_linked_list reduce using rule 27 (TYPE -> type_array .)
    type_doubly_linked_list reduce using rule 27 (TYPE -> type_array .)
    type_deque      reduce using rule 27 (TYPE -> type_array .)
    type_heap       reduce using rule 27 (TYPE -> type_array .)
    type_fibonacci_heap reduce using rule 27 (TYPE -> type_array .)
    type_tree       reduce using rule 27 (TYPE -> type_array .)
    type_trie       reduce using rule 27 (TYPE -> type_array .)
    type_stack      reduce using rule 27 (TYPE -> type_array .)
    type_queue      reduce using rule 27 (TYPE -> type_array .)
    type_binary_search_tree reduce using rule 27 (TYPE -> type_array .)
    type_bitset     reduce using rule 27 (TYPE -> type_array .)
    type_set        reduce using rule 27 (TYPE -> type_array .)
    type_map        reduce using rule 27 (TYPE -> type_array .)
    type_range      reduce using rule 27 (TYPE -> type_array .)
    type_bad_struct reduce using rule 27 (TYPE -> type_array .)
    type_bad_struct2 reduce using rule 27 (TYPE -> type_array .)
    lambda          reduce using rule 27 (TYPE -> type_array .)
    NEWLINE         reduce using rule 27 (TYPE -> type_array .)
    $end            reduce using rule 27 (TYPE -> type_array .)
    operator_inner  reduce using rule 27 (TYPE -> type_array .)
    }               reduce using rule 27 (TYPE -> type_array .)
    )               reduce using rule 27 (TYPE -> type_array .)
    {               reduce using rule 27 (TYPE -> type_array .)
    ]               reduce using rule 27 (TYPE -> type_array .)
    :               reduce using rule 27 (TYPE -> type_array .)
    ,               reduce using rule 27 (TYPE -> type_array .)

  ! (               [ reduce using rule 27 (TYPE -> type_array .) ]


state 72

    (163) return_val -> type_vector . ( arguments )
    (28) TYPE -> type_vector .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 183
    VAR             reduce using rule 28 (TYPE -> type_vector .)
    operator_add    reduce using rule 28 (TYPE -> type_vector .)
    operator_sub    reduce using rule 28 (TYPE -> type_vector .)
    operator_mul    reduce using rule 28 (TYPE -> type_vector .)
    operator_div    reduce using rule 28 (TYPE -> type_vector .)
    operator_trudiv reduce using rule 28 (TYPE -> type_vector .)
    operator_pow    reduce using rule 28 (TYPE -> type_vector .)
    operator_join   reduce using rule 28 (TYPE -> type_vector .)
    operator_split  reduce using rule 28 (TYPE -> type_vector .)
    operator_scan   reduce using rule 28 (TYPE -> type_vector .)
    operator_reduc  reduce using rule 28 (TYPE -> type_vector .)
    operator_bitand reduce using rule 28 (TYPE -> type_vector .)
    operator_bitor  reduce using rule 28 (TYPE -> type_vector .)
    operator_bitxor reduce using rule 28 (TYPE -> type_vector .)
    operator_bitshiftleft reduce using rule 28 (TYPE -> type_vector .)
    operator_bitshiftright reduce using rule 28 (TYPE -> type_vector .)
    operator_and    reduce using rule 28 (TYPE -> type_vector .)
    operator_or     reduce using rule 28 (TYPE -> type_vector .)
    operator_xor    reduce using rule 28 (TYPE -> type_vector .)
    operator_contains reduce using rule 28 (TYPE -> type_vector .)
    operator_incr   reduce using rule 28 (TYPE -> type_vector .)
    operator_decr   reduce using rule 28 (TYPE -> type_vector .)
    operator_outer  reduce using rule 28 (TYPE -> type_vector .)
    operator_rotate reduce using rule 28 (TYPE -> type_vector .)
    operator_apply  reduce using rule 28 (TYPE -> type_vector .)
    operator_compose reduce using rule 28 (TYPE -> type_vector .)
    operator_over   reduce using rule 28 (TYPE -> type_vector .)
    operator_map    reduce using rule 28 (TYPE -> type_vector .)
    operator_less_than reduce using rule 28 (TYPE -> type_vector .)
    operator_less_than_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_greater_than reduce using rule 28 (TYPE -> type_vector .)
    operator_greater_than_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_not_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_smallest reduce using rule 28 (TYPE -> type_vector .)
    operator_greatest reduce using rule 28 (TYPE -> type_vector .)
    operator_goodname reduce using rule 28 (TYPE -> type_vector .)
    [               reduce using rule 28 (TYPE -> type_vector .)
    operator_bitnot reduce using rule 28 (TYPE -> type_vector .)
    operator_not    reduce using rule 28 (TYPE -> type_vector .)
    operator_reverse reduce using rule 28 (TYPE -> type_vector .)
    operator_sorted_incr reduce using rule 28 (TYPE -> type_vector .)
    operator_sorted_decr reduce using rule 28 (TYPE -> type_vector .)
    operator_s_combinator reduce using rule 28 (TYPE -> type_vector .)
    operator_s2_combinator reduce using rule 28 (TYPE -> type_vector .)
    operator_goodname2 reduce using rule 28 (TYPE -> type_vector .)
    FLOAT           reduce using rule 28 (TYPE -> type_vector .)
    NUM             reduce using rule 28 (TYPE -> type_vector .)
    STRING_3SQ      reduce using rule 28 (TYPE -> type_vector .)
    STRING_3DQ      reduce using rule 28 (TYPE -> type_vector .)
    STRING_SQ       reduce using rule 28 (TYPE -> type_vector .)
    STRING_DQ       reduce using rule 28 (TYPE -> type_vector .)
    true            reduce using rule 28 (TYPE -> type_vector .)
    Null            reduce using rule 28 (TYPE -> type_vector .)
    false           reduce using rule 28 (TYPE -> type_vector .)
    type_type       reduce using rule 28 (TYPE -> type_vector .)
    type_num        reduce using rule 28 (TYPE -> type_vector .)
    type_bool       reduce using rule 28 (TYPE -> type_vector .)
    type_any        reduce using rule 28 (TYPE -> type_vector .)
    type_u64        reduce using rule 28 (TYPE -> type_vector .)
    type_u32        reduce using rule 28 (TYPE -> type_vector .)
    type_u16        reduce using rule 28 (TYPE -> type_vector .)
    type_u8         reduce using rule 28 (TYPE -> type_vector .)
    type_i64        reduce using rule 28 (TYPE -> type_vector .)
    type_i32        reduce using rule 28 (TYPE -> type_vector .)
    type_i16        reduce using rule 28 (TYPE -> type_vector .)
    type_i8         reduce using rule 28 (TYPE -> type_vector .)
    type_f32        reduce using rule 28 (TYPE -> type_vector .)
    type_f64        reduce using rule 28 (TYPE -> type_vector .)
    type_str        reduce using rule 28 (TYPE -> type_vector .)
    type_list       reduce using rule 28 (TYPE -> type_vector .)
    type_tuple      reduce using rule 28 (TYPE -> type_vector .)
    type_array      reduce using rule 28 (TYPE -> type_vector .)
    type_vector     reduce using rule 28 (TYPE -> type_vector .)
    type_dict       reduce using rule 28 (TYPE -> type_vector .)
    type_generator  reduce using rule 28 (TYPE -> type_vector .)
    type_linked_list reduce using rule 28 (TYPE -> type_vector .)
    type_doubly_linked_list reduce using rule 28 (TYPE -> type_vector .)
    type_deque      reduce using rule 28 (TYPE -> type_vector .)
    type_heap       reduce using rule 28 (TYPE -> type_vector .)
    type_fibonacci_heap reduce using rule 28 (TYPE -> type_vector .)
    type_tree       reduce using rule 28 (TYPE -> type_vector .)
    type_trie       reduce using rule 28 (TYPE -> type_vector .)
    type_stack      reduce using rule 28 (TYPE -> type_vector .)
    type_queue      reduce using rule 28 (TYPE -> type_vector .)
    type_binary_search_tree reduce using rule 28 (TYPE -> type_vector .)
    type_bitset     reduce using rule 28 (TYPE -> type_vector .)
    type_set        reduce using rule 28 (TYPE -> type_vector .)
    type_map        reduce using rule 28 (TYPE -> type_vector .)
    type_range      reduce using rule 28 (TYPE -> type_vector .)
    type_bad_struct reduce using rule 28 (TYPE -> type_vector .)
    type_bad_struct2 reduce using rule 28 (TYPE -> type_vector .)
    lambda          reduce using rule 28 (TYPE -> type_vector .)
    NEWLINE         reduce using rule 28 (TYPE -> type_vector .)
    $end            reduce using rule 28 (TYPE -> type_vector .)
    operator_inner  reduce using rule 28 (TYPE -> type_vector .)
    }               reduce using rule 28 (TYPE -> type_vector .)
    )               reduce using rule 28 (TYPE -> type_vector .)
    {               reduce using rule 28 (TYPE -> type_vector .)
    ]               reduce using rule 28 (TYPE -> type_vector .)
    :               reduce using rule 28 (TYPE -> type_vector .)
    ,               reduce using rule 28 (TYPE -> type_vector .)

  ! (               [ reduce using rule 28 (TYPE -> type_vector .) ]


state 73

    (164) return_val -> type_dict . ( arguments )
    (29) TYPE -> type_dict .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 184
    VAR             reduce using rule 29 (TYPE -> type_dict .)
    operator_add    reduce using rule 29 (TYPE -> type_dict .)
    operator_sub    reduce using rule 29 (TYPE -> type_dict .)
    operator_mul    reduce using rule 29 (TYPE -> type_dict .)
    operator_div    reduce using rule 29 (TYPE -> type_dict .)
    operator_trudiv reduce using rule 29 (TYPE -> type_dict .)
    operator_pow    reduce using rule 29 (TYPE -> type_dict .)
    operator_join   reduce using rule 29 (TYPE -> type_dict .)
    operator_split  reduce using rule 29 (TYPE -> type_dict .)
    operator_scan   reduce using rule 29 (TYPE -> type_dict .)
    operator_reduc  reduce using rule 29 (TYPE -> type_dict .)
    operator_bitand reduce using rule 29 (TYPE -> type_dict .)
    operator_bitor  reduce using rule 29 (TYPE -> type_dict .)
    operator_bitxor reduce using rule 29 (TYPE -> type_dict .)
    operator_bitshiftleft reduce using rule 29 (TYPE -> type_dict .)
    operator_bitshiftright reduce using rule 29 (TYPE -> type_dict .)
    operator_and    reduce using rule 29 (TYPE -> type_dict .)
    operator_or     reduce using rule 29 (TYPE -> type_dict .)
    operator_xor    reduce using rule 29 (TYPE -> type_dict .)
    operator_contains reduce using rule 29 (TYPE -> type_dict .)
    operator_incr   reduce using rule 29 (TYPE -> type_dict .)
    operator_decr   reduce using rule 29 (TYPE -> type_dict .)
    operator_outer  reduce using rule 29 (TYPE -> type_dict .)
    operator_rotate reduce using rule 29 (TYPE -> type_dict .)
    operator_apply  reduce using rule 29 (TYPE -> type_dict .)
    operator_compose reduce using rule 29 (TYPE -> type_dict .)
    operator_over   reduce using rule 29 (TYPE -> type_dict .)
    operator_map    reduce using rule 29 (TYPE -> type_dict .)
    operator_less_than reduce using rule 29 (TYPE -> type_dict .)
    operator_less_than_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_greater_than reduce using rule 29 (TYPE -> type_dict .)
    operator_greater_than_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_not_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_smallest reduce using rule 29 (TYPE -> type_dict .)
    operator_greatest reduce using rule 29 (TYPE -> type_dict .)
    operator_goodname reduce using rule 29 (TYPE -> type_dict .)
    [               reduce using rule 29 (TYPE -> type_dict .)
    operator_bitnot reduce using rule 29 (TYPE -> type_dict .)
    operator_not    reduce using rule 29 (TYPE -> type_dict .)
    operator_reverse reduce using rule 29 (TYPE -> type_dict .)
    operator_sorted_incr reduce using rule 29 (TYPE -> type_dict .)
    operator_sorted_decr reduce using rule 29 (TYPE -> type_dict .)
    operator_s_combinator reduce using rule 29 (TYPE -> type_dict .)
    operator_s2_combinator reduce using rule 29 (TYPE -> type_dict .)
    operator_goodname2 reduce using rule 29 (TYPE -> type_dict .)
    FLOAT           reduce using rule 29 (TYPE -> type_dict .)
    NUM             reduce using rule 29 (TYPE -> type_dict .)
    STRING_3SQ      reduce using rule 29 (TYPE -> type_dict .)
    STRING_3DQ      reduce using rule 29 (TYPE -> type_dict .)
    STRING_SQ       reduce using rule 29 (TYPE -> type_dict .)
    STRING_DQ       reduce using rule 29 (TYPE -> type_dict .)
    true            reduce using rule 29 (TYPE -> type_dict .)
    Null            reduce using rule 29 (TYPE -> type_dict .)
    false           reduce using rule 29 (TYPE -> type_dict .)
    type_type       reduce using rule 29 (TYPE -> type_dict .)
    type_num        reduce using rule 29 (TYPE -> type_dict .)
    type_bool       reduce using rule 29 (TYPE -> type_dict .)
    type_any        reduce using rule 29 (TYPE -> type_dict .)
    type_u64        reduce using rule 29 (TYPE -> type_dict .)
    type_u32        reduce using rule 29 (TYPE -> type_dict .)
    type_u16        reduce using rule 29 (TYPE -> type_dict .)
    type_u8         reduce using rule 29 (TYPE -> type_dict .)
    type_i64        reduce using rule 29 (TYPE -> type_dict .)
    type_i32        reduce using rule 29 (TYPE -> type_dict .)
    type_i16        reduce using rule 29 (TYPE -> type_dict .)
    type_i8         reduce using rule 29 (TYPE -> type_dict .)
    type_f32        reduce using rule 29 (TYPE -> type_dict .)
    type_f64        reduce using rule 29 (TYPE -> type_dict .)
    type_str        reduce using rule 29 (TYPE -> type_dict .)
    type_list       reduce using rule 29 (TYPE -> type_dict .)
    type_tuple      reduce using rule 29 (TYPE -> type_dict .)
    type_array      reduce using rule 29 (TYPE -> type_dict .)
    type_vector     reduce using rule 29 (TYPE -> type_dict .)
    type_dict       reduce using rule 29 (TYPE -> type_dict .)
    type_generator  reduce using rule 29 (TYPE -> type_dict .)
    type_linked_list reduce using rule 29 (TYPE -> type_dict .)
    type_doubly_linked_list reduce using rule 29 (TYPE -> type_dict .)
    type_deque      reduce using rule 29 (TYPE -> type_dict .)
    type_heap       reduce using rule 29 (TYPE -> type_dict .)
    type_fibonacci_heap reduce using rule 29 (TYPE -> type_dict .)
    type_tree       reduce using rule 29 (TYPE -> type_dict .)
    type_trie       reduce using rule 29 (TYPE -> type_dict .)
    type_stack      reduce using rule 29 (TYPE -> type_dict .)
    type_queue      reduce using rule 29 (TYPE -> type_dict .)
    type_binary_search_tree reduce using rule 29 (TYPE -> type_dict .)
    type_bitset     reduce using rule 29 (TYPE -> type_dict .)
    type_set        reduce using rule 29 (TYPE -> type_dict .)
    type_map        reduce using rule 29 (TYPE -> type_dict .)
    type_range      reduce using rule 29 (TYPE -> type_dict .)
    type_bad_struct reduce using rule 29 (TYPE -> type_dict .)
    type_bad_struct2 reduce using rule 29 (TYPE -> type_dict .)
    lambda          reduce using rule 29 (TYPE -> type_dict .)
    NEWLINE         reduce using rule 29 (TYPE -> type_dict .)
    $end            reduce using rule 29 (TYPE -> type_dict .)
    operator_inner  reduce using rule 29 (TYPE -> type_dict .)
    }               reduce using rule 29 (TYPE -> type_dict .)
    )               reduce using rule 29 (TYPE -> type_dict .)
    {               reduce using rule 29 (TYPE -> type_dict .)
    ]               reduce using rule 29 (TYPE -> type_dict .)
    :               reduce using rule 29 (TYPE -> type_dict .)
    ,               reduce using rule 29 (TYPE -> type_dict .)

  ! (               [ reduce using rule 29 (TYPE -> type_dict .) ]


state 74

    (165) return_val -> type_generator . ( arguments )
    (30) TYPE -> type_generator .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 185
    VAR             reduce using rule 30 (TYPE -> type_generator .)
    operator_add    reduce using rule 30 (TYPE -> type_generator .)
    operator_sub    reduce using rule 30 (TYPE -> type_generator .)
    operator_mul    reduce using rule 30 (TYPE -> type_generator .)
    operator_div    reduce using rule 30 (TYPE -> type_generator .)
    operator_trudiv reduce using rule 30 (TYPE -> type_generator .)
    operator_pow    reduce using rule 30 (TYPE -> type_generator .)
    operator_join   reduce using rule 30 (TYPE -> type_generator .)
    operator_split  reduce using rule 30 (TYPE -> type_generator .)
    operator_scan   reduce using rule 30 (TYPE -> type_generator .)
    operator_reduc  reduce using rule 30 (TYPE -> type_generator .)
    operator_bitand reduce using rule 30 (TYPE -> type_generator .)
    operator_bitor  reduce using rule 30 (TYPE -> type_generator .)
    operator_bitxor reduce using rule 30 (TYPE -> type_generator .)
    operator_bitshiftleft reduce using rule 30 (TYPE -> type_generator .)
    operator_bitshiftright reduce using rule 30 (TYPE -> type_generator .)
    operator_and    reduce using rule 30 (TYPE -> type_generator .)
    operator_or     reduce using rule 30 (TYPE -> type_generator .)
    operator_xor    reduce using rule 30 (TYPE -> type_generator .)
    operator_contains reduce using rule 30 (TYPE -> type_generator .)
    operator_incr   reduce using rule 30 (TYPE -> type_generator .)
    operator_decr   reduce using rule 30 (TYPE -> type_generator .)
    operator_outer  reduce using rule 30 (TYPE -> type_generator .)
    operator_rotate reduce using rule 30 (TYPE -> type_generator .)
    operator_apply  reduce using rule 30 (TYPE -> type_generator .)
    operator_compose reduce using rule 30 (TYPE -> type_generator .)
    operator_over   reduce using rule 30 (TYPE -> type_generator .)
    operator_map    reduce using rule 30 (TYPE -> type_generator .)
    operator_less_than reduce using rule 30 (TYPE -> type_generator .)
    operator_less_than_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_greater_than reduce using rule 30 (TYPE -> type_generator .)
    operator_greater_than_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_not_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_smallest reduce using rule 30 (TYPE -> type_generator .)
    operator_greatest reduce using rule 30 (TYPE -> type_generator .)
    operator_goodname reduce using rule 30 (TYPE -> type_generator .)
    [               reduce using rule 30 (TYPE -> type_generator .)
    operator_bitnot reduce using rule 30 (TYPE -> type_generator .)
    operator_not    reduce using rule 30 (TYPE -> type_generator .)
    operator_reverse reduce using rule 30 (TYPE -> type_generator .)
    operator_sorted_incr reduce using rule 30 (TYPE -> type_generator .)
    operator_sorted_decr reduce using rule 30 (TYPE -> type_generator .)
    operator_s_combinator reduce using rule 30 (TYPE -> type_generator .)
    operator_s2_combinator reduce using rule 30 (TYPE -> type_generator .)
    operator_goodname2 reduce using rule 30 (TYPE -> type_generator .)
    FLOAT           reduce using rule 30 (TYPE -> type_generator .)
    NUM             reduce using rule 30 (TYPE -> type_generator .)
    STRING_3SQ      reduce using rule 30 (TYPE -> type_generator .)
    STRING_3DQ      reduce using rule 30 (TYPE -> type_generator .)
    STRING_SQ       reduce using rule 30 (TYPE -> type_generator .)
    STRING_DQ       reduce using rule 30 (TYPE -> type_generator .)
    true            reduce using rule 30 (TYPE -> type_generator .)
    Null            reduce using rule 30 (TYPE -> type_generator .)
    false           reduce using rule 30 (TYPE -> type_generator .)
    type_type       reduce using rule 30 (TYPE -> type_generator .)
    type_num        reduce using rule 30 (TYPE -> type_generator .)
    type_bool       reduce using rule 30 (TYPE -> type_generator .)
    type_any        reduce using rule 30 (TYPE -> type_generator .)
    type_u64        reduce using rule 30 (TYPE -> type_generator .)
    type_u32        reduce using rule 30 (TYPE -> type_generator .)
    type_u16        reduce using rule 30 (TYPE -> type_generator .)
    type_u8         reduce using rule 30 (TYPE -> type_generator .)
    type_i64        reduce using rule 30 (TYPE -> type_generator .)
    type_i32        reduce using rule 30 (TYPE -> type_generator .)
    type_i16        reduce using rule 30 (TYPE -> type_generator .)
    type_i8         reduce using rule 30 (TYPE -> type_generator .)
    type_f32        reduce using rule 30 (TYPE -> type_generator .)
    type_f64        reduce using rule 30 (TYPE -> type_generator .)
    type_str        reduce using rule 30 (TYPE -> type_generator .)
    type_list       reduce using rule 30 (TYPE -> type_generator .)
    type_tuple      reduce using rule 30 (TYPE -> type_generator .)
    type_array      reduce using rule 30 (TYPE -> type_generator .)
    type_vector     reduce using rule 30 (TYPE -> type_generator .)
    type_dict       reduce using rule 30 (TYPE -> type_generator .)
    type_generator  reduce using rule 30 (TYPE -> type_generator .)
    type_linked_list reduce using rule 30 (TYPE -> type_generator .)
    type_doubly_linked_list reduce using rule 30 (TYPE -> type_generator .)
    type_deque      reduce using rule 30 (TYPE -> type_generator .)
    type_heap       reduce using rule 30 (TYPE -> type_generator .)
    type_fibonacci_heap reduce using rule 30 (TYPE -> type_generator .)
    type_tree       reduce using rule 30 (TYPE -> type_generator .)
    type_trie       reduce using rule 30 (TYPE -> type_generator .)
    type_stack      reduce using rule 30 (TYPE -> type_generator .)
    type_queue      reduce using rule 30 (TYPE -> type_generator .)
    type_binary_search_tree reduce using rule 30 (TYPE -> type_generator .)
    type_bitset     reduce using rule 30 (TYPE -> type_generator .)
    type_set        reduce using rule 30 (TYPE -> type_generator .)
    type_map        reduce using rule 30 (TYPE -> type_generator .)
    type_range      reduce using rule 30 (TYPE -> type_generator .)
    type_bad_struct reduce using rule 30 (TYPE -> type_generator .)
    type_bad_struct2 reduce using rule 30 (TYPE -> type_generator .)
    lambda          reduce using rule 30 (TYPE -> type_generator .)
    NEWLINE         reduce using rule 30 (TYPE -> type_generator .)
    $end            reduce using rule 30 (TYPE -> type_generator .)
    operator_inner  reduce using rule 30 (TYPE -> type_generator .)
    }               reduce using rule 30 (TYPE -> type_generator .)
    )               reduce using rule 30 (TYPE -> type_generator .)
    {               reduce using rule 30 (TYPE -> type_generator .)
    ]               reduce using rule 30 (TYPE -> type_generator .)
    :               reduce using rule 30 (TYPE -> type_generator .)
    ,               reduce using rule 30 (TYPE -> type_generator .)

  ! (               [ reduce using rule 30 (TYPE -> type_generator .) ]


state 75

    (166) return_val -> type_linked_list . ( arguments )
    (31) TYPE -> type_linked_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 186
    VAR             reduce using rule 31 (TYPE -> type_linked_list .)
    operator_add    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sub    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_mul    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_div    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_trudiv reduce using rule 31 (TYPE -> type_linked_list .)
    operator_pow    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_join   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_split  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_scan   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_reduc  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitand reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitor  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitxor reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitshiftleft reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitshiftright reduce using rule 31 (TYPE -> type_linked_list .)
    operator_and    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_or     reduce using rule 31 (TYPE -> type_linked_list .)
    operator_xor    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_contains reduce using rule 31 (TYPE -> type_linked_list .)
    operator_incr   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_decr   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_outer  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_rotate reduce using rule 31 (TYPE -> type_linked_list .)
    operator_apply  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_compose reduce using rule 31 (TYPE -> type_linked_list .)
    operator_over   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_map    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_less_than reduce using rule 31 (TYPE -> type_linked_list .)
    operator_less_than_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greater_than reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greater_than_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_not_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_smallest reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greatest reduce using rule 31 (TYPE -> type_linked_list .)
    operator_goodname reduce using rule 31 (TYPE -> type_linked_list .)
    [               reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitnot reduce using rule 31 (TYPE -> type_linked_list .)
    operator_not    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_reverse reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sorted_incr reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sorted_decr reduce using rule 31 (TYPE -> type_linked_list .)
    operator_s_combinator reduce using rule 31 (TYPE -> type_linked_list .)
    operator_s2_combinator reduce using rule 31 (TYPE -> type_linked_list .)
    operator_goodname2 reduce using rule 31 (TYPE -> type_linked_list .)
    FLOAT           reduce using rule 31 (TYPE -> type_linked_list .)
    NUM             reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_3SQ      reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_3DQ      reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_SQ       reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_DQ       reduce using rule 31 (TYPE -> type_linked_list .)
    true            reduce using rule 31 (TYPE -> type_linked_list .)
    Null            reduce using rule 31 (TYPE -> type_linked_list .)
    false           reduce using rule 31 (TYPE -> type_linked_list .)
    type_type       reduce using rule 31 (TYPE -> type_linked_list .)
    type_num        reduce using rule 31 (TYPE -> type_linked_list .)
    type_bool       reduce using rule 31 (TYPE -> type_linked_list .)
    type_any        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u16        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u8         reduce using rule 31 (TYPE -> type_linked_list .)
    type_i64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i16        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i8         reduce using rule 31 (TYPE -> type_linked_list .)
    type_f32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_f64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_str        reduce using rule 31 (TYPE -> type_linked_list .)
    type_list       reduce using rule 31 (TYPE -> type_linked_list .)
    type_tuple      reduce using rule 31 (TYPE -> type_linked_list .)
    type_array      reduce using rule 31 (TYPE -> type_linked_list .)
    type_vector     reduce using rule 31 (TYPE -> type_linked_list .)
    type_dict       reduce using rule 31 (TYPE -> type_linked_list .)
    type_generator  reduce using rule 31 (TYPE -> type_linked_list .)
    type_linked_list reduce using rule 31 (TYPE -> type_linked_list .)
    type_doubly_linked_list reduce using rule 31 (TYPE -> type_linked_list .)
    type_deque      reduce using rule 31 (TYPE -> type_linked_list .)
    type_heap       reduce using rule 31 (TYPE -> type_linked_list .)
    type_fibonacci_heap reduce using rule 31 (TYPE -> type_linked_list .)
    type_tree       reduce using rule 31 (TYPE -> type_linked_list .)
    type_trie       reduce using rule 31 (TYPE -> type_linked_list .)
    type_stack      reduce using rule 31 (TYPE -> type_linked_list .)
    type_queue      reduce using rule 31 (TYPE -> type_linked_list .)
    type_binary_search_tree reduce using rule 31 (TYPE -> type_linked_list .)
    type_bitset     reduce using rule 31 (TYPE -> type_linked_list .)
    type_set        reduce using rule 31 (TYPE -> type_linked_list .)
    type_map        reduce using rule 31 (TYPE -> type_linked_list .)
    type_range      reduce using rule 31 (TYPE -> type_linked_list .)
    type_bad_struct reduce using rule 31 (TYPE -> type_linked_list .)
    type_bad_struct2 reduce using rule 31 (TYPE -> type_linked_list .)
    lambda          reduce using rule 31 (TYPE -> type_linked_list .)
    NEWLINE         reduce using rule 31 (TYPE -> type_linked_list .)
    $end            reduce using rule 31 (TYPE -> type_linked_list .)
    operator_inner  reduce using rule 31 (TYPE -> type_linked_list .)
    }               reduce using rule 31 (TYPE -> type_linked_list .)
    )               reduce using rule 31 (TYPE -> type_linked_list .)
    {               reduce using rule 31 (TYPE -> type_linked_list .)
    ]               reduce using rule 31 (TYPE -> type_linked_list .)
    :               reduce using rule 31 (TYPE -> type_linked_list .)
    ,               reduce using rule 31 (TYPE -> type_linked_list .)

  ! (               [ reduce using rule 31 (TYPE -> type_linked_list .) ]


state 76

    (167) return_val -> type_doubly_linked_list . ( arguments )
    (32) TYPE -> type_doubly_linked_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 187
    VAR             reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_add    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sub    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_mul    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_div    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_trudiv reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_pow    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_join   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_split  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_scan   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_reduc  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitand reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitor  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitxor reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftleft reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftright reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_and    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_or     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_xor    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_contains reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_incr   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_decr   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_outer  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_rotate reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_apply  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_compose reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_over   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_map    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_less_than reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_less_than_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greater_than reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greater_than_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_not_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_smallest reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greatest reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_goodname reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    [               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitnot reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_not    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_reverse reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sorted_incr reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sorted_decr reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_s_combinator reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_s2_combinator reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_goodname2 reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    FLOAT           reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    NUM             reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_3SQ      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_3DQ      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_SQ       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_DQ       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    true            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    Null            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    false           reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_type       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_num        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bool       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_any        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u16        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u8         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i16        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i8         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_f32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_f64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_str        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_list       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_tuple      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_array      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_vector     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_dict       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_generator  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_linked_list reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_doubly_linked_list reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_deque      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_heap       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_fibonacci_heap reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_tree       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_trie       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_stack      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_queue      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_binary_search_tree reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bitset     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_set        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_map        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_range      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bad_struct reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bad_struct2 reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    lambda          reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    NEWLINE         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    $end            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_inner  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    }               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    )               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    {               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    ]               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    :               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    ,               reduce using rule 32 (TYPE -> type_doubly_linked_list .)

  ! (               [ reduce using rule 32 (TYPE -> type_doubly_linked_list .) ]


state 77

    (168) return_val -> type_deque . ( arguments )
    (33) TYPE -> type_deque .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 188
    VAR             reduce using rule 33 (TYPE -> type_deque .)
    operator_add    reduce using rule 33 (TYPE -> type_deque .)
    operator_sub    reduce using rule 33 (TYPE -> type_deque .)
    operator_mul    reduce using rule 33 (TYPE -> type_deque .)
    operator_div    reduce using rule 33 (TYPE -> type_deque .)
    operator_trudiv reduce using rule 33 (TYPE -> type_deque .)
    operator_pow    reduce using rule 33 (TYPE -> type_deque .)
    operator_join   reduce using rule 33 (TYPE -> type_deque .)
    operator_split  reduce using rule 33 (TYPE -> type_deque .)
    operator_scan   reduce using rule 33 (TYPE -> type_deque .)
    operator_reduc  reduce using rule 33 (TYPE -> type_deque .)
    operator_bitand reduce using rule 33 (TYPE -> type_deque .)
    operator_bitor  reduce using rule 33 (TYPE -> type_deque .)
    operator_bitxor reduce using rule 33 (TYPE -> type_deque .)
    operator_bitshiftleft reduce using rule 33 (TYPE -> type_deque .)
    operator_bitshiftright reduce using rule 33 (TYPE -> type_deque .)
    operator_and    reduce using rule 33 (TYPE -> type_deque .)
    operator_or     reduce using rule 33 (TYPE -> type_deque .)
    operator_xor    reduce using rule 33 (TYPE -> type_deque .)
    operator_contains reduce using rule 33 (TYPE -> type_deque .)
    operator_incr   reduce using rule 33 (TYPE -> type_deque .)
    operator_decr   reduce using rule 33 (TYPE -> type_deque .)
    operator_outer  reduce using rule 33 (TYPE -> type_deque .)
    operator_rotate reduce using rule 33 (TYPE -> type_deque .)
    operator_apply  reduce using rule 33 (TYPE -> type_deque .)
    operator_compose reduce using rule 33 (TYPE -> type_deque .)
    operator_over   reduce using rule 33 (TYPE -> type_deque .)
    operator_map    reduce using rule 33 (TYPE -> type_deque .)
    operator_less_than reduce using rule 33 (TYPE -> type_deque .)
    operator_less_than_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_greater_than reduce using rule 33 (TYPE -> type_deque .)
    operator_greater_than_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_not_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_smallest reduce using rule 33 (TYPE -> type_deque .)
    operator_greatest reduce using rule 33 (TYPE -> type_deque .)
    operator_goodname reduce using rule 33 (TYPE -> type_deque .)
    [               reduce using rule 33 (TYPE -> type_deque .)
    operator_bitnot reduce using rule 33 (TYPE -> type_deque .)
    operator_not    reduce using rule 33 (TYPE -> type_deque .)
    operator_reverse reduce using rule 33 (TYPE -> type_deque .)
    operator_sorted_incr reduce using rule 33 (TYPE -> type_deque .)
    operator_sorted_decr reduce using rule 33 (TYPE -> type_deque .)
    operator_s_combinator reduce using rule 33 (TYPE -> type_deque .)
    operator_s2_combinator reduce using rule 33 (TYPE -> type_deque .)
    operator_goodname2 reduce using rule 33 (TYPE -> type_deque .)
    FLOAT           reduce using rule 33 (TYPE -> type_deque .)
    NUM             reduce using rule 33 (TYPE -> type_deque .)
    STRING_3SQ      reduce using rule 33 (TYPE -> type_deque .)
    STRING_3DQ      reduce using rule 33 (TYPE -> type_deque .)
    STRING_SQ       reduce using rule 33 (TYPE -> type_deque .)
    STRING_DQ       reduce using rule 33 (TYPE -> type_deque .)
    true            reduce using rule 33 (TYPE -> type_deque .)
    Null            reduce using rule 33 (TYPE -> type_deque .)
    false           reduce using rule 33 (TYPE -> type_deque .)
    type_type       reduce using rule 33 (TYPE -> type_deque .)
    type_num        reduce using rule 33 (TYPE -> type_deque .)
    type_bool       reduce using rule 33 (TYPE -> type_deque .)
    type_any        reduce using rule 33 (TYPE -> type_deque .)
    type_u64        reduce using rule 33 (TYPE -> type_deque .)
    type_u32        reduce using rule 33 (TYPE -> type_deque .)
    type_u16        reduce using rule 33 (TYPE -> type_deque .)
    type_u8         reduce using rule 33 (TYPE -> type_deque .)
    type_i64        reduce using rule 33 (TYPE -> type_deque .)
    type_i32        reduce using rule 33 (TYPE -> type_deque .)
    type_i16        reduce using rule 33 (TYPE -> type_deque .)
    type_i8         reduce using rule 33 (TYPE -> type_deque .)
    type_f32        reduce using rule 33 (TYPE -> type_deque .)
    type_f64        reduce using rule 33 (TYPE -> type_deque .)
    type_str        reduce using rule 33 (TYPE -> type_deque .)
    type_list       reduce using rule 33 (TYPE -> type_deque .)
    type_tuple      reduce using rule 33 (TYPE -> type_deque .)
    type_array      reduce using rule 33 (TYPE -> type_deque .)
    type_vector     reduce using rule 33 (TYPE -> type_deque .)
    type_dict       reduce using rule 33 (TYPE -> type_deque .)
    type_generator  reduce using rule 33 (TYPE -> type_deque .)
    type_linked_list reduce using rule 33 (TYPE -> type_deque .)
    type_doubly_linked_list reduce using rule 33 (TYPE -> type_deque .)
    type_deque      reduce using rule 33 (TYPE -> type_deque .)
    type_heap       reduce using rule 33 (TYPE -> type_deque .)
    type_fibonacci_heap reduce using rule 33 (TYPE -> type_deque .)
    type_tree       reduce using rule 33 (TYPE -> type_deque .)
    type_trie       reduce using rule 33 (TYPE -> type_deque .)
    type_stack      reduce using rule 33 (TYPE -> type_deque .)
    type_queue      reduce using rule 33 (TYPE -> type_deque .)
    type_binary_search_tree reduce using rule 33 (TYPE -> type_deque .)
    type_bitset     reduce using rule 33 (TYPE -> type_deque .)
    type_set        reduce using rule 33 (TYPE -> type_deque .)
    type_map        reduce using rule 33 (TYPE -> type_deque .)
    type_range      reduce using rule 33 (TYPE -> type_deque .)
    type_bad_struct reduce using rule 33 (TYPE -> type_deque .)
    type_bad_struct2 reduce using rule 33 (TYPE -> type_deque .)
    lambda          reduce using rule 33 (TYPE -> type_deque .)
    NEWLINE         reduce using rule 33 (TYPE -> type_deque .)
    $end            reduce using rule 33 (TYPE -> type_deque .)
    operator_inner  reduce using rule 33 (TYPE -> type_deque .)
    }               reduce using rule 33 (TYPE -> type_deque .)
    )               reduce using rule 33 (TYPE -> type_deque .)
    {               reduce using rule 33 (TYPE -> type_deque .)
    ]               reduce using rule 33 (TYPE -> type_deque .)
    :               reduce using rule 33 (TYPE -> type_deque .)
    ,               reduce using rule 33 (TYPE -> type_deque .)

  ! (               [ reduce using rule 33 (TYPE -> type_deque .) ]


state 78

    (169) return_val -> type_heap . ( arguments )
    (34) TYPE -> type_heap .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 189
    VAR             reduce using rule 34 (TYPE -> type_heap .)
    operator_add    reduce using rule 34 (TYPE -> type_heap .)
    operator_sub    reduce using rule 34 (TYPE -> type_heap .)
    operator_mul    reduce using rule 34 (TYPE -> type_heap .)
    operator_div    reduce using rule 34 (TYPE -> type_heap .)
    operator_trudiv reduce using rule 34 (TYPE -> type_heap .)
    operator_pow    reduce using rule 34 (TYPE -> type_heap .)
    operator_join   reduce using rule 34 (TYPE -> type_heap .)
    operator_split  reduce using rule 34 (TYPE -> type_heap .)
    operator_scan   reduce using rule 34 (TYPE -> type_heap .)
    operator_reduc  reduce using rule 34 (TYPE -> type_heap .)
    operator_bitand reduce using rule 34 (TYPE -> type_heap .)
    operator_bitor  reduce using rule 34 (TYPE -> type_heap .)
    operator_bitxor reduce using rule 34 (TYPE -> type_heap .)
    operator_bitshiftleft reduce using rule 34 (TYPE -> type_heap .)
    operator_bitshiftright reduce using rule 34 (TYPE -> type_heap .)
    operator_and    reduce using rule 34 (TYPE -> type_heap .)
    operator_or     reduce using rule 34 (TYPE -> type_heap .)
    operator_xor    reduce using rule 34 (TYPE -> type_heap .)
    operator_contains reduce using rule 34 (TYPE -> type_heap .)
    operator_incr   reduce using rule 34 (TYPE -> type_heap .)
    operator_decr   reduce using rule 34 (TYPE -> type_heap .)
    operator_outer  reduce using rule 34 (TYPE -> type_heap .)
    operator_rotate reduce using rule 34 (TYPE -> type_heap .)
    operator_apply  reduce using rule 34 (TYPE -> type_heap .)
    operator_compose reduce using rule 34 (TYPE -> type_heap .)
    operator_over   reduce using rule 34 (TYPE -> type_heap .)
    operator_map    reduce using rule 34 (TYPE -> type_heap .)
    operator_less_than reduce using rule 34 (TYPE -> type_heap .)
    operator_less_than_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_greater_than reduce using rule 34 (TYPE -> type_heap .)
    operator_greater_than_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_not_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_smallest reduce using rule 34 (TYPE -> type_heap .)
    operator_greatest reduce using rule 34 (TYPE -> type_heap .)
    operator_goodname reduce using rule 34 (TYPE -> type_heap .)
    [               reduce using rule 34 (TYPE -> type_heap .)
    operator_bitnot reduce using rule 34 (TYPE -> type_heap .)
    operator_not    reduce using rule 34 (TYPE -> type_heap .)
    operator_reverse reduce using rule 34 (TYPE -> type_heap .)
    operator_sorted_incr reduce using rule 34 (TYPE -> type_heap .)
    operator_sorted_decr reduce using rule 34 (TYPE -> type_heap .)
    operator_s_combinator reduce using rule 34 (TYPE -> type_heap .)
    operator_s2_combinator reduce using rule 34 (TYPE -> type_heap .)
    operator_goodname2 reduce using rule 34 (TYPE -> type_heap .)
    FLOAT           reduce using rule 34 (TYPE -> type_heap .)
    NUM             reduce using rule 34 (TYPE -> type_heap .)
    STRING_3SQ      reduce using rule 34 (TYPE -> type_heap .)
    STRING_3DQ      reduce using rule 34 (TYPE -> type_heap .)
    STRING_SQ       reduce using rule 34 (TYPE -> type_heap .)
    STRING_DQ       reduce using rule 34 (TYPE -> type_heap .)
    true            reduce using rule 34 (TYPE -> type_heap .)
    Null            reduce using rule 34 (TYPE -> type_heap .)
    false           reduce using rule 34 (TYPE -> type_heap .)
    type_type       reduce using rule 34 (TYPE -> type_heap .)
    type_num        reduce using rule 34 (TYPE -> type_heap .)
    type_bool       reduce using rule 34 (TYPE -> type_heap .)
    type_any        reduce using rule 34 (TYPE -> type_heap .)
    type_u64        reduce using rule 34 (TYPE -> type_heap .)
    type_u32        reduce using rule 34 (TYPE -> type_heap .)
    type_u16        reduce using rule 34 (TYPE -> type_heap .)
    type_u8         reduce using rule 34 (TYPE -> type_heap .)
    type_i64        reduce using rule 34 (TYPE -> type_heap .)
    type_i32        reduce using rule 34 (TYPE -> type_heap .)
    type_i16        reduce using rule 34 (TYPE -> type_heap .)
    type_i8         reduce using rule 34 (TYPE -> type_heap .)
    type_f32        reduce using rule 34 (TYPE -> type_heap .)
    type_f64        reduce using rule 34 (TYPE -> type_heap .)
    type_str        reduce using rule 34 (TYPE -> type_heap .)
    type_list       reduce using rule 34 (TYPE -> type_heap .)
    type_tuple      reduce using rule 34 (TYPE -> type_heap .)
    type_array      reduce using rule 34 (TYPE -> type_heap .)
    type_vector     reduce using rule 34 (TYPE -> type_heap .)
    type_dict       reduce using rule 34 (TYPE -> type_heap .)
    type_generator  reduce using rule 34 (TYPE -> type_heap .)
    type_linked_list reduce using rule 34 (TYPE -> type_heap .)
    type_doubly_linked_list reduce using rule 34 (TYPE -> type_heap .)
    type_deque      reduce using rule 34 (TYPE -> type_heap .)
    type_heap       reduce using rule 34 (TYPE -> type_heap .)
    type_fibonacci_heap reduce using rule 34 (TYPE -> type_heap .)
    type_tree       reduce using rule 34 (TYPE -> type_heap .)
    type_trie       reduce using rule 34 (TYPE -> type_heap .)
    type_stack      reduce using rule 34 (TYPE -> type_heap .)
    type_queue      reduce using rule 34 (TYPE -> type_heap .)
    type_binary_search_tree reduce using rule 34 (TYPE -> type_heap .)
    type_bitset     reduce using rule 34 (TYPE -> type_heap .)
    type_set        reduce using rule 34 (TYPE -> type_heap .)
    type_map        reduce using rule 34 (TYPE -> type_heap .)
    type_range      reduce using rule 34 (TYPE -> type_heap .)
    type_bad_struct reduce using rule 34 (TYPE -> type_heap .)
    type_bad_struct2 reduce using rule 34 (TYPE -> type_heap .)
    lambda          reduce using rule 34 (TYPE -> type_heap .)
    NEWLINE         reduce using rule 34 (TYPE -> type_heap .)
    $end            reduce using rule 34 (TYPE -> type_heap .)
    operator_inner  reduce using rule 34 (TYPE -> type_heap .)
    }               reduce using rule 34 (TYPE -> type_heap .)
    )               reduce using rule 34 (TYPE -> type_heap .)
    {               reduce using rule 34 (TYPE -> type_heap .)
    ]               reduce using rule 34 (TYPE -> type_heap .)
    :               reduce using rule 34 (TYPE -> type_heap .)
    ,               reduce using rule 34 (TYPE -> type_heap .)

  ! (               [ reduce using rule 34 (TYPE -> type_heap .) ]


state 79

    (170) return_val -> type_fibonacci_heap . ( arguments )
    (35) TYPE -> type_fibonacci_heap .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 190
    VAR             reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_add    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sub    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_mul    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_div    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_trudiv reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_pow    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_join   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_split  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_scan   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_reduc  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitand reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitor  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitxor reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftleft reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftright reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_and    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_or     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_xor    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_contains reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_incr   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_decr   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_outer  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_rotate reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_apply  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_compose reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_over   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_map    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_less_than reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_less_than_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greater_than reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greater_than_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_not_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_smallest reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greatest reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_goodname reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    [               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitnot reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_not    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_reverse reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sorted_incr reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sorted_decr reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_s_combinator reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_s2_combinator reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_goodname2 reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    FLOAT           reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    NUM             reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_3SQ      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_3DQ      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_SQ       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_DQ       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    true            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    Null            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    false           reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_type       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_num        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bool       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_any        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u16        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u8         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i16        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i8         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_f32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_f64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_str        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_list       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_tuple      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_array      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_vector     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_dict       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_generator  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_linked_list reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_doubly_linked_list reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_deque      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_heap       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_fibonacci_heap reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_tree       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_trie       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_stack      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_queue      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_binary_search_tree reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bitset     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_set        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_map        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_range      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bad_struct reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bad_struct2 reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    lambda          reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    NEWLINE         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    $end            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_inner  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    }               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    )               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    {               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    ]               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    :               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    ,               reduce using rule 35 (TYPE -> type_fibonacci_heap .)

  ! (               [ reduce using rule 35 (TYPE -> type_fibonacci_heap .) ]


state 80

    (171) return_val -> type_tree . ( arguments )
    (36) TYPE -> type_tree .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 191
    VAR             reduce using rule 36 (TYPE -> type_tree .)
    operator_add    reduce using rule 36 (TYPE -> type_tree .)
    operator_sub    reduce using rule 36 (TYPE -> type_tree .)
    operator_mul    reduce using rule 36 (TYPE -> type_tree .)
    operator_div    reduce using rule 36 (TYPE -> type_tree .)
    operator_trudiv reduce using rule 36 (TYPE -> type_tree .)
    operator_pow    reduce using rule 36 (TYPE -> type_tree .)
    operator_join   reduce using rule 36 (TYPE -> type_tree .)
    operator_split  reduce using rule 36 (TYPE -> type_tree .)
    operator_scan   reduce using rule 36 (TYPE -> type_tree .)
    operator_reduc  reduce using rule 36 (TYPE -> type_tree .)
    operator_bitand reduce using rule 36 (TYPE -> type_tree .)
    operator_bitor  reduce using rule 36 (TYPE -> type_tree .)
    operator_bitxor reduce using rule 36 (TYPE -> type_tree .)
    operator_bitshiftleft reduce using rule 36 (TYPE -> type_tree .)
    operator_bitshiftright reduce using rule 36 (TYPE -> type_tree .)
    operator_and    reduce using rule 36 (TYPE -> type_tree .)
    operator_or     reduce using rule 36 (TYPE -> type_tree .)
    operator_xor    reduce using rule 36 (TYPE -> type_tree .)
    operator_contains reduce using rule 36 (TYPE -> type_tree .)
    operator_incr   reduce using rule 36 (TYPE -> type_tree .)
    operator_decr   reduce using rule 36 (TYPE -> type_tree .)
    operator_outer  reduce using rule 36 (TYPE -> type_tree .)
    operator_rotate reduce using rule 36 (TYPE -> type_tree .)
    operator_apply  reduce using rule 36 (TYPE -> type_tree .)
    operator_compose reduce using rule 36 (TYPE -> type_tree .)
    operator_over   reduce using rule 36 (TYPE -> type_tree .)
    operator_map    reduce using rule 36 (TYPE -> type_tree .)
    operator_less_than reduce using rule 36 (TYPE -> type_tree .)
    operator_less_than_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_greater_than reduce using rule 36 (TYPE -> type_tree .)
    operator_greater_than_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_not_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_smallest reduce using rule 36 (TYPE -> type_tree .)
    operator_greatest reduce using rule 36 (TYPE -> type_tree .)
    operator_goodname reduce using rule 36 (TYPE -> type_tree .)
    [               reduce using rule 36 (TYPE -> type_tree .)
    operator_bitnot reduce using rule 36 (TYPE -> type_tree .)
    operator_not    reduce using rule 36 (TYPE -> type_tree .)
    operator_reverse reduce using rule 36 (TYPE -> type_tree .)
    operator_sorted_incr reduce using rule 36 (TYPE -> type_tree .)
    operator_sorted_decr reduce using rule 36 (TYPE -> type_tree .)
    operator_s_combinator reduce using rule 36 (TYPE -> type_tree .)
    operator_s2_combinator reduce using rule 36 (TYPE -> type_tree .)
    operator_goodname2 reduce using rule 36 (TYPE -> type_tree .)
    FLOAT           reduce using rule 36 (TYPE -> type_tree .)
    NUM             reduce using rule 36 (TYPE -> type_tree .)
    STRING_3SQ      reduce using rule 36 (TYPE -> type_tree .)
    STRING_3DQ      reduce using rule 36 (TYPE -> type_tree .)
    STRING_SQ       reduce using rule 36 (TYPE -> type_tree .)
    STRING_DQ       reduce using rule 36 (TYPE -> type_tree .)
    true            reduce using rule 36 (TYPE -> type_tree .)
    Null            reduce using rule 36 (TYPE -> type_tree .)
    false           reduce using rule 36 (TYPE -> type_tree .)
    type_type       reduce using rule 36 (TYPE -> type_tree .)
    type_num        reduce using rule 36 (TYPE -> type_tree .)
    type_bool       reduce using rule 36 (TYPE -> type_tree .)
    type_any        reduce using rule 36 (TYPE -> type_tree .)
    type_u64        reduce using rule 36 (TYPE -> type_tree .)
    type_u32        reduce using rule 36 (TYPE -> type_tree .)
    type_u16        reduce using rule 36 (TYPE -> type_tree .)
    type_u8         reduce using rule 36 (TYPE -> type_tree .)
    type_i64        reduce using rule 36 (TYPE -> type_tree .)
    type_i32        reduce using rule 36 (TYPE -> type_tree .)
    type_i16        reduce using rule 36 (TYPE -> type_tree .)
    type_i8         reduce using rule 36 (TYPE -> type_tree .)
    type_f32        reduce using rule 36 (TYPE -> type_tree .)
    type_f64        reduce using rule 36 (TYPE -> type_tree .)
    type_str        reduce using rule 36 (TYPE -> type_tree .)
    type_list       reduce using rule 36 (TYPE -> type_tree .)
    type_tuple      reduce using rule 36 (TYPE -> type_tree .)
    type_array      reduce using rule 36 (TYPE -> type_tree .)
    type_vector     reduce using rule 36 (TYPE -> type_tree .)
    type_dict       reduce using rule 36 (TYPE -> type_tree .)
    type_generator  reduce using rule 36 (TYPE -> type_tree .)
    type_linked_list reduce using rule 36 (TYPE -> type_tree .)
    type_doubly_linked_list reduce using rule 36 (TYPE -> type_tree .)
    type_deque      reduce using rule 36 (TYPE -> type_tree .)
    type_heap       reduce using rule 36 (TYPE -> type_tree .)
    type_fibonacci_heap reduce using rule 36 (TYPE -> type_tree .)
    type_tree       reduce using rule 36 (TYPE -> type_tree .)
    type_trie       reduce using rule 36 (TYPE -> type_tree .)
    type_stack      reduce using rule 36 (TYPE -> type_tree .)
    type_queue      reduce using rule 36 (TYPE -> type_tree .)
    type_binary_search_tree reduce using rule 36 (TYPE -> type_tree .)
    type_bitset     reduce using rule 36 (TYPE -> type_tree .)
    type_set        reduce using rule 36 (TYPE -> type_tree .)
    type_map        reduce using rule 36 (TYPE -> type_tree .)
    type_range      reduce using rule 36 (TYPE -> type_tree .)
    type_bad_struct reduce using rule 36 (TYPE -> type_tree .)
    type_bad_struct2 reduce using rule 36 (TYPE -> type_tree .)
    lambda          reduce using rule 36 (TYPE -> type_tree .)
    NEWLINE         reduce using rule 36 (TYPE -> type_tree .)
    $end            reduce using rule 36 (TYPE -> type_tree .)
    operator_inner  reduce using rule 36 (TYPE -> type_tree .)
    }               reduce using rule 36 (TYPE -> type_tree .)
    )               reduce using rule 36 (TYPE -> type_tree .)
    {               reduce using rule 36 (TYPE -> type_tree .)
    ]               reduce using rule 36 (TYPE -> type_tree .)
    :               reduce using rule 36 (TYPE -> type_tree .)
    ,               reduce using rule 36 (TYPE -> type_tree .)

  ! (               [ reduce using rule 36 (TYPE -> type_tree .) ]


state 81

    (172) return_val -> type_trie . ( arguments )
    (37) TYPE -> type_trie .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 192
    VAR             reduce using rule 37 (TYPE -> type_trie .)
    operator_add    reduce using rule 37 (TYPE -> type_trie .)
    operator_sub    reduce using rule 37 (TYPE -> type_trie .)
    operator_mul    reduce using rule 37 (TYPE -> type_trie .)
    operator_div    reduce using rule 37 (TYPE -> type_trie .)
    operator_trudiv reduce using rule 37 (TYPE -> type_trie .)
    operator_pow    reduce using rule 37 (TYPE -> type_trie .)
    operator_join   reduce using rule 37 (TYPE -> type_trie .)
    operator_split  reduce using rule 37 (TYPE -> type_trie .)
    operator_scan   reduce using rule 37 (TYPE -> type_trie .)
    operator_reduc  reduce using rule 37 (TYPE -> type_trie .)
    operator_bitand reduce using rule 37 (TYPE -> type_trie .)
    operator_bitor  reduce using rule 37 (TYPE -> type_trie .)
    operator_bitxor reduce using rule 37 (TYPE -> type_trie .)
    operator_bitshiftleft reduce using rule 37 (TYPE -> type_trie .)
    operator_bitshiftright reduce using rule 37 (TYPE -> type_trie .)
    operator_and    reduce using rule 37 (TYPE -> type_trie .)
    operator_or     reduce using rule 37 (TYPE -> type_trie .)
    operator_xor    reduce using rule 37 (TYPE -> type_trie .)
    operator_contains reduce using rule 37 (TYPE -> type_trie .)
    operator_incr   reduce using rule 37 (TYPE -> type_trie .)
    operator_decr   reduce using rule 37 (TYPE -> type_trie .)
    operator_outer  reduce using rule 37 (TYPE -> type_trie .)
    operator_rotate reduce using rule 37 (TYPE -> type_trie .)
    operator_apply  reduce using rule 37 (TYPE -> type_trie .)
    operator_compose reduce using rule 37 (TYPE -> type_trie .)
    operator_over   reduce using rule 37 (TYPE -> type_trie .)
    operator_map    reduce using rule 37 (TYPE -> type_trie .)
    operator_less_than reduce using rule 37 (TYPE -> type_trie .)
    operator_less_than_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_greater_than reduce using rule 37 (TYPE -> type_trie .)
    operator_greater_than_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_not_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_smallest reduce using rule 37 (TYPE -> type_trie .)
    operator_greatest reduce using rule 37 (TYPE -> type_trie .)
    operator_goodname reduce using rule 37 (TYPE -> type_trie .)
    [               reduce using rule 37 (TYPE -> type_trie .)
    operator_bitnot reduce using rule 37 (TYPE -> type_trie .)
    operator_not    reduce using rule 37 (TYPE -> type_trie .)
    operator_reverse reduce using rule 37 (TYPE -> type_trie .)
    operator_sorted_incr reduce using rule 37 (TYPE -> type_trie .)
    operator_sorted_decr reduce using rule 37 (TYPE -> type_trie .)
    operator_s_combinator reduce using rule 37 (TYPE -> type_trie .)
    operator_s2_combinator reduce using rule 37 (TYPE -> type_trie .)
    operator_goodname2 reduce using rule 37 (TYPE -> type_trie .)
    FLOAT           reduce using rule 37 (TYPE -> type_trie .)
    NUM             reduce using rule 37 (TYPE -> type_trie .)
    STRING_3SQ      reduce using rule 37 (TYPE -> type_trie .)
    STRING_3DQ      reduce using rule 37 (TYPE -> type_trie .)
    STRING_SQ       reduce using rule 37 (TYPE -> type_trie .)
    STRING_DQ       reduce using rule 37 (TYPE -> type_trie .)
    true            reduce using rule 37 (TYPE -> type_trie .)
    Null            reduce using rule 37 (TYPE -> type_trie .)
    false           reduce using rule 37 (TYPE -> type_trie .)
    type_type       reduce using rule 37 (TYPE -> type_trie .)
    type_num        reduce using rule 37 (TYPE -> type_trie .)
    type_bool       reduce using rule 37 (TYPE -> type_trie .)
    type_any        reduce using rule 37 (TYPE -> type_trie .)
    type_u64        reduce using rule 37 (TYPE -> type_trie .)
    type_u32        reduce using rule 37 (TYPE -> type_trie .)
    type_u16        reduce using rule 37 (TYPE -> type_trie .)
    type_u8         reduce using rule 37 (TYPE -> type_trie .)
    type_i64        reduce using rule 37 (TYPE -> type_trie .)
    type_i32        reduce using rule 37 (TYPE -> type_trie .)
    type_i16        reduce using rule 37 (TYPE -> type_trie .)
    type_i8         reduce using rule 37 (TYPE -> type_trie .)
    type_f32        reduce using rule 37 (TYPE -> type_trie .)
    type_f64        reduce using rule 37 (TYPE -> type_trie .)
    type_str        reduce using rule 37 (TYPE -> type_trie .)
    type_list       reduce using rule 37 (TYPE -> type_trie .)
    type_tuple      reduce using rule 37 (TYPE -> type_trie .)
    type_array      reduce using rule 37 (TYPE -> type_trie .)
    type_vector     reduce using rule 37 (TYPE -> type_trie .)
    type_dict       reduce using rule 37 (TYPE -> type_trie .)
    type_generator  reduce using rule 37 (TYPE -> type_trie .)
    type_linked_list reduce using rule 37 (TYPE -> type_trie .)
    type_doubly_linked_list reduce using rule 37 (TYPE -> type_trie .)
    type_deque      reduce using rule 37 (TYPE -> type_trie .)
    type_heap       reduce using rule 37 (TYPE -> type_trie .)
    type_fibonacci_heap reduce using rule 37 (TYPE -> type_trie .)
    type_tree       reduce using rule 37 (TYPE -> type_trie .)
    type_trie       reduce using rule 37 (TYPE -> type_trie .)
    type_stack      reduce using rule 37 (TYPE -> type_trie .)
    type_queue      reduce using rule 37 (TYPE -> type_trie .)
    type_binary_search_tree reduce using rule 37 (TYPE -> type_trie .)
    type_bitset     reduce using rule 37 (TYPE -> type_trie .)
    type_set        reduce using rule 37 (TYPE -> type_trie .)
    type_map        reduce using rule 37 (TYPE -> type_trie .)
    type_range      reduce using rule 37 (TYPE -> type_trie .)
    type_bad_struct reduce using rule 37 (TYPE -> type_trie .)
    type_bad_struct2 reduce using rule 37 (TYPE -> type_trie .)
    lambda          reduce using rule 37 (TYPE -> type_trie .)
    NEWLINE         reduce using rule 37 (TYPE -> type_trie .)
    $end            reduce using rule 37 (TYPE -> type_trie .)
    operator_inner  reduce using rule 37 (TYPE -> type_trie .)
    }               reduce using rule 37 (TYPE -> type_trie .)
    )               reduce using rule 37 (TYPE -> type_trie .)
    {               reduce using rule 37 (TYPE -> type_trie .)
    ]               reduce using rule 37 (TYPE -> type_trie .)
    :               reduce using rule 37 (TYPE -> type_trie .)
    ,               reduce using rule 37 (TYPE -> type_trie .)

  ! (               [ reduce using rule 37 (TYPE -> type_trie .) ]


state 82

    (173) return_val -> type_stack . ( arguments )
    (38) TYPE -> type_stack .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 193
    VAR             reduce using rule 38 (TYPE -> type_stack .)
    operator_add    reduce using rule 38 (TYPE -> type_stack .)
    operator_sub    reduce using rule 38 (TYPE -> type_stack .)
    operator_mul    reduce using rule 38 (TYPE -> type_stack .)
    operator_div    reduce using rule 38 (TYPE -> type_stack .)
    operator_trudiv reduce using rule 38 (TYPE -> type_stack .)
    operator_pow    reduce using rule 38 (TYPE -> type_stack .)
    operator_join   reduce using rule 38 (TYPE -> type_stack .)
    operator_split  reduce using rule 38 (TYPE -> type_stack .)
    operator_scan   reduce using rule 38 (TYPE -> type_stack .)
    operator_reduc  reduce using rule 38 (TYPE -> type_stack .)
    operator_bitand reduce using rule 38 (TYPE -> type_stack .)
    operator_bitor  reduce using rule 38 (TYPE -> type_stack .)
    operator_bitxor reduce using rule 38 (TYPE -> type_stack .)
    operator_bitshiftleft reduce using rule 38 (TYPE -> type_stack .)
    operator_bitshiftright reduce using rule 38 (TYPE -> type_stack .)
    operator_and    reduce using rule 38 (TYPE -> type_stack .)
    operator_or     reduce using rule 38 (TYPE -> type_stack .)
    operator_xor    reduce using rule 38 (TYPE -> type_stack .)
    operator_contains reduce using rule 38 (TYPE -> type_stack .)
    operator_incr   reduce using rule 38 (TYPE -> type_stack .)
    operator_decr   reduce using rule 38 (TYPE -> type_stack .)
    operator_outer  reduce using rule 38 (TYPE -> type_stack .)
    operator_rotate reduce using rule 38 (TYPE -> type_stack .)
    operator_apply  reduce using rule 38 (TYPE -> type_stack .)
    operator_compose reduce using rule 38 (TYPE -> type_stack .)
    operator_over   reduce using rule 38 (TYPE -> type_stack .)
    operator_map    reduce using rule 38 (TYPE -> type_stack .)
    operator_less_than reduce using rule 38 (TYPE -> type_stack .)
    operator_less_than_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_greater_than reduce using rule 38 (TYPE -> type_stack .)
    operator_greater_than_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_not_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_smallest reduce using rule 38 (TYPE -> type_stack .)
    operator_greatest reduce using rule 38 (TYPE -> type_stack .)
    operator_goodname reduce using rule 38 (TYPE -> type_stack .)
    [               reduce using rule 38 (TYPE -> type_stack .)
    operator_bitnot reduce using rule 38 (TYPE -> type_stack .)
    operator_not    reduce using rule 38 (TYPE -> type_stack .)
    operator_reverse reduce using rule 38 (TYPE -> type_stack .)
    operator_sorted_incr reduce using rule 38 (TYPE -> type_stack .)
    operator_sorted_decr reduce using rule 38 (TYPE -> type_stack .)
    operator_s_combinator reduce using rule 38 (TYPE -> type_stack .)
    operator_s2_combinator reduce using rule 38 (TYPE -> type_stack .)
    operator_goodname2 reduce using rule 38 (TYPE -> type_stack .)
    FLOAT           reduce using rule 38 (TYPE -> type_stack .)
    NUM             reduce using rule 38 (TYPE -> type_stack .)
    STRING_3SQ      reduce using rule 38 (TYPE -> type_stack .)
    STRING_3DQ      reduce using rule 38 (TYPE -> type_stack .)
    STRING_SQ       reduce using rule 38 (TYPE -> type_stack .)
    STRING_DQ       reduce using rule 38 (TYPE -> type_stack .)
    true            reduce using rule 38 (TYPE -> type_stack .)
    Null            reduce using rule 38 (TYPE -> type_stack .)
    false           reduce using rule 38 (TYPE -> type_stack .)
    type_type       reduce using rule 38 (TYPE -> type_stack .)
    type_num        reduce using rule 38 (TYPE -> type_stack .)
    type_bool       reduce using rule 38 (TYPE -> type_stack .)
    type_any        reduce using rule 38 (TYPE -> type_stack .)
    type_u64        reduce using rule 38 (TYPE -> type_stack .)
    type_u32        reduce using rule 38 (TYPE -> type_stack .)
    type_u16        reduce using rule 38 (TYPE -> type_stack .)
    type_u8         reduce using rule 38 (TYPE -> type_stack .)
    type_i64        reduce using rule 38 (TYPE -> type_stack .)
    type_i32        reduce using rule 38 (TYPE -> type_stack .)
    type_i16        reduce using rule 38 (TYPE -> type_stack .)
    type_i8         reduce using rule 38 (TYPE -> type_stack .)
    type_f32        reduce using rule 38 (TYPE -> type_stack .)
    type_f64        reduce using rule 38 (TYPE -> type_stack .)
    type_str        reduce using rule 38 (TYPE -> type_stack .)
    type_list       reduce using rule 38 (TYPE -> type_stack .)
    type_tuple      reduce using rule 38 (TYPE -> type_stack .)
    type_array      reduce using rule 38 (TYPE -> type_stack .)
    type_vector     reduce using rule 38 (TYPE -> type_stack .)
    type_dict       reduce using rule 38 (TYPE -> type_stack .)
    type_generator  reduce using rule 38 (TYPE -> type_stack .)
    type_linked_list reduce using rule 38 (TYPE -> type_stack .)
    type_doubly_linked_list reduce using rule 38 (TYPE -> type_stack .)
    type_deque      reduce using rule 38 (TYPE -> type_stack .)
    type_heap       reduce using rule 38 (TYPE -> type_stack .)
    type_fibonacci_heap reduce using rule 38 (TYPE -> type_stack .)
    type_tree       reduce using rule 38 (TYPE -> type_stack .)
    type_trie       reduce using rule 38 (TYPE -> type_stack .)
    type_stack      reduce using rule 38 (TYPE -> type_stack .)
    type_queue      reduce using rule 38 (TYPE -> type_stack .)
    type_binary_search_tree reduce using rule 38 (TYPE -> type_stack .)
    type_bitset     reduce using rule 38 (TYPE -> type_stack .)
    type_set        reduce using rule 38 (TYPE -> type_stack .)
    type_map        reduce using rule 38 (TYPE -> type_stack .)
    type_range      reduce using rule 38 (TYPE -> type_stack .)
    type_bad_struct reduce using rule 38 (TYPE -> type_stack .)
    type_bad_struct2 reduce using rule 38 (TYPE -> type_stack .)
    lambda          reduce using rule 38 (TYPE -> type_stack .)
    NEWLINE         reduce using rule 38 (TYPE -> type_stack .)
    $end            reduce using rule 38 (TYPE -> type_stack .)
    operator_inner  reduce using rule 38 (TYPE -> type_stack .)
    }               reduce using rule 38 (TYPE -> type_stack .)
    )               reduce using rule 38 (TYPE -> type_stack .)
    {               reduce using rule 38 (TYPE -> type_stack .)
    ]               reduce using rule 38 (TYPE -> type_stack .)
    :               reduce using rule 38 (TYPE -> type_stack .)
    ,               reduce using rule 38 (TYPE -> type_stack .)

  ! (               [ reduce using rule 38 (TYPE -> type_stack .) ]


state 83

    (174) return_val -> type_queue . ( arguments )
    (39) TYPE -> type_queue .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 194
    VAR             reduce using rule 39 (TYPE -> type_queue .)
    operator_add    reduce using rule 39 (TYPE -> type_queue .)
    operator_sub    reduce using rule 39 (TYPE -> type_queue .)
    operator_mul    reduce using rule 39 (TYPE -> type_queue .)
    operator_div    reduce using rule 39 (TYPE -> type_queue .)
    operator_trudiv reduce using rule 39 (TYPE -> type_queue .)
    operator_pow    reduce using rule 39 (TYPE -> type_queue .)
    operator_join   reduce using rule 39 (TYPE -> type_queue .)
    operator_split  reduce using rule 39 (TYPE -> type_queue .)
    operator_scan   reduce using rule 39 (TYPE -> type_queue .)
    operator_reduc  reduce using rule 39 (TYPE -> type_queue .)
    operator_bitand reduce using rule 39 (TYPE -> type_queue .)
    operator_bitor  reduce using rule 39 (TYPE -> type_queue .)
    operator_bitxor reduce using rule 39 (TYPE -> type_queue .)
    operator_bitshiftleft reduce using rule 39 (TYPE -> type_queue .)
    operator_bitshiftright reduce using rule 39 (TYPE -> type_queue .)
    operator_and    reduce using rule 39 (TYPE -> type_queue .)
    operator_or     reduce using rule 39 (TYPE -> type_queue .)
    operator_xor    reduce using rule 39 (TYPE -> type_queue .)
    operator_contains reduce using rule 39 (TYPE -> type_queue .)
    operator_incr   reduce using rule 39 (TYPE -> type_queue .)
    operator_decr   reduce using rule 39 (TYPE -> type_queue .)
    operator_outer  reduce using rule 39 (TYPE -> type_queue .)
    operator_rotate reduce using rule 39 (TYPE -> type_queue .)
    operator_apply  reduce using rule 39 (TYPE -> type_queue .)
    operator_compose reduce using rule 39 (TYPE -> type_queue .)
    operator_over   reduce using rule 39 (TYPE -> type_queue .)
    operator_map    reduce using rule 39 (TYPE -> type_queue .)
    operator_less_than reduce using rule 39 (TYPE -> type_queue .)
    operator_less_than_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_greater_than reduce using rule 39 (TYPE -> type_queue .)
    operator_greater_than_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_not_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_smallest reduce using rule 39 (TYPE -> type_queue .)
    operator_greatest reduce using rule 39 (TYPE -> type_queue .)
    operator_goodname reduce using rule 39 (TYPE -> type_queue .)
    [               reduce using rule 39 (TYPE -> type_queue .)
    operator_bitnot reduce using rule 39 (TYPE -> type_queue .)
    operator_not    reduce using rule 39 (TYPE -> type_queue .)
    operator_reverse reduce using rule 39 (TYPE -> type_queue .)
    operator_sorted_incr reduce using rule 39 (TYPE -> type_queue .)
    operator_sorted_decr reduce using rule 39 (TYPE -> type_queue .)
    operator_s_combinator reduce using rule 39 (TYPE -> type_queue .)
    operator_s2_combinator reduce using rule 39 (TYPE -> type_queue .)
    operator_goodname2 reduce using rule 39 (TYPE -> type_queue .)
    FLOAT           reduce using rule 39 (TYPE -> type_queue .)
    NUM             reduce using rule 39 (TYPE -> type_queue .)
    STRING_3SQ      reduce using rule 39 (TYPE -> type_queue .)
    STRING_3DQ      reduce using rule 39 (TYPE -> type_queue .)
    STRING_SQ       reduce using rule 39 (TYPE -> type_queue .)
    STRING_DQ       reduce using rule 39 (TYPE -> type_queue .)
    true            reduce using rule 39 (TYPE -> type_queue .)
    Null            reduce using rule 39 (TYPE -> type_queue .)
    false           reduce using rule 39 (TYPE -> type_queue .)
    type_type       reduce using rule 39 (TYPE -> type_queue .)
    type_num        reduce using rule 39 (TYPE -> type_queue .)
    type_bool       reduce using rule 39 (TYPE -> type_queue .)
    type_any        reduce using rule 39 (TYPE -> type_queue .)
    type_u64        reduce using rule 39 (TYPE -> type_queue .)
    type_u32        reduce using rule 39 (TYPE -> type_queue .)
    type_u16        reduce using rule 39 (TYPE -> type_queue .)
    type_u8         reduce using rule 39 (TYPE -> type_queue .)
    type_i64        reduce using rule 39 (TYPE -> type_queue .)
    type_i32        reduce using rule 39 (TYPE -> type_queue .)
    type_i16        reduce using rule 39 (TYPE -> type_queue .)
    type_i8         reduce using rule 39 (TYPE -> type_queue .)
    type_f32        reduce using rule 39 (TYPE -> type_queue .)
    type_f64        reduce using rule 39 (TYPE -> type_queue .)
    type_str        reduce using rule 39 (TYPE -> type_queue .)
    type_list       reduce using rule 39 (TYPE -> type_queue .)
    type_tuple      reduce using rule 39 (TYPE -> type_queue .)
    type_array      reduce using rule 39 (TYPE -> type_queue .)
    type_vector     reduce using rule 39 (TYPE -> type_queue .)
    type_dict       reduce using rule 39 (TYPE -> type_queue .)
    type_generator  reduce using rule 39 (TYPE -> type_queue .)
    type_linked_list reduce using rule 39 (TYPE -> type_queue .)
    type_doubly_linked_list reduce using rule 39 (TYPE -> type_queue .)
    type_deque      reduce using rule 39 (TYPE -> type_queue .)
    type_heap       reduce using rule 39 (TYPE -> type_queue .)
    type_fibonacci_heap reduce using rule 39 (TYPE -> type_queue .)
    type_tree       reduce using rule 39 (TYPE -> type_queue .)
    type_trie       reduce using rule 39 (TYPE -> type_queue .)
    type_stack      reduce using rule 39 (TYPE -> type_queue .)
    type_queue      reduce using rule 39 (TYPE -> type_queue .)
    type_binary_search_tree reduce using rule 39 (TYPE -> type_queue .)
    type_bitset     reduce using rule 39 (TYPE -> type_queue .)
    type_set        reduce using rule 39 (TYPE -> type_queue .)
    type_map        reduce using rule 39 (TYPE -> type_queue .)
    type_range      reduce using rule 39 (TYPE -> type_queue .)
    type_bad_struct reduce using rule 39 (TYPE -> type_queue .)
    type_bad_struct2 reduce using rule 39 (TYPE -> type_queue .)
    lambda          reduce using rule 39 (TYPE -> type_queue .)
    NEWLINE         reduce using rule 39 (TYPE -> type_queue .)
    $end            reduce using rule 39 (TYPE -> type_queue .)
    operator_inner  reduce using rule 39 (TYPE -> type_queue .)
    }               reduce using rule 39 (TYPE -> type_queue .)
    )               reduce using rule 39 (TYPE -> type_queue .)
    {               reduce using rule 39 (TYPE -> type_queue .)
    ]               reduce using rule 39 (TYPE -> type_queue .)
    :               reduce using rule 39 (TYPE -> type_queue .)
    ,               reduce using rule 39 (TYPE -> type_queue .)

  ! (               [ reduce using rule 39 (TYPE -> type_queue .) ]


state 84

    (175) return_val -> type_binary_search_tree . ( arguments )
    (40) TYPE -> type_binary_search_tree .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 195
    VAR             reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_add    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sub    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_mul    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_div    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_trudiv reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_pow    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_join   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_split  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_scan   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_reduc  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitand reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitor  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitxor reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitshiftleft reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitshiftright reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_and    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_or     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_xor    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_contains reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_incr   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_decr   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_outer  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_rotate reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_apply  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_compose reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_over   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_map    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_less_than reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_less_than_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greater_than reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greater_than_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_not_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_smallest reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greatest reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_goodname reduce using rule 40 (TYPE -> type_binary_search_tree .)
    [               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitnot reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_not    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_reverse reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sorted_incr reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sorted_decr reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_s_combinator reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_s2_combinator reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_goodname2 reduce using rule 40 (TYPE -> type_binary_search_tree .)
    FLOAT           reduce using rule 40 (TYPE -> type_binary_search_tree .)
    NUM             reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_3SQ      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_3DQ      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_SQ       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_DQ       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    true            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    Null            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    false           reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_type       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_num        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bool       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_any        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u16        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u8         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i16        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i8         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_f32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_f64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_str        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_list       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_tuple      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_array      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_vector     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_dict       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_generator  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_linked_list reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_doubly_linked_list reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_deque      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_heap       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_fibonacci_heap reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_tree       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_trie       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_stack      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_queue      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_binary_search_tree reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bitset     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_set        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_map        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_range      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bad_struct reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bad_struct2 reduce using rule 40 (TYPE -> type_binary_search_tree .)
    lambda          reduce using rule 40 (TYPE -> type_binary_search_tree .)
    NEWLINE         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    $end            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_inner  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    }               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    )               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    {               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    ]               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    :               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    ,               reduce using rule 40 (TYPE -> type_binary_search_tree .)

  ! (               [ reduce using rule 40 (TYPE -> type_binary_search_tree .) ]


state 85

    (176) return_val -> type_bitset . ( arguments )
    (41) TYPE -> type_bitset .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 196
    VAR             reduce using rule 41 (TYPE -> type_bitset .)
    operator_add    reduce using rule 41 (TYPE -> type_bitset .)
    operator_sub    reduce using rule 41 (TYPE -> type_bitset .)
    operator_mul    reduce using rule 41 (TYPE -> type_bitset .)
    operator_div    reduce using rule 41 (TYPE -> type_bitset .)
    operator_trudiv reduce using rule 41 (TYPE -> type_bitset .)
    operator_pow    reduce using rule 41 (TYPE -> type_bitset .)
    operator_join   reduce using rule 41 (TYPE -> type_bitset .)
    operator_split  reduce using rule 41 (TYPE -> type_bitset .)
    operator_scan   reduce using rule 41 (TYPE -> type_bitset .)
    operator_reduc  reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitand reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitor  reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitxor reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitshiftleft reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitshiftright reduce using rule 41 (TYPE -> type_bitset .)
    operator_and    reduce using rule 41 (TYPE -> type_bitset .)
    operator_or     reduce using rule 41 (TYPE -> type_bitset .)
    operator_xor    reduce using rule 41 (TYPE -> type_bitset .)
    operator_contains reduce using rule 41 (TYPE -> type_bitset .)
    operator_incr   reduce using rule 41 (TYPE -> type_bitset .)
    operator_decr   reduce using rule 41 (TYPE -> type_bitset .)
    operator_outer  reduce using rule 41 (TYPE -> type_bitset .)
    operator_rotate reduce using rule 41 (TYPE -> type_bitset .)
    operator_apply  reduce using rule 41 (TYPE -> type_bitset .)
    operator_compose reduce using rule 41 (TYPE -> type_bitset .)
    operator_over   reduce using rule 41 (TYPE -> type_bitset .)
    operator_map    reduce using rule 41 (TYPE -> type_bitset .)
    operator_less_than reduce using rule 41 (TYPE -> type_bitset .)
    operator_less_than_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_greater_than reduce using rule 41 (TYPE -> type_bitset .)
    operator_greater_than_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_not_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_smallest reduce using rule 41 (TYPE -> type_bitset .)
    operator_greatest reduce using rule 41 (TYPE -> type_bitset .)
    operator_goodname reduce using rule 41 (TYPE -> type_bitset .)
    [               reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitnot reduce using rule 41 (TYPE -> type_bitset .)
    operator_not    reduce using rule 41 (TYPE -> type_bitset .)
    operator_reverse reduce using rule 41 (TYPE -> type_bitset .)
    operator_sorted_incr reduce using rule 41 (TYPE -> type_bitset .)
    operator_sorted_decr reduce using rule 41 (TYPE -> type_bitset .)
    operator_s_combinator reduce using rule 41 (TYPE -> type_bitset .)
    operator_s2_combinator reduce using rule 41 (TYPE -> type_bitset .)
    operator_goodname2 reduce using rule 41 (TYPE -> type_bitset .)
    FLOAT           reduce using rule 41 (TYPE -> type_bitset .)
    NUM             reduce using rule 41 (TYPE -> type_bitset .)
    STRING_3SQ      reduce using rule 41 (TYPE -> type_bitset .)
    STRING_3DQ      reduce using rule 41 (TYPE -> type_bitset .)
    STRING_SQ       reduce using rule 41 (TYPE -> type_bitset .)
    STRING_DQ       reduce using rule 41 (TYPE -> type_bitset .)
    true            reduce using rule 41 (TYPE -> type_bitset .)
    Null            reduce using rule 41 (TYPE -> type_bitset .)
    false           reduce using rule 41 (TYPE -> type_bitset .)
    type_type       reduce using rule 41 (TYPE -> type_bitset .)
    type_num        reduce using rule 41 (TYPE -> type_bitset .)
    type_bool       reduce using rule 41 (TYPE -> type_bitset .)
    type_any        reduce using rule 41 (TYPE -> type_bitset .)
    type_u64        reduce using rule 41 (TYPE -> type_bitset .)
    type_u32        reduce using rule 41 (TYPE -> type_bitset .)
    type_u16        reduce using rule 41 (TYPE -> type_bitset .)
    type_u8         reduce using rule 41 (TYPE -> type_bitset .)
    type_i64        reduce using rule 41 (TYPE -> type_bitset .)
    type_i32        reduce using rule 41 (TYPE -> type_bitset .)
    type_i16        reduce using rule 41 (TYPE -> type_bitset .)
    type_i8         reduce using rule 41 (TYPE -> type_bitset .)
    type_f32        reduce using rule 41 (TYPE -> type_bitset .)
    type_f64        reduce using rule 41 (TYPE -> type_bitset .)
    type_str        reduce using rule 41 (TYPE -> type_bitset .)
    type_list       reduce using rule 41 (TYPE -> type_bitset .)
    type_tuple      reduce using rule 41 (TYPE -> type_bitset .)
    type_array      reduce using rule 41 (TYPE -> type_bitset .)
    type_vector     reduce using rule 41 (TYPE -> type_bitset .)
    type_dict       reduce using rule 41 (TYPE -> type_bitset .)
    type_generator  reduce using rule 41 (TYPE -> type_bitset .)
    type_linked_list reduce using rule 41 (TYPE -> type_bitset .)
    type_doubly_linked_list reduce using rule 41 (TYPE -> type_bitset .)
    type_deque      reduce using rule 41 (TYPE -> type_bitset .)
    type_heap       reduce using rule 41 (TYPE -> type_bitset .)
    type_fibonacci_heap reduce using rule 41 (TYPE -> type_bitset .)
    type_tree       reduce using rule 41 (TYPE -> type_bitset .)
    type_trie       reduce using rule 41 (TYPE -> type_bitset .)
    type_stack      reduce using rule 41 (TYPE -> type_bitset .)
    type_queue      reduce using rule 41 (TYPE -> type_bitset .)
    type_binary_search_tree reduce using rule 41 (TYPE -> type_bitset .)
    type_bitset     reduce using rule 41 (TYPE -> type_bitset .)
    type_set        reduce using rule 41 (TYPE -> type_bitset .)
    type_map        reduce using rule 41 (TYPE -> type_bitset .)
    type_range      reduce using rule 41 (TYPE -> type_bitset .)
    type_bad_struct reduce using rule 41 (TYPE -> type_bitset .)
    type_bad_struct2 reduce using rule 41 (TYPE -> type_bitset .)
    lambda          reduce using rule 41 (TYPE -> type_bitset .)
    NEWLINE         reduce using rule 41 (TYPE -> type_bitset .)
    $end            reduce using rule 41 (TYPE -> type_bitset .)
    operator_inner  reduce using rule 41 (TYPE -> type_bitset .)
    }               reduce using rule 41 (TYPE -> type_bitset .)
    )               reduce using rule 41 (TYPE -> type_bitset .)
    {               reduce using rule 41 (TYPE -> type_bitset .)
    ]               reduce using rule 41 (TYPE -> type_bitset .)
    :               reduce using rule 41 (TYPE -> type_bitset .)
    ,               reduce using rule 41 (TYPE -> type_bitset .)

  ! (               [ reduce using rule 41 (TYPE -> type_bitset .) ]


state 86

    (177) return_val -> type_set . ( arguments )
    (42) TYPE -> type_set .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 197
    VAR             reduce using rule 42 (TYPE -> type_set .)
    operator_add    reduce using rule 42 (TYPE -> type_set .)
    operator_sub    reduce using rule 42 (TYPE -> type_set .)
    operator_mul    reduce using rule 42 (TYPE -> type_set .)
    operator_div    reduce using rule 42 (TYPE -> type_set .)
    operator_trudiv reduce using rule 42 (TYPE -> type_set .)
    operator_pow    reduce using rule 42 (TYPE -> type_set .)
    operator_join   reduce using rule 42 (TYPE -> type_set .)
    operator_split  reduce using rule 42 (TYPE -> type_set .)
    operator_scan   reduce using rule 42 (TYPE -> type_set .)
    operator_reduc  reduce using rule 42 (TYPE -> type_set .)
    operator_bitand reduce using rule 42 (TYPE -> type_set .)
    operator_bitor  reduce using rule 42 (TYPE -> type_set .)
    operator_bitxor reduce using rule 42 (TYPE -> type_set .)
    operator_bitshiftleft reduce using rule 42 (TYPE -> type_set .)
    operator_bitshiftright reduce using rule 42 (TYPE -> type_set .)
    operator_and    reduce using rule 42 (TYPE -> type_set .)
    operator_or     reduce using rule 42 (TYPE -> type_set .)
    operator_xor    reduce using rule 42 (TYPE -> type_set .)
    operator_contains reduce using rule 42 (TYPE -> type_set .)
    operator_incr   reduce using rule 42 (TYPE -> type_set .)
    operator_decr   reduce using rule 42 (TYPE -> type_set .)
    operator_outer  reduce using rule 42 (TYPE -> type_set .)
    operator_rotate reduce using rule 42 (TYPE -> type_set .)
    operator_apply  reduce using rule 42 (TYPE -> type_set .)
    operator_compose reduce using rule 42 (TYPE -> type_set .)
    operator_over   reduce using rule 42 (TYPE -> type_set .)
    operator_map    reduce using rule 42 (TYPE -> type_set .)
    operator_less_than reduce using rule 42 (TYPE -> type_set .)
    operator_less_than_equals reduce using rule 42 (TYPE -> type_set .)
    operator_greater_than reduce using rule 42 (TYPE -> type_set .)
    operator_greater_than_equals reduce using rule 42 (TYPE -> type_set .)
    operator_equals reduce using rule 42 (TYPE -> type_set .)
    operator_not_equals reduce using rule 42 (TYPE -> type_set .)
    operator_smallest reduce using rule 42 (TYPE -> type_set .)
    operator_greatest reduce using rule 42 (TYPE -> type_set .)
    operator_goodname reduce using rule 42 (TYPE -> type_set .)
    [               reduce using rule 42 (TYPE -> type_set .)
    operator_bitnot reduce using rule 42 (TYPE -> type_set .)
    operator_not    reduce using rule 42 (TYPE -> type_set .)
    operator_reverse reduce using rule 42 (TYPE -> type_set .)
    operator_sorted_incr reduce using rule 42 (TYPE -> type_set .)
    operator_sorted_decr reduce using rule 42 (TYPE -> type_set .)
    operator_s_combinator reduce using rule 42 (TYPE -> type_set .)
    operator_s2_combinator reduce using rule 42 (TYPE -> type_set .)
    operator_goodname2 reduce using rule 42 (TYPE -> type_set .)
    FLOAT           reduce using rule 42 (TYPE -> type_set .)
    NUM             reduce using rule 42 (TYPE -> type_set .)
    STRING_3SQ      reduce using rule 42 (TYPE -> type_set .)
    STRING_3DQ      reduce using rule 42 (TYPE -> type_set .)
    STRING_SQ       reduce using rule 42 (TYPE -> type_set .)
    STRING_DQ       reduce using rule 42 (TYPE -> type_set .)
    true            reduce using rule 42 (TYPE -> type_set .)
    Null            reduce using rule 42 (TYPE -> type_set .)
    false           reduce using rule 42 (TYPE -> type_set .)
    type_type       reduce using rule 42 (TYPE -> type_set .)
    type_num        reduce using rule 42 (TYPE -> type_set .)
    type_bool       reduce using rule 42 (TYPE -> type_set .)
    type_any        reduce using rule 42 (TYPE -> type_set .)
    type_u64        reduce using rule 42 (TYPE -> type_set .)
    type_u32        reduce using rule 42 (TYPE -> type_set .)
    type_u16        reduce using rule 42 (TYPE -> type_set .)
    type_u8         reduce using rule 42 (TYPE -> type_set .)
    type_i64        reduce using rule 42 (TYPE -> type_set .)
    type_i32        reduce using rule 42 (TYPE -> type_set .)
    type_i16        reduce using rule 42 (TYPE -> type_set .)
    type_i8         reduce using rule 42 (TYPE -> type_set .)
    type_f32        reduce using rule 42 (TYPE -> type_set .)
    type_f64        reduce using rule 42 (TYPE -> type_set .)
    type_str        reduce using rule 42 (TYPE -> type_set .)
    type_list       reduce using rule 42 (TYPE -> type_set .)
    type_tuple      reduce using rule 42 (TYPE -> type_set .)
    type_array      reduce using rule 42 (TYPE -> type_set .)
    type_vector     reduce using rule 42 (TYPE -> type_set .)
    type_dict       reduce using rule 42 (TYPE -> type_set .)
    type_generator  reduce using rule 42 (TYPE -> type_set .)
    type_linked_list reduce using rule 42 (TYPE -> type_set .)
    type_doubly_linked_list reduce using rule 42 (TYPE -> type_set .)
    type_deque      reduce using rule 42 (TYPE -> type_set .)
    type_heap       reduce using rule 42 (TYPE -> type_set .)
    type_fibonacci_heap reduce using rule 42 (TYPE -> type_set .)
    type_tree       reduce using rule 42 (TYPE -> type_set .)
    type_trie       reduce using rule 42 (TYPE -> type_set .)
    type_stack      reduce using rule 42 (TYPE -> type_set .)
    type_queue      reduce using rule 42 (TYPE -> type_set .)
    type_binary_search_tree reduce using rule 42 (TYPE -> type_set .)
    type_bitset     reduce using rule 42 (TYPE -> type_set .)
    type_set        reduce using rule 42 (TYPE -> type_set .)
    type_map        reduce using rule 42 (TYPE -> type_set .)
    type_range      reduce using rule 42 (TYPE -> type_set .)
    type_bad_struct reduce using rule 42 (TYPE -> type_set .)
    type_bad_struct2 reduce using rule 42 (TYPE -> type_set .)
    lambda          reduce using rule 42 (TYPE -> type_set .)
    NEWLINE         reduce using rule 42 (TYPE -> type_set .)
    $end            reduce using rule 42 (TYPE -> type_set .)
    operator_inner  reduce using rule 42 (TYPE -> type_set .)
    }               reduce using rule 42 (TYPE -> type_set .)
    )               reduce using rule 42 (TYPE -> type_set .)
    {               reduce using rule 42 (TYPE -> type_set .)
    ]               reduce using rule 42 (TYPE -> type_set .)
    :               reduce using rule 42 (TYPE -> type_set .)
    ,               reduce using rule 42 (TYPE -> type_set .)

  ! (               [ reduce using rule 42 (TYPE -> type_set .) ]


state 87

    (178) return_val -> type_map . ( arguments )
    (43) TYPE -> type_map .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 198
    VAR             reduce using rule 43 (TYPE -> type_map .)
    operator_add    reduce using rule 43 (TYPE -> type_map .)
    operator_sub    reduce using rule 43 (TYPE -> type_map .)
    operator_mul    reduce using rule 43 (TYPE -> type_map .)
    operator_div    reduce using rule 43 (TYPE -> type_map .)
    operator_trudiv reduce using rule 43 (TYPE -> type_map .)
    operator_pow    reduce using rule 43 (TYPE -> type_map .)
    operator_join   reduce using rule 43 (TYPE -> type_map .)
    operator_split  reduce using rule 43 (TYPE -> type_map .)
    operator_scan   reduce using rule 43 (TYPE -> type_map .)
    operator_reduc  reduce using rule 43 (TYPE -> type_map .)
    operator_bitand reduce using rule 43 (TYPE -> type_map .)
    operator_bitor  reduce using rule 43 (TYPE -> type_map .)
    operator_bitxor reduce using rule 43 (TYPE -> type_map .)
    operator_bitshiftleft reduce using rule 43 (TYPE -> type_map .)
    operator_bitshiftright reduce using rule 43 (TYPE -> type_map .)
    operator_and    reduce using rule 43 (TYPE -> type_map .)
    operator_or     reduce using rule 43 (TYPE -> type_map .)
    operator_xor    reduce using rule 43 (TYPE -> type_map .)
    operator_contains reduce using rule 43 (TYPE -> type_map .)
    operator_incr   reduce using rule 43 (TYPE -> type_map .)
    operator_decr   reduce using rule 43 (TYPE -> type_map .)
    operator_outer  reduce using rule 43 (TYPE -> type_map .)
    operator_rotate reduce using rule 43 (TYPE -> type_map .)
    operator_apply  reduce using rule 43 (TYPE -> type_map .)
    operator_compose reduce using rule 43 (TYPE -> type_map .)
    operator_over   reduce using rule 43 (TYPE -> type_map .)
    operator_map    reduce using rule 43 (TYPE -> type_map .)
    operator_less_than reduce using rule 43 (TYPE -> type_map .)
    operator_less_than_equals reduce using rule 43 (TYPE -> type_map .)
    operator_greater_than reduce using rule 43 (TYPE -> type_map .)
    operator_greater_than_equals reduce using rule 43 (TYPE -> type_map .)
    operator_equals reduce using rule 43 (TYPE -> type_map .)
    operator_not_equals reduce using rule 43 (TYPE -> type_map .)
    operator_smallest reduce using rule 43 (TYPE -> type_map .)
    operator_greatest reduce using rule 43 (TYPE -> type_map .)
    operator_goodname reduce using rule 43 (TYPE -> type_map .)
    [               reduce using rule 43 (TYPE -> type_map .)
    operator_bitnot reduce using rule 43 (TYPE -> type_map .)
    operator_not    reduce using rule 43 (TYPE -> type_map .)
    operator_reverse reduce using rule 43 (TYPE -> type_map .)
    operator_sorted_incr reduce using rule 43 (TYPE -> type_map .)
    operator_sorted_decr reduce using rule 43 (TYPE -> type_map .)
    operator_s_combinator reduce using rule 43 (TYPE -> type_map .)
    operator_s2_combinator reduce using rule 43 (TYPE -> type_map .)
    operator_goodname2 reduce using rule 43 (TYPE -> type_map .)
    FLOAT           reduce using rule 43 (TYPE -> type_map .)
    NUM             reduce using rule 43 (TYPE -> type_map .)
    STRING_3SQ      reduce using rule 43 (TYPE -> type_map .)
    STRING_3DQ      reduce using rule 43 (TYPE -> type_map .)
    STRING_SQ       reduce using rule 43 (TYPE -> type_map .)
    STRING_DQ       reduce using rule 43 (TYPE -> type_map .)
    true            reduce using rule 43 (TYPE -> type_map .)
    Null            reduce using rule 43 (TYPE -> type_map .)
    false           reduce using rule 43 (TYPE -> type_map .)
    type_type       reduce using rule 43 (TYPE -> type_map .)
    type_num        reduce using rule 43 (TYPE -> type_map .)
    type_bool       reduce using rule 43 (TYPE -> type_map .)
    type_any        reduce using rule 43 (TYPE -> type_map .)
    type_u64        reduce using rule 43 (TYPE -> type_map .)
    type_u32        reduce using rule 43 (TYPE -> type_map .)
    type_u16        reduce using rule 43 (TYPE -> type_map .)
    type_u8         reduce using rule 43 (TYPE -> type_map .)
    type_i64        reduce using rule 43 (TYPE -> type_map .)
    type_i32        reduce using rule 43 (TYPE -> type_map .)
    type_i16        reduce using rule 43 (TYPE -> type_map .)
    type_i8         reduce using rule 43 (TYPE -> type_map .)
    type_f32        reduce using rule 43 (TYPE -> type_map .)
    type_f64        reduce using rule 43 (TYPE -> type_map .)
    type_str        reduce using rule 43 (TYPE -> type_map .)
    type_list       reduce using rule 43 (TYPE -> type_map .)
    type_tuple      reduce using rule 43 (TYPE -> type_map .)
    type_array      reduce using rule 43 (TYPE -> type_map .)
    type_vector     reduce using rule 43 (TYPE -> type_map .)
    type_dict       reduce using rule 43 (TYPE -> type_map .)
    type_generator  reduce using rule 43 (TYPE -> type_map .)
    type_linked_list reduce using rule 43 (TYPE -> type_map .)
    type_doubly_linked_list reduce using rule 43 (TYPE -> type_map .)
    type_deque      reduce using rule 43 (TYPE -> type_map .)
    type_heap       reduce using rule 43 (TYPE -> type_map .)
    type_fibonacci_heap reduce using rule 43 (TYPE -> type_map .)
    type_tree       reduce using rule 43 (TYPE -> type_map .)
    type_trie       reduce using rule 43 (TYPE -> type_map .)
    type_stack      reduce using rule 43 (TYPE -> type_map .)
    type_queue      reduce using rule 43 (TYPE -> type_map .)
    type_binary_search_tree reduce using rule 43 (TYPE -> type_map .)
    type_bitset     reduce using rule 43 (TYPE -> type_map .)
    type_set        reduce using rule 43 (TYPE -> type_map .)
    type_map        reduce using rule 43 (TYPE -> type_map .)
    type_range      reduce using rule 43 (TYPE -> type_map .)
    type_bad_struct reduce using rule 43 (TYPE -> type_map .)
    type_bad_struct2 reduce using rule 43 (TYPE -> type_map .)
    lambda          reduce using rule 43 (TYPE -> type_map .)
    NEWLINE         reduce using rule 43 (TYPE -> type_map .)
    $end            reduce using rule 43 (TYPE -> type_map .)
    operator_inner  reduce using rule 43 (TYPE -> type_map .)
    }               reduce using rule 43 (TYPE -> type_map .)
    )               reduce using rule 43 (TYPE -> type_map .)
    {               reduce using rule 43 (TYPE -> type_map .)
    ]               reduce using rule 43 (TYPE -> type_map .)
    :               reduce using rule 43 (TYPE -> type_map .)
    ,               reduce using rule 43 (TYPE -> type_map .)

  ! (               [ reduce using rule 43 (TYPE -> type_map .) ]


state 88

    (179) return_val -> type_range . ( arguments )
    (44) TYPE -> type_range .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 199
    VAR             reduce using rule 44 (TYPE -> type_range .)
    operator_add    reduce using rule 44 (TYPE -> type_range .)
    operator_sub    reduce using rule 44 (TYPE -> type_range .)
    operator_mul    reduce using rule 44 (TYPE -> type_range .)
    operator_div    reduce using rule 44 (TYPE -> type_range .)
    operator_trudiv reduce using rule 44 (TYPE -> type_range .)
    operator_pow    reduce using rule 44 (TYPE -> type_range .)
    operator_join   reduce using rule 44 (TYPE -> type_range .)
    operator_split  reduce using rule 44 (TYPE -> type_range .)
    operator_scan   reduce using rule 44 (TYPE -> type_range .)
    operator_reduc  reduce using rule 44 (TYPE -> type_range .)
    operator_bitand reduce using rule 44 (TYPE -> type_range .)
    operator_bitor  reduce using rule 44 (TYPE -> type_range .)
    operator_bitxor reduce using rule 44 (TYPE -> type_range .)
    operator_bitshiftleft reduce using rule 44 (TYPE -> type_range .)
    operator_bitshiftright reduce using rule 44 (TYPE -> type_range .)
    operator_and    reduce using rule 44 (TYPE -> type_range .)
    operator_or     reduce using rule 44 (TYPE -> type_range .)
    operator_xor    reduce using rule 44 (TYPE -> type_range .)
    operator_contains reduce using rule 44 (TYPE -> type_range .)
    operator_incr   reduce using rule 44 (TYPE -> type_range .)
    operator_decr   reduce using rule 44 (TYPE -> type_range .)
    operator_outer  reduce using rule 44 (TYPE -> type_range .)
    operator_rotate reduce using rule 44 (TYPE -> type_range .)
    operator_apply  reduce using rule 44 (TYPE -> type_range .)
    operator_compose reduce using rule 44 (TYPE -> type_range .)
    operator_over   reduce using rule 44 (TYPE -> type_range .)
    operator_map    reduce using rule 44 (TYPE -> type_range .)
    operator_less_than reduce using rule 44 (TYPE -> type_range .)
    operator_less_than_equals reduce using rule 44 (TYPE -> type_range .)
    operator_greater_than reduce using rule 44 (TYPE -> type_range .)
    operator_greater_than_equals reduce using rule 44 (TYPE -> type_range .)
    operator_equals reduce using rule 44 (TYPE -> type_range .)
    operator_not_equals reduce using rule 44 (TYPE -> type_range .)
    operator_smallest reduce using rule 44 (TYPE -> type_range .)
    operator_greatest reduce using rule 44 (TYPE -> type_range .)
    operator_goodname reduce using rule 44 (TYPE -> type_range .)
    [               reduce using rule 44 (TYPE -> type_range .)
    operator_bitnot reduce using rule 44 (TYPE -> type_range .)
    operator_not    reduce using rule 44 (TYPE -> type_range .)
    operator_reverse reduce using rule 44 (TYPE -> type_range .)
    operator_sorted_incr reduce using rule 44 (TYPE -> type_range .)
    operator_sorted_decr reduce using rule 44 (TYPE -> type_range .)
    operator_s_combinator reduce using rule 44 (TYPE -> type_range .)
    operator_s2_combinator reduce using rule 44 (TYPE -> type_range .)
    operator_goodname2 reduce using rule 44 (TYPE -> type_range .)
    FLOAT           reduce using rule 44 (TYPE -> type_range .)
    NUM             reduce using rule 44 (TYPE -> type_range .)
    STRING_3SQ      reduce using rule 44 (TYPE -> type_range .)
    STRING_3DQ      reduce using rule 44 (TYPE -> type_range .)
    STRING_SQ       reduce using rule 44 (TYPE -> type_range .)
    STRING_DQ       reduce using rule 44 (TYPE -> type_range .)
    true            reduce using rule 44 (TYPE -> type_range .)
    Null            reduce using rule 44 (TYPE -> type_range .)
    false           reduce using rule 44 (TYPE -> type_range .)
    type_type       reduce using rule 44 (TYPE -> type_range .)
    type_num        reduce using rule 44 (TYPE -> type_range .)
    type_bool       reduce using rule 44 (TYPE -> type_range .)
    type_any        reduce using rule 44 (TYPE -> type_range .)
    type_u64        reduce using rule 44 (TYPE -> type_range .)
    type_u32        reduce using rule 44 (TYPE -> type_range .)
    type_u16        reduce using rule 44 (TYPE -> type_range .)
    type_u8         reduce using rule 44 (TYPE -> type_range .)
    type_i64        reduce using rule 44 (TYPE -> type_range .)
    type_i32        reduce using rule 44 (TYPE -> type_range .)
    type_i16        reduce using rule 44 (TYPE -> type_range .)
    type_i8         reduce using rule 44 (TYPE -> type_range .)
    type_f32        reduce using rule 44 (TYPE -> type_range .)
    type_f64        reduce using rule 44 (TYPE -> type_range .)
    type_str        reduce using rule 44 (TYPE -> type_range .)
    type_list       reduce using rule 44 (TYPE -> type_range .)
    type_tuple      reduce using rule 44 (TYPE -> type_range .)
    type_array      reduce using rule 44 (TYPE -> type_range .)
    type_vector     reduce using rule 44 (TYPE -> type_range .)
    type_dict       reduce using rule 44 (TYPE -> type_range .)
    type_generator  reduce using rule 44 (TYPE -> type_range .)
    type_linked_list reduce using rule 44 (TYPE -> type_range .)
    type_doubly_linked_list reduce using rule 44 (TYPE -> type_range .)
    type_deque      reduce using rule 44 (TYPE -> type_range .)
    type_heap       reduce using rule 44 (TYPE -> type_range .)
    type_fibonacci_heap reduce using rule 44 (TYPE -> type_range .)
    type_tree       reduce using rule 44 (TYPE -> type_range .)
    type_trie       reduce using rule 44 (TYPE -> type_range .)
    type_stack      reduce using rule 44 (TYPE -> type_range .)
    type_queue      reduce using rule 44 (TYPE -> type_range .)
    type_binary_search_tree reduce using rule 44 (TYPE -> type_range .)
    type_bitset     reduce using rule 44 (TYPE -> type_range .)
    type_set        reduce using rule 44 (TYPE -> type_range .)
    type_map        reduce using rule 44 (TYPE -> type_range .)
    type_range      reduce using rule 44 (TYPE -> type_range .)
    type_bad_struct reduce using rule 44 (TYPE -> type_range .)
    type_bad_struct2 reduce using rule 44 (TYPE -> type_range .)
    lambda          reduce using rule 44 (TYPE -> type_range .)
    NEWLINE         reduce using rule 44 (TYPE -> type_range .)
    $end            reduce using rule 44 (TYPE -> type_range .)
    operator_inner  reduce using rule 44 (TYPE -> type_range .)
    }               reduce using rule 44 (TYPE -> type_range .)
    )               reduce using rule 44 (TYPE -> type_range .)
    {               reduce using rule 44 (TYPE -> type_range .)
    ]               reduce using rule 44 (TYPE -> type_range .)
    :               reduce using rule 44 (TYPE -> type_range .)
    ,               reduce using rule 44 (TYPE -> type_range .)

  ! (               [ reduce using rule 44 (TYPE -> type_range .) ]


state 89

    (180) return_val -> type_bad_struct . ( arguments )
    (45) TYPE -> type_bad_struct .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 200
    VAR             reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_add    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sub    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_mul    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_div    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_trudiv reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_pow    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_join   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_split  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_scan   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_reduc  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitand reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitor  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitxor reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitshiftleft reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitshiftright reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_and    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_or     reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_xor    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_contains reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_incr   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_decr   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_outer  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_rotate reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_apply  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_compose reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_over   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_map    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_less_than reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_less_than_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greater_than reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greater_than_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_not_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_smallest reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greatest reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_goodname reduce using rule 45 (TYPE -> type_bad_struct .)
    [               reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitnot reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_not    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_reverse reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sorted_incr reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sorted_decr reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_s_combinator reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_s2_combinator reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_goodname2 reduce using rule 45 (TYPE -> type_bad_struct .)
    FLOAT           reduce using rule 45 (TYPE -> type_bad_struct .)
    NUM             reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_3SQ      reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_3DQ      reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_SQ       reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_DQ       reduce using rule 45 (TYPE -> type_bad_struct .)
    true            reduce using rule 45 (TYPE -> type_bad_struct .)
    Null            reduce using rule 45 (TYPE -> type_bad_struct .)
    false           reduce using rule 45 (TYPE -> type_bad_struct .)
    type_type       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_num        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bool       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_any        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u16        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u8         reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i16        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i8         reduce using rule 45 (TYPE -> type_bad_struct .)
    type_f32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_f64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_str        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_list       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_tuple      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_array      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_vector     reduce using rule 45 (TYPE -> type_bad_struct .)
    type_dict       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_generator  reduce using rule 45 (TYPE -> type_bad_struct .)
    type_linked_list reduce using rule 45 (TYPE -> type_bad_struct .)
    type_doubly_linked_list reduce using rule 45 (TYPE -> type_bad_struct .)
    type_deque      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_heap       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_fibonacci_heap reduce using rule 45 (TYPE -> type_bad_struct .)
    type_tree       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_trie       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_stack      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_queue      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_binary_search_tree reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bitset     reduce using rule 45 (TYPE -> type_bad_struct .)
    type_set        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_map        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_range      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bad_struct reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bad_struct2 reduce using rule 45 (TYPE -> type_bad_struct .)
    lambda          reduce using rule 45 (TYPE -> type_bad_struct .)
    NEWLINE         reduce using rule 45 (TYPE -> type_bad_struct .)
    $end            reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_inner  reduce using rule 45 (TYPE -> type_bad_struct .)
    }               reduce using rule 45 (TYPE -> type_bad_struct .)
    )               reduce using rule 45 (TYPE -> type_bad_struct .)
    {               reduce using rule 45 (TYPE -> type_bad_struct .)
    ]               reduce using rule 45 (TYPE -> type_bad_struct .)
    :               reduce using rule 45 (TYPE -> type_bad_struct .)
    ,               reduce using rule 45 (TYPE -> type_bad_struct .)

  ! (               [ reduce using rule 45 (TYPE -> type_bad_struct .) ]


state 90

    (181) return_val -> type_bad_struct2 . ( arguments )
    (46) TYPE -> type_bad_struct2 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 201
    VAR             reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_add    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sub    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_mul    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_div    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_trudiv reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_pow    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_join   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_split  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_scan   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_reduc  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitand reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitor  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitxor reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitshiftleft reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitshiftright reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_and    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_or     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_xor    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_contains reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_incr   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_decr   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_outer  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_rotate reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_apply  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_compose reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_over   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_map    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_less_than reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_less_than_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greater_than reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greater_than_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_not_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_smallest reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greatest reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_goodname reduce using rule 46 (TYPE -> type_bad_struct2 .)
    [               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitnot reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_not    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_reverse reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sorted_incr reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sorted_decr reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_s_combinator reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_s2_combinator reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_goodname2 reduce using rule 46 (TYPE -> type_bad_struct2 .)
    FLOAT           reduce using rule 46 (TYPE -> type_bad_struct2 .)
    NUM             reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_3SQ      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_3DQ      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_SQ       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_DQ       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    true            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    Null            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    false           reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_type       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_num        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bool       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_any        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u16        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u8         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i16        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i8         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_f32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_f64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_str        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_list       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_tuple      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_array      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_vector     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_dict       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_generator  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_linked_list reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_doubly_linked_list reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_deque      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_heap       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_fibonacci_heap reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_tree       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_trie       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_stack      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_queue      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_binary_search_tree reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bitset     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_set        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_map        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_range      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bad_struct reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bad_struct2 reduce using rule 46 (TYPE -> type_bad_struct2 .)
    lambda          reduce using rule 46 (TYPE -> type_bad_struct2 .)
    NEWLINE         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    $end            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_inner  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    }               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    )               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    {               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    ]               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    :               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    ,               reduce using rule 46 (TYPE -> type_bad_struct2 .)

  ! (               [ reduce using rule 46 (TYPE -> type_bad_struct2 .) ]


state 91

    (61) lambda_decl -> lambda . comma_separated_names : expr
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 162

    comma_separated_names          shift and go to state 202

state 92

    (80) for_decl -> for . comma_separated_names operator_contains expr
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 162

    comma_separated_names          shift and go to state 203

state 93

    (81) if_decl -> if . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 204
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 94

    (82) elif_decl -> elif . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 205
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 95

    (83) operator_decl -> operator . ( arguments )

    (               shift and go to state 206


state 96

    (84) struct_decl -> struct . TYPE
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    type_type       shift and go to state 208
    type_num        shift and go to state 209
    type_bool       shift and go to state 210
    type_any        shift and go to state 211
    type_u64        shift and go to state 212
    type_u32        shift and go to state 213
    type_u16        shift and go to state 214
    type_u8         shift and go to state 215
    type_i64        shift and go to state 216
    type_i32        shift and go to state 217
    type_i16        shift and go to state 218
    type_i8         shift and go to state 219
    type_f32        shift and go to state 220
    type_f64        shift and go to state 221
    type_str        shift and go to state 222
    type_list       shift and go to state 223
    type_tuple      shift and go to state 224
    type_array      shift and go to state 225
    type_vector     shift and go to state 226
    type_dict       shift and go to state 227
    type_generator  shift and go to state 228
    type_linked_list shift and go to state 229
    type_doubly_linked_list shift and go to state 230
    type_deque      shift and go to state 231
    type_heap       shift and go to state 232
    type_fibonacci_heap shift and go to state 233
    type_tree       shift and go to state 234
    type_trie       shift and go to state 235
    type_stack      shift and go to state 236
    type_queue      shift and go to state 237
    type_binary_search_tree shift and go to state 238
    type_bitset     shift and go to state 239
    type_set        shift and go to state 240
    type_map        shift and go to state 241
    type_range      shift and go to state 242
    type_bad_struct shift and go to state 243
    type_bad_struct2 shift and go to state 244

    TYPE                           shift and go to state 207

state 97

    (85) while_decl -> while . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 245
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 98

    (86) func_decl -> func . VAR ( def_arguments )

    VAR             shift and go to state 246


state 99

    (7) stmts -> stmts newline . stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (72) block_decl -> . for_decl
    (73) block_decl -> . if_decl
    (74) block_decl -> . else
    (75) block_decl -> . elif_decl
    (76) block_decl -> . operator_decl
    (77) block_decl -> . struct_decl
    (78) block_decl -> . while_decl
    (79) block_decl -> . func_decl
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (80) for_decl -> . for comma_separated_names operator_contains expr
    (81) if_decl -> . if expr
    (82) elif_decl -> . elif expr
    (83) operator_decl -> . operator ( arguments )
    (84) struct_decl -> . struct TYPE
    (85) while_decl -> . while expr
    (86) func_decl -> . func VAR ( def_arguments )

    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 30
    del             shift and go to state 35
    else            shift and go to state 39
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91
    for             shift and go to state 92
    if              shift and go to state 93
    elif            shift and go to state 94
    operator        shift and go to state 95
    struct          shift and go to state 96
    while           shift and go to state 97
    func            shift and go to state 98

    stmt                           shift and go to state 247
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 34
    comma_separated_names          shift and go to state 36
    for_decl                       shift and go to state 37
    if_decl                        shift and go to state 38
    elif_decl                      shift and go to state 40
    operator_decl                  shift and go to state 41
    struct_decl                    shift and go to state 42
    while_decl                     shift and go to state 43
    func_decl                      shift and go to state 44

state 100

    (2) program -> newline stmts .
    (3) program -> newline stmts . newline
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 2 (program -> newline stmts .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 248

state 101

    (5) newline -> NEWLINE newline .

    pass            reduce using rule 5 (newline -> NEWLINE newline .)
    continue        reduce using rule 5 (newline -> NEWLINE newline .)
    break           reduce using rule 5 (newline -> NEWLINE newline .)
    return          reduce using rule 5 (newline -> NEWLINE newline .)
    (               reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitnot reduce using rule 5 (newline -> NEWLINE newline .)
    operator_not    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_reverse reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_incr reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_decr reduce using rule 5 (newline -> NEWLINE newline .)
    operator_s_combinator reduce using rule 5 (newline -> NEWLINE newline .)
    operator_s2_combinator reduce using rule 5 (newline -> NEWLINE newline .)
    operator_goodname2 reduce using rule 5 (newline -> NEWLINE newline .)
    VAR             reduce using rule 5 (newline -> NEWLINE newline .)
    del             reduce using rule 5 (newline -> NEWLINE newline .)
    else            reduce using rule 5 (newline -> NEWLINE newline .)
    FLOAT           reduce using rule 5 (newline -> NEWLINE newline .)
    NUM             reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3SQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3DQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_SQ       reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_DQ       reduce using rule 5 (newline -> NEWLINE newline .)
    true            reduce using rule 5 (newline -> NEWLINE newline .)
    Null            reduce using rule 5 (newline -> NEWLINE newline .)
    false           reduce using rule 5 (newline -> NEWLINE newline .)
    type_type       reduce using rule 5 (newline -> NEWLINE newline .)
    type_num        reduce using rule 5 (newline -> NEWLINE newline .)
    type_bool       reduce using rule 5 (newline -> NEWLINE newline .)
    type_any        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_i64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_f32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_f64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_str        reduce using rule 5 (newline -> NEWLINE newline .)
    type_list       reduce using rule 5 (newline -> NEWLINE newline .)
    type_tuple      reduce using rule 5 (newline -> NEWLINE newline .)
    type_array      reduce using rule 5 (newline -> NEWLINE newline .)
    type_vector     reduce using rule 5 (newline -> NEWLINE newline .)
    type_dict       reduce using rule 5 (newline -> NEWLINE newline .)
    type_generator  reduce using rule 5 (newline -> NEWLINE newline .)
    type_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_doubly_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_deque      reduce using rule 5 (newline -> NEWLINE newline .)
    type_heap       reduce using rule 5 (newline -> NEWLINE newline .)
    type_fibonacci_heap reduce using rule 5 (newline -> NEWLINE newline .)
    type_tree       reduce using rule 5 (newline -> NEWLINE newline .)
    type_trie       reduce using rule 5 (newline -> NEWLINE newline .)
    type_stack      reduce using rule 5 (newline -> NEWLINE newline .)
    type_queue      reduce using rule 5 (newline -> NEWLINE newline .)
    type_binary_search_tree reduce using rule 5 (newline -> NEWLINE newline .)
    type_bitset     reduce using rule 5 (newline -> NEWLINE newline .)
    type_set        reduce using rule 5 (newline -> NEWLINE newline .)
    type_map        reduce using rule 5 (newline -> NEWLINE newline .)
    type_range      reduce using rule 5 (newline -> NEWLINE newline .)
    type_bad_struct reduce using rule 5 (newline -> NEWLINE newline .)
    type_bad_struct2 reduce using rule 5 (newline -> NEWLINE newline .)
    lambda          reduce using rule 5 (newline -> NEWLINE newline .)
    for             reduce using rule 5 (newline -> NEWLINE newline .)
    if              reduce using rule 5 (newline -> NEWLINE newline .)
    elif            reduce using rule 5 (newline -> NEWLINE newline .)
    operator        reduce using rule 5 (newline -> NEWLINE newline .)
    struct          reduce using rule 5 (newline -> NEWLINE newline .)
    while           reduce using rule 5 (newline -> NEWLINE newline .)
    func            reduce using rule 5 (newline -> NEWLINE newline .)
    $end            reduce using rule 5 (newline -> NEWLINE newline .)


state 102

    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  shift and go to state 249
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 103

    (99) expr -> expr operator_add . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 250
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 104

    (100) expr -> expr operator_sub . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 251
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 105

    (101) expr -> expr operator_mul . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 252
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 106

    (102) expr -> expr operator_div . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 253
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 107

    (103) expr -> expr operator_trudiv . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 254
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 108

    (104) expr -> expr operator_pow . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 255
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 109

    (105) expr -> expr operator_join . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 256
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 110

    (106) expr -> expr operator_split . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 257
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 111

    (107) expr -> expr operator_scan . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 258
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 112

    (108) expr -> expr operator_reduc . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 259
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 113

    (109) expr -> expr operator_bitand . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 260
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 114

    (110) expr -> expr operator_bitor . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 261
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 115

    (111) expr -> expr operator_bitxor . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 262
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 116

    (112) expr -> expr operator_bitshiftleft . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 263
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 117

    (113) expr -> expr operator_bitshiftright . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 264
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 118

    (114) expr -> expr operator_and . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 265
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 119

    (115) expr -> expr operator_or . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 266
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 120

    (116) expr -> expr operator_xor . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 267
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 121

    (117) expr -> expr operator_contains . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 268
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 122

    (120) expr -> expr operator_incr .

    operator_add    reduce using rule 120 (expr -> expr operator_incr .)
    operator_sub    reduce using rule 120 (expr -> expr operator_incr .)
    operator_mul    reduce using rule 120 (expr -> expr operator_incr .)
    operator_div    reduce using rule 120 (expr -> expr operator_incr .)
    operator_trudiv reduce using rule 120 (expr -> expr operator_incr .)
    operator_pow    reduce using rule 120 (expr -> expr operator_incr .)
    operator_join   reduce using rule 120 (expr -> expr operator_incr .)
    operator_split  reduce using rule 120 (expr -> expr operator_incr .)
    operator_scan   reduce using rule 120 (expr -> expr operator_incr .)
    operator_reduc  reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitand reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitor  reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitxor reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitshiftleft reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitshiftright reduce using rule 120 (expr -> expr operator_incr .)
    operator_and    reduce using rule 120 (expr -> expr operator_incr .)
    operator_or     reduce using rule 120 (expr -> expr operator_incr .)
    operator_xor    reduce using rule 120 (expr -> expr operator_incr .)
    operator_contains reduce using rule 120 (expr -> expr operator_incr .)
    operator_incr   reduce using rule 120 (expr -> expr operator_incr .)
    operator_decr   reduce using rule 120 (expr -> expr operator_incr .)
    operator_outer  reduce using rule 120 (expr -> expr operator_incr .)
    operator_rotate reduce using rule 120 (expr -> expr operator_incr .)
    operator_apply  reduce using rule 120 (expr -> expr operator_incr .)
    operator_compose reduce using rule 120 (expr -> expr operator_incr .)
    operator_over   reduce using rule 120 (expr -> expr operator_incr .)
    operator_map    reduce using rule 120 (expr -> expr operator_incr .)
    operator_less_than reduce using rule 120 (expr -> expr operator_incr .)
    operator_less_than_equals reduce using rule 120 (expr -> expr operator_incr .)
    operator_greater_than reduce using rule 120 (expr -> expr operator_incr .)
    operator_greater_than_equals reduce using rule 120 (expr -> expr operator_incr .)
    operator_equals reduce using rule 120 (expr -> expr operator_incr .)
    operator_not_equals reduce using rule 120 (expr -> expr operator_incr .)
    operator_smallest reduce using rule 120 (expr -> expr operator_incr .)
    operator_greatest reduce using rule 120 (expr -> expr operator_incr .)
    operator_goodname reduce using rule 120 (expr -> expr operator_incr .)
    [               reduce using rule 120 (expr -> expr operator_incr .)
    (               reduce using rule 120 (expr -> expr operator_incr .)
    operator_bitnot reduce using rule 120 (expr -> expr operator_incr .)
    operator_not    reduce using rule 120 (expr -> expr operator_incr .)
    operator_reverse reduce using rule 120 (expr -> expr operator_incr .)
    operator_sorted_incr reduce using rule 120 (expr -> expr operator_incr .)
    operator_sorted_decr reduce using rule 120 (expr -> expr operator_incr .)
    operator_s_combinator reduce using rule 120 (expr -> expr operator_incr .)
    operator_s2_combinator reduce using rule 120 (expr -> expr operator_incr .)
    operator_goodname2 reduce using rule 120 (expr -> expr operator_incr .)
    VAR             reduce using rule 120 (expr -> expr operator_incr .)
    FLOAT           reduce using rule 120 (expr -> expr operator_incr .)
    NUM             reduce using rule 120 (expr -> expr operator_incr .)
    STRING_3SQ      reduce using rule 120 (expr -> expr operator_incr .)
    STRING_3DQ      reduce using rule 120 (expr -> expr operator_incr .)
    STRING_SQ       reduce using rule 120 (expr -> expr operator_incr .)
    STRING_DQ       reduce using rule 120 (expr -> expr operator_incr .)
    true            reduce using rule 120 (expr -> expr operator_incr .)
    Null            reduce using rule 120 (expr -> expr operator_incr .)
    false           reduce using rule 120 (expr -> expr operator_incr .)
    type_type       reduce using rule 120 (expr -> expr operator_incr .)
    type_num        reduce using rule 120 (expr -> expr operator_incr .)
    type_bool       reduce using rule 120 (expr -> expr operator_incr .)
    type_any        reduce using rule 120 (expr -> expr operator_incr .)
    type_u64        reduce using rule 120 (expr -> expr operator_incr .)
    type_u32        reduce using rule 120 (expr -> expr operator_incr .)
    type_u16        reduce using rule 120 (expr -> expr operator_incr .)
    type_u8         reduce using rule 120 (expr -> expr operator_incr .)
    type_i64        reduce using rule 120 (expr -> expr operator_incr .)
    type_i32        reduce using rule 120 (expr -> expr operator_incr .)
    type_i16        reduce using rule 120 (expr -> expr operator_incr .)
    type_i8         reduce using rule 120 (expr -> expr operator_incr .)
    type_f32        reduce using rule 120 (expr -> expr operator_incr .)
    type_f64        reduce using rule 120 (expr -> expr operator_incr .)
    type_str        reduce using rule 120 (expr -> expr operator_incr .)
    type_list       reduce using rule 120 (expr -> expr operator_incr .)
    type_tuple      reduce using rule 120 (expr -> expr operator_incr .)
    type_array      reduce using rule 120 (expr -> expr operator_incr .)
    type_vector     reduce using rule 120 (expr -> expr operator_incr .)
    type_dict       reduce using rule 120 (expr -> expr operator_incr .)
    type_generator  reduce using rule 120 (expr -> expr operator_incr .)
    type_linked_list reduce using rule 120 (expr -> expr operator_incr .)
    type_doubly_linked_list reduce using rule 120 (expr -> expr operator_incr .)
    type_deque      reduce using rule 120 (expr -> expr operator_incr .)
    type_heap       reduce using rule 120 (expr -> expr operator_incr .)
    type_fibonacci_heap reduce using rule 120 (expr -> expr operator_incr .)
    type_tree       reduce using rule 120 (expr -> expr operator_incr .)
    type_trie       reduce using rule 120 (expr -> expr operator_incr .)
    type_stack      reduce using rule 120 (expr -> expr operator_incr .)
    type_queue      reduce using rule 120 (expr -> expr operator_incr .)
    type_binary_search_tree reduce using rule 120 (expr -> expr operator_incr .)
    type_bitset     reduce using rule 120 (expr -> expr operator_incr .)
    type_set        reduce using rule 120 (expr -> expr operator_incr .)
    type_map        reduce using rule 120 (expr -> expr operator_incr .)
    type_range      reduce using rule 120 (expr -> expr operator_incr .)
    type_bad_struct reduce using rule 120 (expr -> expr operator_incr .)
    type_bad_struct2 reduce using rule 120 (expr -> expr operator_incr .)
    lambda          reduce using rule 120 (expr -> expr operator_incr .)
    NEWLINE         reduce using rule 120 (expr -> expr operator_incr .)
    $end            reduce using rule 120 (expr -> expr operator_incr .)
    operator_inner  reduce using rule 120 (expr -> expr operator_incr .)
    }               reduce using rule 120 (expr -> expr operator_incr .)
    )               reduce using rule 120 (expr -> expr operator_incr .)
    {               reduce using rule 120 (expr -> expr operator_incr .)
    ]               reduce using rule 120 (expr -> expr operator_incr .)
    :               reduce using rule 120 (expr -> expr operator_incr .)
    ,               reduce using rule 120 (expr -> expr operator_incr .)


state 123

    (121) expr -> expr operator_decr .

    operator_add    reduce using rule 121 (expr -> expr operator_decr .)
    operator_sub    reduce using rule 121 (expr -> expr operator_decr .)
    operator_mul    reduce using rule 121 (expr -> expr operator_decr .)
    operator_div    reduce using rule 121 (expr -> expr operator_decr .)
    operator_trudiv reduce using rule 121 (expr -> expr operator_decr .)
    operator_pow    reduce using rule 121 (expr -> expr operator_decr .)
    operator_join   reduce using rule 121 (expr -> expr operator_decr .)
    operator_split  reduce using rule 121 (expr -> expr operator_decr .)
    operator_scan   reduce using rule 121 (expr -> expr operator_decr .)
    operator_reduc  reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitand reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitor  reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitxor reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitshiftleft reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitshiftright reduce using rule 121 (expr -> expr operator_decr .)
    operator_and    reduce using rule 121 (expr -> expr operator_decr .)
    operator_or     reduce using rule 121 (expr -> expr operator_decr .)
    operator_xor    reduce using rule 121 (expr -> expr operator_decr .)
    operator_contains reduce using rule 121 (expr -> expr operator_decr .)
    operator_incr   reduce using rule 121 (expr -> expr operator_decr .)
    operator_decr   reduce using rule 121 (expr -> expr operator_decr .)
    operator_outer  reduce using rule 121 (expr -> expr operator_decr .)
    operator_rotate reduce using rule 121 (expr -> expr operator_decr .)
    operator_apply  reduce using rule 121 (expr -> expr operator_decr .)
    operator_compose reduce using rule 121 (expr -> expr operator_decr .)
    operator_over   reduce using rule 121 (expr -> expr operator_decr .)
    operator_map    reduce using rule 121 (expr -> expr operator_decr .)
    operator_less_than reduce using rule 121 (expr -> expr operator_decr .)
    operator_less_than_equals reduce using rule 121 (expr -> expr operator_decr .)
    operator_greater_than reduce using rule 121 (expr -> expr operator_decr .)
    operator_greater_than_equals reduce using rule 121 (expr -> expr operator_decr .)
    operator_equals reduce using rule 121 (expr -> expr operator_decr .)
    operator_not_equals reduce using rule 121 (expr -> expr operator_decr .)
    operator_smallest reduce using rule 121 (expr -> expr operator_decr .)
    operator_greatest reduce using rule 121 (expr -> expr operator_decr .)
    operator_goodname reduce using rule 121 (expr -> expr operator_decr .)
    [               reduce using rule 121 (expr -> expr operator_decr .)
    (               reduce using rule 121 (expr -> expr operator_decr .)
    operator_bitnot reduce using rule 121 (expr -> expr operator_decr .)
    operator_not    reduce using rule 121 (expr -> expr operator_decr .)
    operator_reverse reduce using rule 121 (expr -> expr operator_decr .)
    operator_sorted_incr reduce using rule 121 (expr -> expr operator_decr .)
    operator_sorted_decr reduce using rule 121 (expr -> expr operator_decr .)
    operator_s_combinator reduce using rule 121 (expr -> expr operator_decr .)
    operator_s2_combinator reduce using rule 121 (expr -> expr operator_decr .)
    operator_goodname2 reduce using rule 121 (expr -> expr operator_decr .)
    VAR             reduce using rule 121 (expr -> expr operator_decr .)
    FLOAT           reduce using rule 121 (expr -> expr operator_decr .)
    NUM             reduce using rule 121 (expr -> expr operator_decr .)
    STRING_3SQ      reduce using rule 121 (expr -> expr operator_decr .)
    STRING_3DQ      reduce using rule 121 (expr -> expr operator_decr .)
    STRING_SQ       reduce using rule 121 (expr -> expr operator_decr .)
    STRING_DQ       reduce using rule 121 (expr -> expr operator_decr .)
    true            reduce using rule 121 (expr -> expr operator_decr .)
    Null            reduce using rule 121 (expr -> expr operator_decr .)
    false           reduce using rule 121 (expr -> expr operator_decr .)
    type_type       reduce using rule 121 (expr -> expr operator_decr .)
    type_num        reduce using rule 121 (expr -> expr operator_decr .)
    type_bool       reduce using rule 121 (expr -> expr operator_decr .)
    type_any        reduce using rule 121 (expr -> expr operator_decr .)
    type_u64        reduce using rule 121 (expr -> expr operator_decr .)
    type_u32        reduce using rule 121 (expr -> expr operator_decr .)
    type_u16        reduce using rule 121 (expr -> expr operator_decr .)
    type_u8         reduce using rule 121 (expr -> expr operator_decr .)
    type_i64        reduce using rule 121 (expr -> expr operator_decr .)
    type_i32        reduce using rule 121 (expr -> expr operator_decr .)
    type_i16        reduce using rule 121 (expr -> expr operator_decr .)
    type_i8         reduce using rule 121 (expr -> expr operator_decr .)
    type_f32        reduce using rule 121 (expr -> expr operator_decr .)
    type_f64        reduce using rule 121 (expr -> expr operator_decr .)
    type_str        reduce using rule 121 (expr -> expr operator_decr .)
    type_list       reduce using rule 121 (expr -> expr operator_decr .)
    type_tuple      reduce using rule 121 (expr -> expr operator_decr .)
    type_array      reduce using rule 121 (expr -> expr operator_decr .)
    type_vector     reduce using rule 121 (expr -> expr operator_decr .)
    type_dict       reduce using rule 121 (expr -> expr operator_decr .)
    type_generator  reduce using rule 121 (expr -> expr operator_decr .)
    type_linked_list reduce using rule 121 (expr -> expr operator_decr .)
    type_doubly_linked_list reduce using rule 121 (expr -> expr operator_decr .)
    type_deque      reduce using rule 121 (expr -> expr operator_decr .)
    type_heap       reduce using rule 121 (expr -> expr operator_decr .)
    type_fibonacci_heap reduce using rule 121 (expr -> expr operator_decr .)
    type_tree       reduce using rule 121 (expr -> expr operator_decr .)
    type_trie       reduce using rule 121 (expr -> expr operator_decr .)
    type_stack      reduce using rule 121 (expr -> expr operator_decr .)
    type_queue      reduce using rule 121 (expr -> expr operator_decr .)
    type_binary_search_tree reduce using rule 121 (expr -> expr operator_decr .)
    type_bitset     reduce using rule 121 (expr -> expr operator_decr .)
    type_set        reduce using rule 121 (expr -> expr operator_decr .)
    type_map        reduce using rule 121 (expr -> expr operator_decr .)
    type_range      reduce using rule 121 (expr -> expr operator_decr .)
    type_bad_struct reduce using rule 121 (expr -> expr operator_decr .)
    type_bad_struct2 reduce using rule 121 (expr -> expr operator_decr .)
    lambda          reduce using rule 121 (expr -> expr operator_decr .)
    NEWLINE         reduce using rule 121 (expr -> expr operator_decr .)
    $end            reduce using rule 121 (expr -> expr operator_decr .)
    operator_inner  reduce using rule 121 (expr -> expr operator_decr .)
    }               reduce using rule 121 (expr -> expr operator_decr .)
    )               reduce using rule 121 (expr -> expr operator_decr .)
    {               reduce using rule 121 (expr -> expr operator_decr .)
    ]               reduce using rule 121 (expr -> expr operator_decr .)
    :               reduce using rule 121 (expr -> expr operator_decr .)
    ,               reduce using rule 121 (expr -> expr operator_decr .)


state 124

    (122) expr -> expr operator_outer . expr expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 269
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 125

    (125) expr -> expr operator_rotate . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 270
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 126

    (126) expr -> expr operator_apply . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 271
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 127

    (127) expr -> expr operator_compose . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 272
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 128

    (128) expr -> expr operator_over . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 273
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 129

    (129) expr -> expr operator_map .

    operator_add    reduce using rule 129 (expr -> expr operator_map .)
    operator_sub    reduce using rule 129 (expr -> expr operator_map .)
    operator_mul    reduce using rule 129 (expr -> expr operator_map .)
    operator_div    reduce using rule 129 (expr -> expr operator_map .)
    operator_trudiv reduce using rule 129 (expr -> expr operator_map .)
    operator_pow    reduce using rule 129 (expr -> expr operator_map .)
    operator_join   reduce using rule 129 (expr -> expr operator_map .)
    operator_split  reduce using rule 129 (expr -> expr operator_map .)
    operator_scan   reduce using rule 129 (expr -> expr operator_map .)
    operator_reduc  reduce using rule 129 (expr -> expr operator_map .)
    operator_bitand reduce using rule 129 (expr -> expr operator_map .)
    operator_bitor  reduce using rule 129 (expr -> expr operator_map .)
    operator_bitxor reduce using rule 129 (expr -> expr operator_map .)
    operator_bitshiftleft reduce using rule 129 (expr -> expr operator_map .)
    operator_bitshiftright reduce using rule 129 (expr -> expr operator_map .)
    operator_and    reduce using rule 129 (expr -> expr operator_map .)
    operator_or     reduce using rule 129 (expr -> expr operator_map .)
    operator_xor    reduce using rule 129 (expr -> expr operator_map .)
    operator_contains reduce using rule 129 (expr -> expr operator_map .)
    operator_incr   reduce using rule 129 (expr -> expr operator_map .)
    operator_decr   reduce using rule 129 (expr -> expr operator_map .)
    operator_outer  reduce using rule 129 (expr -> expr operator_map .)
    operator_rotate reduce using rule 129 (expr -> expr operator_map .)
    operator_apply  reduce using rule 129 (expr -> expr operator_map .)
    operator_compose reduce using rule 129 (expr -> expr operator_map .)
    operator_over   reduce using rule 129 (expr -> expr operator_map .)
    operator_map    reduce using rule 129 (expr -> expr operator_map .)
    operator_less_than reduce using rule 129 (expr -> expr operator_map .)
    operator_less_than_equals reduce using rule 129 (expr -> expr operator_map .)
    operator_greater_than reduce using rule 129 (expr -> expr operator_map .)
    operator_greater_than_equals reduce using rule 129 (expr -> expr operator_map .)
    operator_equals reduce using rule 129 (expr -> expr operator_map .)
    operator_not_equals reduce using rule 129 (expr -> expr operator_map .)
    operator_smallest reduce using rule 129 (expr -> expr operator_map .)
    operator_greatest reduce using rule 129 (expr -> expr operator_map .)
    operator_goodname reduce using rule 129 (expr -> expr operator_map .)
    [               reduce using rule 129 (expr -> expr operator_map .)
    (               reduce using rule 129 (expr -> expr operator_map .)
    operator_bitnot reduce using rule 129 (expr -> expr operator_map .)
    operator_not    reduce using rule 129 (expr -> expr operator_map .)
    operator_reverse reduce using rule 129 (expr -> expr operator_map .)
    operator_sorted_incr reduce using rule 129 (expr -> expr operator_map .)
    operator_sorted_decr reduce using rule 129 (expr -> expr operator_map .)
    operator_s_combinator reduce using rule 129 (expr -> expr operator_map .)
    operator_s2_combinator reduce using rule 129 (expr -> expr operator_map .)
    operator_goodname2 reduce using rule 129 (expr -> expr operator_map .)
    VAR             reduce using rule 129 (expr -> expr operator_map .)
    FLOAT           reduce using rule 129 (expr -> expr operator_map .)
    NUM             reduce using rule 129 (expr -> expr operator_map .)
    STRING_3SQ      reduce using rule 129 (expr -> expr operator_map .)
    STRING_3DQ      reduce using rule 129 (expr -> expr operator_map .)
    STRING_SQ       reduce using rule 129 (expr -> expr operator_map .)
    STRING_DQ       reduce using rule 129 (expr -> expr operator_map .)
    true            reduce using rule 129 (expr -> expr operator_map .)
    Null            reduce using rule 129 (expr -> expr operator_map .)
    false           reduce using rule 129 (expr -> expr operator_map .)
    type_type       reduce using rule 129 (expr -> expr operator_map .)
    type_num        reduce using rule 129 (expr -> expr operator_map .)
    type_bool       reduce using rule 129 (expr -> expr operator_map .)
    type_any        reduce using rule 129 (expr -> expr operator_map .)
    type_u64        reduce using rule 129 (expr -> expr operator_map .)
    type_u32        reduce using rule 129 (expr -> expr operator_map .)
    type_u16        reduce using rule 129 (expr -> expr operator_map .)
    type_u8         reduce using rule 129 (expr -> expr operator_map .)
    type_i64        reduce using rule 129 (expr -> expr operator_map .)
    type_i32        reduce using rule 129 (expr -> expr operator_map .)
    type_i16        reduce using rule 129 (expr -> expr operator_map .)
    type_i8         reduce using rule 129 (expr -> expr operator_map .)
    type_f32        reduce using rule 129 (expr -> expr operator_map .)
    type_f64        reduce using rule 129 (expr -> expr operator_map .)
    type_str        reduce using rule 129 (expr -> expr operator_map .)
    type_list       reduce using rule 129 (expr -> expr operator_map .)
    type_tuple      reduce using rule 129 (expr -> expr operator_map .)
    type_array      reduce using rule 129 (expr -> expr operator_map .)
    type_vector     reduce using rule 129 (expr -> expr operator_map .)
    type_dict       reduce using rule 129 (expr -> expr operator_map .)
    type_generator  reduce using rule 129 (expr -> expr operator_map .)
    type_linked_list reduce using rule 129 (expr -> expr operator_map .)
    type_doubly_linked_list reduce using rule 129 (expr -> expr operator_map .)
    type_deque      reduce using rule 129 (expr -> expr operator_map .)
    type_heap       reduce using rule 129 (expr -> expr operator_map .)
    type_fibonacci_heap reduce using rule 129 (expr -> expr operator_map .)
    type_tree       reduce using rule 129 (expr -> expr operator_map .)
    type_trie       reduce using rule 129 (expr -> expr operator_map .)
    type_stack      reduce using rule 129 (expr -> expr operator_map .)
    type_queue      reduce using rule 129 (expr -> expr operator_map .)
    type_binary_search_tree reduce using rule 129 (expr -> expr operator_map .)
    type_bitset     reduce using rule 129 (expr -> expr operator_map .)
    type_set        reduce using rule 129 (expr -> expr operator_map .)
    type_map        reduce using rule 129 (expr -> expr operator_map .)
    type_range      reduce using rule 129 (expr -> expr operator_map .)
    type_bad_struct reduce using rule 129 (expr -> expr operator_map .)
    type_bad_struct2 reduce using rule 129 (expr -> expr operator_map .)
    lambda          reduce using rule 129 (expr -> expr operator_map .)
    NEWLINE         reduce using rule 129 (expr -> expr operator_map .)
    $end            reduce using rule 129 (expr -> expr operator_map .)
    operator_inner  reduce using rule 129 (expr -> expr operator_map .)
    }               reduce using rule 129 (expr -> expr operator_map .)
    )               reduce using rule 129 (expr -> expr operator_map .)
    {               reduce using rule 129 (expr -> expr operator_map .)
    ]               reduce using rule 129 (expr -> expr operator_map .)
    :               reduce using rule 129 (expr -> expr operator_map .)
    ,               reduce using rule 129 (expr -> expr operator_map .)


state 130

    (132) expr -> expr operator_less_than . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 274
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 131

    (133) expr -> expr operator_less_than_equals . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 275
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 132

    (134) expr -> expr operator_greater_than . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 276
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 133

    (135) expr -> expr operator_greater_than_equals . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 277
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 134

    (136) expr -> expr operator_equals . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 278
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 135

    (137) expr -> expr operator_not_equals . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 279
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 136

    (138) expr -> expr operator_smallest . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 280
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 137

    (139) expr -> expr operator_greatest . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 281
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 138

    (140) expr -> expr operator_goodname . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 282
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 139

    (55) item -> expr [ . arguments ]
    (56) simple_slice -> expr [ . arguments : arguments ]
    (57) full_slice -> expr [ . arguments : arguments : arguments ]
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    ]               reduce using rule 187 (empty -> .)
    :               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 283
    arguments                      shift and go to state 284
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 140

    (58) expr -> item .

    operator_inner  reduce using rule 58 (expr -> item .)
    operator_add    reduce using rule 58 (expr -> item .)
    operator_sub    reduce using rule 58 (expr -> item .)
    operator_mul    reduce using rule 58 (expr -> item .)
    operator_div    reduce using rule 58 (expr -> item .)
    operator_trudiv reduce using rule 58 (expr -> item .)
    operator_pow    reduce using rule 58 (expr -> item .)
    operator_join   reduce using rule 58 (expr -> item .)
    operator_split  reduce using rule 58 (expr -> item .)
    operator_scan   reduce using rule 58 (expr -> item .)
    operator_reduc  reduce using rule 58 (expr -> item .)
    operator_bitand reduce using rule 58 (expr -> item .)
    operator_bitor  reduce using rule 58 (expr -> item .)
    operator_bitxor reduce using rule 58 (expr -> item .)
    operator_bitshiftleft reduce using rule 58 (expr -> item .)
    operator_bitshiftright reduce using rule 58 (expr -> item .)
    operator_and    reduce using rule 58 (expr -> item .)
    operator_or     reduce using rule 58 (expr -> item .)
    operator_xor    reduce using rule 58 (expr -> item .)
    operator_contains reduce using rule 58 (expr -> item .)
    operator_incr   reduce using rule 58 (expr -> item .)
    operator_decr   reduce using rule 58 (expr -> item .)
    operator_outer  reduce using rule 58 (expr -> item .)
    operator_rotate reduce using rule 58 (expr -> item .)
    operator_apply  reduce using rule 58 (expr -> item .)
    operator_compose reduce using rule 58 (expr -> item .)
    operator_over   reduce using rule 58 (expr -> item .)
    operator_map    reduce using rule 58 (expr -> item .)
    operator_less_than reduce using rule 58 (expr -> item .)
    operator_less_than_equals reduce using rule 58 (expr -> item .)
    operator_greater_than reduce using rule 58 (expr -> item .)
    operator_greater_than_equals reduce using rule 58 (expr -> item .)
    operator_equals reduce using rule 58 (expr -> item .)
    operator_not_equals reduce using rule 58 (expr -> item .)
    operator_smallest reduce using rule 58 (expr -> item .)
    operator_greatest reduce using rule 58 (expr -> item .)
    operator_goodname reduce using rule 58 (expr -> item .)
    [               reduce using rule 58 (expr -> item .)
    (               reduce using rule 58 (expr -> item .)
    operator_bitnot reduce using rule 58 (expr -> item .)
    operator_not    reduce using rule 58 (expr -> item .)
    operator_reverse reduce using rule 58 (expr -> item .)
    operator_sorted_incr reduce using rule 58 (expr -> item .)
    operator_sorted_decr reduce using rule 58 (expr -> item .)
    operator_s_combinator reduce using rule 58 (expr -> item .)
    operator_s2_combinator reduce using rule 58 (expr -> item .)
    operator_goodname2 reduce using rule 58 (expr -> item .)
    VAR             reduce using rule 58 (expr -> item .)
    FLOAT           reduce using rule 58 (expr -> item .)
    NUM             reduce using rule 58 (expr -> item .)
    STRING_3SQ      reduce using rule 58 (expr -> item .)
    STRING_3DQ      reduce using rule 58 (expr -> item .)
    STRING_SQ       reduce using rule 58 (expr -> item .)
    STRING_DQ       reduce using rule 58 (expr -> item .)
    true            reduce using rule 58 (expr -> item .)
    Null            reduce using rule 58 (expr -> item .)
    false           reduce using rule 58 (expr -> item .)
    type_type       reduce using rule 58 (expr -> item .)
    type_num        reduce using rule 58 (expr -> item .)
    type_bool       reduce using rule 58 (expr -> item .)
    type_any        reduce using rule 58 (expr -> item .)
    type_u64        reduce using rule 58 (expr -> item .)
    type_u32        reduce using rule 58 (expr -> item .)
    type_u16        reduce using rule 58 (expr -> item .)
    type_u8         reduce using rule 58 (expr -> item .)
    type_i64        reduce using rule 58 (expr -> item .)
    type_i32        reduce using rule 58 (expr -> item .)
    type_i16        reduce using rule 58 (expr -> item .)
    type_i8         reduce using rule 58 (expr -> item .)
    type_f32        reduce using rule 58 (expr -> item .)
    type_f64        reduce using rule 58 (expr -> item .)
    type_str        reduce using rule 58 (expr -> item .)
    type_list       reduce using rule 58 (expr -> item .)
    type_tuple      reduce using rule 58 (expr -> item .)
    type_array      reduce using rule 58 (expr -> item .)
    type_vector     reduce using rule 58 (expr -> item .)
    type_dict       reduce using rule 58 (expr -> item .)
    type_generator  reduce using rule 58 (expr -> item .)
    type_linked_list reduce using rule 58 (expr -> item .)
    type_doubly_linked_list reduce using rule 58 (expr -> item .)
    type_deque      reduce using rule 58 (expr -> item .)
    type_heap       reduce using rule 58 (expr -> item .)
    type_fibonacci_heap reduce using rule 58 (expr -> item .)
    type_tree       reduce using rule 58 (expr -> item .)
    type_trie       reduce using rule 58 (expr -> item .)
    type_stack      reduce using rule 58 (expr -> item .)
    type_queue      reduce using rule 58 (expr -> item .)
    type_binary_search_tree reduce using rule 58 (expr -> item .)
    type_bitset     reduce using rule 58 (expr -> item .)
    type_set        reduce using rule 58 (expr -> item .)
    type_map        reduce using rule 58 (expr -> item .)
    type_range      reduce using rule 58 (expr -> item .)
    type_bad_struct reduce using rule 58 (expr -> item .)
    type_bad_struct2 reduce using rule 58 (expr -> item .)
    lambda          reduce using rule 58 (expr -> item .)
    NEWLINE         reduce using rule 58 (expr -> item .)
    $end            reduce using rule 58 (expr -> item .)
    }               reduce using rule 58 (expr -> item .)
    )               reduce using rule 58 (expr -> item .)
    {               reduce using rule 58 (expr -> item .)
    ]               reduce using rule 58 (expr -> item .)
    :               reduce using rule 58 (expr -> item .)
    ,               reduce using rule 58 (expr -> item .)


state 141

    (59) expr -> simple_slice .

    operator_inner  reduce using rule 59 (expr -> simple_slice .)
    operator_add    reduce using rule 59 (expr -> simple_slice .)
    operator_sub    reduce using rule 59 (expr -> simple_slice .)
    operator_mul    reduce using rule 59 (expr -> simple_slice .)
    operator_div    reduce using rule 59 (expr -> simple_slice .)
    operator_trudiv reduce using rule 59 (expr -> simple_slice .)
    operator_pow    reduce using rule 59 (expr -> simple_slice .)
    operator_join   reduce using rule 59 (expr -> simple_slice .)
    operator_split  reduce using rule 59 (expr -> simple_slice .)
    operator_scan   reduce using rule 59 (expr -> simple_slice .)
    operator_reduc  reduce using rule 59 (expr -> simple_slice .)
    operator_bitand reduce using rule 59 (expr -> simple_slice .)
    operator_bitor  reduce using rule 59 (expr -> simple_slice .)
    operator_bitxor reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 59 (expr -> simple_slice .)
    operator_and    reduce using rule 59 (expr -> simple_slice .)
    operator_or     reduce using rule 59 (expr -> simple_slice .)
    operator_xor    reduce using rule 59 (expr -> simple_slice .)
    operator_contains reduce using rule 59 (expr -> simple_slice .)
    operator_incr   reduce using rule 59 (expr -> simple_slice .)
    operator_decr   reduce using rule 59 (expr -> simple_slice .)
    operator_outer  reduce using rule 59 (expr -> simple_slice .)
    operator_rotate reduce using rule 59 (expr -> simple_slice .)
    operator_apply  reduce using rule 59 (expr -> simple_slice .)
    operator_compose reduce using rule 59 (expr -> simple_slice .)
    operator_over   reduce using rule 59 (expr -> simple_slice .)
    operator_map    reduce using rule 59 (expr -> simple_slice .)
    operator_less_than reduce using rule 59 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_equals reduce using rule 59 (expr -> simple_slice .)
    operator_not_equals reduce using rule 59 (expr -> simple_slice .)
    operator_smallest reduce using rule 59 (expr -> simple_slice .)
    operator_greatest reduce using rule 59 (expr -> simple_slice .)
    operator_goodname reduce using rule 59 (expr -> simple_slice .)
    [               reduce using rule 59 (expr -> simple_slice .)
    (               reduce using rule 59 (expr -> simple_slice .)
    operator_bitnot reduce using rule 59 (expr -> simple_slice .)
    operator_not    reduce using rule 59 (expr -> simple_slice .)
    operator_reverse reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_s2_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_goodname2 reduce using rule 59 (expr -> simple_slice .)
    VAR             reduce using rule 59 (expr -> simple_slice .)
    FLOAT           reduce using rule 59 (expr -> simple_slice .)
    NUM             reduce using rule 59 (expr -> simple_slice .)
    STRING_3SQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_3DQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_SQ       reduce using rule 59 (expr -> simple_slice .)
    STRING_DQ       reduce using rule 59 (expr -> simple_slice .)
    true            reduce using rule 59 (expr -> simple_slice .)
    Null            reduce using rule 59 (expr -> simple_slice .)
    false           reduce using rule 59 (expr -> simple_slice .)
    type_type       reduce using rule 59 (expr -> simple_slice .)
    type_num        reduce using rule 59 (expr -> simple_slice .)
    type_bool       reduce using rule 59 (expr -> simple_slice .)
    type_any        reduce using rule 59 (expr -> simple_slice .)
    type_u64        reduce using rule 59 (expr -> simple_slice .)
    type_u32        reduce using rule 59 (expr -> simple_slice .)
    type_u16        reduce using rule 59 (expr -> simple_slice .)
    type_u8         reduce using rule 59 (expr -> simple_slice .)
    type_i64        reduce using rule 59 (expr -> simple_slice .)
    type_i32        reduce using rule 59 (expr -> simple_slice .)
    type_i16        reduce using rule 59 (expr -> simple_slice .)
    type_i8         reduce using rule 59 (expr -> simple_slice .)
    type_f32        reduce using rule 59 (expr -> simple_slice .)
    type_f64        reduce using rule 59 (expr -> simple_slice .)
    type_str        reduce using rule 59 (expr -> simple_slice .)
    type_list       reduce using rule 59 (expr -> simple_slice .)
    type_tuple      reduce using rule 59 (expr -> simple_slice .)
    type_array      reduce using rule 59 (expr -> simple_slice .)
    type_vector     reduce using rule 59 (expr -> simple_slice .)
    type_dict       reduce using rule 59 (expr -> simple_slice .)
    type_generator  reduce using rule 59 (expr -> simple_slice .)
    type_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_doubly_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_deque      reduce using rule 59 (expr -> simple_slice .)
    type_heap       reduce using rule 59 (expr -> simple_slice .)
    type_fibonacci_heap reduce using rule 59 (expr -> simple_slice .)
    type_tree       reduce using rule 59 (expr -> simple_slice .)
    type_trie       reduce using rule 59 (expr -> simple_slice .)
    type_stack      reduce using rule 59 (expr -> simple_slice .)
    type_queue      reduce using rule 59 (expr -> simple_slice .)
    type_binary_search_tree reduce using rule 59 (expr -> simple_slice .)
    type_bitset     reduce using rule 59 (expr -> simple_slice .)
    type_set        reduce using rule 59 (expr -> simple_slice .)
    type_map        reduce using rule 59 (expr -> simple_slice .)
    type_range      reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct2 reduce using rule 59 (expr -> simple_slice .)
    lambda          reduce using rule 59 (expr -> simple_slice .)
    NEWLINE         reduce using rule 59 (expr -> simple_slice .)
    $end            reduce using rule 59 (expr -> simple_slice .)
    }               reduce using rule 59 (expr -> simple_slice .)
    )               reduce using rule 59 (expr -> simple_slice .)
    {               reduce using rule 59 (expr -> simple_slice .)
    ]               reduce using rule 59 (expr -> simple_slice .)
    :               reduce using rule 59 (expr -> simple_slice .)
    ,               reduce using rule 59 (expr -> simple_slice .)


state 142

    (60) expr -> full_slice .

    operator_inner  reduce using rule 60 (expr -> full_slice .)
    operator_add    reduce using rule 60 (expr -> full_slice .)
    operator_sub    reduce using rule 60 (expr -> full_slice .)
    operator_mul    reduce using rule 60 (expr -> full_slice .)
    operator_div    reduce using rule 60 (expr -> full_slice .)
    operator_trudiv reduce using rule 60 (expr -> full_slice .)
    operator_pow    reduce using rule 60 (expr -> full_slice .)
    operator_join   reduce using rule 60 (expr -> full_slice .)
    operator_split  reduce using rule 60 (expr -> full_slice .)
    operator_scan   reduce using rule 60 (expr -> full_slice .)
    operator_reduc  reduce using rule 60 (expr -> full_slice .)
    operator_bitand reduce using rule 60 (expr -> full_slice .)
    operator_bitor  reduce using rule 60 (expr -> full_slice .)
    operator_bitxor reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 60 (expr -> full_slice .)
    operator_and    reduce using rule 60 (expr -> full_slice .)
    operator_or     reduce using rule 60 (expr -> full_slice .)
    operator_xor    reduce using rule 60 (expr -> full_slice .)
    operator_contains reduce using rule 60 (expr -> full_slice .)
    operator_incr   reduce using rule 60 (expr -> full_slice .)
    operator_decr   reduce using rule 60 (expr -> full_slice .)
    operator_outer  reduce using rule 60 (expr -> full_slice .)
    operator_rotate reduce using rule 60 (expr -> full_slice .)
    operator_apply  reduce using rule 60 (expr -> full_slice .)
    operator_compose reduce using rule 60 (expr -> full_slice .)
    operator_over   reduce using rule 60 (expr -> full_slice .)
    operator_map    reduce using rule 60 (expr -> full_slice .)
    operator_less_than reduce using rule 60 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_greater_than reduce using rule 60 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_equals reduce using rule 60 (expr -> full_slice .)
    operator_not_equals reduce using rule 60 (expr -> full_slice .)
    operator_smallest reduce using rule 60 (expr -> full_slice .)
    operator_greatest reduce using rule 60 (expr -> full_slice .)
    operator_goodname reduce using rule 60 (expr -> full_slice .)
    [               reduce using rule 60 (expr -> full_slice .)
    (               reduce using rule 60 (expr -> full_slice .)
    operator_bitnot reduce using rule 60 (expr -> full_slice .)
    operator_not    reduce using rule 60 (expr -> full_slice .)
    operator_reverse reduce using rule 60 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 60 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator reduce using rule 60 (expr -> full_slice .)
    operator_s2_combinator reduce using rule 60 (expr -> full_slice .)
    operator_goodname2 reduce using rule 60 (expr -> full_slice .)
    VAR             reduce using rule 60 (expr -> full_slice .)
    FLOAT           reduce using rule 60 (expr -> full_slice .)
    NUM             reduce using rule 60 (expr -> full_slice .)
    STRING_3SQ      reduce using rule 60 (expr -> full_slice .)
    STRING_3DQ      reduce using rule 60 (expr -> full_slice .)
    STRING_SQ       reduce using rule 60 (expr -> full_slice .)
    STRING_DQ       reduce using rule 60 (expr -> full_slice .)
    true            reduce using rule 60 (expr -> full_slice .)
    Null            reduce using rule 60 (expr -> full_slice .)
    false           reduce using rule 60 (expr -> full_slice .)
    type_type       reduce using rule 60 (expr -> full_slice .)
    type_num        reduce using rule 60 (expr -> full_slice .)
    type_bool       reduce using rule 60 (expr -> full_slice .)
    type_any        reduce using rule 60 (expr -> full_slice .)
    type_u64        reduce using rule 60 (expr -> full_slice .)
    type_u32        reduce using rule 60 (expr -> full_slice .)
    type_u16        reduce using rule 60 (expr -> full_slice .)
    type_u8         reduce using rule 60 (expr -> full_slice .)
    type_i64        reduce using rule 60 (expr -> full_slice .)
    type_i32        reduce using rule 60 (expr -> full_slice .)
    type_i16        reduce using rule 60 (expr -> full_slice .)
    type_i8         reduce using rule 60 (expr -> full_slice .)
    type_f32        reduce using rule 60 (expr -> full_slice .)
    type_f64        reduce using rule 60 (expr -> full_slice .)
    type_str        reduce using rule 60 (expr -> full_slice .)
    type_list       reduce using rule 60 (expr -> full_slice .)
    type_tuple      reduce using rule 60 (expr -> full_slice .)
    type_array      reduce using rule 60 (expr -> full_slice .)
    type_vector     reduce using rule 60 (expr -> full_slice .)
    type_dict       reduce using rule 60 (expr -> full_slice .)
    type_generator  reduce using rule 60 (expr -> full_slice .)
    type_linked_list reduce using rule 60 (expr -> full_slice .)
    type_doubly_linked_list reduce using rule 60 (expr -> full_slice .)
    type_deque      reduce using rule 60 (expr -> full_slice .)
    type_heap       reduce using rule 60 (expr -> full_slice .)
    type_fibonacci_heap reduce using rule 60 (expr -> full_slice .)
    type_tree       reduce using rule 60 (expr -> full_slice .)
    type_trie       reduce using rule 60 (expr -> full_slice .)
    type_stack      reduce using rule 60 (expr -> full_slice .)
    type_queue      reduce using rule 60 (expr -> full_slice .)
    type_binary_search_tree reduce using rule 60 (expr -> full_slice .)
    type_bitset     reduce using rule 60 (expr -> full_slice .)
    type_set        reduce using rule 60 (expr -> full_slice .)
    type_map        reduce using rule 60 (expr -> full_slice .)
    type_range      reduce using rule 60 (expr -> full_slice .)
    type_bad_struct reduce using rule 60 (expr -> full_slice .)
    type_bad_struct2 reduce using rule 60 (expr -> full_slice .)
    lambda          reduce using rule 60 (expr -> full_slice .)
    NEWLINE         reduce using rule 60 (expr -> full_slice .)
    $end            reduce using rule 60 (expr -> full_slice .)
    }               reduce using rule 60 (expr -> full_slice .)
    )               reduce using rule 60 (expr -> full_slice .)
    {               reduce using rule 60 (expr -> full_slice .)
    ]               reduce using rule 60 (expr -> full_slice .)
    :               reduce using rule 60 (expr -> full_slice .)
    ,               reduce using rule 60 (expr -> full_slice .)


state 143

    (144) expr -> VAR .
    (182) return_val -> VAR . ( arguments )

  ! shift/reduce conflict for ( resolved as shift
    operator_inner  reduce using rule 144 (expr -> VAR .)
    operator_add    reduce using rule 144 (expr -> VAR .)
    operator_sub    reduce using rule 144 (expr -> VAR .)
    operator_mul    reduce using rule 144 (expr -> VAR .)
    operator_div    reduce using rule 144 (expr -> VAR .)
    operator_trudiv reduce using rule 144 (expr -> VAR .)
    operator_pow    reduce using rule 144 (expr -> VAR .)
    operator_join   reduce using rule 144 (expr -> VAR .)
    operator_split  reduce using rule 144 (expr -> VAR .)
    operator_scan   reduce using rule 144 (expr -> VAR .)
    operator_reduc  reduce using rule 144 (expr -> VAR .)
    operator_bitand reduce using rule 144 (expr -> VAR .)
    operator_bitor  reduce using rule 144 (expr -> VAR .)
    operator_bitxor reduce using rule 144 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 144 (expr -> VAR .)
    operator_bitshiftright reduce using rule 144 (expr -> VAR .)
    operator_and    reduce using rule 144 (expr -> VAR .)
    operator_or     reduce using rule 144 (expr -> VAR .)
    operator_xor    reduce using rule 144 (expr -> VAR .)
    operator_contains reduce using rule 144 (expr -> VAR .)
    operator_incr   reduce using rule 144 (expr -> VAR .)
    operator_decr   reduce using rule 144 (expr -> VAR .)
    operator_outer  reduce using rule 144 (expr -> VAR .)
    operator_rotate reduce using rule 144 (expr -> VAR .)
    operator_apply  reduce using rule 144 (expr -> VAR .)
    operator_compose reduce using rule 144 (expr -> VAR .)
    operator_over   reduce using rule 144 (expr -> VAR .)
    operator_map    reduce using rule 144 (expr -> VAR .)
    operator_less_than reduce using rule 144 (expr -> VAR .)
    operator_less_than_equals reduce using rule 144 (expr -> VAR .)
    operator_greater_than reduce using rule 144 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 144 (expr -> VAR .)
    operator_equals reduce using rule 144 (expr -> VAR .)
    operator_not_equals reduce using rule 144 (expr -> VAR .)
    operator_smallest reduce using rule 144 (expr -> VAR .)
    operator_greatest reduce using rule 144 (expr -> VAR .)
    operator_goodname reduce using rule 144 (expr -> VAR .)
    [               reduce using rule 144 (expr -> VAR .)
    operator_bitnot reduce using rule 144 (expr -> VAR .)
    operator_not    reduce using rule 144 (expr -> VAR .)
    operator_reverse reduce using rule 144 (expr -> VAR .)
    operator_sorted_incr reduce using rule 144 (expr -> VAR .)
    operator_sorted_decr reduce using rule 144 (expr -> VAR .)
    operator_s_combinator reduce using rule 144 (expr -> VAR .)
    operator_s2_combinator reduce using rule 144 (expr -> VAR .)
    operator_goodname2 reduce using rule 144 (expr -> VAR .)
    VAR             reduce using rule 144 (expr -> VAR .)
    FLOAT           reduce using rule 144 (expr -> VAR .)
    NUM             reduce using rule 144 (expr -> VAR .)
    STRING_3SQ      reduce using rule 144 (expr -> VAR .)
    STRING_3DQ      reduce using rule 144 (expr -> VAR .)
    STRING_SQ       reduce using rule 144 (expr -> VAR .)
    STRING_DQ       reduce using rule 144 (expr -> VAR .)
    true            reduce using rule 144 (expr -> VAR .)
    Null            reduce using rule 144 (expr -> VAR .)
    false           reduce using rule 144 (expr -> VAR .)
    type_type       reduce using rule 144 (expr -> VAR .)
    type_num        reduce using rule 144 (expr -> VAR .)
    type_bool       reduce using rule 144 (expr -> VAR .)
    type_any        reduce using rule 144 (expr -> VAR .)
    type_u64        reduce using rule 144 (expr -> VAR .)
    type_u32        reduce using rule 144 (expr -> VAR .)
    type_u16        reduce using rule 144 (expr -> VAR .)
    type_u8         reduce using rule 144 (expr -> VAR .)
    type_i64        reduce using rule 144 (expr -> VAR .)
    type_i32        reduce using rule 144 (expr -> VAR .)
    type_i16        reduce using rule 144 (expr -> VAR .)
    type_i8         reduce using rule 144 (expr -> VAR .)
    type_f32        reduce using rule 144 (expr -> VAR .)
    type_f64        reduce using rule 144 (expr -> VAR .)
    type_str        reduce using rule 144 (expr -> VAR .)
    type_list       reduce using rule 144 (expr -> VAR .)
    type_tuple      reduce using rule 144 (expr -> VAR .)
    type_array      reduce using rule 144 (expr -> VAR .)
    type_vector     reduce using rule 144 (expr -> VAR .)
    type_dict       reduce using rule 144 (expr -> VAR .)
    type_generator  reduce using rule 144 (expr -> VAR .)
    type_linked_list reduce using rule 144 (expr -> VAR .)
    type_doubly_linked_list reduce using rule 144 (expr -> VAR .)
    type_deque      reduce using rule 144 (expr -> VAR .)
    type_heap       reduce using rule 144 (expr -> VAR .)
    type_fibonacci_heap reduce using rule 144 (expr -> VAR .)
    type_tree       reduce using rule 144 (expr -> VAR .)
    type_trie       reduce using rule 144 (expr -> VAR .)
    type_stack      reduce using rule 144 (expr -> VAR .)
    type_queue      reduce using rule 144 (expr -> VAR .)
    type_binary_search_tree reduce using rule 144 (expr -> VAR .)
    type_bitset     reduce using rule 144 (expr -> VAR .)
    type_set        reduce using rule 144 (expr -> VAR .)
    type_map        reduce using rule 144 (expr -> VAR .)
    type_range      reduce using rule 144 (expr -> VAR .)
    type_bad_struct reduce using rule 144 (expr -> VAR .)
    type_bad_struct2 reduce using rule 144 (expr -> VAR .)
    lambda          reduce using rule 144 (expr -> VAR .)
    NEWLINE         reduce using rule 144 (expr -> VAR .)
    $end            reduce using rule 144 (expr -> VAR .)
    }               reduce using rule 144 (expr -> VAR .)
    )               reduce using rule 144 (expr -> VAR .)
    {               reduce using rule 144 (expr -> VAR .)
    ]               reduce using rule 144 (expr -> VAR .)
    :               reduce using rule 144 (expr -> VAR .)
    ,               reduce using rule 144 (expr -> VAR .)
    (               shift and go to state 159

  ! (               [ reduce using rule 144 (expr -> VAR .) ]


state 144

    (186) expr -> TYPE .

    operator_inner  reduce using rule 186 (expr -> TYPE .)
    operator_add    reduce using rule 186 (expr -> TYPE .)
    operator_sub    reduce using rule 186 (expr -> TYPE .)
    operator_mul    reduce using rule 186 (expr -> TYPE .)
    operator_div    reduce using rule 186 (expr -> TYPE .)
    operator_trudiv reduce using rule 186 (expr -> TYPE .)
    operator_pow    reduce using rule 186 (expr -> TYPE .)
    operator_join   reduce using rule 186 (expr -> TYPE .)
    operator_split  reduce using rule 186 (expr -> TYPE .)
    operator_scan   reduce using rule 186 (expr -> TYPE .)
    operator_reduc  reduce using rule 186 (expr -> TYPE .)
    operator_bitand reduce using rule 186 (expr -> TYPE .)
    operator_bitor  reduce using rule 186 (expr -> TYPE .)
    operator_bitxor reduce using rule 186 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 186 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 186 (expr -> TYPE .)
    operator_and    reduce using rule 186 (expr -> TYPE .)
    operator_or     reduce using rule 186 (expr -> TYPE .)
    operator_xor    reduce using rule 186 (expr -> TYPE .)
    operator_contains reduce using rule 186 (expr -> TYPE .)
    operator_incr   reduce using rule 186 (expr -> TYPE .)
    operator_decr   reduce using rule 186 (expr -> TYPE .)
    operator_outer  reduce using rule 186 (expr -> TYPE .)
    operator_rotate reduce using rule 186 (expr -> TYPE .)
    operator_apply  reduce using rule 186 (expr -> TYPE .)
    operator_compose reduce using rule 186 (expr -> TYPE .)
    operator_over   reduce using rule 186 (expr -> TYPE .)
    operator_map    reduce using rule 186 (expr -> TYPE .)
    operator_less_than reduce using rule 186 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 186 (expr -> TYPE .)
    operator_greater_than reduce using rule 186 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 186 (expr -> TYPE .)
    operator_equals reduce using rule 186 (expr -> TYPE .)
    operator_not_equals reduce using rule 186 (expr -> TYPE .)
    operator_smallest reduce using rule 186 (expr -> TYPE .)
    operator_greatest reduce using rule 186 (expr -> TYPE .)
    operator_goodname reduce using rule 186 (expr -> TYPE .)
    [               reduce using rule 186 (expr -> TYPE .)
    (               reduce using rule 186 (expr -> TYPE .)
    operator_bitnot reduce using rule 186 (expr -> TYPE .)
    operator_not    reduce using rule 186 (expr -> TYPE .)
    operator_reverse reduce using rule 186 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 186 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 186 (expr -> TYPE .)
    operator_s_combinator reduce using rule 186 (expr -> TYPE .)
    operator_s2_combinator reduce using rule 186 (expr -> TYPE .)
    operator_goodname2 reduce using rule 186 (expr -> TYPE .)
    VAR             reduce using rule 186 (expr -> TYPE .)
    FLOAT           reduce using rule 186 (expr -> TYPE .)
    NUM             reduce using rule 186 (expr -> TYPE .)
    STRING_3SQ      reduce using rule 186 (expr -> TYPE .)
    STRING_3DQ      reduce using rule 186 (expr -> TYPE .)
    STRING_SQ       reduce using rule 186 (expr -> TYPE .)
    STRING_DQ       reduce using rule 186 (expr -> TYPE .)
    true            reduce using rule 186 (expr -> TYPE .)
    Null            reduce using rule 186 (expr -> TYPE .)
    false           reduce using rule 186 (expr -> TYPE .)
    type_type       reduce using rule 186 (expr -> TYPE .)
    type_num        reduce using rule 186 (expr -> TYPE .)
    type_bool       reduce using rule 186 (expr -> TYPE .)
    type_any        reduce using rule 186 (expr -> TYPE .)
    type_u64        reduce using rule 186 (expr -> TYPE .)
    type_u32        reduce using rule 186 (expr -> TYPE .)
    type_u16        reduce using rule 186 (expr -> TYPE .)
    type_u8         reduce using rule 186 (expr -> TYPE .)
    type_i64        reduce using rule 186 (expr -> TYPE .)
    type_i32        reduce using rule 186 (expr -> TYPE .)
    type_i16        reduce using rule 186 (expr -> TYPE .)
    type_i8         reduce using rule 186 (expr -> TYPE .)
    type_f32        reduce using rule 186 (expr -> TYPE .)
    type_f64        reduce using rule 186 (expr -> TYPE .)
    type_str        reduce using rule 186 (expr -> TYPE .)
    type_list       reduce using rule 186 (expr -> TYPE .)
    type_tuple      reduce using rule 186 (expr -> TYPE .)
    type_array      reduce using rule 186 (expr -> TYPE .)
    type_vector     reduce using rule 186 (expr -> TYPE .)
    type_dict       reduce using rule 186 (expr -> TYPE .)
    type_generator  reduce using rule 186 (expr -> TYPE .)
    type_linked_list reduce using rule 186 (expr -> TYPE .)
    type_doubly_linked_list reduce using rule 186 (expr -> TYPE .)
    type_deque      reduce using rule 186 (expr -> TYPE .)
    type_heap       reduce using rule 186 (expr -> TYPE .)
    type_fibonacci_heap reduce using rule 186 (expr -> TYPE .)
    type_tree       reduce using rule 186 (expr -> TYPE .)
    type_trie       reduce using rule 186 (expr -> TYPE .)
    type_stack      reduce using rule 186 (expr -> TYPE .)
    type_queue      reduce using rule 186 (expr -> TYPE .)
    type_binary_search_tree reduce using rule 186 (expr -> TYPE .)
    type_bitset     reduce using rule 186 (expr -> TYPE .)
    type_set        reduce using rule 186 (expr -> TYPE .)
    type_map        reduce using rule 186 (expr -> TYPE .)
    type_range      reduce using rule 186 (expr -> TYPE .)
    type_bad_struct reduce using rule 186 (expr -> TYPE .)
    type_bad_struct2 reduce using rule 186 (expr -> TYPE .)
    lambda          reduce using rule 186 (expr -> TYPE .)
    NEWLINE         reduce using rule 186 (expr -> TYPE .)
    $end            reduce using rule 186 (expr -> TYPE .)
    }               reduce using rule 186 (expr -> TYPE .)
    )               reduce using rule 186 (expr -> TYPE .)
    {               reduce using rule 186 (expr -> TYPE .)
    ]               reduce using rule 186 (expr -> TYPE .)
    :               reduce using rule 186 (expr -> TYPE .)
    ,               reduce using rule 186 (expr -> TYPE .)


state 145

    (71) block_stmt -> block_decl { . stmts }
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (72) block_decl -> . for_decl
    (73) block_decl -> . if_decl
    (74) block_decl -> . else
    (75) block_decl -> . elif_decl
    (76) block_decl -> . operator_decl
    (77) block_decl -> . struct_decl
    (78) block_decl -> . while_decl
    (79) block_decl -> . func_decl
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (80) for_decl -> . for comma_separated_names operator_contains expr
    (81) if_decl -> . if expr
    (82) elif_decl -> . elif expr
    (83) operator_decl -> . operator ( arguments )
    (84) struct_decl -> . struct TYPE
    (85) while_decl -> . while expr
    (86) func_decl -> . func VAR ( def_arguments )

    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 30
    del             shift and go to state 35
    else            shift and go to state 39
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91
    for             shift and go to state 92
    if              shift and go to state 93
    elif            shift and go to state 94
    operator        shift and go to state 95
    struct          shift and go to state 96
    while           shift and go to state 97
    func            shift and go to state 98

    block_decl                     shift and go to state 16
    stmts                          shift and go to state 286
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 34
    comma_separated_names          shift and go to state 36
    for_decl                       shift and go to state 37
    if_decl                        shift and go to state 38
    elif_decl                      shift and go to state 40
    operator_decl                  shift and go to state 41
    struct_decl                    shift and go to state 42
    while_decl                     shift and go to state 43
    func_decl                      shift and go to state 44

state 146

    (62) return_stmt -> return expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 62 (return_stmt -> return expr .)
    $end            reduce using rule 62 (return_stmt -> return expr .)
    }               reduce using rule 62 (return_stmt -> return expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 147

    (65) assign_stmt -> item = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    item                           shift and go to state 140
    expr                           shift and go to state 287
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 148

    (66) assign_stmt -> simple_slice = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    simple_slice                   shift and go to state 141
    expr                           shift and go to state 288
    item                           shift and go to state 140
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 149

    (67) assign_stmt -> full_slice = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    full_slice                     shift and go to state 142
    expr                           shift and go to state 289
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 150

    (98) expr -> ( expr . )
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    )               shift and go to state 290
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 151

    (118) expr -> operator_bitnot expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_sub    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_mul    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_div    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_trudiv reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_pow    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_join   reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_split  reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_scan   reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_reduc  reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitand reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitor  reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitxor reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitshiftleft reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitshiftright reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_and    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_or     reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_xor    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_contains reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_incr   reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_decr   reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_outer  reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_rotate reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_apply  reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_less_than reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_less_than_equals reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_greater_than reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_greater_than_equals reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_equals reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_not_equals reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_smallest reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_greatest reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_goodname reduce using rule 118 (expr -> operator_bitnot expr .)
    [               reduce using rule 118 (expr -> operator_bitnot expr .)
    (               reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_bitnot reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_not    reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_reverse reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_sorted_incr reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_sorted_decr reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_s_combinator reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_s2_combinator reduce using rule 118 (expr -> operator_bitnot expr .)
    VAR             reduce using rule 118 (expr -> operator_bitnot expr .)
    FLOAT           reduce using rule 118 (expr -> operator_bitnot expr .)
    NUM             reduce using rule 118 (expr -> operator_bitnot expr .)
    STRING_3SQ      reduce using rule 118 (expr -> operator_bitnot expr .)
    STRING_3DQ      reduce using rule 118 (expr -> operator_bitnot expr .)
    STRING_SQ       reduce using rule 118 (expr -> operator_bitnot expr .)
    STRING_DQ       reduce using rule 118 (expr -> operator_bitnot expr .)
    true            reduce using rule 118 (expr -> operator_bitnot expr .)
    Null            reduce using rule 118 (expr -> operator_bitnot expr .)
    false           reduce using rule 118 (expr -> operator_bitnot expr .)
    type_type       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_num        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_bool       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_any        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_u64        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_u32        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_u16        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_u8         reduce using rule 118 (expr -> operator_bitnot expr .)
    type_i64        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_i32        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_i16        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_i8         reduce using rule 118 (expr -> operator_bitnot expr .)
    type_f32        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_f64        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_str        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_list       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_tuple      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_array      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_vector     reduce using rule 118 (expr -> operator_bitnot expr .)
    type_dict       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_generator  reduce using rule 118 (expr -> operator_bitnot expr .)
    type_linked_list reduce using rule 118 (expr -> operator_bitnot expr .)
    type_doubly_linked_list reduce using rule 118 (expr -> operator_bitnot expr .)
    type_deque      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_heap       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_fibonacci_heap reduce using rule 118 (expr -> operator_bitnot expr .)
    type_tree       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_trie       reduce using rule 118 (expr -> operator_bitnot expr .)
    type_stack      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_queue      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_binary_search_tree reduce using rule 118 (expr -> operator_bitnot expr .)
    type_bitset     reduce using rule 118 (expr -> operator_bitnot expr .)
    type_set        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_map        reduce using rule 118 (expr -> operator_bitnot expr .)
    type_range      reduce using rule 118 (expr -> operator_bitnot expr .)
    type_bad_struct reduce using rule 118 (expr -> operator_bitnot expr .)
    type_bad_struct2 reduce using rule 118 (expr -> operator_bitnot expr .)
    lambda          reduce using rule 118 (expr -> operator_bitnot expr .)
    NEWLINE         reduce using rule 118 (expr -> operator_bitnot expr .)
    $end            reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_inner  reduce using rule 118 (expr -> operator_bitnot expr .)
    }               reduce using rule 118 (expr -> operator_bitnot expr .)
    )               reduce using rule 118 (expr -> operator_bitnot expr .)
    {               reduce using rule 118 (expr -> operator_bitnot expr .)
    ]               reduce using rule 118 (expr -> operator_bitnot expr .)
    :               reduce using rule 118 (expr -> operator_bitnot expr .)
    ,               reduce using rule 118 (expr -> operator_bitnot expr .)
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 118 (expr -> operator_bitnot expr .) ]
  ! operator_over   [ reduce using rule 118 (expr -> operator_bitnot expr .) ]
  ! operator_map    [ reduce using rule 118 (expr -> operator_bitnot expr .) ]
  ! operator_goodname2 [ reduce using rule 118 (expr -> operator_bitnot expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 152

    (119) expr -> operator_not expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 119 (expr -> operator_not expr .)
    operator_or     reduce using rule 119 (expr -> operator_not expr .)
    operator_xor    reduce using rule 119 (expr -> operator_not expr .)
    operator_contains reduce using rule 119 (expr -> operator_not expr .)
    operator_less_than reduce using rule 119 (expr -> operator_not expr .)
    operator_less_than_equals reduce using rule 119 (expr -> operator_not expr .)
    operator_greater_than reduce using rule 119 (expr -> operator_not expr .)
    operator_greater_than_equals reduce using rule 119 (expr -> operator_not expr .)
    operator_equals reduce using rule 119 (expr -> operator_not expr .)
    operator_not_equals reduce using rule 119 (expr -> operator_not expr .)
    operator_smallest reduce using rule 119 (expr -> operator_not expr .)
    operator_greatest reduce using rule 119 (expr -> operator_not expr .)
    [               reduce using rule 119 (expr -> operator_not expr .)
    (               reduce using rule 119 (expr -> operator_not expr .)
    operator_not    reduce using rule 119 (expr -> operator_not expr .)
    operator_s_combinator reduce using rule 119 (expr -> operator_not expr .)
    operator_s2_combinator reduce using rule 119 (expr -> operator_not expr .)
    VAR             reduce using rule 119 (expr -> operator_not expr .)
    FLOAT           reduce using rule 119 (expr -> operator_not expr .)
    NUM             reduce using rule 119 (expr -> operator_not expr .)
    STRING_3SQ      reduce using rule 119 (expr -> operator_not expr .)
    STRING_3DQ      reduce using rule 119 (expr -> operator_not expr .)
    STRING_SQ       reduce using rule 119 (expr -> operator_not expr .)
    STRING_DQ       reduce using rule 119 (expr -> operator_not expr .)
    true            reduce using rule 119 (expr -> operator_not expr .)
    Null            reduce using rule 119 (expr -> operator_not expr .)
    false           reduce using rule 119 (expr -> operator_not expr .)
    type_type       reduce using rule 119 (expr -> operator_not expr .)
    type_num        reduce using rule 119 (expr -> operator_not expr .)
    type_bool       reduce using rule 119 (expr -> operator_not expr .)
    type_any        reduce using rule 119 (expr -> operator_not expr .)
    type_u64        reduce using rule 119 (expr -> operator_not expr .)
    type_u32        reduce using rule 119 (expr -> operator_not expr .)
    type_u16        reduce using rule 119 (expr -> operator_not expr .)
    type_u8         reduce using rule 119 (expr -> operator_not expr .)
    type_i64        reduce using rule 119 (expr -> operator_not expr .)
    type_i32        reduce using rule 119 (expr -> operator_not expr .)
    type_i16        reduce using rule 119 (expr -> operator_not expr .)
    type_i8         reduce using rule 119 (expr -> operator_not expr .)
    type_f32        reduce using rule 119 (expr -> operator_not expr .)
    type_f64        reduce using rule 119 (expr -> operator_not expr .)
    type_str        reduce using rule 119 (expr -> operator_not expr .)
    type_list       reduce using rule 119 (expr -> operator_not expr .)
    type_tuple      reduce using rule 119 (expr -> operator_not expr .)
    type_array      reduce using rule 119 (expr -> operator_not expr .)
    type_vector     reduce using rule 119 (expr -> operator_not expr .)
    type_dict       reduce using rule 119 (expr -> operator_not expr .)
    type_generator  reduce using rule 119 (expr -> operator_not expr .)
    type_linked_list reduce using rule 119 (expr -> operator_not expr .)
    type_doubly_linked_list reduce using rule 119 (expr -> operator_not expr .)
    type_deque      reduce using rule 119 (expr -> operator_not expr .)
    type_heap       reduce using rule 119 (expr -> operator_not expr .)
    type_fibonacci_heap reduce using rule 119 (expr -> operator_not expr .)
    type_tree       reduce using rule 119 (expr -> operator_not expr .)
    type_trie       reduce using rule 119 (expr -> operator_not expr .)
    type_stack      reduce using rule 119 (expr -> operator_not expr .)
    type_queue      reduce using rule 119 (expr -> operator_not expr .)
    type_binary_search_tree reduce using rule 119 (expr -> operator_not expr .)
    type_bitset     reduce using rule 119 (expr -> operator_not expr .)
    type_set        reduce using rule 119 (expr -> operator_not expr .)
    type_map        reduce using rule 119 (expr -> operator_not expr .)
    type_range      reduce using rule 119 (expr -> operator_not expr .)
    type_bad_struct reduce using rule 119 (expr -> operator_not expr .)
    type_bad_struct2 reduce using rule 119 (expr -> operator_not expr .)
    lambda          reduce using rule 119 (expr -> operator_not expr .)
    NEWLINE         reduce using rule 119 (expr -> operator_not expr .)
    $end            reduce using rule 119 (expr -> operator_not expr .)
    operator_inner  reduce using rule 119 (expr -> operator_not expr .)
    }               reduce using rule 119 (expr -> operator_not expr .)
    )               reduce using rule 119 (expr -> operator_not expr .)
    {               reduce using rule 119 (expr -> operator_not expr .)
    ]               reduce using rule 119 (expr -> operator_not expr .)
    :               reduce using rule 119 (expr -> operator_not expr .)
    ,               reduce using rule 119 (expr -> operator_not expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_sub    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_mul    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_div    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_trudiv [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_pow    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_join   [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_split  [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_scan   [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_reduc  [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitand [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitor  [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitxor [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitshiftleft [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitshiftright [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_incr   [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_decr   [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_outer  [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_rotate [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_apply  [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_compose [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_over   [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_map    [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_goodname [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_bitnot [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_reverse [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_sorted_incr [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_sorted_decr [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_goodname2 [ reduce using rule 119 (expr -> operator_not expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 153

    (124) expr -> operator_reverse expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_sub    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_mul    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_div    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_trudiv reduce using rule 124 (expr -> operator_reverse expr .)
    operator_pow    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_join   reduce using rule 124 (expr -> operator_reverse expr .)
    operator_split  reduce using rule 124 (expr -> operator_reverse expr .)
    operator_scan   reduce using rule 124 (expr -> operator_reverse expr .)
    operator_reduc  reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitand reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitor  reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitxor reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitshiftleft reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitshiftright reduce using rule 124 (expr -> operator_reverse expr .)
    operator_and    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_or     reduce using rule 124 (expr -> operator_reverse expr .)
    operator_xor    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_contains reduce using rule 124 (expr -> operator_reverse expr .)
    operator_incr   reduce using rule 124 (expr -> operator_reverse expr .)
    operator_decr   reduce using rule 124 (expr -> operator_reverse expr .)
    operator_outer  reduce using rule 124 (expr -> operator_reverse expr .)
    operator_rotate reduce using rule 124 (expr -> operator_reverse expr .)
    operator_apply  reduce using rule 124 (expr -> operator_reverse expr .)
    operator_less_than reduce using rule 124 (expr -> operator_reverse expr .)
    operator_less_than_equals reduce using rule 124 (expr -> operator_reverse expr .)
    operator_greater_than reduce using rule 124 (expr -> operator_reverse expr .)
    operator_greater_than_equals reduce using rule 124 (expr -> operator_reverse expr .)
    operator_equals reduce using rule 124 (expr -> operator_reverse expr .)
    operator_not_equals reduce using rule 124 (expr -> operator_reverse expr .)
    operator_smallest reduce using rule 124 (expr -> operator_reverse expr .)
    operator_greatest reduce using rule 124 (expr -> operator_reverse expr .)
    operator_goodname reduce using rule 124 (expr -> operator_reverse expr .)
    [               reduce using rule 124 (expr -> operator_reverse expr .)
    (               reduce using rule 124 (expr -> operator_reverse expr .)
    operator_bitnot reduce using rule 124 (expr -> operator_reverse expr .)
    operator_not    reduce using rule 124 (expr -> operator_reverse expr .)
    operator_reverse reduce using rule 124 (expr -> operator_reverse expr .)
    operator_sorted_incr reduce using rule 124 (expr -> operator_reverse expr .)
    operator_sorted_decr reduce using rule 124 (expr -> operator_reverse expr .)
    operator_s_combinator reduce using rule 124 (expr -> operator_reverse expr .)
    operator_s2_combinator reduce using rule 124 (expr -> operator_reverse expr .)
    VAR             reduce using rule 124 (expr -> operator_reverse expr .)
    FLOAT           reduce using rule 124 (expr -> operator_reverse expr .)
    NUM             reduce using rule 124 (expr -> operator_reverse expr .)
    STRING_3SQ      reduce using rule 124 (expr -> operator_reverse expr .)
    STRING_3DQ      reduce using rule 124 (expr -> operator_reverse expr .)
    STRING_SQ       reduce using rule 124 (expr -> operator_reverse expr .)
    STRING_DQ       reduce using rule 124 (expr -> operator_reverse expr .)
    true            reduce using rule 124 (expr -> operator_reverse expr .)
    Null            reduce using rule 124 (expr -> operator_reverse expr .)
    false           reduce using rule 124 (expr -> operator_reverse expr .)
    type_type       reduce using rule 124 (expr -> operator_reverse expr .)
    type_num        reduce using rule 124 (expr -> operator_reverse expr .)
    type_bool       reduce using rule 124 (expr -> operator_reverse expr .)
    type_any        reduce using rule 124 (expr -> operator_reverse expr .)
    type_u64        reduce using rule 124 (expr -> operator_reverse expr .)
    type_u32        reduce using rule 124 (expr -> operator_reverse expr .)
    type_u16        reduce using rule 124 (expr -> operator_reverse expr .)
    type_u8         reduce using rule 124 (expr -> operator_reverse expr .)
    type_i64        reduce using rule 124 (expr -> operator_reverse expr .)
    type_i32        reduce using rule 124 (expr -> operator_reverse expr .)
    type_i16        reduce using rule 124 (expr -> operator_reverse expr .)
    type_i8         reduce using rule 124 (expr -> operator_reverse expr .)
    type_f32        reduce using rule 124 (expr -> operator_reverse expr .)
    type_f64        reduce using rule 124 (expr -> operator_reverse expr .)
    type_str        reduce using rule 124 (expr -> operator_reverse expr .)
    type_list       reduce using rule 124 (expr -> operator_reverse expr .)
    type_tuple      reduce using rule 124 (expr -> operator_reverse expr .)
    type_array      reduce using rule 124 (expr -> operator_reverse expr .)
    type_vector     reduce using rule 124 (expr -> operator_reverse expr .)
    type_dict       reduce using rule 124 (expr -> operator_reverse expr .)
    type_generator  reduce using rule 124 (expr -> operator_reverse expr .)
    type_linked_list reduce using rule 124 (expr -> operator_reverse expr .)
    type_doubly_linked_list reduce using rule 124 (expr -> operator_reverse expr .)
    type_deque      reduce using rule 124 (expr -> operator_reverse expr .)
    type_heap       reduce using rule 124 (expr -> operator_reverse expr .)
    type_fibonacci_heap reduce using rule 124 (expr -> operator_reverse expr .)
    type_tree       reduce using rule 124 (expr -> operator_reverse expr .)
    type_trie       reduce using rule 124 (expr -> operator_reverse expr .)
    type_stack      reduce using rule 124 (expr -> operator_reverse expr .)
    type_queue      reduce using rule 124 (expr -> operator_reverse expr .)
    type_binary_search_tree reduce using rule 124 (expr -> operator_reverse expr .)
    type_bitset     reduce using rule 124 (expr -> operator_reverse expr .)
    type_set        reduce using rule 124 (expr -> operator_reverse expr .)
    type_map        reduce using rule 124 (expr -> operator_reverse expr .)
    type_range      reduce using rule 124 (expr -> operator_reverse expr .)
    type_bad_struct reduce using rule 124 (expr -> operator_reverse expr .)
    type_bad_struct2 reduce using rule 124 (expr -> operator_reverse expr .)
    lambda          reduce using rule 124 (expr -> operator_reverse expr .)
    NEWLINE         reduce using rule 124 (expr -> operator_reverse expr .)
    $end            reduce using rule 124 (expr -> operator_reverse expr .)
    operator_inner  reduce using rule 124 (expr -> operator_reverse expr .)
    }               reduce using rule 124 (expr -> operator_reverse expr .)
    )               reduce using rule 124 (expr -> operator_reverse expr .)
    {               reduce using rule 124 (expr -> operator_reverse expr .)
    ]               reduce using rule 124 (expr -> operator_reverse expr .)
    :               reduce using rule 124 (expr -> operator_reverse expr .)
    ,               reduce using rule 124 (expr -> operator_reverse expr .)
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 124 (expr -> operator_reverse expr .) ]
  ! operator_over   [ reduce using rule 124 (expr -> operator_reverse expr .) ]
  ! operator_map    [ reduce using rule 124 (expr -> operator_reverse expr .) ]
  ! operator_goodname2 [ reduce using rule 124 (expr -> operator_reverse expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 154

    (130) expr -> operator_sorted_incr expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_sub    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_mul    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_div    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_trudiv reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_pow    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_join   reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_split  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_scan   reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_reduc  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitand reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitor  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitxor reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitshiftleft reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitshiftright reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_and    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_or     reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_xor    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_contains reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_incr   reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_decr   reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_outer  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_rotate reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_apply  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_less_than reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_less_than_equals reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_greater_than reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_greater_than_equals reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_equals reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_not_equals reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_smallest reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_greatest reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_goodname reduce using rule 130 (expr -> operator_sorted_incr expr .)
    [               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    (               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_bitnot reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_not    reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_reverse reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_sorted_incr reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_sorted_decr reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_s_combinator reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_s2_combinator reduce using rule 130 (expr -> operator_sorted_incr expr .)
    VAR             reduce using rule 130 (expr -> operator_sorted_incr expr .)
    FLOAT           reduce using rule 130 (expr -> operator_sorted_incr expr .)
    NUM             reduce using rule 130 (expr -> operator_sorted_incr expr .)
    STRING_3SQ      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    STRING_3DQ      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    STRING_SQ       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    STRING_DQ       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    true            reduce using rule 130 (expr -> operator_sorted_incr expr .)
    Null            reduce using rule 130 (expr -> operator_sorted_incr expr .)
    false           reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_type       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_num        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_bool       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_any        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_u64        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_u32        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_u16        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_u8         reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_i64        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_i32        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_i16        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_i8         reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_f32        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_f64        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_str        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_list       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_tuple      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_array      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_vector     reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_dict       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_generator  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_linked_list reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_doubly_linked_list reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_deque      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_heap       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_fibonacci_heap reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_tree       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_trie       reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_stack      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_queue      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_binary_search_tree reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_bitset     reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_set        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_map        reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_range      reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_bad_struct reduce using rule 130 (expr -> operator_sorted_incr expr .)
    type_bad_struct2 reduce using rule 130 (expr -> operator_sorted_incr expr .)
    lambda          reduce using rule 130 (expr -> operator_sorted_incr expr .)
    NEWLINE         reduce using rule 130 (expr -> operator_sorted_incr expr .)
    $end            reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_inner  reduce using rule 130 (expr -> operator_sorted_incr expr .)
    }               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    )               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    {               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    ]               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    :               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    ,               reduce using rule 130 (expr -> operator_sorted_incr expr .)
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 130 (expr -> operator_sorted_incr expr .) ]
  ! operator_over   [ reduce using rule 130 (expr -> operator_sorted_incr expr .) ]
  ! operator_map    [ reduce using rule 130 (expr -> operator_sorted_incr expr .) ]
  ! operator_goodname2 [ reduce using rule 130 (expr -> operator_sorted_incr expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 155

    (131) expr -> operator_sorted_decr expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_sub    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_mul    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_div    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_trudiv reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_pow    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_join   reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_split  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_scan   reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_reduc  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitand reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitor  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitxor reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitshiftleft reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitshiftright reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_and    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_or     reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_xor    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_contains reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_incr   reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_decr   reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_outer  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_rotate reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_apply  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_less_than reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_less_than_equals reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_greater_than reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_greater_than_equals reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_equals reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_not_equals reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_smallest reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_greatest reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_goodname reduce using rule 131 (expr -> operator_sorted_decr expr .)
    [               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    (               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_bitnot reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_not    reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_reverse reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_sorted_incr reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_sorted_decr reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_s_combinator reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_s2_combinator reduce using rule 131 (expr -> operator_sorted_decr expr .)
    VAR             reduce using rule 131 (expr -> operator_sorted_decr expr .)
    FLOAT           reduce using rule 131 (expr -> operator_sorted_decr expr .)
    NUM             reduce using rule 131 (expr -> operator_sorted_decr expr .)
    STRING_3SQ      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    STRING_3DQ      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    STRING_SQ       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    STRING_DQ       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    true            reduce using rule 131 (expr -> operator_sorted_decr expr .)
    Null            reduce using rule 131 (expr -> operator_sorted_decr expr .)
    false           reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_type       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_num        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_bool       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_any        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_u64        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_u32        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_u16        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_u8         reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_i64        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_i32        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_i16        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_i8         reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_f32        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_f64        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_str        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_list       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_tuple      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_array      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_vector     reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_dict       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_generator  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_linked_list reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_doubly_linked_list reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_deque      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_heap       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_fibonacci_heap reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_tree       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_trie       reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_stack      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_queue      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_binary_search_tree reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_bitset     reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_set        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_map        reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_range      reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_bad_struct reduce using rule 131 (expr -> operator_sorted_decr expr .)
    type_bad_struct2 reduce using rule 131 (expr -> operator_sorted_decr expr .)
    lambda          reduce using rule 131 (expr -> operator_sorted_decr expr .)
    NEWLINE         reduce using rule 131 (expr -> operator_sorted_decr expr .)
    $end            reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_inner  reduce using rule 131 (expr -> operator_sorted_decr expr .)
    }               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    )               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    {               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    ]               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    :               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    ,               reduce using rule 131 (expr -> operator_sorted_decr expr .)
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 131 (expr -> operator_sorted_decr expr .) ]
  ! operator_over   [ reduce using rule 131 (expr -> operator_sorted_decr expr .) ]
  ! operator_map    [ reduce using rule 131 (expr -> operator_sorted_decr expr .) ]
  ! operator_goodname2 [ reduce using rule 131 (expr -> operator_sorted_decr expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 156

    (141) expr -> operator_s_combinator expr . expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 291
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 157

    (142) expr -> operator_s2_combinator expr . expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 292
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 158

    (143) expr -> operator_goodname2 expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_sub    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_mul    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_div    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_trudiv reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_pow    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_join   reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_split  reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_scan   reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_reduc  reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitand reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitor  reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitxor reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitshiftleft reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitshiftright reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_and    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_or     reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_xor    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_contains reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_incr   reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_decr   reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_outer  reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_rotate reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_apply  reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_compose reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_over   reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_map    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_less_than reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_less_than_equals reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_greater_than reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_greater_than_equals reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_equals reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_not_equals reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_smallest reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_greatest reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_goodname reduce using rule 143 (expr -> operator_goodname2 expr .)
    [               reduce using rule 143 (expr -> operator_goodname2 expr .)
    (               reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_bitnot reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_not    reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_reverse reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_sorted_incr reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_sorted_decr reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_s_combinator reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_s2_combinator reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_goodname2 reduce using rule 143 (expr -> operator_goodname2 expr .)
    VAR             reduce using rule 143 (expr -> operator_goodname2 expr .)
    FLOAT           reduce using rule 143 (expr -> operator_goodname2 expr .)
    NUM             reduce using rule 143 (expr -> operator_goodname2 expr .)
    STRING_3SQ      reduce using rule 143 (expr -> operator_goodname2 expr .)
    STRING_3DQ      reduce using rule 143 (expr -> operator_goodname2 expr .)
    STRING_SQ       reduce using rule 143 (expr -> operator_goodname2 expr .)
    STRING_DQ       reduce using rule 143 (expr -> operator_goodname2 expr .)
    true            reduce using rule 143 (expr -> operator_goodname2 expr .)
    Null            reduce using rule 143 (expr -> operator_goodname2 expr .)
    false           reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_type       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_num        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_bool       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_any        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_u64        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_u32        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_u16        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_u8         reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_i64        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_i32        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_i16        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_i8         reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_f32        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_f64        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_str        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_list       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_tuple      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_array      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_vector     reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_dict       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_generator  reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_linked_list reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_doubly_linked_list reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_deque      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_heap       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_fibonacci_heap reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_tree       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_trie       reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_stack      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_queue      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_binary_search_tree reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_bitset     reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_set        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_map        reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_range      reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_bad_struct reduce using rule 143 (expr -> operator_goodname2 expr .)
    type_bad_struct2 reduce using rule 143 (expr -> operator_goodname2 expr .)
    lambda          reduce using rule 143 (expr -> operator_goodname2 expr .)
    NEWLINE         reduce using rule 143 (expr -> operator_goodname2 expr .)
    $end            reduce using rule 143 (expr -> operator_goodname2 expr .)
    operator_inner  reduce using rule 143 (expr -> operator_goodname2 expr .)
    }               reduce using rule 143 (expr -> operator_goodname2 expr .)
    )               reduce using rule 143 (expr -> operator_goodname2 expr .)
    {               reduce using rule 143 (expr -> operator_goodname2 expr .)
    ]               reduce using rule 143 (expr -> operator_goodname2 expr .)
    :               reduce using rule 143 (expr -> operator_goodname2 expr .)
    ,               reduce using rule 143 (expr -> operator_goodname2 expr .)

  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_compose [ shift and go to state 127 ]
  ! operator_over   [ shift and go to state 128 ]
  ! operator_map    [ shift and go to state 129 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! operator_goodname2 [ shift and go to state 29 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 159

    (182) return_val -> VAR ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 293
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 160

    (70) comma_separated_names -> VAR , . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 162

    comma_separated_names          shift and go to state 294

state 161

    (68) declaration_stmt -> TYPE comma_separated_names .

    NEWLINE         reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    $end            reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    }               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    ;               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    )               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)


state 162

    (69) comma_separated_names -> VAR .
    (70) comma_separated_names -> VAR . , comma_separated_names

    NEWLINE         reduce using rule 69 (comma_separated_names -> VAR .)
    $end            reduce using rule 69 (comma_separated_names -> VAR .)
    }               reduce using rule 69 (comma_separated_names -> VAR .)
    :               reduce using rule 69 (comma_separated_names -> VAR .)
    operator_contains reduce using rule 69 (comma_separated_names -> VAR .)
    =               reduce using rule 69 (comma_separated_names -> VAR .)
    ;               reduce using rule 69 (comma_separated_names -> VAR .)
    )               reduce using rule 69 (comma_separated_names -> VAR .)
    ,               shift and go to state 160


state 163

    (63) del_stmt -> del expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 63 (del_stmt -> del expr .)
    $end            reduce using rule 63 (del_stmt -> del expr .)
    }               reduce using rule 63 (del_stmt -> del expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 164

    (64) assign_stmt -> comma_separated_names = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 295
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 165

    (145) return_val -> type_type ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 296
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 166

    (146) return_val -> type_num ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 297
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 167

    (147) return_val -> type_bool ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 298
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 168

    (148) return_val -> type_any ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 299
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 169

    (149) return_val -> type_u64 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 300
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 170

    (150) return_val -> type_u32 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 301
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 171

    (151) return_val -> type_u16 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 302
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 172

    (152) return_val -> type_u8 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 303
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 173

    (153) return_val -> type_i64 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 304
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 174

    (154) return_val -> type_i32 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 305
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 175

    (155) return_val -> type_i16 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 306
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 176

    (156) return_val -> type_i8 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 307
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 177

    (157) return_val -> type_f32 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 308
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 178

    (158) return_val -> type_f64 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 309
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 179

    (159) return_val -> type_str ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 310
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 180

    (160) return_val -> type_list ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 311
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 181

    (161) return_val -> type_tuple ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 312
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 182

    (162) return_val -> type_array ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 313
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 183

    (163) return_val -> type_vector ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 314
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 184

    (164) return_val -> type_dict ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 315
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 185

    (165) return_val -> type_generator ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 316
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 186

    (166) return_val -> type_linked_list ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 317
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 187

    (167) return_val -> type_doubly_linked_list ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 318
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 188

    (168) return_val -> type_deque ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 319
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 189

    (169) return_val -> type_heap ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 320
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 190

    (170) return_val -> type_fibonacci_heap ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 321
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 191

    (171) return_val -> type_tree ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 322
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 192

    (172) return_val -> type_trie ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 323
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 193

    (173) return_val -> type_stack ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 324
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 194

    (174) return_val -> type_queue ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 325
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 195

    (175) return_val -> type_binary_search_tree ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 326
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 196

    (176) return_val -> type_bitset ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 327
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 197

    (177) return_val -> type_set ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 328
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 198

    (178) return_val -> type_map ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 329
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 199

    (179) return_val -> type_range ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 330
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 200

    (180) return_val -> type_bad_struct ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 331
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 201

    (181) return_val -> type_bad_struct2 ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 332
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 202

    (61) lambda_decl -> lambda comma_separated_names . : expr

    :               shift and go to state 333


state 203

    (80) for_decl -> for comma_separated_names . operator_contains expr

    operator_contains shift and go to state 334


state 204

    (81) if_decl -> if expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    {               reduce using rule 81 (if_decl -> if expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 205

    (82) elif_decl -> elif expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    {               reduce using rule 82 (elif_decl -> elif expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 206

    (83) operator_decl -> operator ( . arguments )
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    )               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 335
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 207

    (84) struct_decl -> struct TYPE .

    {               reduce using rule 84 (struct_decl -> struct TYPE .)


state 208

    (10) TYPE -> type_type .

    {               reduce using rule 10 (TYPE -> type_type .)
    VAR             reduce using rule 10 (TYPE -> type_type .)


state 209

    (11) TYPE -> type_num .

    {               reduce using rule 11 (TYPE -> type_num .)
    VAR             reduce using rule 11 (TYPE -> type_num .)


state 210

    (12) TYPE -> type_bool .

    {               reduce using rule 12 (TYPE -> type_bool .)
    VAR             reduce using rule 12 (TYPE -> type_bool .)


state 211

    (13) TYPE -> type_any .

    {               reduce using rule 13 (TYPE -> type_any .)
    VAR             reduce using rule 13 (TYPE -> type_any .)


state 212

    (14) TYPE -> type_u64 .

    {               reduce using rule 14 (TYPE -> type_u64 .)
    VAR             reduce using rule 14 (TYPE -> type_u64 .)


state 213

    (15) TYPE -> type_u32 .

    {               reduce using rule 15 (TYPE -> type_u32 .)
    VAR             reduce using rule 15 (TYPE -> type_u32 .)


state 214

    (16) TYPE -> type_u16 .

    {               reduce using rule 16 (TYPE -> type_u16 .)
    VAR             reduce using rule 16 (TYPE -> type_u16 .)


state 215

    (17) TYPE -> type_u8 .

    {               reduce using rule 17 (TYPE -> type_u8 .)
    VAR             reduce using rule 17 (TYPE -> type_u8 .)


state 216

    (18) TYPE -> type_i64 .

    {               reduce using rule 18 (TYPE -> type_i64 .)
    VAR             reduce using rule 18 (TYPE -> type_i64 .)


state 217

    (19) TYPE -> type_i32 .

    {               reduce using rule 19 (TYPE -> type_i32 .)
    VAR             reduce using rule 19 (TYPE -> type_i32 .)


state 218

    (20) TYPE -> type_i16 .

    {               reduce using rule 20 (TYPE -> type_i16 .)
    VAR             reduce using rule 20 (TYPE -> type_i16 .)


state 219

    (21) TYPE -> type_i8 .

    {               reduce using rule 21 (TYPE -> type_i8 .)
    VAR             reduce using rule 21 (TYPE -> type_i8 .)


state 220

    (22) TYPE -> type_f32 .

    {               reduce using rule 22 (TYPE -> type_f32 .)
    VAR             reduce using rule 22 (TYPE -> type_f32 .)


state 221

    (23) TYPE -> type_f64 .

    {               reduce using rule 23 (TYPE -> type_f64 .)
    VAR             reduce using rule 23 (TYPE -> type_f64 .)


state 222

    (24) TYPE -> type_str .

    {               reduce using rule 24 (TYPE -> type_str .)
    VAR             reduce using rule 24 (TYPE -> type_str .)


state 223

    (25) TYPE -> type_list .

    {               reduce using rule 25 (TYPE -> type_list .)
    VAR             reduce using rule 25 (TYPE -> type_list .)


state 224

    (26) TYPE -> type_tuple .

    {               reduce using rule 26 (TYPE -> type_tuple .)
    VAR             reduce using rule 26 (TYPE -> type_tuple .)


state 225

    (27) TYPE -> type_array .

    {               reduce using rule 27 (TYPE -> type_array .)
    VAR             reduce using rule 27 (TYPE -> type_array .)


state 226

    (28) TYPE -> type_vector .

    {               reduce using rule 28 (TYPE -> type_vector .)
    VAR             reduce using rule 28 (TYPE -> type_vector .)


state 227

    (29) TYPE -> type_dict .

    {               reduce using rule 29 (TYPE -> type_dict .)
    VAR             reduce using rule 29 (TYPE -> type_dict .)


state 228

    (30) TYPE -> type_generator .

    {               reduce using rule 30 (TYPE -> type_generator .)
    VAR             reduce using rule 30 (TYPE -> type_generator .)


state 229

    (31) TYPE -> type_linked_list .

    {               reduce using rule 31 (TYPE -> type_linked_list .)
    VAR             reduce using rule 31 (TYPE -> type_linked_list .)


state 230

    (32) TYPE -> type_doubly_linked_list .

    {               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    VAR             reduce using rule 32 (TYPE -> type_doubly_linked_list .)


state 231

    (33) TYPE -> type_deque .

    {               reduce using rule 33 (TYPE -> type_deque .)
    VAR             reduce using rule 33 (TYPE -> type_deque .)


state 232

    (34) TYPE -> type_heap .

    {               reduce using rule 34 (TYPE -> type_heap .)
    VAR             reduce using rule 34 (TYPE -> type_heap .)


state 233

    (35) TYPE -> type_fibonacci_heap .

    {               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    VAR             reduce using rule 35 (TYPE -> type_fibonacci_heap .)


state 234

    (36) TYPE -> type_tree .

    {               reduce using rule 36 (TYPE -> type_tree .)
    VAR             reduce using rule 36 (TYPE -> type_tree .)


state 235

    (37) TYPE -> type_trie .

    {               reduce using rule 37 (TYPE -> type_trie .)
    VAR             reduce using rule 37 (TYPE -> type_trie .)


state 236

    (38) TYPE -> type_stack .

    {               reduce using rule 38 (TYPE -> type_stack .)
    VAR             reduce using rule 38 (TYPE -> type_stack .)


state 237

    (39) TYPE -> type_queue .

    {               reduce using rule 39 (TYPE -> type_queue .)
    VAR             reduce using rule 39 (TYPE -> type_queue .)


state 238

    (40) TYPE -> type_binary_search_tree .

    {               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    VAR             reduce using rule 40 (TYPE -> type_binary_search_tree .)


state 239

    (41) TYPE -> type_bitset .

    {               reduce using rule 41 (TYPE -> type_bitset .)
    VAR             reduce using rule 41 (TYPE -> type_bitset .)


state 240

    (42) TYPE -> type_set .

    {               reduce using rule 42 (TYPE -> type_set .)
    VAR             reduce using rule 42 (TYPE -> type_set .)


state 241

    (43) TYPE -> type_map .

    {               reduce using rule 43 (TYPE -> type_map .)
    VAR             reduce using rule 43 (TYPE -> type_map .)


state 242

    (44) TYPE -> type_range .

    {               reduce using rule 44 (TYPE -> type_range .)
    VAR             reduce using rule 44 (TYPE -> type_range .)


state 243

    (45) TYPE -> type_bad_struct .

    {               reduce using rule 45 (TYPE -> type_bad_struct .)
    VAR             reduce using rule 45 (TYPE -> type_bad_struct .)


state 244

    (46) TYPE -> type_bad_struct2 .

    {               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    VAR             reduce using rule 46 (TYPE -> type_bad_struct2 .)


state 245

    (85) while_decl -> while expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    {               reduce using rule 85 (while_decl -> while expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 246

    (86) func_decl -> func VAR . ( def_arguments )

    (               shift and go to state 336


state 247

    (7) stmts -> stmts newline stmt .

    NEWLINE         reduce using rule 7 (stmts -> stmts newline stmt .)
    $end            reduce using rule 7 (stmts -> stmts newline stmt .)
    }               reduce using rule 7 (stmts -> stmts newline stmt .)


state 248

    (3) program -> newline stmts newline .
    (7) stmts -> stmts newline . stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (72) block_decl -> . for_decl
    (73) block_decl -> . if_decl
    (74) block_decl -> . else
    (75) block_decl -> . elif_decl
    (76) block_decl -> . operator_decl
    (77) block_decl -> . struct_decl
    (78) block_decl -> . while_decl
    (79) block_decl -> . func_decl
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (80) for_decl -> . for comma_separated_names operator_contains expr
    (81) if_decl -> . if expr
    (82) elif_decl -> . elif expr
    (83) operator_decl -> . operator ( arguments )
    (84) struct_decl -> . struct TYPE
    (85) while_decl -> . while expr
    (86) func_decl -> . func VAR ( def_arguments )

    $end            reduce using rule 3 (program -> newline stmts newline .)
    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 30
    del             shift and go to state 35
    else            shift and go to state 39
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91
    for             shift and go to state 92
    if              shift and go to state 93
    elif            shift and go to state 94
    operator        shift and go to state 95
    struct          shift and go to state 96
    while           shift and go to state 97
    func            shift and go to state 98

    stmt                           shift and go to state 247
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 34
    comma_separated_names          shift and go to state 36
    for_decl                       shift and go to state 37
    if_decl                        shift and go to state 38
    elif_decl                      shift and go to state 40
    operator_decl                  shift and go to state 41
    struct_decl                    shift and go to state 42
    while_decl                     shift and go to state 43
    func_decl                      shift and go to state 44

state 249

    (123) expr -> expr expr operator_inner . expr expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 337
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 250

    (99) expr -> expr operator_add expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 99 (expr -> expr operator_add expr .)
    operator_sub    reduce using rule 99 (expr -> expr operator_add expr .)
    operator_join   reduce using rule 99 (expr -> expr operator_add expr .)
    operator_split  reduce using rule 99 (expr -> expr operator_add expr .)
    operator_bitand reduce using rule 99 (expr -> expr operator_add expr .)
    operator_bitor  reduce using rule 99 (expr -> expr operator_add expr .)
    operator_bitxor reduce using rule 99 (expr -> expr operator_add expr .)
    operator_bitshiftleft reduce using rule 99 (expr -> expr operator_add expr .)
    operator_bitshiftright reduce using rule 99 (expr -> expr operator_add expr .)
    operator_and    reduce using rule 99 (expr -> expr operator_add expr .)
    operator_or     reduce using rule 99 (expr -> expr operator_add expr .)
    operator_xor    reduce using rule 99 (expr -> expr operator_add expr .)
    operator_contains reduce using rule 99 (expr -> expr operator_add expr .)
    operator_outer  reduce using rule 99 (expr -> expr operator_add expr .)
    operator_less_than reduce using rule 99 (expr -> expr operator_add expr .)
    operator_less_than_equals reduce using rule 99 (expr -> expr operator_add expr .)
    operator_greater_than reduce using rule 99 (expr -> expr operator_add expr .)
    operator_greater_than_equals reduce using rule 99 (expr -> expr operator_add expr .)
    operator_equals reduce using rule 99 (expr -> expr operator_add expr .)
    operator_not_equals reduce using rule 99 (expr -> expr operator_add expr .)
    operator_smallest reduce using rule 99 (expr -> expr operator_add expr .)
    operator_greatest reduce using rule 99 (expr -> expr operator_add expr .)
    [               reduce using rule 99 (expr -> expr operator_add expr .)
    (               reduce using rule 99 (expr -> expr operator_add expr .)
    operator_not    reduce using rule 99 (expr -> expr operator_add expr .)
    operator_s_combinator reduce using rule 99 (expr -> expr operator_add expr .)
    operator_s2_combinator reduce using rule 99 (expr -> expr operator_add expr .)
    VAR             reduce using rule 99 (expr -> expr operator_add expr .)
    FLOAT           reduce using rule 99 (expr -> expr operator_add expr .)
    NUM             reduce using rule 99 (expr -> expr operator_add expr .)
    STRING_3SQ      reduce using rule 99 (expr -> expr operator_add expr .)
    STRING_3DQ      reduce using rule 99 (expr -> expr operator_add expr .)
    STRING_SQ       reduce using rule 99 (expr -> expr operator_add expr .)
    STRING_DQ       reduce using rule 99 (expr -> expr operator_add expr .)
    true            reduce using rule 99 (expr -> expr operator_add expr .)
    Null            reduce using rule 99 (expr -> expr operator_add expr .)
    false           reduce using rule 99 (expr -> expr operator_add expr .)
    type_type       reduce using rule 99 (expr -> expr operator_add expr .)
    type_num        reduce using rule 99 (expr -> expr operator_add expr .)
    type_bool       reduce using rule 99 (expr -> expr operator_add expr .)
    type_any        reduce using rule 99 (expr -> expr operator_add expr .)
    type_u64        reduce using rule 99 (expr -> expr operator_add expr .)
    type_u32        reduce using rule 99 (expr -> expr operator_add expr .)
    type_u16        reduce using rule 99 (expr -> expr operator_add expr .)
    type_u8         reduce using rule 99 (expr -> expr operator_add expr .)
    type_i64        reduce using rule 99 (expr -> expr operator_add expr .)
    type_i32        reduce using rule 99 (expr -> expr operator_add expr .)
    type_i16        reduce using rule 99 (expr -> expr operator_add expr .)
    type_i8         reduce using rule 99 (expr -> expr operator_add expr .)
    type_f32        reduce using rule 99 (expr -> expr operator_add expr .)
    type_f64        reduce using rule 99 (expr -> expr operator_add expr .)
    type_str        reduce using rule 99 (expr -> expr operator_add expr .)
    type_list       reduce using rule 99 (expr -> expr operator_add expr .)
    type_tuple      reduce using rule 99 (expr -> expr operator_add expr .)
    type_array      reduce using rule 99 (expr -> expr operator_add expr .)
    type_vector     reduce using rule 99 (expr -> expr operator_add expr .)
    type_dict       reduce using rule 99 (expr -> expr operator_add expr .)
    type_generator  reduce using rule 99 (expr -> expr operator_add expr .)
    type_linked_list reduce using rule 99 (expr -> expr operator_add expr .)
    type_doubly_linked_list reduce using rule 99 (expr -> expr operator_add expr .)
    type_deque      reduce using rule 99 (expr -> expr operator_add expr .)
    type_heap       reduce using rule 99 (expr -> expr operator_add expr .)
    type_fibonacci_heap reduce using rule 99 (expr -> expr operator_add expr .)
    type_tree       reduce using rule 99 (expr -> expr operator_add expr .)
    type_trie       reduce using rule 99 (expr -> expr operator_add expr .)
    type_stack      reduce using rule 99 (expr -> expr operator_add expr .)
    type_queue      reduce using rule 99 (expr -> expr operator_add expr .)
    type_binary_search_tree reduce using rule 99 (expr -> expr operator_add expr .)
    type_bitset     reduce using rule 99 (expr -> expr operator_add expr .)
    type_set        reduce using rule 99 (expr -> expr operator_add expr .)
    type_map        reduce using rule 99 (expr -> expr operator_add expr .)
    type_range      reduce using rule 99 (expr -> expr operator_add expr .)
    type_bad_struct reduce using rule 99 (expr -> expr operator_add expr .)
    type_bad_struct2 reduce using rule 99 (expr -> expr operator_add expr .)
    lambda          reduce using rule 99 (expr -> expr operator_add expr .)
    NEWLINE         reduce using rule 99 (expr -> expr operator_add expr .)
    $end            reduce using rule 99 (expr -> expr operator_add expr .)
    operator_inner  reduce using rule 99 (expr -> expr operator_add expr .)
    }               reduce using rule 99 (expr -> expr operator_add expr .)
    )               reduce using rule 99 (expr -> expr operator_add expr .)
    {               reduce using rule 99 (expr -> expr operator_add expr .)
    ]               reduce using rule 99 (expr -> expr operator_add expr .)
    :               reduce using rule 99 (expr -> expr operator_add expr .)
    ,               reduce using rule 99 (expr -> expr operator_add expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_div    [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_trudiv [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_pow    [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_scan   [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_reduc  [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_incr   [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_decr   [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_rotate [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_apply  [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_compose [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_over   [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_map    [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_goodname [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_bitnot [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_reverse [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_sorted_incr [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_sorted_decr [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_goodname2 [ reduce using rule 99 (expr -> expr operator_add expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 251

    (100) expr -> expr operator_sub expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_sub    reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_join   reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_split  reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_bitand reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_bitor  reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_bitxor reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_bitshiftleft reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_bitshiftright reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_and    reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_or     reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_xor    reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_contains reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_outer  reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_less_than reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_less_than_equals reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_greater_than reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_greater_than_equals reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_equals reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_not_equals reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_smallest reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_greatest reduce using rule 100 (expr -> expr operator_sub expr .)
    [               reduce using rule 100 (expr -> expr operator_sub expr .)
    (               reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_not    reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_s_combinator reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_s2_combinator reduce using rule 100 (expr -> expr operator_sub expr .)
    VAR             reduce using rule 100 (expr -> expr operator_sub expr .)
    FLOAT           reduce using rule 100 (expr -> expr operator_sub expr .)
    NUM             reduce using rule 100 (expr -> expr operator_sub expr .)
    STRING_3SQ      reduce using rule 100 (expr -> expr operator_sub expr .)
    STRING_3DQ      reduce using rule 100 (expr -> expr operator_sub expr .)
    STRING_SQ       reduce using rule 100 (expr -> expr operator_sub expr .)
    STRING_DQ       reduce using rule 100 (expr -> expr operator_sub expr .)
    true            reduce using rule 100 (expr -> expr operator_sub expr .)
    Null            reduce using rule 100 (expr -> expr operator_sub expr .)
    false           reduce using rule 100 (expr -> expr operator_sub expr .)
    type_type       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_num        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_bool       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_any        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_u64        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_u32        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_u16        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_u8         reduce using rule 100 (expr -> expr operator_sub expr .)
    type_i64        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_i32        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_i16        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_i8         reduce using rule 100 (expr -> expr operator_sub expr .)
    type_f32        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_f64        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_str        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_list       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_tuple      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_array      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_vector     reduce using rule 100 (expr -> expr operator_sub expr .)
    type_dict       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_generator  reduce using rule 100 (expr -> expr operator_sub expr .)
    type_linked_list reduce using rule 100 (expr -> expr operator_sub expr .)
    type_doubly_linked_list reduce using rule 100 (expr -> expr operator_sub expr .)
    type_deque      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_heap       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_fibonacci_heap reduce using rule 100 (expr -> expr operator_sub expr .)
    type_tree       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_trie       reduce using rule 100 (expr -> expr operator_sub expr .)
    type_stack      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_queue      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_binary_search_tree reduce using rule 100 (expr -> expr operator_sub expr .)
    type_bitset     reduce using rule 100 (expr -> expr operator_sub expr .)
    type_set        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_map        reduce using rule 100 (expr -> expr operator_sub expr .)
    type_range      reduce using rule 100 (expr -> expr operator_sub expr .)
    type_bad_struct reduce using rule 100 (expr -> expr operator_sub expr .)
    type_bad_struct2 reduce using rule 100 (expr -> expr operator_sub expr .)
    lambda          reduce using rule 100 (expr -> expr operator_sub expr .)
    NEWLINE         reduce using rule 100 (expr -> expr operator_sub expr .)
    $end            reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_inner  reduce using rule 100 (expr -> expr operator_sub expr .)
    }               reduce using rule 100 (expr -> expr operator_sub expr .)
    )               reduce using rule 100 (expr -> expr operator_sub expr .)
    {               reduce using rule 100 (expr -> expr operator_sub expr .)
    ]               reduce using rule 100 (expr -> expr operator_sub expr .)
    :               reduce using rule 100 (expr -> expr operator_sub expr .)
    ,               reduce using rule 100 (expr -> expr operator_sub expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_div    [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_trudiv [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_pow    [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_scan   [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_reduc  [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_incr   [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_decr   [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_rotate [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_apply  [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_compose [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_over   [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_map    [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_goodname [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_bitnot [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_reverse [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_incr [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_decr [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_goodname2 [ reduce using rule 100 (expr -> expr operator_sub expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 252

    (101) expr -> expr operator_mul expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_sub    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_mul    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_div    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_trudiv reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_join   reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_split  reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_bitand reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_bitor  reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_bitxor reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_bitshiftleft reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_bitshiftright reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_and    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_or     reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_xor    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_contains reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_outer  reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_less_than reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_less_than_equals reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_greater_than reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_greater_than_equals reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_equals reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_not_equals reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_smallest reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_greatest reduce using rule 101 (expr -> expr operator_mul expr .)
    [               reduce using rule 101 (expr -> expr operator_mul expr .)
    (               reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_not    reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_s_combinator reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_s2_combinator reduce using rule 101 (expr -> expr operator_mul expr .)
    VAR             reduce using rule 101 (expr -> expr operator_mul expr .)
    FLOAT           reduce using rule 101 (expr -> expr operator_mul expr .)
    NUM             reduce using rule 101 (expr -> expr operator_mul expr .)
    STRING_3SQ      reduce using rule 101 (expr -> expr operator_mul expr .)
    STRING_3DQ      reduce using rule 101 (expr -> expr operator_mul expr .)
    STRING_SQ       reduce using rule 101 (expr -> expr operator_mul expr .)
    STRING_DQ       reduce using rule 101 (expr -> expr operator_mul expr .)
    true            reduce using rule 101 (expr -> expr operator_mul expr .)
    Null            reduce using rule 101 (expr -> expr operator_mul expr .)
    false           reduce using rule 101 (expr -> expr operator_mul expr .)
    type_type       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_num        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_bool       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_any        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_u64        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_u32        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_u16        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_u8         reduce using rule 101 (expr -> expr operator_mul expr .)
    type_i64        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_i32        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_i16        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_i8         reduce using rule 101 (expr -> expr operator_mul expr .)
    type_f32        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_f64        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_str        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_list       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_tuple      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_array      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_vector     reduce using rule 101 (expr -> expr operator_mul expr .)
    type_dict       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_generator  reduce using rule 101 (expr -> expr operator_mul expr .)
    type_linked_list reduce using rule 101 (expr -> expr operator_mul expr .)
    type_doubly_linked_list reduce using rule 101 (expr -> expr operator_mul expr .)
    type_deque      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_heap       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_fibonacci_heap reduce using rule 101 (expr -> expr operator_mul expr .)
    type_tree       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_trie       reduce using rule 101 (expr -> expr operator_mul expr .)
    type_stack      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_queue      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_binary_search_tree reduce using rule 101 (expr -> expr operator_mul expr .)
    type_bitset     reduce using rule 101 (expr -> expr operator_mul expr .)
    type_set        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_map        reduce using rule 101 (expr -> expr operator_mul expr .)
    type_range      reduce using rule 101 (expr -> expr operator_mul expr .)
    type_bad_struct reduce using rule 101 (expr -> expr operator_mul expr .)
    type_bad_struct2 reduce using rule 101 (expr -> expr operator_mul expr .)
    lambda          reduce using rule 101 (expr -> expr operator_mul expr .)
    NEWLINE         reduce using rule 101 (expr -> expr operator_mul expr .)
    $end            reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_inner  reduce using rule 101 (expr -> expr operator_mul expr .)
    }               reduce using rule 101 (expr -> expr operator_mul expr .)
    )               reduce using rule 101 (expr -> expr operator_mul expr .)
    {               reduce using rule 101 (expr -> expr operator_mul expr .)
    ]               reduce using rule 101 (expr -> expr operator_mul expr .)
    :               reduce using rule 101 (expr -> expr operator_mul expr .)
    ,               reduce using rule 101 (expr -> expr operator_mul expr .)
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_pow    [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_scan   [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_reduc  [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_incr   [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_decr   [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_rotate [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_apply  [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_compose [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_over   [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_map    [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_goodname [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_bitnot [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_reverse [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_incr [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_decr [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_goodname2 [ reduce using rule 101 (expr -> expr operator_mul expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 253

    (102) expr -> expr operator_div expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_sub    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_mul    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_div    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_trudiv reduce using rule 102 (expr -> expr operator_div expr .)
    operator_join   reduce using rule 102 (expr -> expr operator_div expr .)
    operator_split  reduce using rule 102 (expr -> expr operator_div expr .)
    operator_bitand reduce using rule 102 (expr -> expr operator_div expr .)
    operator_bitor  reduce using rule 102 (expr -> expr operator_div expr .)
    operator_bitxor reduce using rule 102 (expr -> expr operator_div expr .)
    operator_bitshiftleft reduce using rule 102 (expr -> expr operator_div expr .)
    operator_bitshiftright reduce using rule 102 (expr -> expr operator_div expr .)
    operator_and    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_or     reduce using rule 102 (expr -> expr operator_div expr .)
    operator_xor    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_contains reduce using rule 102 (expr -> expr operator_div expr .)
    operator_outer  reduce using rule 102 (expr -> expr operator_div expr .)
    operator_less_than reduce using rule 102 (expr -> expr operator_div expr .)
    operator_less_than_equals reduce using rule 102 (expr -> expr operator_div expr .)
    operator_greater_than reduce using rule 102 (expr -> expr operator_div expr .)
    operator_greater_than_equals reduce using rule 102 (expr -> expr operator_div expr .)
    operator_equals reduce using rule 102 (expr -> expr operator_div expr .)
    operator_not_equals reduce using rule 102 (expr -> expr operator_div expr .)
    operator_smallest reduce using rule 102 (expr -> expr operator_div expr .)
    operator_greatest reduce using rule 102 (expr -> expr operator_div expr .)
    [               reduce using rule 102 (expr -> expr operator_div expr .)
    (               reduce using rule 102 (expr -> expr operator_div expr .)
    operator_not    reduce using rule 102 (expr -> expr operator_div expr .)
    operator_s_combinator reduce using rule 102 (expr -> expr operator_div expr .)
    operator_s2_combinator reduce using rule 102 (expr -> expr operator_div expr .)
    VAR             reduce using rule 102 (expr -> expr operator_div expr .)
    FLOAT           reduce using rule 102 (expr -> expr operator_div expr .)
    NUM             reduce using rule 102 (expr -> expr operator_div expr .)
    STRING_3SQ      reduce using rule 102 (expr -> expr operator_div expr .)
    STRING_3DQ      reduce using rule 102 (expr -> expr operator_div expr .)
    STRING_SQ       reduce using rule 102 (expr -> expr operator_div expr .)
    STRING_DQ       reduce using rule 102 (expr -> expr operator_div expr .)
    true            reduce using rule 102 (expr -> expr operator_div expr .)
    Null            reduce using rule 102 (expr -> expr operator_div expr .)
    false           reduce using rule 102 (expr -> expr operator_div expr .)
    type_type       reduce using rule 102 (expr -> expr operator_div expr .)
    type_num        reduce using rule 102 (expr -> expr operator_div expr .)
    type_bool       reduce using rule 102 (expr -> expr operator_div expr .)
    type_any        reduce using rule 102 (expr -> expr operator_div expr .)
    type_u64        reduce using rule 102 (expr -> expr operator_div expr .)
    type_u32        reduce using rule 102 (expr -> expr operator_div expr .)
    type_u16        reduce using rule 102 (expr -> expr operator_div expr .)
    type_u8         reduce using rule 102 (expr -> expr operator_div expr .)
    type_i64        reduce using rule 102 (expr -> expr operator_div expr .)
    type_i32        reduce using rule 102 (expr -> expr operator_div expr .)
    type_i16        reduce using rule 102 (expr -> expr operator_div expr .)
    type_i8         reduce using rule 102 (expr -> expr operator_div expr .)
    type_f32        reduce using rule 102 (expr -> expr operator_div expr .)
    type_f64        reduce using rule 102 (expr -> expr operator_div expr .)
    type_str        reduce using rule 102 (expr -> expr operator_div expr .)
    type_list       reduce using rule 102 (expr -> expr operator_div expr .)
    type_tuple      reduce using rule 102 (expr -> expr operator_div expr .)
    type_array      reduce using rule 102 (expr -> expr operator_div expr .)
    type_vector     reduce using rule 102 (expr -> expr operator_div expr .)
    type_dict       reduce using rule 102 (expr -> expr operator_div expr .)
    type_generator  reduce using rule 102 (expr -> expr operator_div expr .)
    type_linked_list reduce using rule 102 (expr -> expr operator_div expr .)
    type_doubly_linked_list reduce using rule 102 (expr -> expr operator_div expr .)
    type_deque      reduce using rule 102 (expr -> expr operator_div expr .)
    type_heap       reduce using rule 102 (expr -> expr operator_div expr .)
    type_fibonacci_heap reduce using rule 102 (expr -> expr operator_div expr .)
    type_tree       reduce using rule 102 (expr -> expr operator_div expr .)
    type_trie       reduce using rule 102 (expr -> expr operator_div expr .)
    type_stack      reduce using rule 102 (expr -> expr operator_div expr .)
    type_queue      reduce using rule 102 (expr -> expr operator_div expr .)
    type_binary_search_tree reduce using rule 102 (expr -> expr operator_div expr .)
    type_bitset     reduce using rule 102 (expr -> expr operator_div expr .)
    type_set        reduce using rule 102 (expr -> expr operator_div expr .)
    type_map        reduce using rule 102 (expr -> expr operator_div expr .)
    type_range      reduce using rule 102 (expr -> expr operator_div expr .)
    type_bad_struct reduce using rule 102 (expr -> expr operator_div expr .)
    type_bad_struct2 reduce using rule 102 (expr -> expr operator_div expr .)
    lambda          reduce using rule 102 (expr -> expr operator_div expr .)
    NEWLINE         reduce using rule 102 (expr -> expr operator_div expr .)
    $end            reduce using rule 102 (expr -> expr operator_div expr .)
    operator_inner  reduce using rule 102 (expr -> expr operator_div expr .)
    }               reduce using rule 102 (expr -> expr operator_div expr .)
    )               reduce using rule 102 (expr -> expr operator_div expr .)
    {               reduce using rule 102 (expr -> expr operator_div expr .)
    ]               reduce using rule 102 (expr -> expr operator_div expr .)
    :               reduce using rule 102 (expr -> expr operator_div expr .)
    ,               reduce using rule 102 (expr -> expr operator_div expr .)
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_pow    [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_scan   [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_reduc  [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_incr   [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_decr   [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_rotate [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_apply  [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_compose [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_over   [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_map    [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_goodname [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_bitnot [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_reverse [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_sorted_incr [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_sorted_decr [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_goodname2 [ reduce using rule 102 (expr -> expr operator_div expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 254

    (103) expr -> expr operator_trudiv expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_sub    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_mul    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_div    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_trudiv reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_join   reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_split  reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_bitand reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_bitor  reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_bitxor reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_bitshiftleft reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_bitshiftright reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_and    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_or     reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_xor    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_contains reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_outer  reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_less_than reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_less_than_equals reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_greater_than reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_greater_than_equals reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_equals reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_not_equals reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_smallest reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_greatest reduce using rule 103 (expr -> expr operator_trudiv expr .)
    [               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    (               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_not    reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_s_combinator reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_s2_combinator reduce using rule 103 (expr -> expr operator_trudiv expr .)
    VAR             reduce using rule 103 (expr -> expr operator_trudiv expr .)
    FLOAT           reduce using rule 103 (expr -> expr operator_trudiv expr .)
    NUM             reduce using rule 103 (expr -> expr operator_trudiv expr .)
    STRING_3SQ      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    STRING_3DQ      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    STRING_SQ       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    STRING_DQ       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    true            reduce using rule 103 (expr -> expr operator_trudiv expr .)
    Null            reduce using rule 103 (expr -> expr operator_trudiv expr .)
    false           reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_type       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_num        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_bool       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_any        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_u64        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_u32        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_u16        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_u8         reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_i64        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_i32        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_i16        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_i8         reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_f32        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_f64        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_str        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_list       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_tuple      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_array      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_vector     reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_dict       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_generator  reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_linked_list reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_doubly_linked_list reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_deque      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_heap       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_fibonacci_heap reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_tree       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_trie       reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_stack      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_queue      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_binary_search_tree reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_bitset     reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_set        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_map        reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_range      reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_bad_struct reduce using rule 103 (expr -> expr operator_trudiv expr .)
    type_bad_struct2 reduce using rule 103 (expr -> expr operator_trudiv expr .)
    lambda          reduce using rule 103 (expr -> expr operator_trudiv expr .)
    NEWLINE         reduce using rule 103 (expr -> expr operator_trudiv expr .)
    $end            reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_inner  reduce using rule 103 (expr -> expr operator_trudiv expr .)
    }               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    )               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    {               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    ]               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    :               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    ,               reduce using rule 103 (expr -> expr operator_trudiv expr .)
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_pow    [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_scan   [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_reduc  [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_incr   [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_decr   [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_rotate [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_apply  [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_compose [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_over   [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_map    [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitnot [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_reverse [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_incr [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_decr [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname2 [ reduce using rule 103 (expr -> expr operator_trudiv expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 255

    (104) expr -> expr operator_pow expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_sub    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_mul    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_div    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_trudiv reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_pow    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_join   reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_split  reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_bitand reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_bitor  reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_bitxor reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_bitshiftleft reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_bitshiftright reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_and    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_or     reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_xor    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_contains reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_outer  reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_less_than reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_less_than_equals reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_greater_than reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_greater_than_equals reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_equals reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_not_equals reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_smallest reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_greatest reduce using rule 104 (expr -> expr operator_pow expr .)
    [               reduce using rule 104 (expr -> expr operator_pow expr .)
    (               reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_not    reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_s_combinator reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_s2_combinator reduce using rule 104 (expr -> expr operator_pow expr .)
    VAR             reduce using rule 104 (expr -> expr operator_pow expr .)
    FLOAT           reduce using rule 104 (expr -> expr operator_pow expr .)
    NUM             reduce using rule 104 (expr -> expr operator_pow expr .)
    STRING_3SQ      reduce using rule 104 (expr -> expr operator_pow expr .)
    STRING_3DQ      reduce using rule 104 (expr -> expr operator_pow expr .)
    STRING_SQ       reduce using rule 104 (expr -> expr operator_pow expr .)
    STRING_DQ       reduce using rule 104 (expr -> expr operator_pow expr .)
    true            reduce using rule 104 (expr -> expr operator_pow expr .)
    Null            reduce using rule 104 (expr -> expr operator_pow expr .)
    false           reduce using rule 104 (expr -> expr operator_pow expr .)
    type_type       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_num        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_bool       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_any        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_u64        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_u32        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_u16        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_u8         reduce using rule 104 (expr -> expr operator_pow expr .)
    type_i64        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_i32        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_i16        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_i8         reduce using rule 104 (expr -> expr operator_pow expr .)
    type_f32        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_f64        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_str        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_list       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_tuple      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_array      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_vector     reduce using rule 104 (expr -> expr operator_pow expr .)
    type_dict       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_generator  reduce using rule 104 (expr -> expr operator_pow expr .)
    type_linked_list reduce using rule 104 (expr -> expr operator_pow expr .)
    type_doubly_linked_list reduce using rule 104 (expr -> expr operator_pow expr .)
    type_deque      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_heap       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_fibonacci_heap reduce using rule 104 (expr -> expr operator_pow expr .)
    type_tree       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_trie       reduce using rule 104 (expr -> expr operator_pow expr .)
    type_stack      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_queue      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_binary_search_tree reduce using rule 104 (expr -> expr operator_pow expr .)
    type_bitset     reduce using rule 104 (expr -> expr operator_pow expr .)
    type_set        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_map        reduce using rule 104 (expr -> expr operator_pow expr .)
    type_range      reduce using rule 104 (expr -> expr operator_pow expr .)
    type_bad_struct reduce using rule 104 (expr -> expr operator_pow expr .)
    type_bad_struct2 reduce using rule 104 (expr -> expr operator_pow expr .)
    lambda          reduce using rule 104 (expr -> expr operator_pow expr .)
    NEWLINE         reduce using rule 104 (expr -> expr operator_pow expr .)
    $end            reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_inner  reduce using rule 104 (expr -> expr operator_pow expr .)
    }               reduce using rule 104 (expr -> expr operator_pow expr .)
    )               reduce using rule 104 (expr -> expr operator_pow expr .)
    {               reduce using rule 104 (expr -> expr operator_pow expr .)
    ]               reduce using rule 104 (expr -> expr operator_pow expr .)
    :               reduce using rule 104 (expr -> expr operator_pow expr .)
    ,               reduce using rule 104 (expr -> expr operator_pow expr .)
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_scan   [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_reduc  [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_incr   [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_decr   [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_rotate [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_apply  [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_compose [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_over   [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_map    [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_goodname [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_bitnot [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_reverse [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_incr [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_decr [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_goodname2 [ reduce using rule 104 (expr -> expr operator_pow expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 256

    (105) expr -> expr operator_join expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 105 (expr -> expr operator_join expr .)
    operator_sub    reduce using rule 105 (expr -> expr operator_join expr .)
    operator_join   reduce using rule 105 (expr -> expr operator_join expr .)
    operator_split  reduce using rule 105 (expr -> expr operator_join expr .)
    operator_bitand reduce using rule 105 (expr -> expr operator_join expr .)
    operator_bitor  reduce using rule 105 (expr -> expr operator_join expr .)
    operator_bitxor reduce using rule 105 (expr -> expr operator_join expr .)
    operator_bitshiftleft reduce using rule 105 (expr -> expr operator_join expr .)
    operator_bitshiftright reduce using rule 105 (expr -> expr operator_join expr .)
    operator_and    reduce using rule 105 (expr -> expr operator_join expr .)
    operator_or     reduce using rule 105 (expr -> expr operator_join expr .)
    operator_xor    reduce using rule 105 (expr -> expr operator_join expr .)
    operator_contains reduce using rule 105 (expr -> expr operator_join expr .)
    operator_outer  reduce using rule 105 (expr -> expr operator_join expr .)
    operator_less_than reduce using rule 105 (expr -> expr operator_join expr .)
    operator_less_than_equals reduce using rule 105 (expr -> expr operator_join expr .)
    operator_greater_than reduce using rule 105 (expr -> expr operator_join expr .)
    operator_greater_than_equals reduce using rule 105 (expr -> expr operator_join expr .)
    operator_equals reduce using rule 105 (expr -> expr operator_join expr .)
    operator_not_equals reduce using rule 105 (expr -> expr operator_join expr .)
    operator_smallest reduce using rule 105 (expr -> expr operator_join expr .)
    operator_greatest reduce using rule 105 (expr -> expr operator_join expr .)
    [               reduce using rule 105 (expr -> expr operator_join expr .)
    (               reduce using rule 105 (expr -> expr operator_join expr .)
    operator_not    reduce using rule 105 (expr -> expr operator_join expr .)
    operator_s_combinator reduce using rule 105 (expr -> expr operator_join expr .)
    operator_s2_combinator reduce using rule 105 (expr -> expr operator_join expr .)
    VAR             reduce using rule 105 (expr -> expr operator_join expr .)
    FLOAT           reduce using rule 105 (expr -> expr operator_join expr .)
    NUM             reduce using rule 105 (expr -> expr operator_join expr .)
    STRING_3SQ      reduce using rule 105 (expr -> expr operator_join expr .)
    STRING_3DQ      reduce using rule 105 (expr -> expr operator_join expr .)
    STRING_SQ       reduce using rule 105 (expr -> expr operator_join expr .)
    STRING_DQ       reduce using rule 105 (expr -> expr operator_join expr .)
    true            reduce using rule 105 (expr -> expr operator_join expr .)
    Null            reduce using rule 105 (expr -> expr operator_join expr .)
    false           reduce using rule 105 (expr -> expr operator_join expr .)
    type_type       reduce using rule 105 (expr -> expr operator_join expr .)
    type_num        reduce using rule 105 (expr -> expr operator_join expr .)
    type_bool       reduce using rule 105 (expr -> expr operator_join expr .)
    type_any        reduce using rule 105 (expr -> expr operator_join expr .)
    type_u64        reduce using rule 105 (expr -> expr operator_join expr .)
    type_u32        reduce using rule 105 (expr -> expr operator_join expr .)
    type_u16        reduce using rule 105 (expr -> expr operator_join expr .)
    type_u8         reduce using rule 105 (expr -> expr operator_join expr .)
    type_i64        reduce using rule 105 (expr -> expr operator_join expr .)
    type_i32        reduce using rule 105 (expr -> expr operator_join expr .)
    type_i16        reduce using rule 105 (expr -> expr operator_join expr .)
    type_i8         reduce using rule 105 (expr -> expr operator_join expr .)
    type_f32        reduce using rule 105 (expr -> expr operator_join expr .)
    type_f64        reduce using rule 105 (expr -> expr operator_join expr .)
    type_str        reduce using rule 105 (expr -> expr operator_join expr .)
    type_list       reduce using rule 105 (expr -> expr operator_join expr .)
    type_tuple      reduce using rule 105 (expr -> expr operator_join expr .)
    type_array      reduce using rule 105 (expr -> expr operator_join expr .)
    type_vector     reduce using rule 105 (expr -> expr operator_join expr .)
    type_dict       reduce using rule 105 (expr -> expr operator_join expr .)
    type_generator  reduce using rule 105 (expr -> expr operator_join expr .)
    type_linked_list reduce using rule 105 (expr -> expr operator_join expr .)
    type_doubly_linked_list reduce using rule 105 (expr -> expr operator_join expr .)
    type_deque      reduce using rule 105 (expr -> expr operator_join expr .)
    type_heap       reduce using rule 105 (expr -> expr operator_join expr .)
    type_fibonacci_heap reduce using rule 105 (expr -> expr operator_join expr .)
    type_tree       reduce using rule 105 (expr -> expr operator_join expr .)
    type_trie       reduce using rule 105 (expr -> expr operator_join expr .)
    type_stack      reduce using rule 105 (expr -> expr operator_join expr .)
    type_queue      reduce using rule 105 (expr -> expr operator_join expr .)
    type_binary_search_tree reduce using rule 105 (expr -> expr operator_join expr .)
    type_bitset     reduce using rule 105 (expr -> expr operator_join expr .)
    type_set        reduce using rule 105 (expr -> expr operator_join expr .)
    type_map        reduce using rule 105 (expr -> expr operator_join expr .)
    type_range      reduce using rule 105 (expr -> expr operator_join expr .)
    type_bad_struct reduce using rule 105 (expr -> expr operator_join expr .)
    type_bad_struct2 reduce using rule 105 (expr -> expr operator_join expr .)
    lambda          reduce using rule 105 (expr -> expr operator_join expr .)
    NEWLINE         reduce using rule 105 (expr -> expr operator_join expr .)
    $end            reduce using rule 105 (expr -> expr operator_join expr .)
    operator_inner  reduce using rule 105 (expr -> expr operator_join expr .)
    }               reduce using rule 105 (expr -> expr operator_join expr .)
    )               reduce using rule 105 (expr -> expr operator_join expr .)
    {               reduce using rule 105 (expr -> expr operator_join expr .)
    ]               reduce using rule 105 (expr -> expr operator_join expr .)
    :               reduce using rule 105 (expr -> expr operator_join expr .)
    ,               reduce using rule 105 (expr -> expr operator_join expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_div    [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_trudiv [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_pow    [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_scan   [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_reduc  [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_incr   [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_decr   [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_rotate [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_apply  [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_compose [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_over   [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_map    [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_goodname [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_bitnot [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_reverse [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_sorted_incr [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_sorted_decr [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_goodname2 [ reduce using rule 105 (expr -> expr operator_join expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 257

    (106) expr -> expr operator_split expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 106 (expr -> expr operator_split expr .)
    operator_sub    reduce using rule 106 (expr -> expr operator_split expr .)
    operator_join   reduce using rule 106 (expr -> expr operator_split expr .)
    operator_split  reduce using rule 106 (expr -> expr operator_split expr .)
    operator_bitand reduce using rule 106 (expr -> expr operator_split expr .)
    operator_bitor  reduce using rule 106 (expr -> expr operator_split expr .)
    operator_bitxor reduce using rule 106 (expr -> expr operator_split expr .)
    operator_bitshiftleft reduce using rule 106 (expr -> expr operator_split expr .)
    operator_bitshiftright reduce using rule 106 (expr -> expr operator_split expr .)
    operator_and    reduce using rule 106 (expr -> expr operator_split expr .)
    operator_or     reduce using rule 106 (expr -> expr operator_split expr .)
    operator_xor    reduce using rule 106 (expr -> expr operator_split expr .)
    operator_contains reduce using rule 106 (expr -> expr operator_split expr .)
    operator_outer  reduce using rule 106 (expr -> expr operator_split expr .)
    operator_less_than reduce using rule 106 (expr -> expr operator_split expr .)
    operator_less_than_equals reduce using rule 106 (expr -> expr operator_split expr .)
    operator_greater_than reduce using rule 106 (expr -> expr operator_split expr .)
    operator_greater_than_equals reduce using rule 106 (expr -> expr operator_split expr .)
    operator_equals reduce using rule 106 (expr -> expr operator_split expr .)
    operator_not_equals reduce using rule 106 (expr -> expr operator_split expr .)
    operator_smallest reduce using rule 106 (expr -> expr operator_split expr .)
    operator_greatest reduce using rule 106 (expr -> expr operator_split expr .)
    [               reduce using rule 106 (expr -> expr operator_split expr .)
    (               reduce using rule 106 (expr -> expr operator_split expr .)
    operator_not    reduce using rule 106 (expr -> expr operator_split expr .)
    operator_s_combinator reduce using rule 106 (expr -> expr operator_split expr .)
    operator_s2_combinator reduce using rule 106 (expr -> expr operator_split expr .)
    VAR             reduce using rule 106 (expr -> expr operator_split expr .)
    FLOAT           reduce using rule 106 (expr -> expr operator_split expr .)
    NUM             reduce using rule 106 (expr -> expr operator_split expr .)
    STRING_3SQ      reduce using rule 106 (expr -> expr operator_split expr .)
    STRING_3DQ      reduce using rule 106 (expr -> expr operator_split expr .)
    STRING_SQ       reduce using rule 106 (expr -> expr operator_split expr .)
    STRING_DQ       reduce using rule 106 (expr -> expr operator_split expr .)
    true            reduce using rule 106 (expr -> expr operator_split expr .)
    Null            reduce using rule 106 (expr -> expr operator_split expr .)
    false           reduce using rule 106 (expr -> expr operator_split expr .)
    type_type       reduce using rule 106 (expr -> expr operator_split expr .)
    type_num        reduce using rule 106 (expr -> expr operator_split expr .)
    type_bool       reduce using rule 106 (expr -> expr operator_split expr .)
    type_any        reduce using rule 106 (expr -> expr operator_split expr .)
    type_u64        reduce using rule 106 (expr -> expr operator_split expr .)
    type_u32        reduce using rule 106 (expr -> expr operator_split expr .)
    type_u16        reduce using rule 106 (expr -> expr operator_split expr .)
    type_u8         reduce using rule 106 (expr -> expr operator_split expr .)
    type_i64        reduce using rule 106 (expr -> expr operator_split expr .)
    type_i32        reduce using rule 106 (expr -> expr operator_split expr .)
    type_i16        reduce using rule 106 (expr -> expr operator_split expr .)
    type_i8         reduce using rule 106 (expr -> expr operator_split expr .)
    type_f32        reduce using rule 106 (expr -> expr operator_split expr .)
    type_f64        reduce using rule 106 (expr -> expr operator_split expr .)
    type_str        reduce using rule 106 (expr -> expr operator_split expr .)
    type_list       reduce using rule 106 (expr -> expr operator_split expr .)
    type_tuple      reduce using rule 106 (expr -> expr operator_split expr .)
    type_array      reduce using rule 106 (expr -> expr operator_split expr .)
    type_vector     reduce using rule 106 (expr -> expr operator_split expr .)
    type_dict       reduce using rule 106 (expr -> expr operator_split expr .)
    type_generator  reduce using rule 106 (expr -> expr operator_split expr .)
    type_linked_list reduce using rule 106 (expr -> expr operator_split expr .)
    type_doubly_linked_list reduce using rule 106 (expr -> expr operator_split expr .)
    type_deque      reduce using rule 106 (expr -> expr operator_split expr .)
    type_heap       reduce using rule 106 (expr -> expr operator_split expr .)
    type_fibonacci_heap reduce using rule 106 (expr -> expr operator_split expr .)
    type_tree       reduce using rule 106 (expr -> expr operator_split expr .)
    type_trie       reduce using rule 106 (expr -> expr operator_split expr .)
    type_stack      reduce using rule 106 (expr -> expr operator_split expr .)
    type_queue      reduce using rule 106 (expr -> expr operator_split expr .)
    type_binary_search_tree reduce using rule 106 (expr -> expr operator_split expr .)
    type_bitset     reduce using rule 106 (expr -> expr operator_split expr .)
    type_set        reduce using rule 106 (expr -> expr operator_split expr .)
    type_map        reduce using rule 106 (expr -> expr operator_split expr .)
    type_range      reduce using rule 106 (expr -> expr operator_split expr .)
    type_bad_struct reduce using rule 106 (expr -> expr operator_split expr .)
    type_bad_struct2 reduce using rule 106 (expr -> expr operator_split expr .)
    lambda          reduce using rule 106 (expr -> expr operator_split expr .)
    NEWLINE         reduce using rule 106 (expr -> expr operator_split expr .)
    $end            reduce using rule 106 (expr -> expr operator_split expr .)
    operator_inner  reduce using rule 106 (expr -> expr operator_split expr .)
    }               reduce using rule 106 (expr -> expr operator_split expr .)
    )               reduce using rule 106 (expr -> expr operator_split expr .)
    {               reduce using rule 106 (expr -> expr operator_split expr .)
    ]               reduce using rule 106 (expr -> expr operator_split expr .)
    :               reduce using rule 106 (expr -> expr operator_split expr .)
    ,               reduce using rule 106 (expr -> expr operator_split expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_div    [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_trudiv [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_pow    [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_scan   [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_reduc  [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_incr   [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_decr   [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_rotate [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_apply  [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_compose [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_over   [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_map    [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_goodname [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_bitnot [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_reverse [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_sorted_incr [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_sorted_decr [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_goodname2 [ reduce using rule 106 (expr -> expr operator_split expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 258

    (107) expr -> expr operator_scan expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_sub    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_mul    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_div    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_trudiv reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_pow    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_join   reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_split  reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_scan   reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_reduc  reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_bitand reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_bitor  reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_bitxor reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_bitshiftleft reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_bitshiftright reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_and    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_or     reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_xor    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_contains reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_outer  reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_rotate reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_apply  reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_less_than reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_less_than_equals reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_greater_than reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_greater_than_equals reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_equals reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_not_equals reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_smallest reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_greatest reduce using rule 107 (expr -> expr operator_scan expr .)
    [               reduce using rule 107 (expr -> expr operator_scan expr .)
    (               reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_not    reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_s_combinator reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_s2_combinator reduce using rule 107 (expr -> expr operator_scan expr .)
    VAR             reduce using rule 107 (expr -> expr operator_scan expr .)
    FLOAT           reduce using rule 107 (expr -> expr operator_scan expr .)
    NUM             reduce using rule 107 (expr -> expr operator_scan expr .)
    STRING_3SQ      reduce using rule 107 (expr -> expr operator_scan expr .)
    STRING_3DQ      reduce using rule 107 (expr -> expr operator_scan expr .)
    STRING_SQ       reduce using rule 107 (expr -> expr operator_scan expr .)
    STRING_DQ       reduce using rule 107 (expr -> expr operator_scan expr .)
    true            reduce using rule 107 (expr -> expr operator_scan expr .)
    Null            reduce using rule 107 (expr -> expr operator_scan expr .)
    false           reduce using rule 107 (expr -> expr operator_scan expr .)
    type_type       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_num        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_bool       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_any        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_u64        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_u32        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_u16        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_u8         reduce using rule 107 (expr -> expr operator_scan expr .)
    type_i64        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_i32        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_i16        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_i8         reduce using rule 107 (expr -> expr operator_scan expr .)
    type_f32        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_f64        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_str        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_list       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_tuple      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_array      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_vector     reduce using rule 107 (expr -> expr operator_scan expr .)
    type_dict       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_generator  reduce using rule 107 (expr -> expr operator_scan expr .)
    type_linked_list reduce using rule 107 (expr -> expr operator_scan expr .)
    type_doubly_linked_list reduce using rule 107 (expr -> expr operator_scan expr .)
    type_deque      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_heap       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_fibonacci_heap reduce using rule 107 (expr -> expr operator_scan expr .)
    type_tree       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_trie       reduce using rule 107 (expr -> expr operator_scan expr .)
    type_stack      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_queue      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_binary_search_tree reduce using rule 107 (expr -> expr operator_scan expr .)
    type_bitset     reduce using rule 107 (expr -> expr operator_scan expr .)
    type_set        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_map        reduce using rule 107 (expr -> expr operator_scan expr .)
    type_range      reduce using rule 107 (expr -> expr operator_scan expr .)
    type_bad_struct reduce using rule 107 (expr -> expr operator_scan expr .)
    type_bad_struct2 reduce using rule 107 (expr -> expr operator_scan expr .)
    lambda          reduce using rule 107 (expr -> expr operator_scan expr .)
    NEWLINE         reduce using rule 107 (expr -> expr operator_scan expr .)
    $end            reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_inner  reduce using rule 107 (expr -> expr operator_scan expr .)
    }               reduce using rule 107 (expr -> expr operator_scan expr .)
    )               reduce using rule 107 (expr -> expr operator_scan expr .)
    {               reduce using rule 107 (expr -> expr operator_scan expr .)
    ]               reduce using rule 107 (expr -> expr operator_scan expr .)
    :               reduce using rule 107 (expr -> expr operator_scan expr .)
    ,               reduce using rule 107 (expr -> expr operator_scan expr .)
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_incr   [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_decr   [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_compose [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_over   [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_map    [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_goodname [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_bitnot [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_reverse [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_sorted_incr [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_sorted_decr [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_goodname2 [ reduce using rule 107 (expr -> expr operator_scan expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 259

    (108) expr -> expr operator_reduc expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_sub    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_mul    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_div    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_trudiv reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_pow    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_join   reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_split  reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_scan   reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_reduc  reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_bitand reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_bitor  reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_bitxor reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_bitshiftleft reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_bitshiftright reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_and    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_or     reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_xor    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_contains reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_outer  reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_rotate reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_apply  reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_less_than reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_less_than_equals reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_greater_than reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_greater_than_equals reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_equals reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_not_equals reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_smallest reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_greatest reduce using rule 108 (expr -> expr operator_reduc expr .)
    [               reduce using rule 108 (expr -> expr operator_reduc expr .)
    (               reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_not    reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_s_combinator reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_s2_combinator reduce using rule 108 (expr -> expr operator_reduc expr .)
    VAR             reduce using rule 108 (expr -> expr operator_reduc expr .)
    FLOAT           reduce using rule 108 (expr -> expr operator_reduc expr .)
    NUM             reduce using rule 108 (expr -> expr operator_reduc expr .)
    STRING_3SQ      reduce using rule 108 (expr -> expr operator_reduc expr .)
    STRING_3DQ      reduce using rule 108 (expr -> expr operator_reduc expr .)
    STRING_SQ       reduce using rule 108 (expr -> expr operator_reduc expr .)
    STRING_DQ       reduce using rule 108 (expr -> expr operator_reduc expr .)
    true            reduce using rule 108 (expr -> expr operator_reduc expr .)
    Null            reduce using rule 108 (expr -> expr operator_reduc expr .)
    false           reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_type       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_num        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_bool       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_any        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_u64        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_u32        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_u16        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_u8         reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_i64        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_i32        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_i16        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_i8         reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_f32        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_f64        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_str        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_list       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_tuple      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_array      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_vector     reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_dict       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_generator  reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_linked_list reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_doubly_linked_list reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_deque      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_heap       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_fibonacci_heap reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_tree       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_trie       reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_stack      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_queue      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_binary_search_tree reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_bitset     reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_set        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_map        reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_range      reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_bad_struct reduce using rule 108 (expr -> expr operator_reduc expr .)
    type_bad_struct2 reduce using rule 108 (expr -> expr operator_reduc expr .)
    lambda          reduce using rule 108 (expr -> expr operator_reduc expr .)
    NEWLINE         reduce using rule 108 (expr -> expr operator_reduc expr .)
    $end            reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_inner  reduce using rule 108 (expr -> expr operator_reduc expr .)
    }               reduce using rule 108 (expr -> expr operator_reduc expr .)
    )               reduce using rule 108 (expr -> expr operator_reduc expr .)
    {               reduce using rule 108 (expr -> expr operator_reduc expr .)
    ]               reduce using rule 108 (expr -> expr operator_reduc expr .)
    :               reduce using rule 108 (expr -> expr operator_reduc expr .)
    ,               reduce using rule 108 (expr -> expr operator_reduc expr .)
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_incr   [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_decr   [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_compose [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_over   [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_map    [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_goodname [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_bitnot [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_reverse [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_sorted_incr [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_sorted_decr [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_goodname2 [ reduce using rule 108 (expr -> expr operator_reduc expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 260

    (109) expr -> expr operator_bitand expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_sub    reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_join   reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_split  reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_bitand reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_bitor  reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_bitxor reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_bitshiftleft reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_bitshiftright reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_and    reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_or     reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_xor    reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_contains reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_outer  reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_less_than reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_less_than_equals reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_greater_than reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_greater_than_equals reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_equals reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_not_equals reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_smallest reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_greatest reduce using rule 109 (expr -> expr operator_bitand expr .)
    [               reduce using rule 109 (expr -> expr operator_bitand expr .)
    (               reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_not    reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_s_combinator reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_s2_combinator reduce using rule 109 (expr -> expr operator_bitand expr .)
    VAR             reduce using rule 109 (expr -> expr operator_bitand expr .)
    FLOAT           reduce using rule 109 (expr -> expr operator_bitand expr .)
    NUM             reduce using rule 109 (expr -> expr operator_bitand expr .)
    STRING_3SQ      reduce using rule 109 (expr -> expr operator_bitand expr .)
    STRING_3DQ      reduce using rule 109 (expr -> expr operator_bitand expr .)
    STRING_SQ       reduce using rule 109 (expr -> expr operator_bitand expr .)
    STRING_DQ       reduce using rule 109 (expr -> expr operator_bitand expr .)
    true            reduce using rule 109 (expr -> expr operator_bitand expr .)
    Null            reduce using rule 109 (expr -> expr operator_bitand expr .)
    false           reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_type       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_num        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_bool       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_any        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_u64        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_u32        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_u16        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_u8         reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_i64        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_i32        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_i16        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_i8         reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_f32        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_f64        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_str        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_list       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_tuple      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_array      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_vector     reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_dict       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_generator  reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_linked_list reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_doubly_linked_list reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_deque      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_heap       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_fibonacci_heap reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_tree       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_trie       reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_stack      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_queue      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_binary_search_tree reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_bitset     reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_set        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_map        reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_range      reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_bad_struct reduce using rule 109 (expr -> expr operator_bitand expr .)
    type_bad_struct2 reduce using rule 109 (expr -> expr operator_bitand expr .)
    lambda          reduce using rule 109 (expr -> expr operator_bitand expr .)
    NEWLINE         reduce using rule 109 (expr -> expr operator_bitand expr .)
    $end            reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_inner  reduce using rule 109 (expr -> expr operator_bitand expr .)
    }               reduce using rule 109 (expr -> expr operator_bitand expr .)
    )               reduce using rule 109 (expr -> expr operator_bitand expr .)
    {               reduce using rule 109 (expr -> expr operator_bitand expr .)
    ]               reduce using rule 109 (expr -> expr operator_bitand expr .)
    :               reduce using rule 109 (expr -> expr operator_bitand expr .)
    ,               reduce using rule 109 (expr -> expr operator_bitand expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_div    [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_trudiv [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_pow    [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_scan   [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_reduc  [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_incr   [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_decr   [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_rotate [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_apply  [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_compose [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_over   [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_map    [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_bitnot [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_reverse [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_incr [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_decr [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname2 [ reduce using rule 109 (expr -> expr operator_bitand expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 261

    (110) expr -> expr operator_bitor expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_sub    reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_join   reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_split  reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_bitand reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_bitor  reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_bitxor reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_bitshiftleft reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_bitshiftright reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_and    reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_or     reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_xor    reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_contains reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_outer  reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_less_than reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_less_than_equals reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_greater_than reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_greater_than_equals reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_equals reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_not_equals reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_smallest reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_greatest reduce using rule 110 (expr -> expr operator_bitor expr .)
    [               reduce using rule 110 (expr -> expr operator_bitor expr .)
    (               reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_not    reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_s_combinator reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_s2_combinator reduce using rule 110 (expr -> expr operator_bitor expr .)
    VAR             reduce using rule 110 (expr -> expr operator_bitor expr .)
    FLOAT           reduce using rule 110 (expr -> expr operator_bitor expr .)
    NUM             reduce using rule 110 (expr -> expr operator_bitor expr .)
    STRING_3SQ      reduce using rule 110 (expr -> expr operator_bitor expr .)
    STRING_3DQ      reduce using rule 110 (expr -> expr operator_bitor expr .)
    STRING_SQ       reduce using rule 110 (expr -> expr operator_bitor expr .)
    STRING_DQ       reduce using rule 110 (expr -> expr operator_bitor expr .)
    true            reduce using rule 110 (expr -> expr operator_bitor expr .)
    Null            reduce using rule 110 (expr -> expr operator_bitor expr .)
    false           reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_type       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_num        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_bool       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_any        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_u64        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_u32        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_u16        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_u8         reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_i64        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_i32        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_i16        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_i8         reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_f32        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_f64        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_str        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_list       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_tuple      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_array      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_vector     reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_dict       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_generator  reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_linked_list reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_doubly_linked_list reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_deque      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_heap       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_fibonacci_heap reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_tree       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_trie       reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_stack      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_queue      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_binary_search_tree reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_bitset     reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_set        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_map        reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_range      reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_bad_struct reduce using rule 110 (expr -> expr operator_bitor expr .)
    type_bad_struct2 reduce using rule 110 (expr -> expr operator_bitor expr .)
    lambda          reduce using rule 110 (expr -> expr operator_bitor expr .)
    NEWLINE         reduce using rule 110 (expr -> expr operator_bitor expr .)
    $end            reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_inner  reduce using rule 110 (expr -> expr operator_bitor expr .)
    }               reduce using rule 110 (expr -> expr operator_bitor expr .)
    )               reduce using rule 110 (expr -> expr operator_bitor expr .)
    {               reduce using rule 110 (expr -> expr operator_bitor expr .)
    ]               reduce using rule 110 (expr -> expr operator_bitor expr .)
    :               reduce using rule 110 (expr -> expr operator_bitor expr .)
    ,               reduce using rule 110 (expr -> expr operator_bitor expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_div    [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_trudiv [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_pow    [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_scan   [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_reduc  [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_incr   [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_decr   [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_rotate [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_apply  [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_compose [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_over   [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_map    [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_bitnot [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_reverse [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_incr [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_decr [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname2 [ reduce using rule 110 (expr -> expr operator_bitor expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 262

    (111) expr -> expr operator_bitxor expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_sub    reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_join   reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_split  reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_bitand reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_bitor  reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_bitxor reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_bitshiftleft reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_bitshiftright reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_and    reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_or     reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_xor    reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_contains reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_outer  reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_less_than reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_less_than_equals reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_greater_than reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_greater_than_equals reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_equals reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_not_equals reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_smallest reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_greatest reduce using rule 111 (expr -> expr operator_bitxor expr .)
    [               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    (               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_not    reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_s_combinator reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_s2_combinator reduce using rule 111 (expr -> expr operator_bitxor expr .)
    VAR             reduce using rule 111 (expr -> expr operator_bitxor expr .)
    FLOAT           reduce using rule 111 (expr -> expr operator_bitxor expr .)
    NUM             reduce using rule 111 (expr -> expr operator_bitxor expr .)
    STRING_3SQ      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    STRING_3DQ      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    STRING_SQ       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    STRING_DQ       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    true            reduce using rule 111 (expr -> expr operator_bitxor expr .)
    Null            reduce using rule 111 (expr -> expr operator_bitxor expr .)
    false           reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_type       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_num        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_bool       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_any        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_u64        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_u32        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_u16        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_u8         reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_i64        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_i32        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_i16        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_i8         reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_f32        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_f64        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_str        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_list       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_tuple      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_array      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_vector     reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_dict       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_generator  reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_linked_list reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_doubly_linked_list reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_deque      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_heap       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_fibonacci_heap reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_tree       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_trie       reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_stack      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_queue      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_binary_search_tree reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_bitset     reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_set        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_map        reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_range      reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_bad_struct reduce using rule 111 (expr -> expr operator_bitxor expr .)
    type_bad_struct2 reduce using rule 111 (expr -> expr operator_bitxor expr .)
    lambda          reduce using rule 111 (expr -> expr operator_bitxor expr .)
    NEWLINE         reduce using rule 111 (expr -> expr operator_bitxor expr .)
    $end            reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_inner  reduce using rule 111 (expr -> expr operator_bitxor expr .)
    }               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    )               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    {               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    ]               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    :               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    ,               reduce using rule 111 (expr -> expr operator_bitxor expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_div    [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_trudiv [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_pow    [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_scan   [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_reduc  [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_incr   [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_decr   [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_rotate [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_apply  [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_compose [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_over   [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_map    [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitnot [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_reverse [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_incr [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_decr [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname2 [ reduce using rule 111 (expr -> expr operator_bitxor expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 263

    (112) expr -> expr operator_bitshiftleft expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_sub    reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_join   reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_split  reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_bitand reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_bitor  reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_bitxor reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftleft reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftright reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_and    reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_or     reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_xor    reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_contains reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_outer  reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than_equals reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than_equals reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_equals reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_not_equals reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_smallest reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_greatest reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    [               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    (               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_not    reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_s_combinator reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_s2_combinator reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    VAR             reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    FLOAT           reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    NUM             reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    STRING_3SQ      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    STRING_3DQ      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    STRING_SQ       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    STRING_DQ       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    true            reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    Null            reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    false           reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_type       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_num        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_bool       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_any        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_u64        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_u32        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_u16        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_u8         reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_i64        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_i32        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_i16        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_i8         reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_f32        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_f64        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_str        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_list       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_tuple      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_array      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_vector     reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_dict       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_generator  reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_linked_list reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_doubly_linked_list reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_deque      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_heap       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_fibonacci_heap reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_tree       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_trie       reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_stack      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_queue      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_binary_search_tree reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_bitset     reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_set        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_map        reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_range      reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_bad_struct reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    type_bad_struct2 reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    lambda          reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    NEWLINE         reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    $end            reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_inner  reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    }               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    )               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    {               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    ]               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    :               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    ,               reduce using rule 112 (expr -> expr operator_bitshiftleft expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_div    [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_trudiv [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_pow    [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_scan   [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reduc  [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_incr   [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_decr   [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_rotate [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_apply  [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_compose [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_over   [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_map    [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitnot [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reverse [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_incr [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_decr [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname2 [ reduce using rule 112 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 264

    (113) expr -> expr operator_bitshiftright expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_sub    reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_join   reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_split  reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_bitand reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_bitor  reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_bitxor reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftleft reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftright reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_and    reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_or     reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_xor    reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_contains reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_outer  reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_less_than reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_less_than_equals reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than_equals reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_equals reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_not_equals reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_smallest reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_greatest reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    [               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    (               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_not    reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_s_combinator reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_s2_combinator reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    VAR             reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    FLOAT           reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    NUM             reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    STRING_3SQ      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    STRING_3DQ      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    STRING_SQ       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    STRING_DQ       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    true            reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    Null            reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    false           reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_type       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_num        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_bool       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_any        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_u64        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_u32        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_u16        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_u8         reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_i64        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_i32        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_i16        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_i8         reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_f32        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_f64        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_str        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_list       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_tuple      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_array      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_vector     reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_dict       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_generator  reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_linked_list reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_doubly_linked_list reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_deque      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_heap       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_fibonacci_heap reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_tree       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_trie       reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_stack      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_queue      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_binary_search_tree reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_bitset     reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_set        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_map        reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_range      reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_bad_struct reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    type_bad_struct2 reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    lambda          reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    NEWLINE         reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    $end            reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_inner  reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    }               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    )               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    {               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    ]               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    :               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    ,               reduce using rule 113 (expr -> expr operator_bitshiftright expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_div    [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_trudiv [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_pow    [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_scan   [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reduc  [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_incr   [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_decr   [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_rotate [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_apply  [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_compose [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_over   [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_map    [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitnot [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reverse [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_incr [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_decr [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname2 [ reduce using rule 113 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 265

    (114) expr -> expr operator_and expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 114 (expr -> expr operator_and expr .)
    operator_or     reduce using rule 114 (expr -> expr operator_and expr .)
    operator_xor    reduce using rule 114 (expr -> expr operator_and expr .)
    operator_contains reduce using rule 114 (expr -> expr operator_and expr .)
    operator_less_than reduce using rule 114 (expr -> expr operator_and expr .)
    operator_less_than_equals reduce using rule 114 (expr -> expr operator_and expr .)
    operator_greater_than reduce using rule 114 (expr -> expr operator_and expr .)
    operator_greater_than_equals reduce using rule 114 (expr -> expr operator_and expr .)
    operator_equals reduce using rule 114 (expr -> expr operator_and expr .)
    operator_not_equals reduce using rule 114 (expr -> expr operator_and expr .)
    operator_smallest reduce using rule 114 (expr -> expr operator_and expr .)
    operator_greatest reduce using rule 114 (expr -> expr operator_and expr .)
    [               reduce using rule 114 (expr -> expr operator_and expr .)
    (               reduce using rule 114 (expr -> expr operator_and expr .)
    operator_not    reduce using rule 114 (expr -> expr operator_and expr .)
    operator_s_combinator reduce using rule 114 (expr -> expr operator_and expr .)
    operator_s2_combinator reduce using rule 114 (expr -> expr operator_and expr .)
    VAR             reduce using rule 114 (expr -> expr operator_and expr .)
    FLOAT           reduce using rule 114 (expr -> expr operator_and expr .)
    NUM             reduce using rule 114 (expr -> expr operator_and expr .)
    STRING_3SQ      reduce using rule 114 (expr -> expr operator_and expr .)
    STRING_3DQ      reduce using rule 114 (expr -> expr operator_and expr .)
    STRING_SQ       reduce using rule 114 (expr -> expr operator_and expr .)
    STRING_DQ       reduce using rule 114 (expr -> expr operator_and expr .)
    true            reduce using rule 114 (expr -> expr operator_and expr .)
    Null            reduce using rule 114 (expr -> expr operator_and expr .)
    false           reduce using rule 114 (expr -> expr operator_and expr .)
    type_type       reduce using rule 114 (expr -> expr operator_and expr .)
    type_num        reduce using rule 114 (expr -> expr operator_and expr .)
    type_bool       reduce using rule 114 (expr -> expr operator_and expr .)
    type_any        reduce using rule 114 (expr -> expr operator_and expr .)
    type_u64        reduce using rule 114 (expr -> expr operator_and expr .)
    type_u32        reduce using rule 114 (expr -> expr operator_and expr .)
    type_u16        reduce using rule 114 (expr -> expr operator_and expr .)
    type_u8         reduce using rule 114 (expr -> expr operator_and expr .)
    type_i64        reduce using rule 114 (expr -> expr operator_and expr .)
    type_i32        reduce using rule 114 (expr -> expr operator_and expr .)
    type_i16        reduce using rule 114 (expr -> expr operator_and expr .)
    type_i8         reduce using rule 114 (expr -> expr operator_and expr .)
    type_f32        reduce using rule 114 (expr -> expr operator_and expr .)
    type_f64        reduce using rule 114 (expr -> expr operator_and expr .)
    type_str        reduce using rule 114 (expr -> expr operator_and expr .)
    type_list       reduce using rule 114 (expr -> expr operator_and expr .)
    type_tuple      reduce using rule 114 (expr -> expr operator_and expr .)
    type_array      reduce using rule 114 (expr -> expr operator_and expr .)
    type_vector     reduce using rule 114 (expr -> expr operator_and expr .)
    type_dict       reduce using rule 114 (expr -> expr operator_and expr .)
    type_generator  reduce using rule 114 (expr -> expr operator_and expr .)
    type_linked_list reduce using rule 114 (expr -> expr operator_and expr .)
    type_doubly_linked_list reduce using rule 114 (expr -> expr operator_and expr .)
    type_deque      reduce using rule 114 (expr -> expr operator_and expr .)
    type_heap       reduce using rule 114 (expr -> expr operator_and expr .)
    type_fibonacci_heap reduce using rule 114 (expr -> expr operator_and expr .)
    type_tree       reduce using rule 114 (expr -> expr operator_and expr .)
    type_trie       reduce using rule 114 (expr -> expr operator_and expr .)
    type_stack      reduce using rule 114 (expr -> expr operator_and expr .)
    type_queue      reduce using rule 114 (expr -> expr operator_and expr .)
    type_binary_search_tree reduce using rule 114 (expr -> expr operator_and expr .)
    type_bitset     reduce using rule 114 (expr -> expr operator_and expr .)
    type_set        reduce using rule 114 (expr -> expr operator_and expr .)
    type_map        reduce using rule 114 (expr -> expr operator_and expr .)
    type_range      reduce using rule 114 (expr -> expr operator_and expr .)
    type_bad_struct reduce using rule 114 (expr -> expr operator_and expr .)
    type_bad_struct2 reduce using rule 114 (expr -> expr operator_and expr .)
    lambda          reduce using rule 114 (expr -> expr operator_and expr .)
    NEWLINE         reduce using rule 114 (expr -> expr operator_and expr .)
    $end            reduce using rule 114 (expr -> expr operator_and expr .)
    operator_inner  reduce using rule 114 (expr -> expr operator_and expr .)
    }               reduce using rule 114 (expr -> expr operator_and expr .)
    )               reduce using rule 114 (expr -> expr operator_and expr .)
    {               reduce using rule 114 (expr -> expr operator_and expr .)
    ]               reduce using rule 114 (expr -> expr operator_and expr .)
    :               reduce using rule 114 (expr -> expr operator_and expr .)
    ,               reduce using rule 114 (expr -> expr operator_and expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_sub    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_mul    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_div    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_trudiv [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_pow    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_join   [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_split  [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_scan   [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_reduc  [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitand [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitor  [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitxor [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftleft [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftright [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_incr   [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_decr   [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_outer  [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_rotate [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_apply  [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_compose [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_over   [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_map    [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_goodname [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_bitnot [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_reverse [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_sorted_incr [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_sorted_decr [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_goodname2 [ reduce using rule 114 (expr -> expr operator_and expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 266

    (115) expr -> expr operator_or expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 115 (expr -> expr operator_or expr .)
    operator_or     reduce using rule 115 (expr -> expr operator_or expr .)
    operator_xor    reduce using rule 115 (expr -> expr operator_or expr .)
    operator_contains reduce using rule 115 (expr -> expr operator_or expr .)
    operator_less_than reduce using rule 115 (expr -> expr operator_or expr .)
    operator_less_than_equals reduce using rule 115 (expr -> expr operator_or expr .)
    operator_greater_than reduce using rule 115 (expr -> expr operator_or expr .)
    operator_greater_than_equals reduce using rule 115 (expr -> expr operator_or expr .)
    operator_equals reduce using rule 115 (expr -> expr operator_or expr .)
    operator_not_equals reduce using rule 115 (expr -> expr operator_or expr .)
    operator_smallest reduce using rule 115 (expr -> expr operator_or expr .)
    operator_greatest reduce using rule 115 (expr -> expr operator_or expr .)
    [               reduce using rule 115 (expr -> expr operator_or expr .)
    (               reduce using rule 115 (expr -> expr operator_or expr .)
    operator_not    reduce using rule 115 (expr -> expr operator_or expr .)
    operator_s_combinator reduce using rule 115 (expr -> expr operator_or expr .)
    operator_s2_combinator reduce using rule 115 (expr -> expr operator_or expr .)
    VAR             reduce using rule 115 (expr -> expr operator_or expr .)
    FLOAT           reduce using rule 115 (expr -> expr operator_or expr .)
    NUM             reduce using rule 115 (expr -> expr operator_or expr .)
    STRING_3SQ      reduce using rule 115 (expr -> expr operator_or expr .)
    STRING_3DQ      reduce using rule 115 (expr -> expr operator_or expr .)
    STRING_SQ       reduce using rule 115 (expr -> expr operator_or expr .)
    STRING_DQ       reduce using rule 115 (expr -> expr operator_or expr .)
    true            reduce using rule 115 (expr -> expr operator_or expr .)
    Null            reduce using rule 115 (expr -> expr operator_or expr .)
    false           reduce using rule 115 (expr -> expr operator_or expr .)
    type_type       reduce using rule 115 (expr -> expr operator_or expr .)
    type_num        reduce using rule 115 (expr -> expr operator_or expr .)
    type_bool       reduce using rule 115 (expr -> expr operator_or expr .)
    type_any        reduce using rule 115 (expr -> expr operator_or expr .)
    type_u64        reduce using rule 115 (expr -> expr operator_or expr .)
    type_u32        reduce using rule 115 (expr -> expr operator_or expr .)
    type_u16        reduce using rule 115 (expr -> expr operator_or expr .)
    type_u8         reduce using rule 115 (expr -> expr operator_or expr .)
    type_i64        reduce using rule 115 (expr -> expr operator_or expr .)
    type_i32        reduce using rule 115 (expr -> expr operator_or expr .)
    type_i16        reduce using rule 115 (expr -> expr operator_or expr .)
    type_i8         reduce using rule 115 (expr -> expr operator_or expr .)
    type_f32        reduce using rule 115 (expr -> expr operator_or expr .)
    type_f64        reduce using rule 115 (expr -> expr operator_or expr .)
    type_str        reduce using rule 115 (expr -> expr operator_or expr .)
    type_list       reduce using rule 115 (expr -> expr operator_or expr .)
    type_tuple      reduce using rule 115 (expr -> expr operator_or expr .)
    type_array      reduce using rule 115 (expr -> expr operator_or expr .)
    type_vector     reduce using rule 115 (expr -> expr operator_or expr .)
    type_dict       reduce using rule 115 (expr -> expr operator_or expr .)
    type_generator  reduce using rule 115 (expr -> expr operator_or expr .)
    type_linked_list reduce using rule 115 (expr -> expr operator_or expr .)
    type_doubly_linked_list reduce using rule 115 (expr -> expr operator_or expr .)
    type_deque      reduce using rule 115 (expr -> expr operator_or expr .)
    type_heap       reduce using rule 115 (expr -> expr operator_or expr .)
    type_fibonacci_heap reduce using rule 115 (expr -> expr operator_or expr .)
    type_tree       reduce using rule 115 (expr -> expr operator_or expr .)
    type_trie       reduce using rule 115 (expr -> expr operator_or expr .)
    type_stack      reduce using rule 115 (expr -> expr operator_or expr .)
    type_queue      reduce using rule 115 (expr -> expr operator_or expr .)
    type_binary_search_tree reduce using rule 115 (expr -> expr operator_or expr .)
    type_bitset     reduce using rule 115 (expr -> expr operator_or expr .)
    type_set        reduce using rule 115 (expr -> expr operator_or expr .)
    type_map        reduce using rule 115 (expr -> expr operator_or expr .)
    type_range      reduce using rule 115 (expr -> expr operator_or expr .)
    type_bad_struct reduce using rule 115 (expr -> expr operator_or expr .)
    type_bad_struct2 reduce using rule 115 (expr -> expr operator_or expr .)
    lambda          reduce using rule 115 (expr -> expr operator_or expr .)
    NEWLINE         reduce using rule 115 (expr -> expr operator_or expr .)
    $end            reduce using rule 115 (expr -> expr operator_or expr .)
    operator_inner  reduce using rule 115 (expr -> expr operator_or expr .)
    }               reduce using rule 115 (expr -> expr operator_or expr .)
    )               reduce using rule 115 (expr -> expr operator_or expr .)
    {               reduce using rule 115 (expr -> expr operator_or expr .)
    ]               reduce using rule 115 (expr -> expr operator_or expr .)
    :               reduce using rule 115 (expr -> expr operator_or expr .)
    ,               reduce using rule 115 (expr -> expr operator_or expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_sub    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_mul    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_div    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_trudiv [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_pow    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_join   [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_split  [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_scan   [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_reduc  [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitand [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitor  [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitxor [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftleft [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftright [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_incr   [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_decr   [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_outer  [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_rotate [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_apply  [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_compose [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_over   [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_map    [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_goodname [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_bitnot [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_reverse [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_sorted_incr [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_sorted_decr [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_goodname2 [ reduce using rule 115 (expr -> expr operator_or expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 267

    (116) expr -> expr operator_xor expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_or     reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_xor    reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_contains reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_less_than reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_less_than_equals reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_greater_than reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_greater_than_equals reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_equals reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_not_equals reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_smallest reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_greatest reduce using rule 116 (expr -> expr operator_xor expr .)
    [               reduce using rule 116 (expr -> expr operator_xor expr .)
    (               reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_not    reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_s_combinator reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_s2_combinator reduce using rule 116 (expr -> expr operator_xor expr .)
    VAR             reduce using rule 116 (expr -> expr operator_xor expr .)
    FLOAT           reduce using rule 116 (expr -> expr operator_xor expr .)
    NUM             reduce using rule 116 (expr -> expr operator_xor expr .)
    STRING_3SQ      reduce using rule 116 (expr -> expr operator_xor expr .)
    STRING_3DQ      reduce using rule 116 (expr -> expr operator_xor expr .)
    STRING_SQ       reduce using rule 116 (expr -> expr operator_xor expr .)
    STRING_DQ       reduce using rule 116 (expr -> expr operator_xor expr .)
    true            reduce using rule 116 (expr -> expr operator_xor expr .)
    Null            reduce using rule 116 (expr -> expr operator_xor expr .)
    false           reduce using rule 116 (expr -> expr operator_xor expr .)
    type_type       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_num        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_bool       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_any        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_u64        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_u32        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_u16        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_u8         reduce using rule 116 (expr -> expr operator_xor expr .)
    type_i64        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_i32        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_i16        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_i8         reduce using rule 116 (expr -> expr operator_xor expr .)
    type_f32        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_f64        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_str        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_list       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_tuple      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_array      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_vector     reduce using rule 116 (expr -> expr operator_xor expr .)
    type_dict       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_generator  reduce using rule 116 (expr -> expr operator_xor expr .)
    type_linked_list reduce using rule 116 (expr -> expr operator_xor expr .)
    type_doubly_linked_list reduce using rule 116 (expr -> expr operator_xor expr .)
    type_deque      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_heap       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_fibonacci_heap reduce using rule 116 (expr -> expr operator_xor expr .)
    type_tree       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_trie       reduce using rule 116 (expr -> expr operator_xor expr .)
    type_stack      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_queue      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_binary_search_tree reduce using rule 116 (expr -> expr operator_xor expr .)
    type_bitset     reduce using rule 116 (expr -> expr operator_xor expr .)
    type_set        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_map        reduce using rule 116 (expr -> expr operator_xor expr .)
    type_range      reduce using rule 116 (expr -> expr operator_xor expr .)
    type_bad_struct reduce using rule 116 (expr -> expr operator_xor expr .)
    type_bad_struct2 reduce using rule 116 (expr -> expr operator_xor expr .)
    lambda          reduce using rule 116 (expr -> expr operator_xor expr .)
    NEWLINE         reduce using rule 116 (expr -> expr operator_xor expr .)
    $end            reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_inner  reduce using rule 116 (expr -> expr operator_xor expr .)
    }               reduce using rule 116 (expr -> expr operator_xor expr .)
    )               reduce using rule 116 (expr -> expr operator_xor expr .)
    {               reduce using rule 116 (expr -> expr operator_xor expr .)
    ]               reduce using rule 116 (expr -> expr operator_xor expr .)
    :               reduce using rule 116 (expr -> expr operator_xor expr .)
    ,               reduce using rule 116 (expr -> expr operator_xor expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_sub    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_mul    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_div    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_trudiv [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_pow    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_join   [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_split  [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_scan   [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_reduc  [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitand [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitor  [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitxor [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftright [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_incr   [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_decr   [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_outer  [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_rotate [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_apply  [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_compose [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_over   [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_map    [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_goodname [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_bitnot [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_reverse [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_incr [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_decr [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_goodname2 [ reduce using rule 116 (expr -> expr operator_xor expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 268

    (117) expr -> expr operator_contains expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_or     reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_xor    reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_contains reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_less_than reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_less_than_equals reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_greater_than reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_greater_than_equals reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_equals reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_not_equals reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_smallest reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_greatest reduce using rule 117 (expr -> expr operator_contains expr .)
    [               reduce using rule 117 (expr -> expr operator_contains expr .)
    (               reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_not    reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_s_combinator reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_s2_combinator reduce using rule 117 (expr -> expr operator_contains expr .)
    VAR             reduce using rule 117 (expr -> expr operator_contains expr .)
    FLOAT           reduce using rule 117 (expr -> expr operator_contains expr .)
    NUM             reduce using rule 117 (expr -> expr operator_contains expr .)
    STRING_3SQ      reduce using rule 117 (expr -> expr operator_contains expr .)
    STRING_3DQ      reduce using rule 117 (expr -> expr operator_contains expr .)
    STRING_SQ       reduce using rule 117 (expr -> expr operator_contains expr .)
    STRING_DQ       reduce using rule 117 (expr -> expr operator_contains expr .)
    true            reduce using rule 117 (expr -> expr operator_contains expr .)
    Null            reduce using rule 117 (expr -> expr operator_contains expr .)
    false           reduce using rule 117 (expr -> expr operator_contains expr .)
    type_type       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_num        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_bool       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_any        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_u64        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_u32        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_u16        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_u8         reduce using rule 117 (expr -> expr operator_contains expr .)
    type_i64        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_i32        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_i16        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_i8         reduce using rule 117 (expr -> expr operator_contains expr .)
    type_f32        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_f64        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_str        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_list       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_tuple      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_array      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_vector     reduce using rule 117 (expr -> expr operator_contains expr .)
    type_dict       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_generator  reduce using rule 117 (expr -> expr operator_contains expr .)
    type_linked_list reduce using rule 117 (expr -> expr operator_contains expr .)
    type_doubly_linked_list reduce using rule 117 (expr -> expr operator_contains expr .)
    type_deque      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_heap       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_fibonacci_heap reduce using rule 117 (expr -> expr operator_contains expr .)
    type_tree       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_trie       reduce using rule 117 (expr -> expr operator_contains expr .)
    type_stack      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_queue      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_binary_search_tree reduce using rule 117 (expr -> expr operator_contains expr .)
    type_bitset     reduce using rule 117 (expr -> expr operator_contains expr .)
    type_set        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_map        reduce using rule 117 (expr -> expr operator_contains expr .)
    type_range      reduce using rule 117 (expr -> expr operator_contains expr .)
    type_bad_struct reduce using rule 117 (expr -> expr operator_contains expr .)
    type_bad_struct2 reduce using rule 117 (expr -> expr operator_contains expr .)
    lambda          reduce using rule 117 (expr -> expr operator_contains expr .)
    NEWLINE         reduce using rule 117 (expr -> expr operator_contains expr .)
    $end            reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_inner  reduce using rule 117 (expr -> expr operator_contains expr .)
    }               reduce using rule 117 (expr -> expr operator_contains expr .)
    )               reduce using rule 117 (expr -> expr operator_contains expr .)
    {               reduce using rule 117 (expr -> expr operator_contains expr .)
    ]               reduce using rule 117 (expr -> expr operator_contains expr .)
    :               reduce using rule 117 (expr -> expr operator_contains expr .)
    ,               reduce using rule 117 (expr -> expr operator_contains expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_sub    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_mul    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_div    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_trudiv [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_pow    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_join   [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_split  [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_scan   [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_reduc  [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitand [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitor  [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitxor [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftleft [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftright [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_incr   [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_decr   [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_outer  [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_rotate [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_apply  [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_compose [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_over   [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_map    [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_goodname [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_bitnot [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_reverse [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_incr [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_decr [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_goodname2 [ reduce using rule 117 (expr -> expr operator_contains expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 269

    (122) expr -> expr operator_outer expr . expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 338
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 270

    (125) expr -> expr operator_rotate expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_sub    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_mul    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_div    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_trudiv reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_pow    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_join   reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_split  reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_scan   reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_reduc  reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_bitand reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_bitor  reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_bitxor reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_bitshiftleft reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_bitshiftright reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_and    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_or     reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_xor    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_contains reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_outer  reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_rotate reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_apply  reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_less_than reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_less_than_equals reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_greater_than reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_greater_than_equals reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_equals reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_not_equals reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_smallest reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_greatest reduce using rule 125 (expr -> expr operator_rotate expr .)
    [               reduce using rule 125 (expr -> expr operator_rotate expr .)
    (               reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_not    reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_s_combinator reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_s2_combinator reduce using rule 125 (expr -> expr operator_rotate expr .)
    VAR             reduce using rule 125 (expr -> expr operator_rotate expr .)
    FLOAT           reduce using rule 125 (expr -> expr operator_rotate expr .)
    NUM             reduce using rule 125 (expr -> expr operator_rotate expr .)
    STRING_3SQ      reduce using rule 125 (expr -> expr operator_rotate expr .)
    STRING_3DQ      reduce using rule 125 (expr -> expr operator_rotate expr .)
    STRING_SQ       reduce using rule 125 (expr -> expr operator_rotate expr .)
    STRING_DQ       reduce using rule 125 (expr -> expr operator_rotate expr .)
    true            reduce using rule 125 (expr -> expr operator_rotate expr .)
    Null            reduce using rule 125 (expr -> expr operator_rotate expr .)
    false           reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_type       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_num        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_bool       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_any        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_u64        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_u32        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_u16        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_u8         reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_i64        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_i32        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_i16        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_i8         reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_f32        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_f64        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_str        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_list       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_tuple      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_array      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_vector     reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_dict       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_generator  reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_linked_list reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_doubly_linked_list reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_deque      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_heap       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_fibonacci_heap reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_tree       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_trie       reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_stack      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_queue      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_binary_search_tree reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_bitset     reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_set        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_map        reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_range      reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_bad_struct reduce using rule 125 (expr -> expr operator_rotate expr .)
    type_bad_struct2 reduce using rule 125 (expr -> expr operator_rotate expr .)
    lambda          reduce using rule 125 (expr -> expr operator_rotate expr .)
    NEWLINE         reduce using rule 125 (expr -> expr operator_rotate expr .)
    $end            reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_inner  reduce using rule 125 (expr -> expr operator_rotate expr .)
    }               reduce using rule 125 (expr -> expr operator_rotate expr .)
    )               reduce using rule 125 (expr -> expr operator_rotate expr .)
    {               reduce using rule 125 (expr -> expr operator_rotate expr .)
    ]               reduce using rule 125 (expr -> expr operator_rotate expr .)
    :               reduce using rule 125 (expr -> expr operator_rotate expr .)
    ,               reduce using rule 125 (expr -> expr operator_rotate expr .)
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_incr   [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_decr   [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_compose [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_over   [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_map    [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_bitnot [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_reverse [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_incr [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_decr [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname2 [ reduce using rule 125 (expr -> expr operator_rotate expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 271

    (126) expr -> expr operator_apply expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_sub    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_mul    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_div    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_trudiv reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_pow    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_join   reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_split  reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_scan   reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_reduc  reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_bitand reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_bitor  reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_bitxor reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_bitshiftleft reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_bitshiftright reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_and    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_or     reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_xor    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_contains reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_outer  reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_rotate reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_apply  reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_less_than reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_less_than_equals reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_greater_than reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_greater_than_equals reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_equals reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_not_equals reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_smallest reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_greatest reduce using rule 126 (expr -> expr operator_apply expr .)
    [               reduce using rule 126 (expr -> expr operator_apply expr .)
    (               reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_not    reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_s_combinator reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_s2_combinator reduce using rule 126 (expr -> expr operator_apply expr .)
    VAR             reduce using rule 126 (expr -> expr operator_apply expr .)
    FLOAT           reduce using rule 126 (expr -> expr operator_apply expr .)
    NUM             reduce using rule 126 (expr -> expr operator_apply expr .)
    STRING_3SQ      reduce using rule 126 (expr -> expr operator_apply expr .)
    STRING_3DQ      reduce using rule 126 (expr -> expr operator_apply expr .)
    STRING_SQ       reduce using rule 126 (expr -> expr operator_apply expr .)
    STRING_DQ       reduce using rule 126 (expr -> expr operator_apply expr .)
    true            reduce using rule 126 (expr -> expr operator_apply expr .)
    Null            reduce using rule 126 (expr -> expr operator_apply expr .)
    false           reduce using rule 126 (expr -> expr operator_apply expr .)
    type_type       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_num        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_bool       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_any        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_u64        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_u32        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_u16        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_u8         reduce using rule 126 (expr -> expr operator_apply expr .)
    type_i64        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_i32        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_i16        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_i8         reduce using rule 126 (expr -> expr operator_apply expr .)
    type_f32        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_f64        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_str        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_list       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_tuple      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_array      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_vector     reduce using rule 126 (expr -> expr operator_apply expr .)
    type_dict       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_generator  reduce using rule 126 (expr -> expr operator_apply expr .)
    type_linked_list reduce using rule 126 (expr -> expr operator_apply expr .)
    type_doubly_linked_list reduce using rule 126 (expr -> expr operator_apply expr .)
    type_deque      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_heap       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_fibonacci_heap reduce using rule 126 (expr -> expr operator_apply expr .)
    type_tree       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_trie       reduce using rule 126 (expr -> expr operator_apply expr .)
    type_stack      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_queue      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_binary_search_tree reduce using rule 126 (expr -> expr operator_apply expr .)
    type_bitset     reduce using rule 126 (expr -> expr operator_apply expr .)
    type_set        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_map        reduce using rule 126 (expr -> expr operator_apply expr .)
    type_range      reduce using rule 126 (expr -> expr operator_apply expr .)
    type_bad_struct reduce using rule 126 (expr -> expr operator_apply expr .)
    type_bad_struct2 reduce using rule 126 (expr -> expr operator_apply expr .)
    lambda          reduce using rule 126 (expr -> expr operator_apply expr .)
    NEWLINE         reduce using rule 126 (expr -> expr operator_apply expr .)
    $end            reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_inner  reduce using rule 126 (expr -> expr operator_apply expr .)
    }               reduce using rule 126 (expr -> expr operator_apply expr .)
    )               reduce using rule 126 (expr -> expr operator_apply expr .)
    {               reduce using rule 126 (expr -> expr operator_apply expr .)
    ]               reduce using rule 126 (expr -> expr operator_apply expr .)
    :               reduce using rule 126 (expr -> expr operator_apply expr .)
    ,               reduce using rule 126 (expr -> expr operator_apply expr .)
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_incr   [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_decr   [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_compose [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_over   [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_map    [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_goodname [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_bitnot [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_reverse [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_incr [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_decr [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_goodname2 [ reduce using rule 126 (expr -> expr operator_apply expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 272

    (127) expr -> expr operator_compose expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_sub    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_mul    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_div    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_trudiv reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_pow    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_join   reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_split  reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_scan   reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_reduc  reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitand reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitor  reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitxor reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitshiftleft reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitshiftright reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_and    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_or     reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_xor    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_contains reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_incr   reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_decr   reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_outer  reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_rotate reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_apply  reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_compose reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_over   reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_map    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_less_than reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_less_than_equals reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_greater_than reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_greater_than_equals reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_equals reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_not_equals reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_smallest reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_greatest reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_goodname reduce using rule 127 (expr -> expr operator_compose expr .)
    [               reduce using rule 127 (expr -> expr operator_compose expr .)
    (               reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_bitnot reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_not    reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_reverse reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_sorted_incr reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_sorted_decr reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_s_combinator reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_s2_combinator reduce using rule 127 (expr -> expr operator_compose expr .)
    VAR             reduce using rule 127 (expr -> expr operator_compose expr .)
    FLOAT           reduce using rule 127 (expr -> expr operator_compose expr .)
    NUM             reduce using rule 127 (expr -> expr operator_compose expr .)
    STRING_3SQ      reduce using rule 127 (expr -> expr operator_compose expr .)
    STRING_3DQ      reduce using rule 127 (expr -> expr operator_compose expr .)
    STRING_SQ       reduce using rule 127 (expr -> expr operator_compose expr .)
    STRING_DQ       reduce using rule 127 (expr -> expr operator_compose expr .)
    true            reduce using rule 127 (expr -> expr operator_compose expr .)
    Null            reduce using rule 127 (expr -> expr operator_compose expr .)
    false           reduce using rule 127 (expr -> expr operator_compose expr .)
    type_type       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_num        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_bool       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_any        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_u64        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_u32        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_u16        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_u8         reduce using rule 127 (expr -> expr operator_compose expr .)
    type_i64        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_i32        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_i16        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_i8         reduce using rule 127 (expr -> expr operator_compose expr .)
    type_f32        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_f64        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_str        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_list       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_tuple      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_array      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_vector     reduce using rule 127 (expr -> expr operator_compose expr .)
    type_dict       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_generator  reduce using rule 127 (expr -> expr operator_compose expr .)
    type_linked_list reduce using rule 127 (expr -> expr operator_compose expr .)
    type_doubly_linked_list reduce using rule 127 (expr -> expr operator_compose expr .)
    type_deque      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_heap       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_fibonacci_heap reduce using rule 127 (expr -> expr operator_compose expr .)
    type_tree       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_trie       reduce using rule 127 (expr -> expr operator_compose expr .)
    type_stack      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_queue      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_binary_search_tree reduce using rule 127 (expr -> expr operator_compose expr .)
    type_bitset     reduce using rule 127 (expr -> expr operator_compose expr .)
    type_set        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_map        reduce using rule 127 (expr -> expr operator_compose expr .)
    type_range      reduce using rule 127 (expr -> expr operator_compose expr .)
    type_bad_struct reduce using rule 127 (expr -> expr operator_compose expr .)
    type_bad_struct2 reduce using rule 127 (expr -> expr operator_compose expr .)
    lambda          reduce using rule 127 (expr -> expr operator_compose expr .)
    NEWLINE         reduce using rule 127 (expr -> expr operator_compose expr .)
    $end            reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_inner  reduce using rule 127 (expr -> expr operator_compose expr .)
    }               reduce using rule 127 (expr -> expr operator_compose expr .)
    )               reduce using rule 127 (expr -> expr operator_compose expr .)
    {               reduce using rule 127 (expr -> expr operator_compose expr .)
    ]               reduce using rule 127 (expr -> expr operator_compose expr .)
    :               reduce using rule 127 (expr -> expr operator_compose expr .)
    ,               reduce using rule 127 (expr -> expr operator_compose expr .)
    operator_goodname2 shift and go to state 29

  ! operator_goodname2 [ reduce using rule 127 (expr -> expr operator_compose expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_compose [ shift and go to state 127 ]
  ! operator_over   [ shift and go to state 128 ]
  ! operator_map    [ shift and go to state 129 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 273

    (128) expr -> expr operator_over expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_sub    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_mul    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_div    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_trudiv reduce using rule 128 (expr -> expr operator_over expr .)
    operator_pow    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_join   reduce using rule 128 (expr -> expr operator_over expr .)
    operator_split  reduce using rule 128 (expr -> expr operator_over expr .)
    operator_scan   reduce using rule 128 (expr -> expr operator_over expr .)
    operator_reduc  reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitand reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitor  reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitxor reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitshiftleft reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitshiftright reduce using rule 128 (expr -> expr operator_over expr .)
    operator_and    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_or     reduce using rule 128 (expr -> expr operator_over expr .)
    operator_xor    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_contains reduce using rule 128 (expr -> expr operator_over expr .)
    operator_incr   reduce using rule 128 (expr -> expr operator_over expr .)
    operator_decr   reduce using rule 128 (expr -> expr operator_over expr .)
    operator_outer  reduce using rule 128 (expr -> expr operator_over expr .)
    operator_rotate reduce using rule 128 (expr -> expr operator_over expr .)
    operator_apply  reduce using rule 128 (expr -> expr operator_over expr .)
    operator_over   reduce using rule 128 (expr -> expr operator_over expr .)
    operator_map    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_less_than reduce using rule 128 (expr -> expr operator_over expr .)
    operator_less_than_equals reduce using rule 128 (expr -> expr operator_over expr .)
    operator_greater_than reduce using rule 128 (expr -> expr operator_over expr .)
    operator_greater_than_equals reduce using rule 128 (expr -> expr operator_over expr .)
    operator_equals reduce using rule 128 (expr -> expr operator_over expr .)
    operator_not_equals reduce using rule 128 (expr -> expr operator_over expr .)
    operator_smallest reduce using rule 128 (expr -> expr operator_over expr .)
    operator_greatest reduce using rule 128 (expr -> expr operator_over expr .)
    operator_goodname reduce using rule 128 (expr -> expr operator_over expr .)
    [               reduce using rule 128 (expr -> expr operator_over expr .)
    (               reduce using rule 128 (expr -> expr operator_over expr .)
    operator_bitnot reduce using rule 128 (expr -> expr operator_over expr .)
    operator_not    reduce using rule 128 (expr -> expr operator_over expr .)
    operator_reverse reduce using rule 128 (expr -> expr operator_over expr .)
    operator_sorted_incr reduce using rule 128 (expr -> expr operator_over expr .)
    operator_sorted_decr reduce using rule 128 (expr -> expr operator_over expr .)
    operator_s_combinator reduce using rule 128 (expr -> expr operator_over expr .)
    operator_s2_combinator reduce using rule 128 (expr -> expr operator_over expr .)
    VAR             reduce using rule 128 (expr -> expr operator_over expr .)
    FLOAT           reduce using rule 128 (expr -> expr operator_over expr .)
    NUM             reduce using rule 128 (expr -> expr operator_over expr .)
    STRING_3SQ      reduce using rule 128 (expr -> expr operator_over expr .)
    STRING_3DQ      reduce using rule 128 (expr -> expr operator_over expr .)
    STRING_SQ       reduce using rule 128 (expr -> expr operator_over expr .)
    STRING_DQ       reduce using rule 128 (expr -> expr operator_over expr .)
    true            reduce using rule 128 (expr -> expr operator_over expr .)
    Null            reduce using rule 128 (expr -> expr operator_over expr .)
    false           reduce using rule 128 (expr -> expr operator_over expr .)
    type_type       reduce using rule 128 (expr -> expr operator_over expr .)
    type_num        reduce using rule 128 (expr -> expr operator_over expr .)
    type_bool       reduce using rule 128 (expr -> expr operator_over expr .)
    type_any        reduce using rule 128 (expr -> expr operator_over expr .)
    type_u64        reduce using rule 128 (expr -> expr operator_over expr .)
    type_u32        reduce using rule 128 (expr -> expr operator_over expr .)
    type_u16        reduce using rule 128 (expr -> expr operator_over expr .)
    type_u8         reduce using rule 128 (expr -> expr operator_over expr .)
    type_i64        reduce using rule 128 (expr -> expr operator_over expr .)
    type_i32        reduce using rule 128 (expr -> expr operator_over expr .)
    type_i16        reduce using rule 128 (expr -> expr operator_over expr .)
    type_i8         reduce using rule 128 (expr -> expr operator_over expr .)
    type_f32        reduce using rule 128 (expr -> expr operator_over expr .)
    type_f64        reduce using rule 128 (expr -> expr operator_over expr .)
    type_str        reduce using rule 128 (expr -> expr operator_over expr .)
    type_list       reduce using rule 128 (expr -> expr operator_over expr .)
    type_tuple      reduce using rule 128 (expr -> expr operator_over expr .)
    type_array      reduce using rule 128 (expr -> expr operator_over expr .)
    type_vector     reduce using rule 128 (expr -> expr operator_over expr .)
    type_dict       reduce using rule 128 (expr -> expr operator_over expr .)
    type_generator  reduce using rule 128 (expr -> expr operator_over expr .)
    type_linked_list reduce using rule 128 (expr -> expr operator_over expr .)
    type_doubly_linked_list reduce using rule 128 (expr -> expr operator_over expr .)
    type_deque      reduce using rule 128 (expr -> expr operator_over expr .)
    type_heap       reduce using rule 128 (expr -> expr operator_over expr .)
    type_fibonacci_heap reduce using rule 128 (expr -> expr operator_over expr .)
    type_tree       reduce using rule 128 (expr -> expr operator_over expr .)
    type_trie       reduce using rule 128 (expr -> expr operator_over expr .)
    type_stack      reduce using rule 128 (expr -> expr operator_over expr .)
    type_queue      reduce using rule 128 (expr -> expr operator_over expr .)
    type_binary_search_tree reduce using rule 128 (expr -> expr operator_over expr .)
    type_bitset     reduce using rule 128 (expr -> expr operator_over expr .)
    type_set        reduce using rule 128 (expr -> expr operator_over expr .)
    type_map        reduce using rule 128 (expr -> expr operator_over expr .)
    type_range      reduce using rule 128 (expr -> expr operator_over expr .)
    type_bad_struct reduce using rule 128 (expr -> expr operator_over expr .)
    type_bad_struct2 reduce using rule 128 (expr -> expr operator_over expr .)
    lambda          reduce using rule 128 (expr -> expr operator_over expr .)
    NEWLINE         reduce using rule 128 (expr -> expr operator_over expr .)
    $end            reduce using rule 128 (expr -> expr operator_over expr .)
    operator_inner  reduce using rule 128 (expr -> expr operator_over expr .)
    }               reduce using rule 128 (expr -> expr operator_over expr .)
    )               reduce using rule 128 (expr -> expr operator_over expr .)
    {               reduce using rule 128 (expr -> expr operator_over expr .)
    ]               reduce using rule 128 (expr -> expr operator_over expr .)
    :               reduce using rule 128 (expr -> expr operator_over expr .)
    ,               reduce using rule 128 (expr -> expr operator_over expr .)
    operator_compose shift and go to state 127
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 128 (expr -> expr operator_over expr .) ]
  ! operator_goodname2 [ reduce using rule 128 (expr -> expr operator_over expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_over   [ shift and go to state 128 ]
  ! operator_map    [ shift and go to state 129 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 274

    (132) expr -> expr operator_less_than expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_or     reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_xor    reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_contains reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_less_than reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_less_than_equals reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_greater_than reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_greater_than_equals reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_equals reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_not_equals reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_smallest reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_greatest reduce using rule 132 (expr -> expr operator_less_than expr .)
    [               reduce using rule 132 (expr -> expr operator_less_than expr .)
    (               reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_not    reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_s_combinator reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_s2_combinator reduce using rule 132 (expr -> expr operator_less_than expr .)
    VAR             reduce using rule 132 (expr -> expr operator_less_than expr .)
    FLOAT           reduce using rule 132 (expr -> expr operator_less_than expr .)
    NUM             reduce using rule 132 (expr -> expr operator_less_than expr .)
    STRING_3SQ      reduce using rule 132 (expr -> expr operator_less_than expr .)
    STRING_3DQ      reduce using rule 132 (expr -> expr operator_less_than expr .)
    STRING_SQ       reduce using rule 132 (expr -> expr operator_less_than expr .)
    STRING_DQ       reduce using rule 132 (expr -> expr operator_less_than expr .)
    true            reduce using rule 132 (expr -> expr operator_less_than expr .)
    Null            reduce using rule 132 (expr -> expr operator_less_than expr .)
    false           reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_type       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_num        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_bool       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_any        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_u64        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_u32        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_u16        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_u8         reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_i64        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_i32        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_i16        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_i8         reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_f32        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_f64        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_str        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_list       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_tuple      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_array      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_vector     reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_dict       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_generator  reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_linked_list reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_doubly_linked_list reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_deque      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_heap       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_fibonacci_heap reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_tree       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_trie       reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_stack      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_queue      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_binary_search_tree reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_bitset     reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_set        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_map        reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_range      reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_bad_struct reduce using rule 132 (expr -> expr operator_less_than expr .)
    type_bad_struct2 reduce using rule 132 (expr -> expr operator_less_than expr .)
    lambda          reduce using rule 132 (expr -> expr operator_less_than expr .)
    NEWLINE         reduce using rule 132 (expr -> expr operator_less_than expr .)
    $end            reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_inner  reduce using rule 132 (expr -> expr operator_less_than expr .)
    }               reduce using rule 132 (expr -> expr operator_less_than expr .)
    )               reduce using rule 132 (expr -> expr operator_less_than expr .)
    {               reduce using rule 132 (expr -> expr operator_less_than expr .)
    ]               reduce using rule 132 (expr -> expr operator_less_than expr .)
    :               reduce using rule 132 (expr -> expr operator_less_than expr .)
    ,               reduce using rule 132 (expr -> expr operator_less_than expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_sub    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_mul    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_div    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_trudiv [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_pow    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_join   [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_split  [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_scan   [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_reduc  [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitand [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitor  [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitxor [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_incr   [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_decr   [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_outer  [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_rotate [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_apply  [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_compose [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_over   [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_map    [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_bitnot [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_reverse [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname2 [ reduce using rule 132 (expr -> expr operator_less_than expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 275

    (133) expr -> expr operator_less_than_equals expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_or     reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_xor    reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_contains reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_less_than reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_less_than_equals reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than_equals reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_equals reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_not_equals reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_smallest reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_greatest reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    [               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    (               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_not    reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_s_combinator reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_s2_combinator reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    VAR             reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    FLOAT           reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    NUM             reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    STRING_3SQ      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    STRING_3DQ      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    STRING_SQ       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    STRING_DQ       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    true            reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    Null            reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    false           reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_type       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_num        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_bool       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_any        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_u64        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_u32        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_u16        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_u8         reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_i64        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_i32        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_i16        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_i8         reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_f32        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_f64        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_str        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_list       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_tuple      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_array      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_vector     reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_dict       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_generator  reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_linked_list reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_doubly_linked_list reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_deque      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_heap       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_fibonacci_heap reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_tree       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_trie       reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_stack      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_queue      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_binary_search_tree reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_bitset     reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_set        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_map        reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_range      reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_bad_struct reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    type_bad_struct2 reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    lambda          reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    NEWLINE         reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    $end            reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_inner  reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    }               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    )               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    {               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    ]               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    :               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    ,               reduce using rule 133 (expr -> expr operator_less_than_equals expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_div    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_join   [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_split  [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_compose [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_over   [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_map    [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 133 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 276

    (134) expr -> expr operator_greater_than expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_or     reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_xor    reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_contains reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_less_than reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_less_than_equals reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_greater_than reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_greater_than_equals reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_equals reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_not_equals reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_smallest reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_greatest reduce using rule 134 (expr -> expr operator_greater_than expr .)
    [               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    (               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_not    reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_s_combinator reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_s2_combinator reduce using rule 134 (expr -> expr operator_greater_than expr .)
    VAR             reduce using rule 134 (expr -> expr operator_greater_than expr .)
    FLOAT           reduce using rule 134 (expr -> expr operator_greater_than expr .)
    NUM             reduce using rule 134 (expr -> expr operator_greater_than expr .)
    STRING_3SQ      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    STRING_3DQ      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    STRING_SQ       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    STRING_DQ       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    true            reduce using rule 134 (expr -> expr operator_greater_than expr .)
    Null            reduce using rule 134 (expr -> expr operator_greater_than expr .)
    false           reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_type       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_num        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_bool       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_any        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_u64        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_u32        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_u16        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_u8         reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_i64        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_i32        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_i16        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_i8         reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_f32        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_f64        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_str        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_list       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_tuple      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_array      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_vector     reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_dict       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_generator  reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_linked_list reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_doubly_linked_list reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_deque      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_heap       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_fibonacci_heap reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_tree       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_trie       reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_stack      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_queue      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_binary_search_tree reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_bitset     reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_set        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_map        reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_range      reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_bad_struct reduce using rule 134 (expr -> expr operator_greater_than expr .)
    type_bad_struct2 reduce using rule 134 (expr -> expr operator_greater_than expr .)
    lambda          reduce using rule 134 (expr -> expr operator_greater_than expr .)
    NEWLINE         reduce using rule 134 (expr -> expr operator_greater_than expr .)
    $end            reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_inner  reduce using rule 134 (expr -> expr operator_greater_than expr .)
    }               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    )               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    {               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    ]               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    :               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    ,               reduce using rule 134 (expr -> expr operator_greater_than expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_sub    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_mul    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_div    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_trudiv [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_pow    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_join   [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_split  [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_scan   [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_reduc  [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitand [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitor  [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitxor [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_incr   [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_decr   [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_outer  [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_rotate [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_apply  [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_compose [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_over   [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_map    [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitnot [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_reverse [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname2 [ reduce using rule 134 (expr -> expr operator_greater_than expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 277

    (135) expr -> expr operator_greater_than_equals expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_or     reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_xor    reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_contains reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than_equals reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than_equals reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_equals reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_not_equals reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_smallest reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_greatest reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    [               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    (               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_not    reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_s_combinator reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_s2_combinator reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    VAR             reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    FLOAT           reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    NUM             reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    STRING_3SQ      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    STRING_3DQ      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    STRING_SQ       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    STRING_DQ       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    true            reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    Null            reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    false           reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_type       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_num        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_bool       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_any        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_u64        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_u32        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_u16        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_u8         reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_i64        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_i32        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_i16        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_i8         reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_f32        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_f64        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_str        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_list       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_tuple      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_array      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_vector     reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_dict       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_generator  reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_linked_list reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_doubly_linked_list reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_deque      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_heap       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_fibonacci_heap reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_tree       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_trie       reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_stack      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_queue      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_binary_search_tree reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_bitset     reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_set        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_map        reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_range      reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_bad_struct reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    type_bad_struct2 reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    lambda          reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    NEWLINE         reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    $end            reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_inner  reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    }               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    )               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    {               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    ]               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    :               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    ,               reduce using rule 135 (expr -> expr operator_greater_than_equals expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_div    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_join   [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_split  [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_compose [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_over   [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_map    [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 135 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 278

    (136) expr -> expr operator_equals expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_or     reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_xor    reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_contains reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_less_than reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_less_than_equals reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_greater_than reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_greater_than_equals reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_equals reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_not_equals reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_smallest reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_greatest reduce using rule 136 (expr -> expr operator_equals expr .)
    [               reduce using rule 136 (expr -> expr operator_equals expr .)
    (               reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_not    reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_s_combinator reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_s2_combinator reduce using rule 136 (expr -> expr operator_equals expr .)
    VAR             reduce using rule 136 (expr -> expr operator_equals expr .)
    FLOAT           reduce using rule 136 (expr -> expr operator_equals expr .)
    NUM             reduce using rule 136 (expr -> expr operator_equals expr .)
    STRING_3SQ      reduce using rule 136 (expr -> expr operator_equals expr .)
    STRING_3DQ      reduce using rule 136 (expr -> expr operator_equals expr .)
    STRING_SQ       reduce using rule 136 (expr -> expr operator_equals expr .)
    STRING_DQ       reduce using rule 136 (expr -> expr operator_equals expr .)
    true            reduce using rule 136 (expr -> expr operator_equals expr .)
    Null            reduce using rule 136 (expr -> expr operator_equals expr .)
    false           reduce using rule 136 (expr -> expr operator_equals expr .)
    type_type       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_num        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_bool       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_any        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_u64        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_u32        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_u16        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_u8         reduce using rule 136 (expr -> expr operator_equals expr .)
    type_i64        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_i32        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_i16        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_i8         reduce using rule 136 (expr -> expr operator_equals expr .)
    type_f32        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_f64        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_str        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_list       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_tuple      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_array      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_vector     reduce using rule 136 (expr -> expr operator_equals expr .)
    type_dict       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_generator  reduce using rule 136 (expr -> expr operator_equals expr .)
    type_linked_list reduce using rule 136 (expr -> expr operator_equals expr .)
    type_doubly_linked_list reduce using rule 136 (expr -> expr operator_equals expr .)
    type_deque      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_heap       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_fibonacci_heap reduce using rule 136 (expr -> expr operator_equals expr .)
    type_tree       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_trie       reduce using rule 136 (expr -> expr operator_equals expr .)
    type_stack      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_queue      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_binary_search_tree reduce using rule 136 (expr -> expr operator_equals expr .)
    type_bitset     reduce using rule 136 (expr -> expr operator_equals expr .)
    type_set        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_map        reduce using rule 136 (expr -> expr operator_equals expr .)
    type_range      reduce using rule 136 (expr -> expr operator_equals expr .)
    type_bad_struct reduce using rule 136 (expr -> expr operator_equals expr .)
    type_bad_struct2 reduce using rule 136 (expr -> expr operator_equals expr .)
    lambda          reduce using rule 136 (expr -> expr operator_equals expr .)
    NEWLINE         reduce using rule 136 (expr -> expr operator_equals expr .)
    $end            reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_inner  reduce using rule 136 (expr -> expr operator_equals expr .)
    }               reduce using rule 136 (expr -> expr operator_equals expr .)
    )               reduce using rule 136 (expr -> expr operator_equals expr .)
    {               reduce using rule 136 (expr -> expr operator_equals expr .)
    ]               reduce using rule 136 (expr -> expr operator_equals expr .)
    :               reduce using rule 136 (expr -> expr operator_equals expr .)
    ,               reduce using rule 136 (expr -> expr operator_equals expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_sub    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_mul    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_div    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_trudiv [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_pow    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_join   [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_split  [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_scan   [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_reduc  [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitand [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitor  [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitxor [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_incr   [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_decr   [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_outer  [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_rotate [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_apply  [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_compose [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_over   [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_map    [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_goodname [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_bitnot [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_reverse [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 136 (expr -> expr operator_equals expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 279

    (137) expr -> expr operator_not_equals expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_or     reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_xor    reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_contains reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_less_than reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_less_than_equals reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_greater_than reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_greater_than_equals reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_equals reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_not_equals reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_smallest reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_greatest reduce using rule 137 (expr -> expr operator_not_equals expr .)
    [               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    (               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_not    reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_s_combinator reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_s2_combinator reduce using rule 137 (expr -> expr operator_not_equals expr .)
    VAR             reduce using rule 137 (expr -> expr operator_not_equals expr .)
    FLOAT           reduce using rule 137 (expr -> expr operator_not_equals expr .)
    NUM             reduce using rule 137 (expr -> expr operator_not_equals expr .)
    STRING_3SQ      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    STRING_3DQ      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    STRING_SQ       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    STRING_DQ       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    true            reduce using rule 137 (expr -> expr operator_not_equals expr .)
    Null            reduce using rule 137 (expr -> expr operator_not_equals expr .)
    false           reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_type       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_num        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_bool       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_any        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_u64        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_u32        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_u16        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_u8         reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_i64        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_i32        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_i16        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_i8         reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_f32        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_f64        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_str        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_list       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_tuple      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_array      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_vector     reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_dict       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_generator  reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_linked_list reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_doubly_linked_list reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_deque      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_heap       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_fibonacci_heap reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_tree       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_trie       reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_stack      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_queue      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_binary_search_tree reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_bitset     reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_set        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_map        reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_range      reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_bad_struct reduce using rule 137 (expr -> expr operator_not_equals expr .)
    type_bad_struct2 reduce using rule 137 (expr -> expr operator_not_equals expr .)
    lambda          reduce using rule 137 (expr -> expr operator_not_equals expr .)
    NEWLINE         reduce using rule 137 (expr -> expr operator_not_equals expr .)
    $end            reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_inner  reduce using rule 137 (expr -> expr operator_not_equals expr .)
    }               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    )               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    {               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    ]               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    :               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    ,               reduce using rule 137 (expr -> expr operator_not_equals expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_sub    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_mul    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_div    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_trudiv [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_pow    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_join   [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_split  [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_scan   [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_reduc  [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitand [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitor  [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitxor [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_incr   [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_decr   [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_outer  [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_rotate [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_apply  [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_compose [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_over   [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_map    [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitnot [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_reverse [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 137 (expr -> expr operator_not_equals expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 280

    (138) expr -> expr operator_smallest expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_or     reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_xor    reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_contains reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_less_than reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_less_than_equals reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_greater_than reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_greater_than_equals reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_equals reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_not_equals reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_smallest reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_greatest reduce using rule 138 (expr -> expr operator_smallest expr .)
    [               reduce using rule 138 (expr -> expr operator_smallest expr .)
    (               reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_not    reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_s_combinator reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_s2_combinator reduce using rule 138 (expr -> expr operator_smallest expr .)
    VAR             reduce using rule 138 (expr -> expr operator_smallest expr .)
    FLOAT           reduce using rule 138 (expr -> expr operator_smallest expr .)
    NUM             reduce using rule 138 (expr -> expr operator_smallest expr .)
    STRING_3SQ      reduce using rule 138 (expr -> expr operator_smallest expr .)
    STRING_3DQ      reduce using rule 138 (expr -> expr operator_smallest expr .)
    STRING_SQ       reduce using rule 138 (expr -> expr operator_smallest expr .)
    STRING_DQ       reduce using rule 138 (expr -> expr operator_smallest expr .)
    true            reduce using rule 138 (expr -> expr operator_smallest expr .)
    Null            reduce using rule 138 (expr -> expr operator_smallest expr .)
    false           reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_type       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_num        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_bool       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_any        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_u64        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_u32        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_u16        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_u8         reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_i64        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_i32        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_i16        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_i8         reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_f32        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_f64        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_str        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_list       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_tuple      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_array      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_vector     reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_dict       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_generator  reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_linked_list reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_doubly_linked_list reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_deque      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_heap       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_fibonacci_heap reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_tree       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_trie       reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_stack      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_queue      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_binary_search_tree reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_bitset     reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_set        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_map        reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_range      reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_bad_struct reduce using rule 138 (expr -> expr operator_smallest expr .)
    type_bad_struct2 reduce using rule 138 (expr -> expr operator_smallest expr .)
    lambda          reduce using rule 138 (expr -> expr operator_smallest expr .)
    NEWLINE         reduce using rule 138 (expr -> expr operator_smallest expr .)
    $end            reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_inner  reduce using rule 138 (expr -> expr operator_smallest expr .)
    }               reduce using rule 138 (expr -> expr operator_smallest expr .)
    )               reduce using rule 138 (expr -> expr operator_smallest expr .)
    {               reduce using rule 138 (expr -> expr operator_smallest expr .)
    ]               reduce using rule 138 (expr -> expr operator_smallest expr .)
    :               reduce using rule 138 (expr -> expr operator_smallest expr .)
    ,               reduce using rule 138 (expr -> expr operator_smallest expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_sub    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_mul    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_div    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_trudiv [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_pow    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_join   [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_split  [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_scan   [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_reduc  [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitand [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitor  [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitxor [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftright [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_incr   [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_decr   [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_outer  [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_rotate [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_apply  [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_compose [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_over   [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_map    [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_bitnot [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_reverse [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_incr [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_decr [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname2 [ reduce using rule 138 (expr -> expr operator_smallest expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 281

    (139) expr -> expr operator_greatest expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_or     reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_xor    reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_contains reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_less_than reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_less_than_equals reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_greater_than reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_greater_than_equals reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_equals reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_not_equals reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_smallest reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_greatest reduce using rule 139 (expr -> expr operator_greatest expr .)
    [               reduce using rule 139 (expr -> expr operator_greatest expr .)
    (               reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_not    reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_s_combinator reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_s2_combinator reduce using rule 139 (expr -> expr operator_greatest expr .)
    VAR             reduce using rule 139 (expr -> expr operator_greatest expr .)
    FLOAT           reduce using rule 139 (expr -> expr operator_greatest expr .)
    NUM             reduce using rule 139 (expr -> expr operator_greatest expr .)
    STRING_3SQ      reduce using rule 139 (expr -> expr operator_greatest expr .)
    STRING_3DQ      reduce using rule 139 (expr -> expr operator_greatest expr .)
    STRING_SQ       reduce using rule 139 (expr -> expr operator_greatest expr .)
    STRING_DQ       reduce using rule 139 (expr -> expr operator_greatest expr .)
    true            reduce using rule 139 (expr -> expr operator_greatest expr .)
    Null            reduce using rule 139 (expr -> expr operator_greatest expr .)
    false           reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_type       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_num        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_bool       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_any        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_u64        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_u32        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_u16        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_u8         reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_i64        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_i32        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_i16        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_i8         reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_f32        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_f64        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_str        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_list       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_tuple      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_array      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_vector     reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_dict       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_generator  reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_linked_list reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_doubly_linked_list reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_deque      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_heap       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_fibonacci_heap reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_tree       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_trie       reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_stack      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_queue      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_binary_search_tree reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_bitset     reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_set        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_map        reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_range      reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_bad_struct reduce using rule 139 (expr -> expr operator_greatest expr .)
    type_bad_struct2 reduce using rule 139 (expr -> expr operator_greatest expr .)
    lambda          reduce using rule 139 (expr -> expr operator_greatest expr .)
    NEWLINE         reduce using rule 139 (expr -> expr operator_greatest expr .)
    $end            reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_inner  reduce using rule 139 (expr -> expr operator_greatest expr .)
    }               reduce using rule 139 (expr -> expr operator_greatest expr .)
    )               reduce using rule 139 (expr -> expr operator_greatest expr .)
    {               reduce using rule 139 (expr -> expr operator_greatest expr .)
    ]               reduce using rule 139 (expr -> expr operator_greatest expr .)
    :               reduce using rule 139 (expr -> expr operator_greatest expr .)
    ,               reduce using rule 139 (expr -> expr operator_greatest expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_sub    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_mul    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_div    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_trudiv [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_pow    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_join   [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_split  [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_scan   [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_reduc  [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitand [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitor  [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitxor [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftright [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_incr   [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_decr   [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_outer  [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_rotate [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_apply  [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_compose [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_over   [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_map    [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_bitnot [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_reverse [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_incr [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_decr [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname2 [ reduce using rule 139 (expr -> expr operator_greatest expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 282

    (140) expr -> expr operator_goodname expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_sub    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_mul    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_div    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_trudiv reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_pow    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_join   reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_split  reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_scan   reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_reduc  reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitand reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitor  reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitxor reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitshiftleft reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitshiftright reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_and    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_or     reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_xor    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_contains reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_incr   reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_decr   reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_outer  reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_rotate reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_apply  reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_less_than reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_less_than_equals reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_greater_than reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_greater_than_equals reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_equals reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_not_equals reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_smallest reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_greatest reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_goodname reduce using rule 140 (expr -> expr operator_goodname expr .)
    [               reduce using rule 140 (expr -> expr operator_goodname expr .)
    (               reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_bitnot reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_not    reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_reverse reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_sorted_incr reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_sorted_decr reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_s_combinator reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_s2_combinator reduce using rule 140 (expr -> expr operator_goodname expr .)
    VAR             reduce using rule 140 (expr -> expr operator_goodname expr .)
    FLOAT           reduce using rule 140 (expr -> expr operator_goodname expr .)
    NUM             reduce using rule 140 (expr -> expr operator_goodname expr .)
    STRING_3SQ      reduce using rule 140 (expr -> expr operator_goodname expr .)
    STRING_3DQ      reduce using rule 140 (expr -> expr operator_goodname expr .)
    STRING_SQ       reduce using rule 140 (expr -> expr operator_goodname expr .)
    STRING_DQ       reduce using rule 140 (expr -> expr operator_goodname expr .)
    true            reduce using rule 140 (expr -> expr operator_goodname expr .)
    Null            reduce using rule 140 (expr -> expr operator_goodname expr .)
    false           reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_type       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_num        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_bool       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_any        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_u64        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_u32        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_u16        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_u8         reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_i64        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_i32        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_i16        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_i8         reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_f32        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_f64        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_str        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_list       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_tuple      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_array      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_vector     reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_dict       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_generator  reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_linked_list reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_doubly_linked_list reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_deque      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_heap       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_fibonacci_heap reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_tree       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_trie       reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_stack      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_queue      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_binary_search_tree reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_bitset     reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_set        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_map        reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_range      reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_bad_struct reduce using rule 140 (expr -> expr operator_goodname expr .)
    type_bad_struct2 reduce using rule 140 (expr -> expr operator_goodname expr .)
    lambda          reduce using rule 140 (expr -> expr operator_goodname expr .)
    NEWLINE         reduce using rule 140 (expr -> expr operator_goodname expr .)
    $end            reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_inner  reduce using rule 140 (expr -> expr operator_goodname expr .)
    }               reduce using rule 140 (expr -> expr operator_goodname expr .)
    )               reduce using rule 140 (expr -> expr operator_goodname expr .)
    {               reduce using rule 140 (expr -> expr operator_goodname expr .)
    ]               reduce using rule 140 (expr -> expr operator_goodname expr .)
    :               reduce using rule 140 (expr -> expr operator_goodname expr .)
    ,               reduce using rule 140 (expr -> expr operator_goodname expr .)
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname2 shift and go to state 29

  ! operator_compose [ reduce using rule 140 (expr -> expr operator_goodname expr .) ]
  ! operator_over   [ reduce using rule 140 (expr -> expr operator_goodname expr .) ]
  ! operator_map    [ reduce using rule 140 (expr -> expr operator_goodname expr .) ]
  ! operator_goodname2 [ reduce using rule 140 (expr -> expr operator_goodname expr .) ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_mul    [ shift and go to state 105 ]
  ! operator_div    [ shift and go to state 106 ]
  ! operator_trudiv [ shift and go to state 107 ]
  ! operator_pow    [ shift and go to state 108 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_scan   [ shift and go to state 111 ]
  ! operator_reduc  [ shift and go to state 112 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_incr   [ shift and go to state 122 ]
  ! operator_decr   [ shift and go to state 123 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_rotate [ shift and go to state 125 ]
  ! operator_apply  [ shift and go to state 126 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! operator_goodname [ shift and go to state 138 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_bitnot [ shift and go to state 22 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_reverse [ shift and go to state 24 ]
  ! operator_sorted_incr [ shift and go to state 25 ]
  ! operator_sorted_decr [ shift and go to state 26 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 283

    (188) arguments -> expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    ]               reduce using rule 188 (arguments -> expr .)
    :               reduce using rule 188 (arguments -> expr .)
    ,               reduce using rule 188 (arguments -> expr .)
    )               reduce using rule 188 (arguments -> expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 284

    (55) item -> expr [ arguments . ]
    (56) simple_slice -> expr [ arguments . : arguments ]
    (57) full_slice -> expr [ arguments . : arguments : arguments ]
    (189) arguments -> arguments . , arguments

    ]               shift and go to state 339
    :               shift and go to state 340
    ,               shift and go to state 341


state 285

    (190) arguments -> empty .

    ]               reduce using rule 190 (arguments -> empty .)
    :               reduce using rule 190 (arguments -> empty .)
    ,               reduce using rule 190 (arguments -> empty .)
    )               reduce using rule 190 (arguments -> empty .)


state 286

    (71) block_stmt -> block_decl { stmts . }
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    }               shift and go to state 342
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 99

state 287

    (65) assign_stmt -> item = expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 65 (assign_stmt -> item = expr .)
    $end            reduce using rule 65 (assign_stmt -> item = expr .)
    }               reduce using rule 65 (assign_stmt -> item = expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    item                           shift and go to state 140
    expr                           shift and go to state 102
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 288

    (66) assign_stmt -> simple_slice = expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    $end            reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    }               reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    simple_slice                   shift and go to state 141
    expr                           shift and go to state 102
    item                           shift and go to state 140
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 289

    (67) assign_stmt -> full_slice = expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 67 (assign_stmt -> full_slice = expr .)
    $end            reduce using rule 67 (assign_stmt -> full_slice = expr .)
    }               reduce using rule 67 (assign_stmt -> full_slice = expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    full_slice                     shift and go to state 142
    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 290

    (98) expr -> ( expr ) .

    operator_add    reduce using rule 98 (expr -> ( expr ) .)
    operator_sub    reduce using rule 98 (expr -> ( expr ) .)
    operator_mul    reduce using rule 98 (expr -> ( expr ) .)
    operator_div    reduce using rule 98 (expr -> ( expr ) .)
    operator_trudiv reduce using rule 98 (expr -> ( expr ) .)
    operator_pow    reduce using rule 98 (expr -> ( expr ) .)
    operator_join   reduce using rule 98 (expr -> ( expr ) .)
    operator_split  reduce using rule 98 (expr -> ( expr ) .)
    operator_scan   reduce using rule 98 (expr -> ( expr ) .)
    operator_reduc  reduce using rule 98 (expr -> ( expr ) .)
    operator_bitand reduce using rule 98 (expr -> ( expr ) .)
    operator_bitor  reduce using rule 98 (expr -> ( expr ) .)
    operator_bitxor reduce using rule 98 (expr -> ( expr ) .)
    operator_bitshiftleft reduce using rule 98 (expr -> ( expr ) .)
    operator_bitshiftright reduce using rule 98 (expr -> ( expr ) .)
    operator_and    reduce using rule 98 (expr -> ( expr ) .)
    operator_or     reduce using rule 98 (expr -> ( expr ) .)
    operator_xor    reduce using rule 98 (expr -> ( expr ) .)
    operator_contains reduce using rule 98 (expr -> ( expr ) .)
    operator_incr   reduce using rule 98 (expr -> ( expr ) .)
    operator_decr   reduce using rule 98 (expr -> ( expr ) .)
    operator_outer  reduce using rule 98 (expr -> ( expr ) .)
    operator_rotate reduce using rule 98 (expr -> ( expr ) .)
    operator_apply  reduce using rule 98 (expr -> ( expr ) .)
    operator_compose reduce using rule 98 (expr -> ( expr ) .)
    operator_over   reduce using rule 98 (expr -> ( expr ) .)
    operator_map    reduce using rule 98 (expr -> ( expr ) .)
    operator_less_than reduce using rule 98 (expr -> ( expr ) .)
    operator_less_than_equals reduce using rule 98 (expr -> ( expr ) .)
    operator_greater_than reduce using rule 98 (expr -> ( expr ) .)
    operator_greater_than_equals reduce using rule 98 (expr -> ( expr ) .)
    operator_equals reduce using rule 98 (expr -> ( expr ) .)
    operator_not_equals reduce using rule 98 (expr -> ( expr ) .)
    operator_smallest reduce using rule 98 (expr -> ( expr ) .)
    operator_greatest reduce using rule 98 (expr -> ( expr ) .)
    operator_goodname reduce using rule 98 (expr -> ( expr ) .)
    [               reduce using rule 98 (expr -> ( expr ) .)
    (               reduce using rule 98 (expr -> ( expr ) .)
    operator_bitnot reduce using rule 98 (expr -> ( expr ) .)
    operator_not    reduce using rule 98 (expr -> ( expr ) .)
    operator_reverse reduce using rule 98 (expr -> ( expr ) .)
    operator_sorted_incr reduce using rule 98 (expr -> ( expr ) .)
    operator_sorted_decr reduce using rule 98 (expr -> ( expr ) .)
    operator_s_combinator reduce using rule 98 (expr -> ( expr ) .)
    operator_s2_combinator reduce using rule 98 (expr -> ( expr ) .)
    operator_goodname2 reduce using rule 98 (expr -> ( expr ) .)
    VAR             reduce using rule 98 (expr -> ( expr ) .)
    FLOAT           reduce using rule 98 (expr -> ( expr ) .)
    NUM             reduce using rule 98 (expr -> ( expr ) .)
    STRING_3SQ      reduce using rule 98 (expr -> ( expr ) .)
    STRING_3DQ      reduce using rule 98 (expr -> ( expr ) .)
    STRING_SQ       reduce using rule 98 (expr -> ( expr ) .)
    STRING_DQ       reduce using rule 98 (expr -> ( expr ) .)
    true            reduce using rule 98 (expr -> ( expr ) .)
    Null            reduce using rule 98 (expr -> ( expr ) .)
    false           reduce using rule 98 (expr -> ( expr ) .)
    type_type       reduce using rule 98 (expr -> ( expr ) .)
    type_num        reduce using rule 98 (expr -> ( expr ) .)
    type_bool       reduce using rule 98 (expr -> ( expr ) .)
    type_any        reduce using rule 98 (expr -> ( expr ) .)
    type_u64        reduce using rule 98 (expr -> ( expr ) .)
    type_u32        reduce using rule 98 (expr -> ( expr ) .)
    type_u16        reduce using rule 98 (expr -> ( expr ) .)
    type_u8         reduce using rule 98 (expr -> ( expr ) .)
    type_i64        reduce using rule 98 (expr -> ( expr ) .)
    type_i32        reduce using rule 98 (expr -> ( expr ) .)
    type_i16        reduce using rule 98 (expr -> ( expr ) .)
    type_i8         reduce using rule 98 (expr -> ( expr ) .)
    type_f32        reduce using rule 98 (expr -> ( expr ) .)
    type_f64        reduce using rule 98 (expr -> ( expr ) .)
    type_str        reduce using rule 98 (expr -> ( expr ) .)
    type_list       reduce using rule 98 (expr -> ( expr ) .)
    type_tuple      reduce using rule 98 (expr -> ( expr ) .)
    type_array      reduce using rule 98 (expr -> ( expr ) .)
    type_vector     reduce using rule 98 (expr -> ( expr ) .)
    type_dict       reduce using rule 98 (expr -> ( expr ) .)
    type_generator  reduce using rule 98 (expr -> ( expr ) .)
    type_linked_list reduce using rule 98 (expr -> ( expr ) .)
    type_doubly_linked_list reduce using rule 98 (expr -> ( expr ) .)
    type_deque      reduce using rule 98 (expr -> ( expr ) .)
    type_heap       reduce using rule 98 (expr -> ( expr ) .)
    type_fibonacci_heap reduce using rule 98 (expr -> ( expr ) .)
    type_tree       reduce using rule 98 (expr -> ( expr ) .)
    type_trie       reduce using rule 98 (expr -> ( expr ) .)
    type_stack      reduce using rule 98 (expr -> ( expr ) .)
    type_queue      reduce using rule 98 (expr -> ( expr ) .)
    type_binary_search_tree reduce using rule 98 (expr -> ( expr ) .)
    type_bitset     reduce using rule 98 (expr -> ( expr ) .)
    type_set        reduce using rule 98 (expr -> ( expr ) .)
    type_map        reduce using rule 98 (expr -> ( expr ) .)
    type_range      reduce using rule 98 (expr -> ( expr ) .)
    type_bad_struct reduce using rule 98 (expr -> ( expr ) .)
    type_bad_struct2 reduce using rule 98 (expr -> ( expr ) .)
    lambda          reduce using rule 98 (expr -> ( expr ) .)
    NEWLINE         reduce using rule 98 (expr -> ( expr ) .)
    $end            reduce using rule 98 (expr -> ( expr ) .)
    operator_inner  reduce using rule 98 (expr -> ( expr ) .)
    }               reduce using rule 98 (expr -> ( expr ) .)
    )               reduce using rule 98 (expr -> ( expr ) .)
    {               reduce using rule 98 (expr -> ( expr ) .)
    ]               reduce using rule 98 (expr -> ( expr ) .)
    :               reduce using rule 98 (expr -> ( expr ) .)
    ,               reduce using rule 98 (expr -> ( expr ) .)


state 291

    (141) expr -> operator_s_combinator expr expr . expr
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  shift and go to state 249
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 343
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 292

    (142) expr -> operator_s2_combinator expr expr . expr
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  shift and go to state 249
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 344
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 293

    (182) return_val -> VAR ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 345
    ,               shift and go to state 341


state 294

    (70) comma_separated_names -> VAR , comma_separated_names .

    =               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    NEWLINE         reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    $end            reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    }               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    :               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    operator_contains reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    ;               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    )               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)


state 295

    (64) assign_stmt -> comma_separated_names = expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    NEWLINE         reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    $end            reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    }               reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 296

    (145) return_val -> type_type ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 346
    ,               shift and go to state 341


state 297

    (146) return_val -> type_num ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 347
    ,               shift and go to state 341


state 298

    (147) return_val -> type_bool ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 348
    ,               shift and go to state 341


state 299

    (148) return_val -> type_any ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 349
    ,               shift and go to state 341


state 300

    (149) return_val -> type_u64 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 350
    ,               shift and go to state 341


state 301

    (150) return_val -> type_u32 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 351
    ,               shift and go to state 341


state 302

    (151) return_val -> type_u16 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 352
    ,               shift and go to state 341


state 303

    (152) return_val -> type_u8 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 353
    ,               shift and go to state 341


state 304

    (153) return_val -> type_i64 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 354
    ,               shift and go to state 341


state 305

    (154) return_val -> type_i32 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 355
    ,               shift and go to state 341


state 306

    (155) return_val -> type_i16 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 356
    ,               shift and go to state 341


state 307

    (156) return_val -> type_i8 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 357
    ,               shift and go to state 341


state 308

    (157) return_val -> type_f32 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 358
    ,               shift and go to state 341


state 309

    (158) return_val -> type_f64 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 359
    ,               shift and go to state 341


state 310

    (159) return_val -> type_str ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 360
    ,               shift and go to state 341


state 311

    (160) return_val -> type_list ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 361
    ,               shift and go to state 341


state 312

    (161) return_val -> type_tuple ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 362
    ,               shift and go to state 341


state 313

    (162) return_val -> type_array ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 363
    ,               shift and go to state 341


state 314

    (163) return_val -> type_vector ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 364
    ,               shift and go to state 341


state 315

    (164) return_val -> type_dict ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 365
    ,               shift and go to state 341


state 316

    (165) return_val -> type_generator ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 366
    ,               shift and go to state 341


state 317

    (166) return_val -> type_linked_list ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 367
    ,               shift and go to state 341


state 318

    (167) return_val -> type_doubly_linked_list ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 368
    ,               shift and go to state 341


state 319

    (168) return_val -> type_deque ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 369
    ,               shift and go to state 341


state 320

    (169) return_val -> type_heap ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 370
    ,               shift and go to state 341


state 321

    (170) return_val -> type_fibonacci_heap ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 371
    ,               shift and go to state 341


state 322

    (171) return_val -> type_tree ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 372
    ,               shift and go to state 341


state 323

    (172) return_val -> type_trie ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 373
    ,               shift and go to state 341


state 324

    (173) return_val -> type_stack ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 374
    ,               shift and go to state 341


state 325

    (174) return_val -> type_queue ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 375
    ,               shift and go to state 341


state 326

    (175) return_val -> type_binary_search_tree ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 376
    ,               shift and go to state 341


state 327

    (176) return_val -> type_bitset ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 377
    ,               shift and go to state 341


state 328

    (177) return_val -> type_set ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 378
    ,               shift and go to state 341


state 329

    (178) return_val -> type_map ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 379
    ,               shift and go to state 341


state 330

    (179) return_val -> type_range ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 380
    ,               shift and go to state 341


state 331

    (180) return_val -> type_bad_struct ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 381
    ,               shift and go to state 341


state 332

    (181) return_val -> type_bad_struct2 ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 382
    ,               shift and go to state 341


state 333

    (61) lambda_decl -> lambda comma_separated_names : . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 383
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 334

    (80) for_decl -> for comma_separated_names operator_contains . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 384
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 335

    (83) operator_decl -> operator ( arguments . )
    (189) arguments -> arguments . , arguments

    )               shift and go to state 385
    ,               shift and go to state 341


state 336

    (86) func_decl -> func VAR ( . def_arguments )
    (87) def_arguments -> . declaration_stmt
    (88) def_arguments -> . declaration_stmt ; def_arguments
    (68) declaration_stmt -> . TYPE comma_separated_names
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    type_type       shift and go to state 208
    type_num        shift and go to state 209
    type_bool       shift and go to state 210
    type_any        shift and go to state 211
    type_u64        shift and go to state 212
    type_u32        shift and go to state 213
    type_u16        shift and go to state 214
    type_u8         shift and go to state 215
    type_i64        shift and go to state 216
    type_i32        shift and go to state 217
    type_i16        shift and go to state 218
    type_i8         shift and go to state 219
    type_f32        shift and go to state 220
    type_f64        shift and go to state 221
    type_str        shift and go to state 222
    type_list       shift and go to state 223
    type_tuple      shift and go to state 224
    type_array      shift and go to state 225
    type_vector     shift and go to state 226
    type_dict       shift and go to state 227
    type_generator  shift and go to state 228
    type_linked_list shift and go to state 229
    type_doubly_linked_list shift and go to state 230
    type_deque      shift and go to state 231
    type_heap       shift and go to state 232
    type_fibonacci_heap shift and go to state 233
    type_tree       shift and go to state 234
    type_trie       shift and go to state 235
    type_stack      shift and go to state 236
    type_queue      shift and go to state 237
    type_binary_search_tree shift and go to state 238
    type_bitset     shift and go to state 239
    type_set        shift and go to state 240
    type_map        shift and go to state 241
    type_range      shift and go to state 242
    type_bad_struct shift and go to state 243
    type_bad_struct2 shift and go to state 244

    def_arguments                  shift and go to state 386
    declaration_stmt               shift and go to state 387
    TYPE                           shift and go to state 388

state 337

    (123) expr -> expr expr operator_inner expr . expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 389
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 338

    (122) expr -> expr operator_outer expr expr .
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_sub    reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_join   reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_split  reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_bitand reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_bitor  reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_bitxor reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_bitshiftleft reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_bitshiftright reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_and    reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_or     reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_xor    reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_contains reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_outer  reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_less_than reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_less_than_equals reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_greater_than reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_greater_than_equals reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_equals reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_not_equals reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_smallest reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_greatest reduce using rule 122 (expr -> expr operator_outer expr expr .)
    [               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    (               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_not    reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_s_combinator reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_s2_combinator reduce using rule 122 (expr -> expr operator_outer expr expr .)
    VAR             reduce using rule 122 (expr -> expr operator_outer expr expr .)
    FLOAT           reduce using rule 122 (expr -> expr operator_outer expr expr .)
    NUM             reduce using rule 122 (expr -> expr operator_outer expr expr .)
    STRING_3SQ      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    STRING_3DQ      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    STRING_SQ       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    STRING_DQ       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    true            reduce using rule 122 (expr -> expr operator_outer expr expr .)
    Null            reduce using rule 122 (expr -> expr operator_outer expr expr .)
    false           reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_type       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_num        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_bool       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_any        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_u64        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_u32        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_u16        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_u8         reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_i64        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_i32        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_i16        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_i8         reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_f32        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_f64        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_str        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_list       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_tuple      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_array      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_vector     reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_dict       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_generator  reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_linked_list reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_doubly_linked_list reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_deque      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_heap       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_fibonacci_heap reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_tree       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_trie       reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_stack      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_queue      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_binary_search_tree reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_bitset     reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_set        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_map        reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_range      reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_bad_struct reduce using rule 122 (expr -> expr operator_outer expr expr .)
    type_bad_struct2 reduce using rule 122 (expr -> expr operator_outer expr expr .)
    lambda          reduce using rule 122 (expr -> expr operator_outer expr expr .)
    NEWLINE         reduce using rule 122 (expr -> expr operator_outer expr expr .)
    $end            reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_inner  reduce using rule 122 (expr -> expr operator_outer expr expr .)
    }               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    )               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    {               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    ]               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    :               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    ,               reduce using rule 122 (expr -> expr operator_outer expr expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_div    [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_trudiv [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_pow    [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_scan   [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_reduc  [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_incr   [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_decr   [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_rotate [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_apply  [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_compose [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_over   [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_map    [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_goodname [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_bitnot [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_reverse [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_goodname2 [ reduce using rule 122 (expr -> expr operator_outer expr expr .) ]
  ! operator_inner  [ shift and go to state 249 ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 339

    (55) item -> expr [ arguments ] .

    =               reduce using rule 55 (item -> expr [ arguments ] .)
    operator_add    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_sub    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_mul    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_div    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_trudiv reduce using rule 55 (item -> expr [ arguments ] .)
    operator_pow    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_join   reduce using rule 55 (item -> expr [ arguments ] .)
    operator_split  reduce using rule 55 (item -> expr [ arguments ] .)
    operator_scan   reduce using rule 55 (item -> expr [ arguments ] .)
    operator_reduc  reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitand reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitor  reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitxor reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitshiftleft reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitshiftright reduce using rule 55 (item -> expr [ arguments ] .)
    operator_and    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_or     reduce using rule 55 (item -> expr [ arguments ] .)
    operator_xor    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_contains reduce using rule 55 (item -> expr [ arguments ] .)
    operator_incr   reduce using rule 55 (item -> expr [ arguments ] .)
    operator_decr   reduce using rule 55 (item -> expr [ arguments ] .)
    operator_outer  reduce using rule 55 (item -> expr [ arguments ] .)
    operator_rotate reduce using rule 55 (item -> expr [ arguments ] .)
    operator_apply  reduce using rule 55 (item -> expr [ arguments ] .)
    operator_compose reduce using rule 55 (item -> expr [ arguments ] .)
    operator_over   reduce using rule 55 (item -> expr [ arguments ] .)
    operator_map    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_less_than reduce using rule 55 (item -> expr [ arguments ] .)
    operator_less_than_equals reduce using rule 55 (item -> expr [ arguments ] .)
    operator_greater_than reduce using rule 55 (item -> expr [ arguments ] .)
    operator_greater_than_equals reduce using rule 55 (item -> expr [ arguments ] .)
    operator_equals reduce using rule 55 (item -> expr [ arguments ] .)
    operator_not_equals reduce using rule 55 (item -> expr [ arguments ] .)
    operator_smallest reduce using rule 55 (item -> expr [ arguments ] .)
    operator_greatest reduce using rule 55 (item -> expr [ arguments ] .)
    operator_goodname reduce using rule 55 (item -> expr [ arguments ] .)
    [               reduce using rule 55 (item -> expr [ arguments ] .)
    (               reduce using rule 55 (item -> expr [ arguments ] .)
    operator_bitnot reduce using rule 55 (item -> expr [ arguments ] .)
    operator_not    reduce using rule 55 (item -> expr [ arguments ] .)
    operator_reverse reduce using rule 55 (item -> expr [ arguments ] .)
    operator_sorted_incr reduce using rule 55 (item -> expr [ arguments ] .)
    operator_sorted_decr reduce using rule 55 (item -> expr [ arguments ] .)
    operator_s_combinator reduce using rule 55 (item -> expr [ arguments ] .)
    operator_s2_combinator reduce using rule 55 (item -> expr [ arguments ] .)
    operator_goodname2 reduce using rule 55 (item -> expr [ arguments ] .)
    VAR             reduce using rule 55 (item -> expr [ arguments ] .)
    FLOAT           reduce using rule 55 (item -> expr [ arguments ] .)
    NUM             reduce using rule 55 (item -> expr [ arguments ] .)
    STRING_3SQ      reduce using rule 55 (item -> expr [ arguments ] .)
    STRING_3DQ      reduce using rule 55 (item -> expr [ arguments ] .)
    STRING_SQ       reduce using rule 55 (item -> expr [ arguments ] .)
    STRING_DQ       reduce using rule 55 (item -> expr [ arguments ] .)
    true            reduce using rule 55 (item -> expr [ arguments ] .)
    Null            reduce using rule 55 (item -> expr [ arguments ] .)
    false           reduce using rule 55 (item -> expr [ arguments ] .)
    type_type       reduce using rule 55 (item -> expr [ arguments ] .)
    type_num        reduce using rule 55 (item -> expr [ arguments ] .)
    type_bool       reduce using rule 55 (item -> expr [ arguments ] .)
    type_any        reduce using rule 55 (item -> expr [ arguments ] .)
    type_u64        reduce using rule 55 (item -> expr [ arguments ] .)
    type_u32        reduce using rule 55 (item -> expr [ arguments ] .)
    type_u16        reduce using rule 55 (item -> expr [ arguments ] .)
    type_u8         reduce using rule 55 (item -> expr [ arguments ] .)
    type_i64        reduce using rule 55 (item -> expr [ arguments ] .)
    type_i32        reduce using rule 55 (item -> expr [ arguments ] .)
    type_i16        reduce using rule 55 (item -> expr [ arguments ] .)
    type_i8         reduce using rule 55 (item -> expr [ arguments ] .)
    type_f32        reduce using rule 55 (item -> expr [ arguments ] .)
    type_f64        reduce using rule 55 (item -> expr [ arguments ] .)
    type_str        reduce using rule 55 (item -> expr [ arguments ] .)
    type_list       reduce using rule 55 (item -> expr [ arguments ] .)
    type_tuple      reduce using rule 55 (item -> expr [ arguments ] .)
    type_array      reduce using rule 55 (item -> expr [ arguments ] .)
    type_vector     reduce using rule 55 (item -> expr [ arguments ] .)
    type_dict       reduce using rule 55 (item -> expr [ arguments ] .)
    type_generator  reduce using rule 55 (item -> expr [ arguments ] .)
    type_linked_list reduce using rule 55 (item -> expr [ arguments ] .)
    type_doubly_linked_list reduce using rule 55 (item -> expr [ arguments ] .)
    type_deque      reduce using rule 55 (item -> expr [ arguments ] .)
    type_heap       reduce using rule 55 (item -> expr [ arguments ] .)
    type_fibonacci_heap reduce using rule 55 (item -> expr [ arguments ] .)
    type_tree       reduce using rule 55 (item -> expr [ arguments ] .)
    type_trie       reduce using rule 55 (item -> expr [ arguments ] .)
    type_stack      reduce using rule 55 (item -> expr [ arguments ] .)
    type_queue      reduce using rule 55 (item -> expr [ arguments ] .)
    type_binary_search_tree reduce using rule 55 (item -> expr [ arguments ] .)
    type_bitset     reduce using rule 55 (item -> expr [ arguments ] .)
    type_set        reduce using rule 55 (item -> expr [ arguments ] .)
    type_map        reduce using rule 55 (item -> expr [ arguments ] .)
    type_range      reduce using rule 55 (item -> expr [ arguments ] .)
    type_bad_struct reduce using rule 55 (item -> expr [ arguments ] .)
    type_bad_struct2 reduce using rule 55 (item -> expr [ arguments ] .)
    lambda          reduce using rule 55 (item -> expr [ arguments ] .)
    NEWLINE         reduce using rule 55 (item -> expr [ arguments ] .)
    $end            reduce using rule 55 (item -> expr [ arguments ] .)
    operator_inner  reduce using rule 55 (item -> expr [ arguments ] .)
    }               reduce using rule 55 (item -> expr [ arguments ] .)
    )               reduce using rule 55 (item -> expr [ arguments ] .)
    {               reduce using rule 55 (item -> expr [ arguments ] .)
    ]               reduce using rule 55 (item -> expr [ arguments ] .)
    :               reduce using rule 55 (item -> expr [ arguments ] .)
    ,               reduce using rule 55 (item -> expr [ arguments ] .)


state 340

    (56) simple_slice -> expr [ arguments : . arguments ]
    (57) full_slice -> expr [ arguments : . arguments : arguments ]
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    ]               reduce using rule 187 (empty -> .)
    :               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 283
    arguments                      shift and go to state 390
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 341

    (189) arguments -> arguments , . arguments
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    ,               reduce using rule 187 (empty -> .)
    ]               reduce using rule 187 (empty -> .)
    :               reduce using rule 187 (empty -> .)
    )               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    arguments                      shift and go to state 391
    expr                           shift and go to state 283
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 342

    (71) block_stmt -> block_decl { stmts } .

    NEWLINE         reduce using rule 71 (block_stmt -> block_decl { stmts } .)
    $end            reduce using rule 71 (block_stmt -> block_decl { stmts } .)
    }               reduce using rule 71 (block_stmt -> block_decl { stmts } .)


state 343

    (141) expr -> operator_s_combinator expr expr expr .
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_or     reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_xor    reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_contains reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_less_than reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_less_than_equals reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_greater_than reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_greater_than_equals reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_equals reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_not_equals reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_smallest reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_greatest reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    [               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    (               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_not    reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_s_combinator reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_s2_combinator reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    VAR             reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    FLOAT           reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    NUM             reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    STRING_3SQ      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    STRING_3DQ      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    STRING_SQ       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    STRING_DQ       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    true            reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    Null            reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    false           reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_type       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_num        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_bool       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_any        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_u64        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_u32        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_u16        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_u8         reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_i64        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_i32        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_i16        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_i8         reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_f32        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_f64        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_str        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_list       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_tuple      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_array      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_vector     reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_dict       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_generator  reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_linked_list reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_doubly_linked_list reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_deque      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_heap       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_fibonacci_heap reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_tree       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_trie       reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_stack      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_queue      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_binary_search_tree reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_bitset     reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_set        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_map        reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_range      reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_bad_struct reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    type_bad_struct2 reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    lambda          reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    NEWLINE         reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    $end            reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    }               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    )               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    {               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    ]               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    :               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    ,               reduce using rule 141 (expr -> operator_s_combinator expr expr expr .)
    operator_inner  shift and go to state 249
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sub    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_mul    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_div    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_trudiv [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_pow    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_join   [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_split  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_scan   [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reduc  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitand [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitor  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitxor [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_incr   [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_decr   [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_outer  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_rotate [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_apply  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_compose [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_over   [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_map    [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitnot [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reverse [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname2 [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_inner  [ reduce using rule 141 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 344

    (142) expr -> operator_s2_combinator expr expr expr .
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_and    reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_or     reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_xor    reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_contains reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_less_than reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_less_than_equals reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_greater_than reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_greater_than_equals reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_equals reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_not_equals reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_smallest reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_greatest reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    [               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    (               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_not    reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_s_combinator reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_s2_combinator reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    VAR             reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    FLOAT           reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    NUM             reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    STRING_3SQ      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    STRING_3DQ      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    STRING_SQ       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    STRING_DQ       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    true            reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    Null            reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    false           reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_type       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_num        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_bool       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_any        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_u64        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_u32        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_u16        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_u8         reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_i64        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_i32        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_i16        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_i8         reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_f32        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_f64        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_str        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_list       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_tuple      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_array      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_vector     reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_dict       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_generator  reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_linked_list reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_doubly_linked_list reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_deque      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_heap       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_fibonacci_heap reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_tree       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_trie       reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_stack      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_queue      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_binary_search_tree reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_bitset     reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_set        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_map        reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_range      reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_bad_struct reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    type_bad_struct2 reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    lambda          reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    NEWLINE         reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    $end            reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    }               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    )               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    {               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    ]               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    :               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    ,               reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .)
    operator_inner  shift and go to state 249
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_add    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sub    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_mul    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_div    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_trudiv [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_pow    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_join   [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_split  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_scan   [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_reduc  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitand [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitor  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitxor [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_incr   [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_decr   [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_outer  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_rotate [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_apply  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_compose [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_over   [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_map    [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_goodname [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_bitnot [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_reverse [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_goodname2 [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_inner  [ reduce using rule 142 (expr -> operator_s2_combinator expr expr expr .) ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 345

    (182) return_val -> VAR ( arguments ) .

    operator_add    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_sub    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_mul    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_div    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_trudiv reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_pow    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_join   reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_split  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_scan   reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_reduc  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitand reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitor  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitxor reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitshiftleft reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitshiftright reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_and    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_or     reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_xor    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_contains reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_incr   reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_decr   reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_outer  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_rotate reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_apply  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_compose reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_over   reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_map    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_less_than reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_less_than_equals reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_greater_than reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_greater_than_equals reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_equals reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_not_equals reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_smallest reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_greatest reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_goodname reduce using rule 182 (return_val -> VAR ( arguments ) .)
    [               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    (               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_bitnot reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_not    reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_reverse reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_sorted_incr reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_sorted_decr reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_s_combinator reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_s2_combinator reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_goodname2 reduce using rule 182 (return_val -> VAR ( arguments ) .)
    VAR             reduce using rule 182 (return_val -> VAR ( arguments ) .)
    FLOAT           reduce using rule 182 (return_val -> VAR ( arguments ) .)
    NUM             reduce using rule 182 (return_val -> VAR ( arguments ) .)
    STRING_3SQ      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    STRING_3DQ      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    STRING_SQ       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    STRING_DQ       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    true            reduce using rule 182 (return_val -> VAR ( arguments ) .)
    Null            reduce using rule 182 (return_val -> VAR ( arguments ) .)
    false           reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_type       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_num        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_bool       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_any        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_u64        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_u32        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_u16        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_u8         reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_i64        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_i32        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_i16        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_i8         reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_f32        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_f64        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_str        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_list       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_tuple      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_array      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_vector     reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_dict       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_generator  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_linked_list reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_doubly_linked_list reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_deque      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_heap       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_fibonacci_heap reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_tree       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_trie       reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_stack      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_queue      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_binary_search_tree reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_bitset     reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_set        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_map        reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_range      reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_bad_struct reduce using rule 182 (return_val -> VAR ( arguments ) .)
    type_bad_struct2 reduce using rule 182 (return_val -> VAR ( arguments ) .)
    lambda          reduce using rule 182 (return_val -> VAR ( arguments ) .)
    NEWLINE         reduce using rule 182 (return_val -> VAR ( arguments ) .)
    $end            reduce using rule 182 (return_val -> VAR ( arguments ) .)
    operator_inner  reduce using rule 182 (return_val -> VAR ( arguments ) .)
    }               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    )               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    {               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    ]               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    :               reduce using rule 182 (return_val -> VAR ( arguments ) .)
    ,               reduce using rule 182 (return_val -> VAR ( arguments ) .)


state 346

    (145) return_val -> type_type ( arguments ) .

    operator_add    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_sub    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_mul    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_div    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_trudiv reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_pow    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_join   reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_split  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_scan   reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_reduc  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitand reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitor  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitxor reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitshiftleft reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitshiftright reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_and    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_or     reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_xor    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_contains reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_incr   reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_decr   reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_outer  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_rotate reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_apply  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_compose reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_over   reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_map    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_less_than reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_less_than_equals reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_greater_than reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_greater_than_equals reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_equals reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_not_equals reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_smallest reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_greatest reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_goodname reduce using rule 145 (return_val -> type_type ( arguments ) .)
    [               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    (               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_bitnot reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_not    reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_reverse reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_sorted_incr reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_sorted_decr reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_s_combinator reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_s2_combinator reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_goodname2 reduce using rule 145 (return_val -> type_type ( arguments ) .)
    VAR             reduce using rule 145 (return_val -> type_type ( arguments ) .)
    FLOAT           reduce using rule 145 (return_val -> type_type ( arguments ) .)
    NUM             reduce using rule 145 (return_val -> type_type ( arguments ) .)
    STRING_3SQ      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    STRING_3DQ      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    STRING_SQ       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    STRING_DQ       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    true            reduce using rule 145 (return_val -> type_type ( arguments ) .)
    Null            reduce using rule 145 (return_val -> type_type ( arguments ) .)
    false           reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_type       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_num        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_bool       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_any        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_u64        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_u32        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_u16        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_u8         reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_i64        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_i32        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_i16        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_i8         reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_f32        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_f64        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_str        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_list       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_tuple      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_array      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_vector     reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_dict       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_generator  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_linked_list reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_doubly_linked_list reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_deque      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_heap       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_fibonacci_heap reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_tree       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_trie       reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_stack      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_queue      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_binary_search_tree reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_bitset     reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_set        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_map        reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_range      reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_bad_struct reduce using rule 145 (return_val -> type_type ( arguments ) .)
    type_bad_struct2 reduce using rule 145 (return_val -> type_type ( arguments ) .)
    lambda          reduce using rule 145 (return_val -> type_type ( arguments ) .)
    NEWLINE         reduce using rule 145 (return_val -> type_type ( arguments ) .)
    $end            reduce using rule 145 (return_val -> type_type ( arguments ) .)
    operator_inner  reduce using rule 145 (return_val -> type_type ( arguments ) .)
    }               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    )               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    {               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    ]               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    :               reduce using rule 145 (return_val -> type_type ( arguments ) .)
    ,               reduce using rule 145 (return_val -> type_type ( arguments ) .)


state 347

    (146) return_val -> type_num ( arguments ) .

    operator_add    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_sub    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_mul    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_div    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_trudiv reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_pow    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_join   reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_split  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_scan   reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_reduc  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitand reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitor  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitxor reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitshiftleft reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitshiftright reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_and    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_or     reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_xor    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_contains reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_incr   reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_decr   reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_outer  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_rotate reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_apply  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_compose reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_over   reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_map    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_less_than reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_less_than_equals reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_greater_than reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_greater_than_equals reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_equals reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_not_equals reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_smallest reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_greatest reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_goodname reduce using rule 146 (return_val -> type_num ( arguments ) .)
    [               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    (               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_bitnot reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_not    reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_reverse reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_sorted_incr reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_sorted_decr reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_s_combinator reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_s2_combinator reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_goodname2 reduce using rule 146 (return_val -> type_num ( arguments ) .)
    VAR             reduce using rule 146 (return_val -> type_num ( arguments ) .)
    FLOAT           reduce using rule 146 (return_val -> type_num ( arguments ) .)
    NUM             reduce using rule 146 (return_val -> type_num ( arguments ) .)
    STRING_3SQ      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    STRING_3DQ      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    STRING_SQ       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    STRING_DQ       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    true            reduce using rule 146 (return_val -> type_num ( arguments ) .)
    Null            reduce using rule 146 (return_val -> type_num ( arguments ) .)
    false           reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_type       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_num        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_bool       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_any        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_u64        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_u32        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_u16        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_u8         reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_i64        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_i32        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_i16        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_i8         reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_f32        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_f64        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_str        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_list       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_tuple      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_array      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_vector     reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_dict       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_generator  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_linked_list reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_doubly_linked_list reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_deque      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_heap       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_fibonacci_heap reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_tree       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_trie       reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_stack      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_queue      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_binary_search_tree reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_bitset     reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_set        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_map        reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_range      reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_bad_struct reduce using rule 146 (return_val -> type_num ( arguments ) .)
    type_bad_struct2 reduce using rule 146 (return_val -> type_num ( arguments ) .)
    lambda          reduce using rule 146 (return_val -> type_num ( arguments ) .)
    NEWLINE         reduce using rule 146 (return_val -> type_num ( arguments ) .)
    $end            reduce using rule 146 (return_val -> type_num ( arguments ) .)
    operator_inner  reduce using rule 146 (return_val -> type_num ( arguments ) .)
    }               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    )               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    {               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    ]               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    :               reduce using rule 146 (return_val -> type_num ( arguments ) .)
    ,               reduce using rule 146 (return_val -> type_num ( arguments ) .)


state 348

    (147) return_val -> type_bool ( arguments ) .

    operator_add    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_sub    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_mul    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_div    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_trudiv reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_pow    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_join   reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_split  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_scan   reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_reduc  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitand reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitor  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitxor reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftleft reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftright reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_and    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_or     reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_xor    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_contains reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_incr   reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_decr   reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_outer  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_rotate reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_apply  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_compose reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_over   reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_map    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_less_than reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_less_than_equals reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_greater_than reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_greater_than_equals reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_equals reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_not_equals reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_smallest reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_greatest reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_goodname reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    [               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    (               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_bitnot reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_not    reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_reverse reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_sorted_incr reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_sorted_decr reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_s_combinator reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_s2_combinator reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_goodname2 reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    VAR             reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    FLOAT           reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    NUM             reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    STRING_3SQ      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    STRING_3DQ      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    STRING_SQ       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    STRING_DQ       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    true            reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    Null            reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    false           reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_type       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_num        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_bool       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_any        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_u64        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_u32        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_u16        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_u8         reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_i64        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_i32        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_i16        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_i8         reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_f32        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_f64        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_str        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_list       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_tuple      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_array      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_vector     reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_dict       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_generator  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_linked_list reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_doubly_linked_list reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_deque      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_heap       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_fibonacci_heap reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_tree       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_trie       reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_stack      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_queue      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_binary_search_tree reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_bitset     reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_set        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_map        reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_range      reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_bad_struct reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    type_bad_struct2 reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    lambda          reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    NEWLINE         reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    $end            reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    operator_inner  reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    }               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    )               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    {               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    ]               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    :               reduce using rule 147 (return_val -> type_bool ( arguments ) .)
    ,               reduce using rule 147 (return_val -> type_bool ( arguments ) .)


state 349

    (148) return_val -> type_any ( arguments ) .

    operator_add    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_sub    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_mul    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_div    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_trudiv reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_pow    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_join   reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_split  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_scan   reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_reduc  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitand reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitor  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitxor reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitshiftleft reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitshiftright reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_and    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_or     reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_xor    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_contains reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_incr   reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_decr   reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_outer  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_rotate reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_apply  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_compose reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_over   reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_map    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_less_than reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_less_than_equals reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_greater_than reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_greater_than_equals reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_equals reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_not_equals reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_smallest reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_greatest reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_goodname reduce using rule 148 (return_val -> type_any ( arguments ) .)
    [               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    (               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_bitnot reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_not    reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_reverse reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_sorted_incr reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_sorted_decr reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_s_combinator reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_s2_combinator reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_goodname2 reduce using rule 148 (return_val -> type_any ( arguments ) .)
    VAR             reduce using rule 148 (return_val -> type_any ( arguments ) .)
    FLOAT           reduce using rule 148 (return_val -> type_any ( arguments ) .)
    NUM             reduce using rule 148 (return_val -> type_any ( arguments ) .)
    STRING_3SQ      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    STRING_3DQ      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    STRING_SQ       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    STRING_DQ       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    true            reduce using rule 148 (return_val -> type_any ( arguments ) .)
    Null            reduce using rule 148 (return_val -> type_any ( arguments ) .)
    false           reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_type       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_num        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_bool       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_any        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_u64        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_u32        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_u16        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_u8         reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_i64        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_i32        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_i16        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_i8         reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_f32        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_f64        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_str        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_list       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_tuple      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_array      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_vector     reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_dict       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_generator  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_linked_list reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_doubly_linked_list reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_deque      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_heap       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_fibonacci_heap reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_tree       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_trie       reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_stack      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_queue      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_binary_search_tree reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_bitset     reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_set        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_map        reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_range      reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_bad_struct reduce using rule 148 (return_val -> type_any ( arguments ) .)
    type_bad_struct2 reduce using rule 148 (return_val -> type_any ( arguments ) .)
    lambda          reduce using rule 148 (return_val -> type_any ( arguments ) .)
    NEWLINE         reduce using rule 148 (return_val -> type_any ( arguments ) .)
    $end            reduce using rule 148 (return_val -> type_any ( arguments ) .)
    operator_inner  reduce using rule 148 (return_val -> type_any ( arguments ) .)
    }               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    )               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    {               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    ]               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    :               reduce using rule 148 (return_val -> type_any ( arguments ) .)
    ,               reduce using rule 148 (return_val -> type_any ( arguments ) .)


state 350

    (149) return_val -> type_u64 ( arguments ) .

    operator_add    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_sub    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_mul    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_div    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_trudiv reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_pow    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_join   reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_split  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_scan   reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_reduc  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitand reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitor  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitxor reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftright reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_and    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_or     reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_xor    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_contains reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_incr   reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_decr   reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_outer  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_rotate reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_apply  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_compose reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_over   reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_map    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_less_than reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_less_than_equals reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_equals reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_not_equals reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_smallest reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_greatest reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_goodname reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    [               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    (               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_bitnot reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_not    reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_reverse reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_incr reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_decr reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_s_combinator reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_s2_combinator reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_goodname2 reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    VAR             reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    FLOAT           reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    NUM             reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    STRING_3SQ      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    STRING_3DQ      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    STRING_SQ       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    STRING_DQ       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    true            reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    Null            reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    false           reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_type       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_num        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_bool       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_any        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_u64        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_u32        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_u16        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_u8         reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_i64        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_i32        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_i16        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_i8         reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_f32        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_f64        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_str        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_list       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_tuple      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_array      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_vector     reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_dict       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_generator  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_linked_list reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_deque      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_heap       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_tree       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_trie       reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_stack      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_queue      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_binary_search_tree reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_bitset     reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_set        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_map        reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_range      reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct2 reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    lambda          reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    NEWLINE         reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    $end            reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    operator_inner  reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    }               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    )               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    {               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    ]               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    :               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)
    ,               reduce using rule 149 (return_val -> type_u64 ( arguments ) .)


state 351

    (150) return_val -> type_u32 ( arguments ) .

    operator_add    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_sub    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_mul    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_div    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_trudiv reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_pow    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_join   reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_split  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_scan   reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_reduc  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitand reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitor  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitxor reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftright reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_and    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_or     reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_xor    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_contains reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_incr   reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_decr   reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_outer  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_rotate reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_apply  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_compose reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_over   reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_map    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_less_than reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_less_than_equals reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_equals reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_not_equals reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_smallest reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_greatest reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_goodname reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    [               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    (               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_bitnot reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_not    reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_reverse reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_incr reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_decr reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_s_combinator reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_s2_combinator reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_goodname2 reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    VAR             reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    FLOAT           reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    NUM             reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    STRING_3SQ      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    STRING_3DQ      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    STRING_SQ       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    STRING_DQ       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    true            reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    Null            reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    false           reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_type       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_num        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_bool       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_any        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_u64        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_u32        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_u16        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_u8         reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_i64        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_i32        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_i16        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_i8         reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_f32        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_f64        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_str        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_list       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_tuple      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_array      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_vector     reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_dict       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_generator  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_linked_list reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_deque      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_heap       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_tree       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_trie       reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_stack      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_queue      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_binary_search_tree reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_bitset     reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_set        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_map        reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_range      reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct2 reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    lambda          reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    NEWLINE         reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    $end            reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    operator_inner  reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    }               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    )               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    {               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    ]               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    :               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)
    ,               reduce using rule 150 (return_val -> type_u32 ( arguments ) .)


state 352

    (151) return_val -> type_u16 ( arguments ) .

    operator_add    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_sub    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_mul    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_div    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_trudiv reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_pow    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_join   reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_split  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_scan   reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_reduc  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitand reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitor  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitxor reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftright reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_and    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_or     reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_xor    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_contains reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_incr   reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_decr   reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_outer  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_rotate reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_apply  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_compose reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_over   reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_map    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_less_than reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_less_than_equals reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_equals reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_not_equals reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_smallest reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_greatest reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_goodname reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    [               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    (               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_bitnot reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_not    reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_reverse reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_incr reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_decr reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_s_combinator reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_s2_combinator reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_goodname2 reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    VAR             reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    FLOAT           reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    NUM             reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    STRING_3SQ      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    STRING_3DQ      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    STRING_SQ       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    STRING_DQ       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    true            reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    Null            reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    false           reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_type       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_num        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_bool       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_any        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_u64        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_u32        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_u16        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_u8         reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_i64        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_i32        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_i16        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_i8         reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_f32        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_f64        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_str        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_list       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_tuple      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_array      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_vector     reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_dict       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_generator  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_linked_list reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_deque      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_heap       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_tree       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_trie       reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_stack      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_queue      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_binary_search_tree reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_bitset     reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_set        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_map        reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_range      reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct2 reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    lambda          reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    NEWLINE         reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    $end            reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    operator_inner  reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    }               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    )               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    {               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    ]               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    :               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)
    ,               reduce using rule 151 (return_val -> type_u16 ( arguments ) .)


state 353

    (152) return_val -> type_u8 ( arguments ) .

    operator_add    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_sub    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_mul    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_div    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_trudiv reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_pow    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_join   reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_split  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_scan   reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_reduc  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitand reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitor  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitxor reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftright reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_and    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_or     reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_xor    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_contains reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_incr   reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_decr   reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_outer  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_rotate reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_apply  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_compose reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_over   reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_map    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_less_than reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_less_than_equals reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_equals reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_not_equals reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_smallest reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_greatest reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_goodname reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    [               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    (               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_bitnot reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_not    reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_reverse reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_incr reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_decr reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_s_combinator reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_s2_combinator reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_goodname2 reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    VAR             reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    FLOAT           reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    NUM             reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    STRING_3SQ      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    STRING_3DQ      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    STRING_SQ       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    STRING_DQ       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    true            reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    Null            reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    false           reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_type       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_num        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_bool       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_any        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_u64        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_u32        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_u16        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_u8         reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_i64        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_i32        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_i16        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_i8         reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_f32        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_f64        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_str        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_list       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_tuple      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_array      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_vector     reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_dict       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_generator  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_linked_list reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_deque      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_heap       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_tree       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_trie       reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_stack      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_queue      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_binary_search_tree reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_bitset     reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_set        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_map        reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_range      reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct2 reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    lambda          reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    NEWLINE         reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    $end            reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    operator_inner  reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    }               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    )               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    {               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    ]               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    :               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)
    ,               reduce using rule 152 (return_val -> type_u8 ( arguments ) .)


state 354

    (153) return_val -> type_i64 ( arguments ) .

    operator_add    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_sub    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_mul    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_div    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_trudiv reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_pow    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_join   reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_split  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_scan   reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_reduc  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitand reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitor  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitxor reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftright reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_and    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_or     reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_xor    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_contains reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_incr   reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_decr   reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_outer  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_rotate reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_apply  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_compose reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_over   reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_map    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_less_than reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_less_than_equals reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_equals reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_not_equals reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_smallest reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_greatest reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_goodname reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    [               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    (               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_bitnot reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_not    reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_reverse reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_incr reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_decr reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_s_combinator reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_s2_combinator reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_goodname2 reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    VAR             reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    FLOAT           reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    NUM             reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    STRING_3SQ      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    STRING_3DQ      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    STRING_SQ       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    STRING_DQ       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    true            reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    Null            reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    false           reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_type       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_num        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_bool       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_any        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_u64        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_u32        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_u16        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_u8         reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_i64        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_i32        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_i16        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_i8         reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_f32        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_f64        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_str        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_list       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_tuple      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_array      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_vector     reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_dict       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_generator  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_linked_list reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_deque      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_heap       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_tree       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_trie       reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_stack      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_queue      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_binary_search_tree reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_bitset     reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_set        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_map        reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_range      reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct2 reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    lambda          reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    NEWLINE         reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    $end            reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    operator_inner  reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    }               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    )               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    {               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    ]               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    :               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)
    ,               reduce using rule 153 (return_val -> type_i64 ( arguments ) .)


state 355

    (154) return_val -> type_i32 ( arguments ) .

    operator_add    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_sub    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_mul    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_div    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_trudiv reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_pow    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_join   reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_split  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_scan   reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_reduc  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitand reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitor  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitxor reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftright reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_and    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_or     reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_xor    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_contains reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_incr   reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_decr   reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_outer  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_rotate reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_apply  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_compose reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_over   reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_map    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_less_than reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_less_than_equals reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_equals reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_not_equals reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_smallest reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_greatest reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_goodname reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    [               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    (               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_bitnot reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_not    reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_reverse reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_incr reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_decr reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_s_combinator reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_s2_combinator reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_goodname2 reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    VAR             reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    FLOAT           reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    NUM             reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    STRING_3SQ      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    STRING_3DQ      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    STRING_SQ       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    STRING_DQ       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    true            reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    Null            reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    false           reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_type       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_num        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_bool       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_any        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_u64        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_u32        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_u16        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_u8         reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_i64        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_i32        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_i16        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_i8         reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_f32        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_f64        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_str        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_list       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_tuple      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_array      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_vector     reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_dict       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_generator  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_linked_list reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_deque      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_heap       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_tree       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_trie       reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_stack      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_queue      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_binary_search_tree reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_bitset     reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_set        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_map        reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_range      reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct2 reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    lambda          reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    NEWLINE         reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    $end            reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    operator_inner  reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    }               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    )               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    {               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    ]               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    :               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)
    ,               reduce using rule 154 (return_val -> type_i32 ( arguments ) .)


state 356

    (155) return_val -> type_i16 ( arguments ) .

    operator_add    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_sub    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_mul    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_div    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_trudiv reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_pow    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_join   reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_split  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_scan   reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_reduc  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitand reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitor  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitxor reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftright reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_and    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_or     reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_xor    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_contains reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_incr   reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_decr   reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_outer  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_rotate reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_apply  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_compose reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_over   reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_map    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_less_than reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_less_than_equals reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_equals reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_not_equals reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_smallest reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_greatest reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_goodname reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    [               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    (               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_bitnot reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_not    reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_reverse reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_incr reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_decr reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_s_combinator reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_s2_combinator reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_goodname2 reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    VAR             reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    FLOAT           reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    NUM             reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    STRING_3SQ      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    STRING_3DQ      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    STRING_SQ       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    STRING_DQ       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    true            reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    Null            reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    false           reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_type       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_num        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_bool       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_any        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_u64        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_u32        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_u16        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_u8         reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_i64        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_i32        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_i16        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_i8         reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_f32        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_f64        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_str        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_list       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_tuple      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_array      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_vector     reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_dict       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_generator  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_linked_list reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_deque      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_heap       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_tree       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_trie       reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_stack      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_queue      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_binary_search_tree reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_bitset     reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_set        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_map        reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_range      reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct2 reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    lambda          reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    NEWLINE         reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    $end            reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    operator_inner  reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    }               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    )               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    {               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    ]               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    :               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)
    ,               reduce using rule 155 (return_val -> type_i16 ( arguments ) .)


state 357

    (156) return_val -> type_i8 ( arguments ) .

    operator_add    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_sub    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_mul    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_div    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_trudiv reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_pow    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_join   reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_split  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_scan   reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_reduc  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitand reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitor  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitxor reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftright reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_and    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_or     reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_xor    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_contains reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_incr   reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_decr   reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_outer  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_rotate reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_apply  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_compose reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_over   reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_map    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_less_than reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_less_than_equals reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_equals reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_not_equals reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_smallest reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_greatest reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_goodname reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    [               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    (               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_bitnot reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_not    reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_reverse reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_incr reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_decr reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_s_combinator reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_s2_combinator reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_goodname2 reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    VAR             reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    FLOAT           reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    NUM             reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    STRING_3SQ      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    STRING_3DQ      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    STRING_SQ       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    STRING_DQ       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    true            reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    Null            reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    false           reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_type       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_num        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_bool       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_any        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_u64        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_u32        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_u16        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_u8         reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_i64        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_i32        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_i16        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_i8         reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_f32        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_f64        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_str        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_list       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_tuple      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_array      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_vector     reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_dict       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_generator  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_linked_list reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_deque      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_heap       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_tree       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_trie       reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_stack      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_queue      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_binary_search_tree reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_bitset     reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_set        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_map        reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_range      reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct2 reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    lambda          reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    NEWLINE         reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    $end            reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    operator_inner  reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    }               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    )               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    {               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    ]               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    :               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)
    ,               reduce using rule 156 (return_val -> type_i8 ( arguments ) .)


state 358

    (157) return_val -> type_f32 ( arguments ) .

    operator_add    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_sub    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_mul    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_div    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_trudiv reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_pow    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_join   reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_split  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_scan   reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_reduc  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitand reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitor  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitxor reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftright reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_and    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_or     reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_xor    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_contains reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_incr   reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_decr   reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_outer  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_rotate reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_apply  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_compose reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_over   reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_map    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_less_than reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_less_than_equals reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_equals reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_not_equals reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_smallest reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_greatest reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_goodname reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    [               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    (               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_bitnot reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_not    reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_reverse reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_incr reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_decr reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_s_combinator reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_s2_combinator reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_goodname2 reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    VAR             reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    FLOAT           reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    NUM             reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    STRING_3SQ      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    STRING_3DQ      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    STRING_SQ       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    STRING_DQ       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    true            reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    Null            reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    false           reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_type       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_num        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_bool       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_any        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_u64        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_u32        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_u16        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_u8         reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_i64        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_i32        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_i16        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_i8         reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_f32        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_f64        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_str        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_list       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_tuple      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_array      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_vector     reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_dict       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_generator  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_linked_list reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_deque      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_heap       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_tree       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_trie       reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_stack      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_queue      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_binary_search_tree reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_bitset     reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_set        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_map        reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_range      reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct2 reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    lambda          reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    NEWLINE         reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    $end            reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    operator_inner  reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    }               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    )               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    {               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    ]               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    :               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)
    ,               reduce using rule 157 (return_val -> type_f32 ( arguments ) .)


state 359

    (158) return_val -> type_f64 ( arguments ) .

    operator_add    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_sub    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_mul    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_div    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_trudiv reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_pow    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_join   reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_split  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_scan   reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_reduc  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitand reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitor  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitxor reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftright reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_and    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_or     reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_xor    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_contains reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_incr   reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_decr   reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_outer  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_rotate reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_apply  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_compose reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_over   reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_map    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_less_than reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_less_than_equals reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_equals reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_not_equals reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_smallest reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_greatest reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_goodname reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    [               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    (               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_bitnot reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_not    reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_reverse reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_incr reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_decr reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_s_combinator reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_s2_combinator reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_goodname2 reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    VAR             reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    FLOAT           reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    NUM             reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    STRING_3SQ      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    STRING_3DQ      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    STRING_SQ       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    STRING_DQ       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    true            reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    Null            reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    false           reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_type       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_num        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_bool       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_any        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_u64        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_u32        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_u16        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_u8         reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_i64        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_i32        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_i16        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_i8         reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_f32        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_f64        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_str        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_list       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_tuple      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_array      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_vector     reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_dict       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_generator  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_linked_list reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_deque      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_heap       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_tree       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_trie       reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_stack      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_queue      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_binary_search_tree reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_bitset     reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_set        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_map        reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_range      reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct2 reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    lambda          reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    NEWLINE         reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    $end            reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    operator_inner  reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    }               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    )               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    {               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    ]               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    :               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)
    ,               reduce using rule 158 (return_val -> type_f64 ( arguments ) .)


state 360

    (159) return_val -> type_str ( arguments ) .

    operator_add    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_sub    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_mul    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_div    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_trudiv reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_pow    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_join   reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_split  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_scan   reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_reduc  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitand reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitor  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitxor reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitshiftleft reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitshiftright reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_and    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_or     reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_xor    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_contains reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_incr   reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_decr   reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_outer  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_rotate reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_apply  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_compose reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_over   reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_map    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_less_than reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_less_than_equals reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_greater_than reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_greater_than_equals reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_equals reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_not_equals reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_smallest reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_greatest reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_goodname reduce using rule 159 (return_val -> type_str ( arguments ) .)
    [               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    (               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_bitnot reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_not    reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_reverse reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_sorted_incr reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_sorted_decr reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_s_combinator reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_s2_combinator reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_goodname2 reduce using rule 159 (return_val -> type_str ( arguments ) .)
    VAR             reduce using rule 159 (return_val -> type_str ( arguments ) .)
    FLOAT           reduce using rule 159 (return_val -> type_str ( arguments ) .)
    NUM             reduce using rule 159 (return_val -> type_str ( arguments ) .)
    STRING_3SQ      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    STRING_3DQ      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    STRING_SQ       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    STRING_DQ       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    true            reduce using rule 159 (return_val -> type_str ( arguments ) .)
    Null            reduce using rule 159 (return_val -> type_str ( arguments ) .)
    false           reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_type       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_num        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_bool       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_any        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_u64        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_u32        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_u16        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_u8         reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_i64        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_i32        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_i16        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_i8         reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_f32        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_f64        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_str        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_list       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_tuple      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_array      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_vector     reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_dict       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_generator  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_linked_list reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_doubly_linked_list reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_deque      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_heap       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_fibonacci_heap reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_tree       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_trie       reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_stack      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_queue      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_binary_search_tree reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_bitset     reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_set        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_map        reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_range      reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_bad_struct reduce using rule 159 (return_val -> type_str ( arguments ) .)
    type_bad_struct2 reduce using rule 159 (return_val -> type_str ( arguments ) .)
    lambda          reduce using rule 159 (return_val -> type_str ( arguments ) .)
    NEWLINE         reduce using rule 159 (return_val -> type_str ( arguments ) .)
    $end            reduce using rule 159 (return_val -> type_str ( arguments ) .)
    operator_inner  reduce using rule 159 (return_val -> type_str ( arguments ) .)
    }               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    )               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    {               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    ]               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    :               reduce using rule 159 (return_val -> type_str ( arguments ) .)
    ,               reduce using rule 159 (return_val -> type_str ( arguments ) .)


state 361

    (160) return_val -> type_list ( arguments ) .

    operator_add    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_sub    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_mul    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_div    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_trudiv reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_pow    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_join   reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_split  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_scan   reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_reduc  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitand reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitor  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitxor reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitshiftright reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_and    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_or     reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_xor    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_contains reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_incr   reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_decr   reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_outer  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_rotate reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_apply  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_compose reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_over   reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_map    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_less_than reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_less_than_equals reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_greater_than reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_equals reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_not_equals reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_smallest reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_greatest reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_goodname reduce using rule 160 (return_val -> type_list ( arguments ) .)
    [               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    (               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_bitnot reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_not    reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_reverse reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_sorted_incr reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_sorted_decr reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_s_combinator reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_s2_combinator reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_goodname2 reduce using rule 160 (return_val -> type_list ( arguments ) .)
    VAR             reduce using rule 160 (return_val -> type_list ( arguments ) .)
    FLOAT           reduce using rule 160 (return_val -> type_list ( arguments ) .)
    NUM             reduce using rule 160 (return_val -> type_list ( arguments ) .)
    STRING_3SQ      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    STRING_3DQ      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    STRING_SQ       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    STRING_DQ       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    true            reduce using rule 160 (return_val -> type_list ( arguments ) .)
    Null            reduce using rule 160 (return_val -> type_list ( arguments ) .)
    false           reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_type       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_num        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_bool       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_any        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_u64        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_u32        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_u16        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_u8         reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_i64        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_i32        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_i16        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_i8         reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_f32        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_f64        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_str        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_list       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_tuple      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_array      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_vector     reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_dict       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_generator  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_linked_list reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_deque      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_heap       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_tree       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_trie       reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_stack      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_queue      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_binary_search_tree reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_bitset     reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_set        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_map        reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_range      reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_bad_struct reduce using rule 160 (return_val -> type_list ( arguments ) .)
    type_bad_struct2 reduce using rule 160 (return_val -> type_list ( arguments ) .)
    lambda          reduce using rule 160 (return_val -> type_list ( arguments ) .)
    NEWLINE         reduce using rule 160 (return_val -> type_list ( arguments ) .)
    $end            reduce using rule 160 (return_val -> type_list ( arguments ) .)
    operator_inner  reduce using rule 160 (return_val -> type_list ( arguments ) .)
    }               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    )               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    {               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    ]               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    :               reduce using rule 160 (return_val -> type_list ( arguments ) .)
    ,               reduce using rule 160 (return_val -> type_list ( arguments ) .)


state 362

    (161) return_val -> type_tuple ( arguments ) .

    operator_add    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_sub    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_mul    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_div    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_trudiv reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_pow    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_join   reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_split  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_scan   reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_reduc  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitand reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitor  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitxor reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftleft reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftright reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_and    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_or     reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_xor    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_contains reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_incr   reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_decr   reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_outer  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_rotate reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_apply  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_compose reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_over   reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_map    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_less_than reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_less_than_equals reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than_equals reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_equals reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_not_equals reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_smallest reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_greatest reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_goodname reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    [               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    (               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_bitnot reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_not    reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_reverse reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_incr reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_decr reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_s_combinator reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_s2_combinator reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_goodname2 reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    VAR             reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    FLOAT           reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    NUM             reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    STRING_3SQ      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    STRING_3DQ      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    STRING_SQ       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    STRING_DQ       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    true            reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    Null            reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    false           reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_type       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_num        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_bool       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_any        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_u64        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_u32        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_u16        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_u8         reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_i64        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_i32        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_i16        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_i8         reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_f32        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_f64        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_str        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_list       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_tuple      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_array      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_vector     reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_dict       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_generator  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_linked_list reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_doubly_linked_list reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_deque      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_heap       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_fibonacci_heap reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_tree       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_trie       reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_stack      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_queue      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_binary_search_tree reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_bitset     reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_set        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_map        reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_range      reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct2 reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    lambda          reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    NEWLINE         reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    $end            reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    operator_inner  reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    }               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    )               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    {               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    ]               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    :               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)
    ,               reduce using rule 161 (return_val -> type_tuple ( arguments ) .)


state 363

    (162) return_val -> type_array ( arguments ) .

    operator_add    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_sub    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_mul    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_div    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_trudiv reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_pow    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_join   reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_split  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_scan   reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_reduc  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitand reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitor  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitxor reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitshiftleft reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitshiftright reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_and    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_or     reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_xor    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_contains reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_incr   reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_decr   reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_outer  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_rotate reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_apply  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_compose reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_over   reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_map    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_less_than reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_less_than_equals reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_greater_than reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_greater_than_equals reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_equals reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_not_equals reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_smallest reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_greatest reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_goodname reduce using rule 162 (return_val -> type_array ( arguments ) .)
    [               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    (               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_bitnot reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_not    reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_reverse reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_sorted_incr reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_sorted_decr reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_s_combinator reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_s2_combinator reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_goodname2 reduce using rule 162 (return_val -> type_array ( arguments ) .)
    VAR             reduce using rule 162 (return_val -> type_array ( arguments ) .)
    FLOAT           reduce using rule 162 (return_val -> type_array ( arguments ) .)
    NUM             reduce using rule 162 (return_val -> type_array ( arguments ) .)
    STRING_3SQ      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    STRING_3DQ      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    STRING_SQ       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    STRING_DQ       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    true            reduce using rule 162 (return_val -> type_array ( arguments ) .)
    Null            reduce using rule 162 (return_val -> type_array ( arguments ) .)
    false           reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_type       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_num        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_bool       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_any        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_u64        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_u32        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_u16        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_u8         reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_i64        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_i32        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_i16        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_i8         reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_f32        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_f64        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_str        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_list       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_tuple      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_array      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_vector     reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_dict       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_generator  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_linked_list reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_doubly_linked_list reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_deque      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_heap       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_fibonacci_heap reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_tree       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_trie       reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_stack      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_queue      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_binary_search_tree reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_bitset     reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_set        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_map        reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_range      reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_bad_struct reduce using rule 162 (return_val -> type_array ( arguments ) .)
    type_bad_struct2 reduce using rule 162 (return_val -> type_array ( arguments ) .)
    lambda          reduce using rule 162 (return_val -> type_array ( arguments ) .)
    NEWLINE         reduce using rule 162 (return_val -> type_array ( arguments ) .)
    $end            reduce using rule 162 (return_val -> type_array ( arguments ) .)
    operator_inner  reduce using rule 162 (return_val -> type_array ( arguments ) .)
    }               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    )               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    {               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    ]               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    :               reduce using rule 162 (return_val -> type_array ( arguments ) .)
    ,               reduce using rule 162 (return_val -> type_array ( arguments ) .)


state 364

    (163) return_val -> type_vector ( arguments ) .

    operator_add    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_sub    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_mul    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_div    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_trudiv reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_pow    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_join   reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_split  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_scan   reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_reduc  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitand reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitor  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitxor reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftleft reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftright reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_and    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_or     reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_xor    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_contains reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_incr   reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_decr   reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_outer  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_rotate reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_apply  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_compose reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_over   reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_map    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_less_than reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_less_than_equals reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_greater_than reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_greater_than_equals reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_equals reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_not_equals reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_smallest reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_greatest reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_goodname reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    [               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    (               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_bitnot reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_not    reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_reverse reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_sorted_incr reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_sorted_decr reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_s_combinator reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_s2_combinator reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_goodname2 reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    VAR             reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    FLOAT           reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    NUM             reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    STRING_3SQ      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    STRING_3DQ      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    STRING_SQ       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    STRING_DQ       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    true            reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    Null            reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    false           reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_type       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_num        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_bool       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_any        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_u64        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_u32        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_u16        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_u8         reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_i64        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_i32        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_i16        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_i8         reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_f32        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_f64        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_str        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_list       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_tuple      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_array      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_vector     reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_dict       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_generator  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_linked_list reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_doubly_linked_list reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_deque      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_heap       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_fibonacci_heap reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_tree       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_trie       reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_stack      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_queue      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_binary_search_tree reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_bitset     reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_set        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_map        reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_range      reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_bad_struct reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    type_bad_struct2 reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    lambda          reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    NEWLINE         reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    $end            reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    operator_inner  reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    }               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    )               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    {               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    ]               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    :               reduce using rule 163 (return_val -> type_vector ( arguments ) .)
    ,               reduce using rule 163 (return_val -> type_vector ( arguments ) .)


state 365

    (164) return_val -> type_dict ( arguments ) .

    operator_add    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_sub    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_mul    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_div    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_trudiv reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_pow    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_join   reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_split  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_scan   reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_reduc  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitand reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitor  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitxor reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftleft reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftright reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_and    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_or     reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_xor    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_contains reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_incr   reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_decr   reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_outer  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_rotate reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_apply  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_compose reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_over   reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_map    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_less_than reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_less_than_equals reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_greater_than reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_greater_than_equals reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_equals reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_not_equals reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_smallest reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_greatest reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_goodname reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    [               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    (               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_bitnot reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_not    reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_reverse reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_sorted_incr reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_sorted_decr reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_s_combinator reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_s2_combinator reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_goodname2 reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    VAR             reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    FLOAT           reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    NUM             reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    STRING_3SQ      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    STRING_3DQ      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    STRING_SQ       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    STRING_DQ       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    true            reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    Null            reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    false           reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_type       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_num        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_bool       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_any        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_u64        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_u32        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_u16        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_u8         reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_i64        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_i32        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_i16        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_i8         reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_f32        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_f64        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_str        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_list       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_tuple      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_array      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_vector     reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_dict       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_generator  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_linked_list reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_doubly_linked_list reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_deque      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_heap       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_fibonacci_heap reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_tree       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_trie       reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_stack      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_queue      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_binary_search_tree reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_bitset     reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_set        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_map        reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_range      reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_bad_struct reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    type_bad_struct2 reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    lambda          reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    NEWLINE         reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    $end            reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    operator_inner  reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    }               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    )               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    {               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    ]               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    :               reduce using rule 164 (return_val -> type_dict ( arguments ) .)
    ,               reduce using rule 164 (return_val -> type_dict ( arguments ) .)


state 366

    (165) return_val -> type_generator ( arguments ) .

    operator_add    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_sub    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_mul    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_div    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_trudiv reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_pow    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_join   reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_split  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_scan   reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_reduc  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitand reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitor  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitxor reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftleft reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftright reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_and    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_or     reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_xor    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_contains reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_incr   reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_decr   reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_outer  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_rotate reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_apply  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_compose reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_over   reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_map    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_less_than reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_less_than_equals reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_greater_than reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_greater_than_equals reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_equals reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_not_equals reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_smallest reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_greatest reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_goodname reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    [               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    (               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_bitnot reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_not    reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_reverse reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_sorted_incr reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_sorted_decr reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_s_combinator reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_s2_combinator reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_goodname2 reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    VAR             reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    FLOAT           reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    NUM             reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    STRING_3SQ      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    STRING_3DQ      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    STRING_SQ       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    STRING_DQ       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    true            reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    Null            reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    false           reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_type       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_num        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_bool       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_any        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_u64        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_u32        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_u16        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_u8         reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_i64        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_i32        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_i16        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_i8         reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_f32        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_f64        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_str        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_list       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_tuple      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_array      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_vector     reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_dict       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_generator  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_linked_list reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_doubly_linked_list reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_deque      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_heap       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_fibonacci_heap reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_tree       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_trie       reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_stack      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_queue      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_binary_search_tree reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_bitset     reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_set        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_map        reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_range      reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_bad_struct reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    type_bad_struct2 reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    lambda          reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    NEWLINE         reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    $end            reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    operator_inner  reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    }               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    )               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    {               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    ]               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    :               reduce using rule 165 (return_val -> type_generator ( arguments ) .)
    ,               reduce using rule 165 (return_val -> type_generator ( arguments ) .)


state 367

    (166) return_val -> type_linked_list ( arguments ) .

    operator_add    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_sub    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_mul    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_div    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_pow    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_join   reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_split  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_scan   reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitand reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_and    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_or     reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_xor    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_contains reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_incr   reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_decr   reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_outer  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_rotate reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_apply  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_compose reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_over   reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_map    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_equals reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_smallest reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_greatest reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    [               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    (               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_not    reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_reverse reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_s2_combinator reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    VAR             reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    FLOAT           reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    NUM             reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    true            reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    Null            reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    false           reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_type       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_num        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_bool       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_any        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_u64        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_u32        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_u16        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_u8         reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_i64        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_i32        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_i16        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_i8         reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_f32        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_f64        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_str        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_list       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_tuple      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_array      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_vector     reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_dict       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_generator  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_linked_list reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_deque      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_heap       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_tree       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_trie       reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_stack      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_queue      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_bitset     reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_set        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_map        reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_range      reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    lambda          reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    $end            reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    operator_inner  reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    }               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    )               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    {               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    ]               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    :               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)
    ,               reduce using rule 166 (return_val -> type_linked_list ( arguments ) .)


state 368

    (167) return_val -> type_doubly_linked_list ( arguments ) .

    operator_add    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sub    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_mul    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_div    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_pow    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_join   reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_split  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_scan   reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitand reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_and    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_or     reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_xor    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_contains reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_incr   reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_decr   reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_outer  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_rotate reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_apply  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_compose reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_over   reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_map    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_equals reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_smallest reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greatest reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    [               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    (               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not    reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reverse reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s2_combinator reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    VAR             reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    FLOAT           reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    NUM             reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    true            reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    Null            reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    false           reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_type       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_num        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bool       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_any        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u64        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u32        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u16        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u8         reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i64        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i32        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i16        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i8         reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f32        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f64        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_str        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_list       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tuple      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_array      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_vector     reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_dict       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_generator  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_linked_list reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_deque      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_heap       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tree       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_trie       reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_stack      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_queue      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bitset     reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_set        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_map        reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_range      reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    lambda          reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    $end            reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_inner  reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    }               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    )               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    {               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    ]               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    :               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)
    ,               reduce using rule 167 (return_val -> type_doubly_linked_list ( arguments ) .)


state 369

    (168) return_val -> type_deque ( arguments ) .

    operator_add    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_sub    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_mul    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_div    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_trudiv reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_pow    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_join   reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_split  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_scan   reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_reduc  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitand reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitor  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitxor reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftleft reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftright reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_and    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_or     reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_xor    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_contains reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_incr   reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_decr   reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_outer  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_rotate reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_apply  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_compose reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_over   reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_map    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_less_than reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_less_than_equals reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_greater_than reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_greater_than_equals reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_equals reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_not_equals reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_smallest reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_greatest reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_goodname reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    [               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    (               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_bitnot reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_not    reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_reverse reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_sorted_incr reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_sorted_decr reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_s_combinator reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_s2_combinator reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_goodname2 reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    VAR             reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    FLOAT           reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    NUM             reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    STRING_3SQ      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    STRING_3DQ      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    STRING_SQ       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    STRING_DQ       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    true            reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    Null            reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    false           reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_type       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_num        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_bool       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_any        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_u64        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_u32        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_u16        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_u8         reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_i64        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_i32        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_i16        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_i8         reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_f32        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_f64        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_str        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_list       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_tuple      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_array      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_vector     reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_dict       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_generator  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_linked_list reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_doubly_linked_list reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_deque      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_heap       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_fibonacci_heap reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_tree       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_trie       reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_stack      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_queue      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_binary_search_tree reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_bitset     reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_set        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_map        reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_range      reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_bad_struct reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    type_bad_struct2 reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    lambda          reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    NEWLINE         reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    $end            reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    operator_inner  reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    }               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    )               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    {               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    ]               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    :               reduce using rule 168 (return_val -> type_deque ( arguments ) .)
    ,               reduce using rule 168 (return_val -> type_deque ( arguments ) .)


state 370

    (169) return_val -> type_heap ( arguments ) .

    operator_add    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_sub    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_mul    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_div    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_trudiv reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_pow    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_join   reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_split  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_scan   reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_reduc  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitand reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitor  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitxor reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_and    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_or     reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_xor    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_contains reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_incr   reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_decr   reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_outer  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_rotate reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_apply  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_compose reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_over   reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_map    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_less_than reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_greater_than reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_equals reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_not_equals reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_smallest reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_greatest reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_goodname reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    [               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    (               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_bitnot reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_not    reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_reverse reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_s_combinator reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_s2_combinator reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_goodname2 reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    VAR             reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    FLOAT           reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    NUM             reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    STRING_SQ       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    STRING_DQ       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    true            reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    Null            reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    false           reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_type       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_num        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_bool       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_any        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_u64        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_u32        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_u16        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_u8         reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_i64        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_i32        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_i16        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_i8         reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_f32        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_f64        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_str        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_list       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_tuple      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_array      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_vector     reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_dict       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_generator  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_linked_list reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_deque      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_heap       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_tree       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_trie       reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_stack      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_queue      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_bitset     reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_set        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_map        reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_range      reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_bad_struct reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    lambda          reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    NEWLINE         reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    $end            reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    operator_inner  reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    }               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    )               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    {               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    ]               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    :               reduce using rule 169 (return_val -> type_heap ( arguments ) .)
    ,               reduce using rule 169 (return_val -> type_heap ( arguments ) .)


state 371

    (170) return_val -> type_fibonacci_heap ( arguments ) .

    operator_add    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sub    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_mul    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_div    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_trudiv reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_pow    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_join   reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_split  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_scan   reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reduc  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitand reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitor  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitxor reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_and    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_or     reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_xor    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_contains reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_incr   reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_decr   reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_outer  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_rotate reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_apply  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_compose reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_over   reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_map    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_equals reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not_equals reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_smallest reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greatest reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    [               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    (               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitnot reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not    reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reverse reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s_combinator reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s2_combinator reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname2 reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    VAR             reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    FLOAT           reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    NUM             reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_SQ       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_DQ       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    true            reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    Null            reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    false           reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_type       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_num        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bool       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_any        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u64        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u32        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u16        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u8         reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i64        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i32        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i16        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i8         reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f32        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f64        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_str        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_list       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tuple      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_array      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_vector     reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_dict       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_generator  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_linked_list reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_deque      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_heap       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tree       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_trie       reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_stack      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_queue      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bitset     reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_set        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_map        reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_range      reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    lambda          reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    NEWLINE         reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    $end            reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_inner  reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    }               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    )               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    {               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    ]               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    :               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)
    ,               reduce using rule 170 (return_val -> type_fibonacci_heap ( arguments ) .)


state 372

    (171) return_val -> type_tree ( arguments ) .

    operator_add    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_sub    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_mul    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_div    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_trudiv reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_pow    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_join   reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_split  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_scan   reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_reduc  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitand reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitor  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitxor reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_and    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_or     reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_xor    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_contains reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_incr   reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_decr   reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_outer  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_rotate reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_apply  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_compose reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_over   reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_map    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_less_than reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_greater_than reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_equals reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_not_equals reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_smallest reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_greatest reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_goodname reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    [               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    (               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_bitnot reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_not    reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_reverse reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_s_combinator reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_s2_combinator reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_goodname2 reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    VAR             reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    FLOAT           reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    NUM             reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    STRING_SQ       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    STRING_DQ       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    true            reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    Null            reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    false           reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_type       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_num        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_bool       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_any        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_u64        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_u32        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_u16        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_u8         reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_i64        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_i32        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_i16        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_i8         reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_f32        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_f64        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_str        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_list       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_tuple      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_array      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_vector     reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_dict       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_generator  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_linked_list reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_deque      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_heap       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_tree       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_trie       reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_stack      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_queue      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_bitset     reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_set        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_map        reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_range      reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_bad_struct reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    lambda          reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    NEWLINE         reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    $end            reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    operator_inner  reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    }               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    )               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    {               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    ]               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    :               reduce using rule 171 (return_val -> type_tree ( arguments ) .)
    ,               reduce using rule 171 (return_val -> type_tree ( arguments ) .)


state 373

    (172) return_val -> type_trie ( arguments ) .

    operator_add    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_sub    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_mul    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_div    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_trudiv reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_pow    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_join   reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_split  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_scan   reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_reduc  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitand reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitor  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitxor reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftleft reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftright reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_and    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_or     reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_xor    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_contains reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_incr   reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_decr   reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_outer  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_rotate reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_apply  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_compose reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_over   reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_map    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_less_than reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_less_than_equals reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_greater_than reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_greater_than_equals reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_equals reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_not_equals reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_smallest reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_greatest reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_goodname reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    [               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    (               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_bitnot reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_not    reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_reverse reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_sorted_incr reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_sorted_decr reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_s_combinator reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_s2_combinator reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_goodname2 reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    VAR             reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    FLOAT           reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    NUM             reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    STRING_3SQ      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    STRING_3DQ      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    STRING_SQ       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    STRING_DQ       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    true            reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    Null            reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    false           reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_type       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_num        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_bool       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_any        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_u64        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_u32        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_u16        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_u8         reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_i64        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_i32        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_i16        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_i8         reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_f32        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_f64        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_str        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_list       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_tuple      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_array      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_vector     reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_dict       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_generator  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_linked_list reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_doubly_linked_list reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_deque      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_heap       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_fibonacci_heap reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_tree       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_trie       reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_stack      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_queue      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_binary_search_tree reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_bitset     reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_set        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_map        reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_range      reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_bad_struct reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    type_bad_struct2 reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    lambda          reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    NEWLINE         reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    $end            reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    operator_inner  reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    }               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    )               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    {               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    ]               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    :               reduce using rule 172 (return_val -> type_trie ( arguments ) .)
    ,               reduce using rule 172 (return_val -> type_trie ( arguments ) .)


state 374

    (173) return_val -> type_stack ( arguments ) .

    operator_add    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_sub    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_mul    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_div    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_trudiv reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_pow    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_join   reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_split  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_scan   reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_reduc  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitand reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitor  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitxor reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftleft reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftright reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_and    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_or     reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_xor    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_contains reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_incr   reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_decr   reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_outer  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_rotate reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_apply  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_compose reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_over   reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_map    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_less_than reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_less_than_equals reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_greater_than reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_greater_than_equals reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_equals reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_not_equals reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_smallest reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_greatest reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_goodname reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    [               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    (               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_bitnot reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_not    reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_reverse reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_sorted_incr reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_sorted_decr reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_s_combinator reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_s2_combinator reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_goodname2 reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    VAR             reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    FLOAT           reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    NUM             reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    STRING_3SQ      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    STRING_3DQ      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    STRING_SQ       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    STRING_DQ       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    true            reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    Null            reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    false           reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_type       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_num        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_bool       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_any        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_u64        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_u32        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_u16        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_u8         reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_i64        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_i32        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_i16        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_i8         reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_f32        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_f64        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_str        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_list       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_tuple      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_array      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_vector     reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_dict       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_generator  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_linked_list reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_doubly_linked_list reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_deque      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_heap       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_fibonacci_heap reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_tree       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_trie       reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_stack      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_queue      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_binary_search_tree reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_bitset     reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_set        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_map        reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_range      reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_bad_struct reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    type_bad_struct2 reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    lambda          reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    NEWLINE         reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    $end            reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    operator_inner  reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    }               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    )               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    {               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    ]               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    :               reduce using rule 173 (return_val -> type_stack ( arguments ) .)
    ,               reduce using rule 173 (return_val -> type_stack ( arguments ) .)


state 375

    (174) return_val -> type_queue ( arguments ) .

    operator_add    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_sub    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_mul    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_div    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_trudiv reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_pow    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_join   reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_split  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_scan   reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_reduc  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitand reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitor  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitxor reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftleft reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftright reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_and    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_or     reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_xor    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_contains reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_incr   reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_decr   reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_outer  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_rotate reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_apply  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_compose reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_over   reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_map    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_less_than reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_less_than_equals reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_greater_than reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_greater_than_equals reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_equals reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_not_equals reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_smallest reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_greatest reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_goodname reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    [               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    (               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_bitnot reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_not    reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_reverse reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_sorted_incr reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_sorted_decr reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_s_combinator reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_s2_combinator reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_goodname2 reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    VAR             reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    FLOAT           reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    NUM             reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    STRING_3SQ      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    STRING_3DQ      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    STRING_SQ       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    STRING_DQ       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    true            reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    Null            reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    false           reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_type       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_num        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_bool       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_any        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_u64        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_u32        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_u16        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_u8         reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_i64        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_i32        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_i16        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_i8         reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_f32        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_f64        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_str        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_list       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_tuple      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_array      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_vector     reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_dict       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_generator  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_linked_list reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_doubly_linked_list reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_deque      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_heap       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_fibonacci_heap reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_tree       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_trie       reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_stack      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_queue      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_binary_search_tree reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_bitset     reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_set        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_map        reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_range      reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_bad_struct reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    type_bad_struct2 reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    lambda          reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    NEWLINE         reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    $end            reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    operator_inner  reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    }               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    )               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    {               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    ]               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    :               reduce using rule 174 (return_val -> type_queue ( arguments ) .)
    ,               reduce using rule 174 (return_val -> type_queue ( arguments ) .)


state 376

    (175) return_val -> type_binary_search_tree ( arguments ) .

    operator_add    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sub    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_mul    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_div    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_trudiv reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_pow    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_join   reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_split  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_scan   reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reduc  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitand reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitor  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitxor reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_and    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_or     reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_xor    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_contains reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_incr   reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_decr   reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_outer  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_rotate reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_apply  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_compose reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_over   reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_map    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_equals reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not_equals reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_smallest reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greatest reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    [               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    (               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitnot reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not    reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reverse reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s_combinator reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s2_combinator reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname2 reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    VAR             reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    FLOAT           reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    NUM             reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_SQ       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_DQ       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    true            reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    Null            reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    false           reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_type       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_num        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bool       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_any        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u64        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u32        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u16        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u8         reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i64        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i32        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i16        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i8         reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f32        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f64        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_str        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_list       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tuple      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_array      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_vector     reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_dict       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_generator  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_linked_list reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_deque      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_heap       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tree       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_trie       reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_stack      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_queue      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bitset     reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_set        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_map        reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_range      reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    lambda          reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    NEWLINE         reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    $end            reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_inner  reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    }               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    )               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    {               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    ]               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    :               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)
    ,               reduce using rule 175 (return_val -> type_binary_search_tree ( arguments ) .)


state 377

    (176) return_val -> type_bitset ( arguments ) .

    operator_add    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_sub    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_mul    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_div    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_trudiv reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_pow    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_join   reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_split  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_scan   reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_reduc  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitand reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitor  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitxor reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftleft reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftright reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_and    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_or     reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_xor    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_contains reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_incr   reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_decr   reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_outer  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_rotate reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_apply  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_compose reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_over   reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_map    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_less_than reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_less_than_equals reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than_equals reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_equals reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_not_equals reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_smallest reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_greatest reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_goodname reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    [               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    (               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_bitnot reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_not    reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_reverse reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_incr reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_decr reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_s_combinator reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_s2_combinator reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_goodname2 reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    VAR             reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    FLOAT           reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    NUM             reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    STRING_3SQ      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    STRING_3DQ      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    STRING_SQ       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    STRING_DQ       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    true            reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    Null            reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    false           reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_type       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_num        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_bool       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_any        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_u64        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_u32        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_u16        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_u8         reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_i64        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_i32        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_i16        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_i8         reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_f32        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_f64        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_str        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_list       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_tuple      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_array      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_vector     reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_dict       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_generator  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_linked_list reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_doubly_linked_list reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_deque      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_heap       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_fibonacci_heap reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_tree       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_trie       reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_stack      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_queue      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_binary_search_tree reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_bitset     reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_set        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_map        reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_range      reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct2 reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    lambda          reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    NEWLINE         reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    $end            reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    operator_inner  reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    }               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    )               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    {               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    ]               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    :               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)
    ,               reduce using rule 176 (return_val -> type_bitset ( arguments ) .)


state 378

    (177) return_val -> type_set ( arguments ) .

    operator_add    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_sub    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_mul    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_div    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_trudiv reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_pow    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_join   reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_split  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_scan   reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_reduc  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitand reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitor  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitxor reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitshiftleft reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitshiftright reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_and    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_or     reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_xor    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_contains reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_incr   reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_decr   reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_outer  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_rotate reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_apply  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_compose reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_over   reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_map    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_less_than reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_less_than_equals reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_greater_than reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_greater_than_equals reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_equals reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_not_equals reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_smallest reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_greatest reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_goodname reduce using rule 177 (return_val -> type_set ( arguments ) .)
    [               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    (               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_bitnot reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_not    reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_reverse reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_sorted_incr reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_sorted_decr reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_s_combinator reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_s2_combinator reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_goodname2 reduce using rule 177 (return_val -> type_set ( arguments ) .)
    VAR             reduce using rule 177 (return_val -> type_set ( arguments ) .)
    FLOAT           reduce using rule 177 (return_val -> type_set ( arguments ) .)
    NUM             reduce using rule 177 (return_val -> type_set ( arguments ) .)
    STRING_3SQ      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    STRING_3DQ      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    STRING_SQ       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    STRING_DQ       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    true            reduce using rule 177 (return_val -> type_set ( arguments ) .)
    Null            reduce using rule 177 (return_val -> type_set ( arguments ) .)
    false           reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_type       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_num        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_bool       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_any        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_u64        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_u32        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_u16        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_u8         reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_i64        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_i32        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_i16        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_i8         reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_f32        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_f64        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_str        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_list       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_tuple      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_array      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_vector     reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_dict       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_generator  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_linked_list reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_doubly_linked_list reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_deque      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_heap       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_fibonacci_heap reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_tree       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_trie       reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_stack      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_queue      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_binary_search_tree reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_bitset     reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_set        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_map        reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_range      reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_bad_struct reduce using rule 177 (return_val -> type_set ( arguments ) .)
    type_bad_struct2 reduce using rule 177 (return_val -> type_set ( arguments ) .)
    lambda          reduce using rule 177 (return_val -> type_set ( arguments ) .)
    NEWLINE         reduce using rule 177 (return_val -> type_set ( arguments ) .)
    $end            reduce using rule 177 (return_val -> type_set ( arguments ) .)
    operator_inner  reduce using rule 177 (return_val -> type_set ( arguments ) .)
    }               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    )               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    {               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    ]               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    :               reduce using rule 177 (return_val -> type_set ( arguments ) .)
    ,               reduce using rule 177 (return_val -> type_set ( arguments ) .)


state 379

    (178) return_val -> type_map ( arguments ) .

    operator_add    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_sub    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_mul    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_div    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_trudiv reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_pow    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_join   reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_split  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_scan   reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_reduc  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitand reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitor  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitxor reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitshiftleft reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitshiftright reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_and    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_or     reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_xor    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_contains reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_incr   reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_decr   reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_outer  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_rotate reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_apply  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_compose reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_over   reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_map    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_less_than reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_less_than_equals reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_greater_than reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_greater_than_equals reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_equals reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_not_equals reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_smallest reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_greatest reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_goodname reduce using rule 178 (return_val -> type_map ( arguments ) .)
    [               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    (               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_bitnot reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_not    reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_reverse reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_sorted_incr reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_sorted_decr reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_s_combinator reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_s2_combinator reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_goodname2 reduce using rule 178 (return_val -> type_map ( arguments ) .)
    VAR             reduce using rule 178 (return_val -> type_map ( arguments ) .)
    FLOAT           reduce using rule 178 (return_val -> type_map ( arguments ) .)
    NUM             reduce using rule 178 (return_val -> type_map ( arguments ) .)
    STRING_3SQ      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    STRING_3DQ      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    STRING_SQ       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    STRING_DQ       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    true            reduce using rule 178 (return_val -> type_map ( arguments ) .)
    Null            reduce using rule 178 (return_val -> type_map ( arguments ) .)
    false           reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_type       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_num        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_bool       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_any        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_u64        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_u32        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_u16        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_u8         reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_i64        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_i32        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_i16        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_i8         reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_f32        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_f64        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_str        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_list       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_tuple      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_array      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_vector     reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_dict       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_generator  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_linked_list reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_doubly_linked_list reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_deque      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_heap       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_fibonacci_heap reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_tree       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_trie       reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_stack      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_queue      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_binary_search_tree reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_bitset     reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_set        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_map        reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_range      reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_bad_struct reduce using rule 178 (return_val -> type_map ( arguments ) .)
    type_bad_struct2 reduce using rule 178 (return_val -> type_map ( arguments ) .)
    lambda          reduce using rule 178 (return_val -> type_map ( arguments ) .)
    NEWLINE         reduce using rule 178 (return_val -> type_map ( arguments ) .)
    $end            reduce using rule 178 (return_val -> type_map ( arguments ) .)
    operator_inner  reduce using rule 178 (return_val -> type_map ( arguments ) .)
    }               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    )               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    {               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    ]               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    :               reduce using rule 178 (return_val -> type_map ( arguments ) .)
    ,               reduce using rule 178 (return_val -> type_map ( arguments ) .)


state 380

    (179) return_val -> type_range ( arguments ) .

    operator_add    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_sub    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_mul    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_div    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_trudiv reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_pow    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_join   reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_split  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_scan   reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_reduc  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitand reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitor  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitxor reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitshiftleft reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitshiftright reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_and    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_or     reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_xor    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_contains reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_incr   reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_decr   reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_outer  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_rotate reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_apply  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_compose reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_over   reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_map    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_less_than reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_less_than_equals reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_greater_than reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_greater_than_equals reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_equals reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_not_equals reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_smallest reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_greatest reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_goodname reduce using rule 179 (return_val -> type_range ( arguments ) .)
    [               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    (               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_bitnot reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_not    reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_reverse reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_sorted_incr reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_sorted_decr reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_s_combinator reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_s2_combinator reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_goodname2 reduce using rule 179 (return_val -> type_range ( arguments ) .)
    VAR             reduce using rule 179 (return_val -> type_range ( arguments ) .)
    FLOAT           reduce using rule 179 (return_val -> type_range ( arguments ) .)
    NUM             reduce using rule 179 (return_val -> type_range ( arguments ) .)
    STRING_3SQ      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    STRING_3DQ      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    STRING_SQ       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    STRING_DQ       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    true            reduce using rule 179 (return_val -> type_range ( arguments ) .)
    Null            reduce using rule 179 (return_val -> type_range ( arguments ) .)
    false           reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_type       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_num        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_bool       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_any        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_u64        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_u32        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_u16        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_u8         reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_i64        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_i32        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_i16        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_i8         reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_f32        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_f64        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_str        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_list       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_tuple      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_array      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_vector     reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_dict       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_generator  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_linked_list reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_doubly_linked_list reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_deque      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_heap       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_fibonacci_heap reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_tree       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_trie       reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_stack      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_queue      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_binary_search_tree reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_bitset     reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_set        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_map        reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_range      reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_bad_struct reduce using rule 179 (return_val -> type_range ( arguments ) .)
    type_bad_struct2 reduce using rule 179 (return_val -> type_range ( arguments ) .)
    lambda          reduce using rule 179 (return_val -> type_range ( arguments ) .)
    NEWLINE         reduce using rule 179 (return_val -> type_range ( arguments ) .)
    $end            reduce using rule 179 (return_val -> type_range ( arguments ) .)
    operator_inner  reduce using rule 179 (return_val -> type_range ( arguments ) .)
    }               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    )               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    {               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    ]               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    :               reduce using rule 179 (return_val -> type_range ( arguments ) .)
    ,               reduce using rule 179 (return_val -> type_range ( arguments ) .)


state 381

    (180) return_val -> type_bad_struct ( arguments ) .

    operator_add    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_sub    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_mul    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_div    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_trudiv reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_pow    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_join   reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_split  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_scan   reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_reduc  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitand reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitor  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitxor reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftleft reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftright reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_and    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_or     reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_xor    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_contains reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_incr   reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_decr   reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_outer  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_rotate reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_apply  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_compose reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_over   reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_map    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than_equals reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than_equals reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_equals reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_not_equals reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_smallest reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_greatest reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    [               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    (               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitnot reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_not    reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_reverse reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_incr reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_decr reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_s_combinator reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_s2_combinator reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname2 reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    VAR             reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    FLOAT           reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    NUM             reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3SQ      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3DQ      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    STRING_SQ       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    STRING_DQ       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    true            reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    Null            reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    false           reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_type       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_num        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_bool       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_any        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_u64        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_u32        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_u16        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_u8         reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_i64        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_i32        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_i16        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_i8         reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_f32        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_f64        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_str        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_list       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_tuple      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_array      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_vector     reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_dict       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_generator  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_linked_list reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_doubly_linked_list reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_deque      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_heap       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_fibonacci_heap reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_tree       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_trie       reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_stack      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_queue      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_binary_search_tree reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_bitset     reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_set        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_map        reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_range      reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct2 reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    lambda          reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    NEWLINE         reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    $end            reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    operator_inner  reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    }               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    )               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    {               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    ]               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    :               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)
    ,               reduce using rule 180 (return_val -> type_bad_struct ( arguments ) .)


state 382

    (181) return_val -> type_bad_struct2 ( arguments ) .

    operator_add    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sub    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_mul    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_div    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_trudiv reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_pow    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_join   reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_split  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_scan   reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reduc  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitand reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitor  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitxor reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftleft reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftright reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_and    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_or     reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_xor    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_contains reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_incr   reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_decr   reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_outer  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_rotate reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_apply  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_compose reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_over   reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_map    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than_equals reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than_equals reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_equals reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not_equals reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_smallest reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greatest reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    [               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    (               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitnot reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not    reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reverse reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_incr reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_decr reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s_combinator reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s2_combinator reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname2 reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    VAR             reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    FLOAT           reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    NUM             reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3SQ      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3DQ      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_SQ       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_DQ       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    true            reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    Null            reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    false           reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_type       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_num        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bool       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_any        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u64        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u32        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u16        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u8         reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i64        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i32        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i16        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i8         reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f32        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f64        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_str        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_list       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tuple      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_array      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_vector     reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_dict       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_generator  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_linked_list reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_doubly_linked_list reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_deque      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_heap       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_fibonacci_heap reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tree       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_trie       reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_stack      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_queue      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_binary_search_tree reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bitset     reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_set        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_map        reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_range      reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct2 reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    lambda          reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    NEWLINE         reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    $end            reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_inner  reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    }               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    )               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    {               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    ]               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    :               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)
    ,               reduce using rule 181 (return_val -> type_bad_struct2 ( arguments ) .)


state 383

    (61) lambda_decl -> lambda comma_separated_names : expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s2_combinator resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for NUM resolved as shift
  ! shift/reduce conflict for STRING_3SQ resolved as shift
  ! shift/reduce conflict for STRING_3DQ resolved as shift
  ! shift/reduce conflict for STRING_SQ resolved as shift
  ! shift/reduce conflict for STRING_DQ resolved as shift
  ! shift/reduce conflict for true resolved as shift
  ! shift/reduce conflict for Null resolved as shift
  ! shift/reduce conflict for false resolved as shift
  ! shift/reduce conflict for type_type resolved as shift
  ! shift/reduce conflict for type_num resolved as shift
  ! shift/reduce conflict for type_bool resolved as shift
  ! shift/reduce conflict for type_any resolved as shift
  ! shift/reduce conflict for type_u64 resolved as shift
  ! shift/reduce conflict for type_u32 resolved as shift
  ! shift/reduce conflict for type_u16 resolved as shift
  ! shift/reduce conflict for type_u8 resolved as shift
  ! shift/reduce conflict for type_i64 resolved as shift
  ! shift/reduce conflict for type_i32 resolved as shift
  ! shift/reduce conflict for type_i16 resolved as shift
  ! shift/reduce conflict for type_i8 resolved as shift
  ! shift/reduce conflict for type_f32 resolved as shift
  ! shift/reduce conflict for type_f64 resolved as shift
  ! shift/reduce conflict for type_str resolved as shift
  ! shift/reduce conflict for type_list resolved as shift
  ! shift/reduce conflict for type_tuple resolved as shift
  ! shift/reduce conflict for type_array resolved as shift
  ! shift/reduce conflict for type_vector resolved as shift
  ! shift/reduce conflict for type_dict resolved as shift
  ! shift/reduce conflict for type_generator resolved as shift
  ! shift/reduce conflict for type_linked_list resolved as shift
  ! shift/reduce conflict for type_doubly_linked_list resolved as shift
  ! shift/reduce conflict for type_deque resolved as shift
  ! shift/reduce conflict for type_heap resolved as shift
  ! shift/reduce conflict for type_fibonacci_heap resolved as shift
  ! shift/reduce conflict for type_tree resolved as shift
  ! shift/reduce conflict for type_trie resolved as shift
  ! shift/reduce conflict for type_stack resolved as shift
  ! shift/reduce conflict for type_queue resolved as shift
  ! shift/reduce conflict for type_binary_search_tree resolved as shift
  ! shift/reduce conflict for type_bitset resolved as shift
  ! shift/reduce conflict for type_set resolved as shift
  ! shift/reduce conflict for type_map resolved as shift
  ! shift/reduce conflict for type_range resolved as shift
  ! shift/reduce conflict for type_bad_struct resolved as shift
  ! shift/reduce conflict for type_bad_struct2 resolved as shift
  ! shift/reduce conflict for lambda resolved as shift
    NEWLINE         reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    $end            reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_inner  reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    }               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    )               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    {               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    ]               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    :               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    ,               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

  ! operator_add    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sub    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_mul    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_div    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_trudiv [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_pow    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_join   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_split  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_scan   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reduc  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitand [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitor  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitxor [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftleft [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftright [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_and    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_or     [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_xor    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_contains [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_incr   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_decr   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_outer  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_rotate [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_apply  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_compose [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_over   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_map    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_smallest [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greatest [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! [               [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! (               [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitnot [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reverse [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_incr [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_decr [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s_combinator [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s2_combinator [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname2 [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! VAR             [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! FLOAT           [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! NUM             [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_3SQ      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_3DQ      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_SQ       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! STRING_DQ       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! true            [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! Null            [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! false           [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_type       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_num        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bool       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_any        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u64        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u32        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u16        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_u8         [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i64        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i32        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i16        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_i8         [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_f32        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_f64        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_str        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_list       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_tuple      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_array      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_vector     [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_dict       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_generator  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_linked_list [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_doubly_linked_list [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_deque      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_heap       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_fibonacci_heap [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_tree       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_trie       [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_stack      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_queue      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_binary_search_tree [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bitset     [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_set        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_map        [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_range      [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bad_struct [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! type_bad_struct2 [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! lambda          [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 384

    (80) for_decl -> for comma_separated_names operator_contains expr .
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    {               reduce using rule 80 (for_decl -> for comma_separated_names operator_contains expr .)
    operator_add    shift and go to state 103
    operator_sub    shift and go to state 104
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_join   shift and go to state 109
    operator_split  shift and go to state 110
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_bitand shift and go to state 113
    operator_bitor  shift and go to state 114
    operator_bitxor shift and go to state 115
    operator_bitshiftleft shift and go to state 116
    operator_bitshiftright shift and go to state 117
    operator_and    shift and go to state 118
    operator_or     shift and go to state 119
    operator_xor    shift and go to state 120
    operator_contains shift and go to state 121
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_outer  shift and go to state 124
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_less_than shift and go to state 130
    operator_less_than_equals shift and go to state 131
    operator_greater_than shift and go to state 132
    operator_greater_than_equals shift and go to state 133
    operator_equals shift and go to state 134
    operator_not_equals shift and go to state 135
    operator_smallest shift and go to state 136
    operator_greatest shift and go to state 137
    operator_goodname shift and go to state 138
    [               shift and go to state 139
    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 385

    (83) operator_decl -> operator ( arguments ) .

    {               reduce using rule 83 (operator_decl -> operator ( arguments ) .)


state 386

    (86) func_decl -> func VAR ( def_arguments . )

    )               shift and go to state 392


state 387

    (87) def_arguments -> declaration_stmt .
    (88) def_arguments -> declaration_stmt . ; def_arguments

    )               reduce using rule 87 (def_arguments -> declaration_stmt .)
    ;               shift and go to state 393


state 388

    (68) declaration_stmt -> TYPE . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 162

    comma_separated_names          shift and go to state 161

state 389

    (123) expr -> expr expr operator_inner expr expr .
    (123) expr -> expr expr . operator_inner expr expr
    (99) expr -> expr . operator_add expr
    (100) expr -> expr . operator_sub expr
    (101) expr -> expr . operator_mul expr
    (102) expr -> expr . operator_div expr
    (103) expr -> expr . operator_trudiv expr
    (104) expr -> expr . operator_pow expr
    (105) expr -> expr . operator_join expr
    (106) expr -> expr . operator_split expr
    (107) expr -> expr . operator_scan expr
    (108) expr -> expr . operator_reduc expr
    (109) expr -> expr . operator_bitand expr
    (110) expr -> expr . operator_bitor expr
    (111) expr -> expr . operator_bitxor expr
    (112) expr -> expr . operator_bitshiftleft expr
    (113) expr -> expr . operator_bitshiftright expr
    (114) expr -> expr . operator_and expr
    (115) expr -> expr . operator_or expr
    (116) expr -> expr . operator_xor expr
    (117) expr -> expr . operator_contains expr
    (120) expr -> expr . operator_incr
    (121) expr -> expr . operator_decr
    (122) expr -> expr . operator_outer expr expr
    (123) expr -> expr . expr operator_inner expr expr
    (125) expr -> expr . operator_rotate expr
    (126) expr -> expr . operator_apply expr
    (127) expr -> expr . operator_compose expr
    (128) expr -> expr . operator_over expr
    (129) expr -> expr . operator_map
    (132) expr -> expr . operator_less_than expr
    (133) expr -> expr . operator_less_than_equals expr
    (134) expr -> expr . operator_greater_than expr
    (135) expr -> expr . operator_greater_than_equals expr
    (136) expr -> expr . operator_equals expr
    (137) expr -> expr . operator_not_equals expr
    (138) expr -> expr . operator_smallest expr
    (139) expr -> expr . operator_greatest expr
    (140) expr -> expr . operator_goodname expr
    (55) item -> expr . [ arguments ]
    (56) simple_slice -> expr . [ arguments : arguments ]
    (57) full_slice -> expr . [ arguments : arguments : arguments ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_sub    reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_join   reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_split  reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_bitand reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_bitor  reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_bitxor reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_bitshiftleft reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_bitshiftright reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_and    reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_or     reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_xor    reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_contains reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_outer  reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_less_than reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_less_than_equals reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_greater_than reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_greater_than_equals reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_equals reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_not_equals reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_smallest reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_greatest reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    [               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    (               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_not    reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_s_combinator reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_s2_combinator reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    VAR             reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    FLOAT           reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    NUM             reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    STRING_3SQ      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    STRING_3DQ      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    STRING_SQ       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    STRING_DQ       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    true            reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    Null            reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    false           reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_type       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_num        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_bool       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_any        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_u64        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_u32        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_u16        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_u8         reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_i64        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_i32        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_i16        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_i8         reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_f32        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_f64        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_str        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_list       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_tuple      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_array      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_vector     reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_dict       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_generator  reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_linked_list reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_doubly_linked_list reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_deque      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_heap       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_fibonacci_heap reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_tree       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_trie       reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_stack      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_queue      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_binary_search_tree reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_bitset     reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_set        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_map        reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_range      reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_bad_struct reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    type_bad_struct2 reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    lambda          reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    NEWLINE         reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    $end            reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_inner  reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    }               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    )               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    {               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    ]               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    :               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    ,               reduce using rule 123 (expr -> expr expr operator_inner expr expr .)
    operator_mul    shift and go to state 105
    operator_div    shift and go to state 106
    operator_trudiv shift and go to state 107
    operator_pow    shift and go to state 108
    operator_scan   shift and go to state 111
    operator_reduc  shift and go to state 112
    operator_incr   shift and go to state 122
    operator_decr   shift and go to state 123
    operator_rotate shift and go to state 125
    operator_apply  shift and go to state 126
    operator_compose shift and go to state 127
    operator_over   shift and go to state 128
    operator_map    shift and go to state 129
    operator_goodname shift and go to state 138
    operator_bitnot shift and go to state 22
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_goodname2 shift and go to state 29

  ! operator_mul    [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_div    [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_trudiv [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_pow    [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_scan   [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_reduc  [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_incr   [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_decr   [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_rotate [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_apply  [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_compose [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_over   [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_map    [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_goodname [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_bitnot [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_reverse [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_goodname2 [ reduce using rule 123 (expr -> expr expr operator_inner expr expr .) ]
  ! operator_inner  [ shift and go to state 249 ]
  ! operator_add    [ shift and go to state 103 ]
  ! operator_sub    [ shift and go to state 104 ]
  ! operator_join   [ shift and go to state 109 ]
  ! operator_split  [ shift and go to state 110 ]
  ! operator_bitand [ shift and go to state 113 ]
  ! operator_bitor  [ shift and go to state 114 ]
  ! operator_bitxor [ shift and go to state 115 ]
  ! operator_bitshiftleft [ shift and go to state 116 ]
  ! operator_bitshiftright [ shift and go to state 117 ]
  ! operator_and    [ shift and go to state 118 ]
  ! operator_or     [ shift and go to state 119 ]
  ! operator_xor    [ shift and go to state 120 ]
  ! operator_contains [ shift and go to state 121 ]
  ! operator_outer  [ shift and go to state 124 ]
  ! operator_less_than [ shift and go to state 130 ]
  ! operator_less_than_equals [ shift and go to state 131 ]
  ! operator_greater_than [ shift and go to state 132 ]
  ! operator_greater_than_equals [ shift and go to state 133 ]
  ! operator_equals [ shift and go to state 134 ]
  ! operator_not_equals [ shift and go to state 135 ]
  ! operator_smallest [ shift and go to state 136 ]
  ! operator_greatest [ shift and go to state 137 ]
  ! [               [ shift and go to state 139 ]
  ! (               [ shift and go to state 21 ]
  ! operator_not    [ shift and go to state 23 ]
  ! operator_s_combinator [ shift and go to state 27 ]
  ! operator_s2_combinator [ shift and go to state 28 ]
  ! VAR             [ shift and go to state 143 ]
  ! FLOAT           [ shift and go to state 45 ]
  ! NUM             [ shift and go to state 46 ]
  ! STRING_3SQ      [ shift and go to state 47 ]
  ! STRING_3DQ      [ shift and go to state 48 ]
  ! STRING_SQ       [ shift and go to state 49 ]
  ! STRING_DQ       [ shift and go to state 50 ]
  ! true            [ shift and go to state 51 ]
  ! Null            [ shift and go to state 52 ]
  ! false           [ shift and go to state 53 ]
  ! type_type       [ shift and go to state 54 ]
  ! type_num        [ shift and go to state 55 ]
  ! type_bool       [ shift and go to state 56 ]
  ! type_any        [ shift and go to state 57 ]
  ! type_u64        [ shift and go to state 58 ]
  ! type_u32        [ shift and go to state 59 ]
  ! type_u16        [ shift and go to state 60 ]
  ! type_u8         [ shift and go to state 61 ]
  ! type_i64        [ shift and go to state 62 ]
  ! type_i32        [ shift and go to state 63 ]
  ! type_i16        [ shift and go to state 64 ]
  ! type_i8         [ shift and go to state 65 ]
  ! type_f32        [ shift and go to state 66 ]
  ! type_f64        [ shift and go to state 67 ]
  ! type_str        [ shift and go to state 68 ]
  ! type_list       [ shift and go to state 69 ]
  ! type_tuple      [ shift and go to state 70 ]
  ! type_array      [ shift and go to state 71 ]
  ! type_vector     [ shift and go to state 72 ]
  ! type_dict       [ shift and go to state 73 ]
  ! type_generator  [ shift and go to state 74 ]
  ! type_linked_list [ shift and go to state 75 ]
  ! type_doubly_linked_list [ shift and go to state 76 ]
  ! type_deque      [ shift and go to state 77 ]
  ! type_heap       [ shift and go to state 78 ]
  ! type_fibonacci_heap [ shift and go to state 79 ]
  ! type_tree       [ shift and go to state 80 ]
  ! type_trie       [ shift and go to state 81 ]
  ! type_stack      [ shift and go to state 82 ]
  ! type_queue      [ shift and go to state 83 ]
  ! type_binary_search_tree [ shift and go to state 84 ]
  ! type_bitset     [ shift and go to state 85 ]
  ! type_set        [ shift and go to state 86 ]
  ! type_map        [ shift and go to state 87 ]
  ! type_range      [ shift and go to state 88 ]
  ! type_bad_struct [ shift and go to state 89 ]
  ! type_bad_struct2 [ shift and go to state 90 ]
  ! lambda          [ shift and go to state 91 ]

    expr                           shift and go to state 102
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 390

    (56) simple_slice -> expr [ arguments : arguments . ]
    (57) full_slice -> expr [ arguments : arguments . : arguments ]
    (189) arguments -> arguments . , arguments

    ]               shift and go to state 395
    :               shift and go to state 394
    ,               shift and go to state 341


state 391

    (189) arguments -> arguments , arguments .
    (189) arguments -> arguments . , arguments

  ! shift/reduce conflict for , resolved as shift
    ]               reduce using rule 189 (arguments -> arguments , arguments .)
    :               reduce using rule 189 (arguments -> arguments , arguments .)
    )               reduce using rule 189 (arguments -> arguments , arguments .)
    ,               shift and go to state 341

  ! ,               [ reduce using rule 189 (arguments -> arguments , arguments .) ]


state 392

    (86) func_decl -> func VAR ( def_arguments ) .

    {               reduce using rule 86 (func_decl -> func VAR ( def_arguments ) .)


state 393

    (88) def_arguments -> declaration_stmt ; . def_arguments
    (87) def_arguments -> . declaration_stmt
    (88) def_arguments -> . declaration_stmt ; def_arguments
    (68) declaration_stmt -> . TYPE comma_separated_names
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    type_type       shift and go to state 208
    type_num        shift and go to state 209
    type_bool       shift and go to state 210
    type_any        shift and go to state 211
    type_u64        shift and go to state 212
    type_u32        shift and go to state 213
    type_u16        shift and go to state 214
    type_u8         shift and go to state 215
    type_i64        shift and go to state 216
    type_i32        shift and go to state 217
    type_i16        shift and go to state 218
    type_i8         shift and go to state 219
    type_f32        shift and go to state 220
    type_f64        shift and go to state 221
    type_str        shift and go to state 222
    type_list       shift and go to state 223
    type_tuple      shift and go to state 224
    type_array      shift and go to state 225
    type_vector     shift and go to state 226
    type_dict       shift and go to state 227
    type_generator  shift and go to state 228
    type_linked_list shift and go to state 229
    type_doubly_linked_list shift and go to state 230
    type_deque      shift and go to state 231
    type_heap       shift and go to state 232
    type_fibonacci_heap shift and go to state 233
    type_tree       shift and go to state 234
    type_trie       shift and go to state 235
    type_stack      shift and go to state 236
    type_queue      shift and go to state 237
    type_binary_search_tree shift and go to state 238
    type_bitset     shift and go to state 239
    type_set        shift and go to state 240
    type_map        shift and go to state 241
    type_range      shift and go to state 242
    type_bad_struct shift and go to state 243
    type_bad_struct2 shift and go to state 244

    declaration_stmt               shift and go to state 387
    def_arguments                  shift and go to state 396
    TYPE                           shift and go to state 388

state 394

    (57) full_slice -> expr [ arguments : arguments : . arguments ]
    (188) arguments -> . expr
    (189) arguments -> . arguments , arguments
    (190) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (98) expr -> . ( expr )
    (99) expr -> . expr operator_add expr
    (100) expr -> . expr operator_sub expr
    (101) expr -> . expr operator_mul expr
    (102) expr -> . expr operator_div expr
    (103) expr -> . expr operator_trudiv expr
    (104) expr -> . expr operator_pow expr
    (105) expr -> . expr operator_join expr
    (106) expr -> . expr operator_split expr
    (107) expr -> . expr operator_scan expr
    (108) expr -> . expr operator_reduc expr
    (109) expr -> . expr operator_bitand expr
    (110) expr -> . expr operator_bitor expr
    (111) expr -> . expr operator_bitxor expr
    (112) expr -> . expr operator_bitshiftleft expr
    (113) expr -> . expr operator_bitshiftright expr
    (114) expr -> . expr operator_and expr
    (115) expr -> . expr operator_or expr
    (116) expr -> . expr operator_xor expr
    (117) expr -> . expr operator_contains expr
    (118) expr -> . operator_bitnot expr
    (119) expr -> . operator_not expr
    (120) expr -> . expr operator_incr
    (121) expr -> . expr operator_decr
    (122) expr -> . expr operator_outer expr expr
    (123) expr -> . expr expr operator_inner expr expr
    (124) expr -> . operator_reverse expr
    (125) expr -> . expr operator_rotate expr
    (126) expr -> . expr operator_apply expr
    (127) expr -> . expr operator_compose expr
    (128) expr -> . expr operator_over expr
    (129) expr -> . expr operator_map
    (130) expr -> . operator_sorted_incr expr
    (131) expr -> . operator_sorted_decr expr
    (132) expr -> . expr operator_less_than expr
    (133) expr -> . expr operator_less_than_equals expr
    (134) expr -> . expr operator_greater_than expr
    (135) expr -> . expr operator_greater_than_equals expr
    (136) expr -> . expr operator_equals expr
    (137) expr -> . expr operator_not_equals expr
    (138) expr -> . expr operator_smallest expr
    (139) expr -> . expr operator_greatest expr
    (140) expr -> . expr operator_goodname expr
    (141) expr -> . operator_s_combinator expr expr expr
    (142) expr -> . operator_s2_combinator expr expr expr
    (143) expr -> . operator_goodname2 expr
    (144) expr -> . VAR
    (183) expr -> . const_val
    (184) expr -> . return_val
    (185) expr -> . lambda_decl
    (186) expr -> . TYPE
    (187) empty -> .
    (55) item -> . expr [ arguments ]
    (56) simple_slice -> . expr [ arguments : arguments ]
    (57) full_slice -> . expr [ arguments : arguments : arguments ]
    (89) const_val -> . FLOAT
    (90) const_val -> . NUM
    (91) const_val -> . STRING_3SQ
    (92) const_val -> . STRING_3DQ
    (93) const_val -> . STRING_SQ
    (94) const_val -> . STRING_DQ
    (95) const_val -> . true
    (96) const_val -> . Null
    (97) const_val -> . false
    (145) return_val -> . type_type ( arguments )
    (146) return_val -> . type_num ( arguments )
    (147) return_val -> . type_bool ( arguments )
    (148) return_val -> . type_any ( arguments )
    (149) return_val -> . type_u64 ( arguments )
    (150) return_val -> . type_u32 ( arguments )
    (151) return_val -> . type_u16 ( arguments )
    (152) return_val -> . type_u8 ( arguments )
    (153) return_val -> . type_i64 ( arguments )
    (154) return_val -> . type_i32 ( arguments )
    (155) return_val -> . type_i16 ( arguments )
    (156) return_val -> . type_i8 ( arguments )
    (157) return_val -> . type_f32 ( arguments )
    (158) return_val -> . type_f64 ( arguments )
    (159) return_val -> . type_str ( arguments )
    (160) return_val -> . type_list ( arguments )
    (161) return_val -> . type_tuple ( arguments )
    (162) return_val -> . type_array ( arguments )
    (163) return_val -> . type_vector ( arguments )
    (164) return_val -> . type_dict ( arguments )
    (165) return_val -> . type_generator ( arguments )
    (166) return_val -> . type_linked_list ( arguments )
    (167) return_val -> . type_doubly_linked_list ( arguments )
    (168) return_val -> . type_deque ( arguments )
    (169) return_val -> . type_heap ( arguments )
    (170) return_val -> . type_fibonacci_heap ( arguments )
    (171) return_val -> . type_tree ( arguments )
    (172) return_val -> . type_trie ( arguments )
    (173) return_val -> . type_stack ( arguments )
    (174) return_val -> . type_queue ( arguments )
    (175) return_val -> . type_binary_search_tree ( arguments )
    (176) return_val -> . type_bitset ( arguments )
    (177) return_val -> . type_set ( arguments )
    (178) return_val -> . type_map ( arguments )
    (179) return_val -> . type_range ( arguments )
    (180) return_val -> . type_bad_struct ( arguments )
    (181) return_val -> . type_bad_struct2 ( arguments )
    (182) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 22
    operator_not    shift and go to state 23
    operator_reverse shift and go to state 24
    operator_sorted_incr shift and go to state 25
    operator_sorted_decr shift and go to state 26
    operator_s_combinator shift and go to state 27
    operator_s2_combinator shift and go to state 28
    operator_goodname2 shift and go to state 29
    VAR             shift and go to state 143
    ]               reduce using rule 187 (empty -> .)
    ,               reduce using rule 187 (empty -> .)
    FLOAT           shift and go to state 45
    NUM             shift and go to state 46
    STRING_3SQ      shift and go to state 47
    STRING_3DQ      shift and go to state 48
    STRING_SQ       shift and go to state 49
    STRING_DQ       shift and go to state 50
    true            shift and go to state 51
    Null            shift and go to state 52
    false           shift and go to state 53
    type_type       shift and go to state 54
    type_num        shift and go to state 55
    type_bool       shift and go to state 56
    type_any        shift and go to state 57
    type_u64        shift and go to state 58
    type_u32        shift and go to state 59
    type_u16        shift and go to state 60
    type_u8         shift and go to state 61
    type_i64        shift and go to state 62
    type_i32        shift and go to state 63
    type_i16        shift and go to state 64
    type_i8         shift and go to state 65
    type_f32        shift and go to state 66
    type_f64        shift and go to state 67
    type_str        shift and go to state 68
    type_list       shift and go to state 69
    type_tuple      shift and go to state 70
    type_array      shift and go to state 71
    type_vector     shift and go to state 72
    type_dict       shift and go to state 73
    type_generator  shift and go to state 74
    type_linked_list shift and go to state 75
    type_doubly_linked_list shift and go to state 76
    type_deque      shift and go to state 77
    type_heap       shift and go to state 78
    type_fibonacci_heap shift and go to state 79
    type_tree       shift and go to state 80
    type_trie       shift and go to state 81
    type_stack      shift and go to state 82
    type_queue      shift and go to state 83
    type_binary_search_tree shift and go to state 84
    type_bitset     shift and go to state 85
    type_set        shift and go to state 86
    type_map        shift and go to state 87
    type_range      shift and go to state 88
    type_bad_struct shift and go to state 89
    type_bad_struct2 shift and go to state 90
    lambda          shift and go to state 91

    expr                           shift and go to state 283
    arguments                      shift and go to state 397
    empty                          shift and go to state 285
    item                           shift and go to state 140
    simple_slice                   shift and go to state 141
    full_slice                     shift and go to state 142
    const_val                      shift and go to state 31
    return_val                     shift and go to state 32
    lambda_decl                    shift and go to state 33
    TYPE                           shift and go to state 144

state 395

    (56) simple_slice -> expr [ arguments : arguments ] .

    =               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_add    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_sub    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_mul    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_div    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_trudiv reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_pow    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_join   reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_split  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_scan   reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_reduc  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitand reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitor  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitxor reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitshiftleft reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitshiftright reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_and    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_or     reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_xor    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_contains reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_incr   reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_decr   reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_outer  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_rotate reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_apply  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_compose reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_over   reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_map    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_less_than reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_less_than_equals reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_greater_than reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_greater_than_equals reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_equals reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_not_equals reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_smallest reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_greatest reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_goodname reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    [               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    (               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_bitnot reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_not    reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_reverse reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_sorted_incr reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_sorted_decr reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_s_combinator reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_s2_combinator reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_goodname2 reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    VAR             reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    FLOAT           reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    NUM             reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    STRING_3SQ      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    STRING_3DQ      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    STRING_SQ       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    STRING_DQ       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    true            reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    Null            reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    false           reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_type       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_num        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_bool       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_any        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_u64        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_u32        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_u16        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_u8         reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_i64        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_i32        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_i16        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_i8         reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_f32        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_f64        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_str        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_list       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_tuple      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_array      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_vector     reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_dict       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_generator  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_linked_list reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_doubly_linked_list reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_deque      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_heap       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_fibonacci_heap reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_tree       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_trie       reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_stack      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_queue      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_binary_search_tree reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_bitset     reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_set        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_map        reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_range      reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_bad_struct reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    type_bad_struct2 reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    lambda          reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    NEWLINE         reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    $end            reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    operator_inner  reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    }               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    )               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    {               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    ]               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    :               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)
    ,               reduce using rule 56 (simple_slice -> expr [ arguments : arguments ] .)


state 396

    (88) def_arguments -> declaration_stmt ; def_arguments .

    )               reduce using rule 88 (def_arguments -> declaration_stmt ; def_arguments .)


state 397

    (57) full_slice -> expr [ arguments : arguments : arguments . ]
    (189) arguments -> arguments . , arguments

    ]               shift and go to state 398
    ,               shift and go to state 341


state 398

    (57) full_slice -> expr [ arguments : arguments : arguments ] .

    =               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_add    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_sub    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_mul    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_div    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_trudiv reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_pow    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_join   reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_split  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_scan   reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_reduc  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitand reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitor  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitxor reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitshiftleft reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitshiftright reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_and    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_or     reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_xor    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_contains reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_incr   reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_decr   reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_outer  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_rotate reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_apply  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_compose reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_over   reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_map    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_less_than reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_less_than_equals reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_greater_than reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_greater_than_equals reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_equals reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_not_equals reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_smallest reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_greatest reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_goodname reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    [               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    (               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_bitnot reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_not    reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_reverse reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_sorted_incr reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_sorted_decr reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_s_combinator reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_s2_combinator reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_goodname2 reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    VAR             reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    FLOAT           reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    NUM             reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    STRING_3SQ      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    STRING_3DQ      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    STRING_SQ       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    STRING_DQ       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    true            reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    Null            reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    false           reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_type       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_num        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_bool       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_any        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_u64        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_u32        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_u16        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_u8         reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_i64        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_i32        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_i16        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_i8         reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_f32        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_f64        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_str        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_list       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_tuple      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_array      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_vector     reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_dict       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_generator  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_linked_list reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_doubly_linked_list reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_deque      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_heap       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_fibonacci_heap reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_tree       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_trie       reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_stack      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_queue      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_binary_search_tree reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_bitset     reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_set        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_map        reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_range      reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_bad_struct reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    type_bad_struct2 reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    lambda          reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    NEWLINE         reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    $end            reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    operator_inner  reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    }               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    )               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    {               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    ]               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    :               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)
    ,               reduce using rule 57 (full_slice -> expr [ arguments : arguments : arguments ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 30 resolved as shift
WARNING: shift/reduce conflict for VAR in state 34 resolved as shift
WARNING: shift/reduce conflict for ( in state 54 resolved as shift
WARNING: shift/reduce conflict for ( in state 55 resolved as shift
WARNING: shift/reduce conflict for ( in state 56 resolved as shift
WARNING: shift/reduce conflict for ( in state 57 resolved as shift
WARNING: shift/reduce conflict for ( in state 58 resolved as shift
WARNING: shift/reduce conflict for ( in state 59 resolved as shift
WARNING: shift/reduce conflict for ( in state 60 resolved as shift
WARNING: shift/reduce conflict for ( in state 61 resolved as shift
WARNING: shift/reduce conflict for ( in state 62 resolved as shift
WARNING: shift/reduce conflict for ( in state 63 resolved as shift
WARNING: shift/reduce conflict for ( in state 64 resolved as shift
WARNING: shift/reduce conflict for ( in state 65 resolved as shift
WARNING: shift/reduce conflict for ( in state 66 resolved as shift
WARNING: shift/reduce conflict for ( in state 67 resolved as shift
WARNING: shift/reduce conflict for ( in state 68 resolved as shift
WARNING: shift/reduce conflict for ( in state 69 resolved as shift
WARNING: shift/reduce conflict for ( in state 70 resolved as shift
WARNING: shift/reduce conflict for ( in state 71 resolved as shift
WARNING: shift/reduce conflict for ( in state 72 resolved as shift
WARNING: shift/reduce conflict for ( in state 73 resolved as shift
WARNING: shift/reduce conflict for ( in state 74 resolved as shift
WARNING: shift/reduce conflict for ( in state 75 resolved as shift
WARNING: shift/reduce conflict for ( in state 76 resolved as shift
WARNING: shift/reduce conflict for ( in state 77 resolved as shift
WARNING: shift/reduce conflict for ( in state 78 resolved as shift
WARNING: shift/reduce conflict for ( in state 79 resolved as shift
WARNING: shift/reduce conflict for ( in state 80 resolved as shift
WARNING: shift/reduce conflict for ( in state 81 resolved as shift
WARNING: shift/reduce conflict for ( in state 82 resolved as shift
WARNING: shift/reduce conflict for ( in state 83 resolved as shift
WARNING: shift/reduce conflict for ( in state 84 resolved as shift
WARNING: shift/reduce conflict for ( in state 85 resolved as shift
WARNING: shift/reduce conflict for ( in state 86 resolved as shift
WARNING: shift/reduce conflict for ( in state 87 resolved as shift
WARNING: shift/reduce conflict for ( in state 88 resolved as shift
WARNING: shift/reduce conflict for ( in state 89 resolved as shift
WARNING: shift/reduce conflict for ( in state 90 resolved as shift
WARNING: shift/reduce conflict for ( in state 143 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 383 resolved as shift
WARNING: shift/reduce conflict for [ in state 383 resolved as shift
WARNING: shift/reduce conflict for ( in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_s2_combinator in state 383 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 383 resolved as shift
WARNING: shift/reduce conflict for VAR in state 383 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 383 resolved as shift
WARNING: shift/reduce conflict for NUM in state 383 resolved as shift
WARNING: shift/reduce conflict for STRING_3SQ in state 383 resolved as shift
WARNING: shift/reduce conflict for STRING_3DQ in state 383 resolved as shift
WARNING: shift/reduce conflict for STRING_SQ in state 383 resolved as shift
WARNING: shift/reduce conflict for STRING_DQ in state 383 resolved as shift
WARNING: shift/reduce conflict for true in state 383 resolved as shift
WARNING: shift/reduce conflict for Null in state 383 resolved as shift
WARNING: shift/reduce conflict for false in state 383 resolved as shift
WARNING: shift/reduce conflict for type_type in state 383 resolved as shift
WARNING: shift/reduce conflict for type_num in state 383 resolved as shift
WARNING: shift/reduce conflict for type_bool in state 383 resolved as shift
WARNING: shift/reduce conflict for type_any in state 383 resolved as shift
WARNING: shift/reduce conflict for type_u64 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_u32 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_u16 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_u8 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_i64 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_i32 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_i16 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_i8 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_f32 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_f64 in state 383 resolved as shift
WARNING: shift/reduce conflict for type_str in state 383 resolved as shift
WARNING: shift/reduce conflict for type_list in state 383 resolved as shift
WARNING: shift/reduce conflict for type_tuple in state 383 resolved as shift
WARNING: shift/reduce conflict for type_array in state 383 resolved as shift
WARNING: shift/reduce conflict for type_vector in state 383 resolved as shift
WARNING: shift/reduce conflict for type_dict in state 383 resolved as shift
WARNING: shift/reduce conflict for type_generator in state 383 resolved as shift
WARNING: shift/reduce conflict for type_linked_list in state 383 resolved as shift
WARNING: shift/reduce conflict for type_doubly_linked_list in state 383 resolved as shift
WARNING: shift/reduce conflict for type_deque in state 383 resolved as shift
WARNING: shift/reduce conflict for type_heap in state 383 resolved as shift
WARNING: shift/reduce conflict for type_fibonacci_heap in state 383 resolved as shift
WARNING: shift/reduce conflict for type_tree in state 383 resolved as shift
WARNING: shift/reduce conflict for type_trie in state 383 resolved as shift
WARNING: shift/reduce conflict for type_stack in state 383 resolved as shift
WARNING: shift/reduce conflict for type_queue in state 383 resolved as shift
WARNING: shift/reduce conflict for type_binary_search_tree in state 383 resolved as shift
WARNING: shift/reduce conflict for type_bitset in state 383 resolved as shift
WARNING: shift/reduce conflict for type_set in state 383 resolved as shift
WARNING: shift/reduce conflict for type_map in state 383 resolved as shift
WARNING: shift/reduce conflict for type_range in state 383 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct in state 383 resolved as shift
WARNING: shift/reduce conflict for type_bad_struct2 in state 383 resolved as shift
WARNING: shift/reduce conflict for lambda in state 383 resolved as shift
WARNING: shift/reduce conflict for , in state 391 resolved as shift

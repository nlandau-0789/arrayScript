Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts
Rule 2     program -> newline stmts
Rule 3     program -> newline stmts newline
Rule 4     newline -> NEWLINE
Rule 5     newline -> NEWLINE newline
Rule 6     stmts -> stmt
Rule 7     stmts -> stmts newline stmt
Rule 8     stmts -> block_stmt stmts
Rule 9     stmt -> line_stmt
Rule 10    stmt -> block_stmt
Rule 11    TYPE -> type_type
Rule 12    TYPE -> type_num
Rule 13    TYPE -> type_bool
Rule 14    TYPE -> type_any
Rule 15    TYPE -> type_u64
Rule 16    TYPE -> type_u32
Rule 17    TYPE -> type_u16
Rule 18    TYPE -> type_u8
Rule 19    TYPE -> type_i64
Rule 20    TYPE -> type_i32
Rule 21    TYPE -> type_i16
Rule 22    TYPE -> type_i8
Rule 23    TYPE -> type_f32
Rule 24    TYPE -> type_f64
Rule 25    TYPE -> type_str
Rule 26    TYPE -> type_list
Rule 27    TYPE -> type_tuple
Rule 28    TYPE -> type_array
Rule 29    TYPE -> type_vector
Rule 30    TYPE -> type_dict
Rule 31    TYPE -> type_generator
Rule 32    TYPE -> type_linked_list
Rule 33    TYPE -> type_doubly_linked_list
Rule 34    TYPE -> type_deque
Rule 35    TYPE -> type_heap
Rule 36    TYPE -> type_fibonacci_heap
Rule 37    TYPE -> type_tree
Rule 38    TYPE -> type_trie
Rule 39    TYPE -> type_stack
Rule 40    TYPE -> type_queue
Rule 41    TYPE -> type_binary_search_tree
Rule 42    TYPE -> type_bitset
Rule 43    TYPE -> type_set
Rule 44    TYPE -> type_map
Rule 45    TYPE -> type_range
Rule 46    line_stmt -> return_stmt
Rule 47    line_stmt -> expr
Rule 48    line_stmt -> word_stmt
Rule 49    line_stmt -> del_stmt
Rule 50    line_stmt -> declaration_stmt
Rule 51    line_stmt -> assign_stmt
Rule 52    item -> expr [ expr ]
Rule 53    simple_slice -> expr [ expr : expr ]
Rule 54    full_slice -> expr [ expr : expr : expr ]
Rule 55    expr -> item
Rule 56    expr -> simple_slice
Rule 57    expr -> full_slice
Rule 58    lambda_decl -> lambda comma_separated_names : expr
Rule 59    return_stmt -> return expr
Rule 60    del_stmt -> del expr
Rule 61    assign_stmt -> comma_separated_names = expr
Rule 62    assign_stmt -> item = expr
Rule 63    assign_stmt -> simple_slice = expr
Rule 64    assign_stmt -> full_slice = expr
Rule 65    declaration_stmt -> TYPE comma_separated_names
Rule 66    comma_separated_names -> VAR
Rule 67    comma_separated_names -> VAR , comma_separated_names
Rule 68    block_stmt -> block_decl { stmts }
Rule 69    word_stmt -> break
Rule 70    word_stmt -> return
Rule 71    word_stmt -> continue
Rule 72    word_stmt -> pass
Rule 73    block_stmt -> block_decl { }
Rule 74    block_stmt -> block_decl { newline }
Rule 75    block_decl -> for_decl
Rule 76    block_decl -> if_decl
Rule 77    block_decl -> else_decl
Rule 78    block_decl -> elif_decl
Rule 79    block_decl -> operator_decl
Rule 80    block_decl -> struct_decl
Rule 81    block_decl -> while_decl
Rule 82    block_decl -> func_decl
Rule 83    for_decl -> for comma_separated_names operator_contains expr
Rule 84    if_decl -> if expr
Rule 85    elif_decl -> elif expr
Rule 86    else_decl -> else
Rule 87    operator_decl -> operator ( arguments )
Rule 88    struct_decl -> struct TYPE
Rule 89    while_decl -> while expr
Rule 90    func_decl -> func VAR ( def_arguments )
Rule 91    def_arguments -> declaration_stmt
Rule 92    def_arguments -> empty
Rule 93    def_arguments -> declaration_stmt ; def_arguments
Rule 94    const_val -> FLOAT
Rule 95    const_val -> NUM
Rule 96    const_val -> STRING_3SQ
Rule 97    const_val -> STRING_3DQ
Rule 98    const_val -> STRING_SQ
Rule 99    const_val -> STRING_DQ
Rule 100   const_val -> true
Rule 101   const_val -> Null
Rule 102   const_val -> false
Rule 103   expr -> ( expr )
Rule 104   expr -> expr operator_add expr
Rule 105   expr -> expr operator_sub expr
Rule 106   expr -> expr operator_mul expr
Rule 107   expr -> expr operator_div expr
Rule 108   expr -> expr operator_trudiv expr
Rule 109   expr -> expr operator_pow expr
Rule 110   expr -> expr operator_join expr
Rule 111   expr -> expr operator_split expr
Rule 112   expr -> OPERATOR operator_scan expr
Rule 113   expr -> OPERATOR operator_reduc expr
Rule 114   expr -> expr operator_bitand expr
Rule 115   expr -> expr operator_bitor expr
Rule 116   expr -> expr operator_bitxor expr
Rule 117   expr -> expr operator_bitshiftleft expr
Rule 118   expr -> expr operator_bitshiftright expr
Rule 119   expr -> expr operator_and expr
Rule 120   expr -> expr operator_or expr
Rule 121   expr -> expr operator_xor expr
Rule 122   expr -> expr operator_contains expr
Rule 123   expr -> operator_bitnot expr
Rule 124   expr -> operator_not expr
Rule 125   expr -> expr operator_incr
Rule 126   expr -> expr operator_decr
Rule 127   expr -> expr operator_outer OPERATOR expr
Rule 128   expr -> expr OPERATOR operator_inner OPERATOR expr
Rule 129   expr -> operator_reverse expr
Rule 130   expr -> expr operator_rotate expr
Rule 131   expr -> expr operator_apply expr
Rule 132   expr -> expr operator_compose expr
Rule 133   expr -> expr operator_over expr
Rule 134   expr -> expr operator_map
Rule 135   expr -> operator_sorted_incr expr
Rule 136   expr -> operator_sorted_decr expr
Rule 137   expr -> expr operator_less_than expr
Rule 138   expr -> expr operator_less_than_equals expr
Rule 139   expr -> expr operator_greater_than expr
Rule 140   expr -> expr operator_greater_than_equals expr
Rule 141   expr -> expr operator_equals expr
Rule 142   expr -> expr operator_not_equals expr
Rule 143   expr -> expr operator_smallest expr
Rule 144   expr -> expr operator_greatest expr
Rule 145   expr -> VAR
Rule 146   return_val -> type_type ( arguments )
Rule 147   return_val -> type_num ( arguments )
Rule 148   return_val -> type_bool ( arguments )
Rule 149   return_val -> type_any ( arguments )
Rule 150   return_val -> type_u64 ( arguments )
Rule 151   return_val -> type_u32 ( arguments )
Rule 152   return_val -> type_u16 ( arguments )
Rule 153   return_val -> type_u8 ( arguments )
Rule 154   return_val -> type_i64 ( arguments )
Rule 155   return_val -> type_i32 ( arguments )
Rule 156   return_val -> type_i16 ( arguments )
Rule 157   return_val -> type_i8 ( arguments )
Rule 158   return_val -> type_f32 ( arguments )
Rule 159   return_val -> type_f64 ( arguments )
Rule 160   return_val -> type_str ( arguments )
Rule 161   return_val -> type_list ( arguments )
Rule 162   return_val -> type_tuple ( arguments )
Rule 163   return_val -> type_array ( arguments )
Rule 164   return_val -> type_vector ( arguments )
Rule 165   return_val -> type_dict ( arguments )
Rule 166   return_val -> type_generator ( arguments )
Rule 167   return_val -> type_linked_list ( arguments )
Rule 168   return_val -> type_doubly_linked_list ( arguments )
Rule 169   return_val -> type_deque ( arguments )
Rule 170   return_val -> type_heap ( arguments )
Rule 171   return_val -> type_fibonacci_heap ( arguments )
Rule 172   return_val -> type_tree ( arguments )
Rule 173   return_val -> type_trie ( arguments )
Rule 174   return_val -> type_stack ( arguments )
Rule 175   return_val -> type_queue ( arguments )
Rule 176   return_val -> type_binary_search_tree ( arguments )
Rule 177   return_val -> type_bitset ( arguments )
Rule 178   return_val -> type_set ( arguments )
Rule 179   return_val -> type_map ( arguments )
Rule 180   return_val -> type_range ( arguments )
Rule 181   return_val -> VAR ( arguments )
Rule 182   expr -> const_val
Rule 183   expr -> return_val
Rule 184   expr -> lambda_decl
Rule 185   expr -> TYPE
Rule 186   empty -> <empty>
Rule 187   arguments -> expr
Rule 188   arguments -> arguments , arguments
Rule 189   arguments -> empty
Rule 190   OPERATOR -> operator_add
Rule 191   OPERATOR -> operator_sub
Rule 192   OPERATOR -> operator_mul
Rule 193   OPERATOR -> operator_div
Rule 194   OPERATOR -> operator_trudiv
Rule 195   OPERATOR -> operator_pow
Rule 196   OPERATOR -> operator_join
Rule 197   OPERATOR -> operator_split
Rule 198   OPERATOR -> operator_scan
Rule 199   OPERATOR -> operator_reduc
Rule 200   OPERATOR -> operator_bitand
Rule 201   OPERATOR -> operator_bitor
Rule 202   OPERATOR -> operator_bitxor
Rule 203   OPERATOR -> operator_bitshiftleft
Rule 204   OPERATOR -> operator_bitshiftright
Rule 205   OPERATOR -> operator_and
Rule 206   OPERATOR -> operator_or
Rule 207   OPERATOR -> operator_xor
Rule 208   OPERATOR -> operator_contains
Rule 209   OPERATOR -> operator_bitnot
Rule 210   OPERATOR -> operator_not
Rule 211   OPERATOR -> operator_incr
Rule 212   OPERATOR -> operator_decr
Rule 213   OPERATOR -> operator_outer
Rule 214   OPERATOR -> operator_inner
Rule 215   OPERATOR -> operator_reverse
Rule 216   OPERATOR -> operator_rotate
Rule 217   OPERATOR -> operator_apply
Rule 218   OPERATOR -> operator_compose
Rule 219   OPERATOR -> operator_over
Rule 220   OPERATOR -> operator_map
Rule 221   OPERATOR -> operator_sorted_incr
Rule 222   OPERATOR -> operator_sorted_decr
Rule 223   OPERATOR -> operator_less_than
Rule 224   OPERATOR -> operator_less_than_equals
Rule 225   OPERATOR -> operator_greater_than
Rule 226   OPERATOR -> operator_greater_than_equals
Rule 227   OPERATOR -> operator_equals
Rule 228   OPERATOR -> operator_not_equals
Rule 229   OPERATOR -> operator_smallest
Rule 230   OPERATOR -> operator_greatest

Terminals, with rules where they appear

(                    : 87 90 103 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181
)                    : 87 90 103 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181
,                    : 67 188
:                    : 53 54 54 58
;                    : 93
=                    : 61 62 63 64
FLOAT                : 94
NEWLINE              : 4 5
NUM                  : 95
Null                 : 101
STRING_3DQ           : 97
STRING_3SQ           : 96
STRING_DQ            : 99
STRING_SQ            : 98
VAR                  : 66 67 90 145 181
[                    : 52 53 54
]                    : 52 53 54
break                : 69
continue             : 71
del                  : 60
elif                 : 85
else                 : 86
error                : 
false                : 102
for                  : 83
func                 : 90
if                   : 84
lambda               : 58
operator             : 87
operator_add         : 104 190
operator_and         : 119 205
operator_apply       : 131 217
operator_bitand      : 114 200
operator_bitnot      : 123 209
operator_bitor       : 115 201
operator_bitshiftleft : 117 203
operator_bitshiftright : 118 204
operator_bitxor      : 116 202
operator_compose     : 132 218
operator_contains    : 83 122 208
operator_decr        : 126 212
operator_div         : 107 193
operator_equals      : 141 227
operator_greater_than : 139 225
operator_greater_than_equals : 140 226
operator_greatest    : 144 230
operator_incr        : 125 211
operator_inner       : 128 214
operator_join        : 110 196
operator_less_than   : 137 223
operator_less_than_equals : 138 224
operator_map         : 134 220
operator_mul         : 106 192
operator_not         : 124 210
operator_not_equals  : 142 228
operator_or          : 120 206
operator_outer       : 127 213
operator_over        : 133 219
operator_pow         : 109 195
operator_reduc       : 113 199
operator_reverse     : 129 215
operator_rotate      : 130 216
operator_scan        : 112 198
operator_smallest    : 143 229
operator_sorted_decr : 136 222
operator_sorted_incr : 135 221
operator_split       : 111 197
operator_sub         : 105 191
operator_trudiv      : 108 194
operator_xor         : 121 207
pass                 : 72
return               : 59 70
struct               : 88
true                 : 100
type_any             : 14 149
type_array           : 28 163
type_binary_search_tree : 41 176
type_bitset          : 42 177
type_bool            : 13 148
type_deque           : 34 169
type_dict            : 30 165
type_doubly_linked_list : 33 168
type_f32             : 23 158
type_f64             : 24 159
type_fibonacci_heap  : 36 171
type_generator       : 31 166
type_heap            : 35 170
type_i16             : 21 156
type_i32             : 20 155
type_i64             : 19 154
type_i8              : 22 157
type_linked_list     : 32 167
type_list            : 26 161
type_map             : 44 179
type_num             : 12 147
type_queue           : 40 175
type_range           : 45 180
type_set             : 43 178
type_stack           : 39 174
type_str             : 25 160
type_tree            : 37 172
type_trie            : 38 173
type_tuple           : 27 162
type_type            : 11 146
type_u16             : 17 152
type_u32             : 16 151
type_u64             : 15 150
type_u8              : 18 153
type_vector          : 29 164
while                : 89
{                    : 68 73 74
}                    : 68 73 74

Nonterminals, with rules where they appear

OPERATOR             : 112 113 127 128 128
TYPE                 : 65 88 185
arguments            : 87 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 188 188
assign_stmt          : 51
block_decl           : 68 73 74
block_stmt           : 8 10
comma_separated_names : 58 61 65 67 83
const_val            : 182
declaration_stmt     : 50 91 93
def_arguments        : 90 93
del_stmt             : 49
elif_decl            : 78
else_decl            : 77
empty                : 92 189
expr                 : 47 52 52 53 53 53 54 54 54 54 58 59 60 61 62 63 64 83 84 85 89 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 111 112 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 124 125 126 127 127 128 128 129 130 130 131 131 132 132 133 133 134 135 136 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 187
for_decl             : 75
full_slice           : 57 64
func_decl            : 82
if_decl              : 76
item                 : 55 62
lambda_decl          : 184
line_stmt            : 9
newline              : 2 3 3 5 7 74
operator_decl        : 79
program              : 0
return_stmt          : 46
return_val           : 183
simple_slice         : 56 63
stmt                 : 6 7
stmts                : 1 2 3 7 8 68
struct_decl          : 80
while_decl           : 81
word_stmt            : 48

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts
    (2) program -> . newline stmts
    (3) program -> . newline stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmts -> . block_stmt stmts
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    NEWLINE         shift and go to state 6
    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    newline                        shift and go to state 3
    stmt                           shift and go to state 4
    block_stmt                     shift and go to state 5
    line_stmt                      shift and go to state 7
    block_decl                     shift and go to state 8
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts .
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 1 (program -> stmts .)
    NEWLINE         shift and go to state 6

    newline                        shift and go to state 133

state 3

    (2) program -> newline . stmts
    (3) program -> newline . stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmts -> . block_stmt stmts
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    stmts                          shift and go to state 134
    stmt                           shift and go to state 4
    block_stmt                     shift and go to state 5
    line_stmt                      shift and go to state 7
    block_decl                     shift and go to state 8
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79

state 4

    (6) stmts -> stmt .

    NEWLINE         reduce using rule 6 (stmts -> stmt .)
    $end            reduce using rule 6 (stmts -> stmt .)
    }               reduce using rule 6 (stmts -> stmt .)


state 5

    (8) stmts -> block_stmt . stmts
    (10) stmt -> block_stmt .
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmts -> . block_stmt stmts
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    NEWLINE         reduce using rule 10 (stmt -> block_stmt .)
    $end            reduce using rule 10 (stmt -> block_stmt .)
    }               reduce using rule 10 (stmt -> block_stmt .)
    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    block_stmt                     shift and go to state 5
    stmts                          shift and go to state 135
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 7
    block_decl                     shift and go to state 8
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79

state 6

    (4) newline -> NEWLINE .
    (5) newline -> NEWLINE . newline
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    return          reduce using rule 4 (newline -> NEWLINE .)
    (               reduce using rule 4 (newline -> NEWLINE .)
    operator_bitnot reduce using rule 4 (newline -> NEWLINE .)
    operator_not    reduce using rule 4 (newline -> NEWLINE .)
    operator_reverse reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_incr reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_decr reduce using rule 4 (newline -> NEWLINE .)
    VAR             reduce using rule 4 (newline -> NEWLINE .)
    break           reduce using rule 4 (newline -> NEWLINE .)
    continue        reduce using rule 4 (newline -> NEWLINE .)
    pass            reduce using rule 4 (newline -> NEWLINE .)
    del             reduce using rule 4 (newline -> NEWLINE .)
    for             reduce using rule 4 (newline -> NEWLINE .)
    if              reduce using rule 4 (newline -> NEWLINE .)
    else            reduce using rule 4 (newline -> NEWLINE .)
    elif            reduce using rule 4 (newline -> NEWLINE .)
    operator        reduce using rule 4 (newline -> NEWLINE .)
    struct          reduce using rule 4 (newline -> NEWLINE .)
    while           reduce using rule 4 (newline -> NEWLINE .)
    func            reduce using rule 4 (newline -> NEWLINE .)
    operator_add    reduce using rule 4 (newline -> NEWLINE .)
    operator_sub    reduce using rule 4 (newline -> NEWLINE .)
    operator_mul    reduce using rule 4 (newline -> NEWLINE .)
    operator_div    reduce using rule 4 (newline -> NEWLINE .)
    operator_trudiv reduce using rule 4 (newline -> NEWLINE .)
    operator_pow    reduce using rule 4 (newline -> NEWLINE .)
    operator_join   reduce using rule 4 (newline -> NEWLINE .)
    operator_split  reduce using rule 4 (newline -> NEWLINE .)
    operator_scan   reduce using rule 4 (newline -> NEWLINE .)
    operator_reduc  reduce using rule 4 (newline -> NEWLINE .)
    operator_bitand reduce using rule 4 (newline -> NEWLINE .)
    operator_bitor  reduce using rule 4 (newline -> NEWLINE .)
    operator_bitxor reduce using rule 4 (newline -> NEWLINE .)
    operator_bitshiftleft reduce using rule 4 (newline -> NEWLINE .)
    operator_bitshiftright reduce using rule 4 (newline -> NEWLINE .)
    operator_and    reduce using rule 4 (newline -> NEWLINE .)
    operator_or     reduce using rule 4 (newline -> NEWLINE .)
    operator_xor    reduce using rule 4 (newline -> NEWLINE .)
    operator_contains reduce using rule 4 (newline -> NEWLINE .)
    operator_incr   reduce using rule 4 (newline -> NEWLINE .)
    operator_decr   reduce using rule 4 (newline -> NEWLINE .)
    operator_outer  reduce using rule 4 (newline -> NEWLINE .)
    operator_inner  reduce using rule 4 (newline -> NEWLINE .)
    operator_rotate reduce using rule 4 (newline -> NEWLINE .)
    operator_apply  reduce using rule 4 (newline -> NEWLINE .)
    operator_compose reduce using rule 4 (newline -> NEWLINE .)
    operator_over   reduce using rule 4 (newline -> NEWLINE .)
    operator_map    reduce using rule 4 (newline -> NEWLINE .)
    operator_less_than reduce using rule 4 (newline -> NEWLINE .)
    operator_less_than_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_greater_than reduce using rule 4 (newline -> NEWLINE .)
    operator_greater_than_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_not_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_smallest reduce using rule 4 (newline -> NEWLINE .)
    operator_greatest reduce using rule 4 (newline -> NEWLINE .)
    FLOAT           reduce using rule 4 (newline -> NEWLINE .)
    NUM             reduce using rule 4 (newline -> NEWLINE .)
    STRING_3SQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_3DQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_SQ       reduce using rule 4 (newline -> NEWLINE .)
    STRING_DQ       reduce using rule 4 (newline -> NEWLINE .)
    true            reduce using rule 4 (newline -> NEWLINE .)
    Null            reduce using rule 4 (newline -> NEWLINE .)
    false           reduce using rule 4 (newline -> NEWLINE .)
    type_type       reduce using rule 4 (newline -> NEWLINE .)
    type_num        reduce using rule 4 (newline -> NEWLINE .)
    type_bool       reduce using rule 4 (newline -> NEWLINE .)
    type_any        reduce using rule 4 (newline -> NEWLINE .)
    type_u64        reduce using rule 4 (newline -> NEWLINE .)
    type_u32        reduce using rule 4 (newline -> NEWLINE .)
    type_u16        reduce using rule 4 (newline -> NEWLINE .)
    type_u8         reduce using rule 4 (newline -> NEWLINE .)
    type_i64        reduce using rule 4 (newline -> NEWLINE .)
    type_i32        reduce using rule 4 (newline -> NEWLINE .)
    type_i16        reduce using rule 4 (newline -> NEWLINE .)
    type_i8         reduce using rule 4 (newline -> NEWLINE .)
    type_f32        reduce using rule 4 (newline -> NEWLINE .)
    type_f64        reduce using rule 4 (newline -> NEWLINE .)
    type_str        reduce using rule 4 (newline -> NEWLINE .)
    type_list       reduce using rule 4 (newline -> NEWLINE .)
    type_tuple      reduce using rule 4 (newline -> NEWLINE .)
    type_array      reduce using rule 4 (newline -> NEWLINE .)
    type_vector     reduce using rule 4 (newline -> NEWLINE .)
    type_dict       reduce using rule 4 (newline -> NEWLINE .)
    type_generator  reduce using rule 4 (newline -> NEWLINE .)
    type_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_doubly_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_deque      reduce using rule 4 (newline -> NEWLINE .)
    type_heap       reduce using rule 4 (newline -> NEWLINE .)
    type_fibonacci_heap reduce using rule 4 (newline -> NEWLINE .)
    type_tree       reduce using rule 4 (newline -> NEWLINE .)
    type_trie       reduce using rule 4 (newline -> NEWLINE .)
    type_stack      reduce using rule 4 (newline -> NEWLINE .)
    type_queue      reduce using rule 4 (newline -> NEWLINE .)
    type_binary_search_tree reduce using rule 4 (newline -> NEWLINE .)
    type_bitset     reduce using rule 4 (newline -> NEWLINE .)
    type_set        reduce using rule 4 (newline -> NEWLINE .)
    type_map        reduce using rule 4 (newline -> NEWLINE .)
    type_range      reduce using rule 4 (newline -> NEWLINE .)
    lambda          reduce using rule 4 (newline -> NEWLINE .)
    $end            reduce using rule 4 (newline -> NEWLINE .)
    }               reduce using rule 4 (newline -> NEWLINE .)
    NEWLINE         shift and go to state 6

    newline                        shift and go to state 136

state 7

    (9) stmt -> line_stmt .

    NEWLINE         reduce using rule 9 (stmt -> line_stmt .)
    $end            reduce using rule 9 (stmt -> line_stmt .)
    }               reduce using rule 9 (stmt -> line_stmt .)


state 8

    (68) block_stmt -> block_decl . { stmts }
    (73) block_stmt -> block_decl . { }
    (74) block_stmt -> block_decl . { newline }

    {               shift and go to state 137


state 9

    (46) line_stmt -> return_stmt .

    NEWLINE         reduce using rule 46 (line_stmt -> return_stmt .)
    $end            reduce using rule 46 (line_stmt -> return_stmt .)
    }               reduce using rule 46 (line_stmt -> return_stmt .)


state 10

    (47) line_stmt -> expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 47 (line_stmt -> expr .)
    $end            reduce using rule 47 (line_stmt -> expr .)
    }               reduce using rule 47 (line_stmt -> expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 11

    (48) line_stmt -> word_stmt .

    NEWLINE         reduce using rule 48 (line_stmt -> word_stmt .)
    $end            reduce using rule 48 (line_stmt -> word_stmt .)
    }               reduce using rule 48 (line_stmt -> word_stmt .)


state 12

    (49) line_stmt -> del_stmt .

    NEWLINE         reduce using rule 49 (line_stmt -> del_stmt .)
    $end            reduce using rule 49 (line_stmt -> del_stmt .)
    }               reduce using rule 49 (line_stmt -> del_stmt .)


state 13

    (50) line_stmt -> declaration_stmt .

    NEWLINE         reduce using rule 50 (line_stmt -> declaration_stmt .)
    $end            reduce using rule 50 (line_stmt -> declaration_stmt .)
    }               reduce using rule 50 (line_stmt -> declaration_stmt .)


state 14

    (51) line_stmt -> assign_stmt .

    NEWLINE         reduce using rule 51 (line_stmt -> assign_stmt .)
    $end            reduce using rule 51 (line_stmt -> assign_stmt .)
    }               reduce using rule 51 (line_stmt -> assign_stmt .)


state 15

    (75) block_decl -> for_decl .

    {               reduce using rule 75 (block_decl -> for_decl .)


state 16

    (76) block_decl -> if_decl .

    {               reduce using rule 76 (block_decl -> if_decl .)


state 17

    (77) block_decl -> else_decl .

    {               reduce using rule 77 (block_decl -> else_decl .)


state 18

    (78) block_decl -> elif_decl .

    {               reduce using rule 78 (block_decl -> elif_decl .)


state 19

    (79) block_decl -> operator_decl .

    {               reduce using rule 79 (block_decl -> operator_decl .)


state 20

    (80) block_decl -> struct_decl .

    {               reduce using rule 80 (block_decl -> struct_decl .)


state 21

    (81) block_decl -> while_decl .

    {               reduce using rule 81 (block_decl -> while_decl .)


state 22

    (82) block_decl -> func_decl .

    {               reduce using rule 82 (block_decl -> func_decl .)


state 23

    (59) return_stmt -> return . expr
    (70) word_stmt -> return .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    NEWLINE         reduce using rule 70 (word_stmt -> return .)
    $end            reduce using rule 70 (word_stmt -> return .)
    }               reduce using rule 70 (word_stmt -> return .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 178
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 24

    (55) expr -> item .
    (62) assign_stmt -> item . = expr

    operator_add    reduce using rule 55 (expr -> item .)
    operator_sub    reduce using rule 55 (expr -> item .)
    operator_mul    reduce using rule 55 (expr -> item .)
    operator_div    reduce using rule 55 (expr -> item .)
    operator_trudiv reduce using rule 55 (expr -> item .)
    operator_pow    reduce using rule 55 (expr -> item .)
    operator_join   reduce using rule 55 (expr -> item .)
    operator_split  reduce using rule 55 (expr -> item .)
    operator_bitand reduce using rule 55 (expr -> item .)
    operator_bitor  reduce using rule 55 (expr -> item .)
    operator_bitxor reduce using rule 55 (expr -> item .)
    operator_bitshiftleft reduce using rule 55 (expr -> item .)
    operator_bitshiftright reduce using rule 55 (expr -> item .)
    operator_and    reduce using rule 55 (expr -> item .)
    operator_or     reduce using rule 55 (expr -> item .)
    operator_xor    reduce using rule 55 (expr -> item .)
    operator_contains reduce using rule 55 (expr -> item .)
    operator_incr   reduce using rule 55 (expr -> item .)
    operator_decr   reduce using rule 55 (expr -> item .)
    operator_outer  reduce using rule 55 (expr -> item .)
    operator_rotate reduce using rule 55 (expr -> item .)
    operator_apply  reduce using rule 55 (expr -> item .)
    operator_compose reduce using rule 55 (expr -> item .)
    operator_over   reduce using rule 55 (expr -> item .)
    operator_map    reduce using rule 55 (expr -> item .)
    operator_less_than reduce using rule 55 (expr -> item .)
    operator_less_than_equals reduce using rule 55 (expr -> item .)
    operator_greater_than reduce using rule 55 (expr -> item .)
    operator_greater_than_equals reduce using rule 55 (expr -> item .)
    operator_equals reduce using rule 55 (expr -> item .)
    operator_not_equals reduce using rule 55 (expr -> item .)
    operator_smallest reduce using rule 55 (expr -> item .)
    operator_greatest reduce using rule 55 (expr -> item .)
    [               reduce using rule 55 (expr -> item .)
    operator_scan   reduce using rule 55 (expr -> item .)
    operator_reduc  reduce using rule 55 (expr -> item .)
    operator_bitnot reduce using rule 55 (expr -> item .)
    operator_not    reduce using rule 55 (expr -> item .)
    operator_inner  reduce using rule 55 (expr -> item .)
    operator_reverse reduce using rule 55 (expr -> item .)
    operator_sorted_incr reduce using rule 55 (expr -> item .)
    operator_sorted_decr reduce using rule 55 (expr -> item .)
    NEWLINE         reduce using rule 55 (expr -> item .)
    $end            reduce using rule 55 (expr -> item .)
    }               reduce using rule 55 (expr -> item .)
    =               shift and go to state 184


state 25

    (56) expr -> simple_slice .
    (63) assign_stmt -> simple_slice . = expr

    operator_add    reduce using rule 56 (expr -> simple_slice .)
    operator_sub    reduce using rule 56 (expr -> simple_slice .)
    operator_mul    reduce using rule 56 (expr -> simple_slice .)
    operator_div    reduce using rule 56 (expr -> simple_slice .)
    operator_trudiv reduce using rule 56 (expr -> simple_slice .)
    operator_pow    reduce using rule 56 (expr -> simple_slice .)
    operator_join   reduce using rule 56 (expr -> simple_slice .)
    operator_split  reduce using rule 56 (expr -> simple_slice .)
    operator_bitand reduce using rule 56 (expr -> simple_slice .)
    operator_bitor  reduce using rule 56 (expr -> simple_slice .)
    operator_bitxor reduce using rule 56 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 56 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 56 (expr -> simple_slice .)
    operator_and    reduce using rule 56 (expr -> simple_slice .)
    operator_or     reduce using rule 56 (expr -> simple_slice .)
    operator_xor    reduce using rule 56 (expr -> simple_slice .)
    operator_contains reduce using rule 56 (expr -> simple_slice .)
    operator_incr   reduce using rule 56 (expr -> simple_slice .)
    operator_decr   reduce using rule 56 (expr -> simple_slice .)
    operator_outer  reduce using rule 56 (expr -> simple_slice .)
    operator_rotate reduce using rule 56 (expr -> simple_slice .)
    operator_apply  reduce using rule 56 (expr -> simple_slice .)
    operator_compose reduce using rule 56 (expr -> simple_slice .)
    operator_over   reduce using rule 56 (expr -> simple_slice .)
    operator_map    reduce using rule 56 (expr -> simple_slice .)
    operator_less_than reduce using rule 56 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 56 (expr -> simple_slice .)
    operator_greater_than reduce using rule 56 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 56 (expr -> simple_slice .)
    operator_equals reduce using rule 56 (expr -> simple_slice .)
    operator_not_equals reduce using rule 56 (expr -> simple_slice .)
    operator_smallest reduce using rule 56 (expr -> simple_slice .)
    operator_greatest reduce using rule 56 (expr -> simple_slice .)
    [               reduce using rule 56 (expr -> simple_slice .)
    operator_scan   reduce using rule 56 (expr -> simple_slice .)
    operator_reduc  reduce using rule 56 (expr -> simple_slice .)
    operator_bitnot reduce using rule 56 (expr -> simple_slice .)
    operator_not    reduce using rule 56 (expr -> simple_slice .)
    operator_inner  reduce using rule 56 (expr -> simple_slice .)
    operator_reverse reduce using rule 56 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 56 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 56 (expr -> simple_slice .)
    NEWLINE         reduce using rule 56 (expr -> simple_slice .)
    $end            reduce using rule 56 (expr -> simple_slice .)
    }               reduce using rule 56 (expr -> simple_slice .)
    =               shift and go to state 185


state 26

    (57) expr -> full_slice .
    (64) assign_stmt -> full_slice . = expr

    operator_add    reduce using rule 57 (expr -> full_slice .)
    operator_sub    reduce using rule 57 (expr -> full_slice .)
    operator_mul    reduce using rule 57 (expr -> full_slice .)
    operator_div    reduce using rule 57 (expr -> full_slice .)
    operator_trudiv reduce using rule 57 (expr -> full_slice .)
    operator_pow    reduce using rule 57 (expr -> full_slice .)
    operator_join   reduce using rule 57 (expr -> full_slice .)
    operator_split  reduce using rule 57 (expr -> full_slice .)
    operator_bitand reduce using rule 57 (expr -> full_slice .)
    operator_bitor  reduce using rule 57 (expr -> full_slice .)
    operator_bitxor reduce using rule 57 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 57 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 57 (expr -> full_slice .)
    operator_and    reduce using rule 57 (expr -> full_slice .)
    operator_or     reduce using rule 57 (expr -> full_slice .)
    operator_xor    reduce using rule 57 (expr -> full_slice .)
    operator_contains reduce using rule 57 (expr -> full_slice .)
    operator_incr   reduce using rule 57 (expr -> full_slice .)
    operator_decr   reduce using rule 57 (expr -> full_slice .)
    operator_outer  reduce using rule 57 (expr -> full_slice .)
    operator_rotate reduce using rule 57 (expr -> full_slice .)
    operator_apply  reduce using rule 57 (expr -> full_slice .)
    operator_compose reduce using rule 57 (expr -> full_slice .)
    operator_over   reduce using rule 57 (expr -> full_slice .)
    operator_map    reduce using rule 57 (expr -> full_slice .)
    operator_less_than reduce using rule 57 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 57 (expr -> full_slice .)
    operator_greater_than reduce using rule 57 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 57 (expr -> full_slice .)
    operator_equals reduce using rule 57 (expr -> full_slice .)
    operator_not_equals reduce using rule 57 (expr -> full_slice .)
    operator_smallest reduce using rule 57 (expr -> full_slice .)
    operator_greatest reduce using rule 57 (expr -> full_slice .)
    [               reduce using rule 57 (expr -> full_slice .)
    operator_scan   reduce using rule 57 (expr -> full_slice .)
    operator_reduc  reduce using rule 57 (expr -> full_slice .)
    operator_bitnot reduce using rule 57 (expr -> full_slice .)
    operator_not    reduce using rule 57 (expr -> full_slice .)
    operator_inner  reduce using rule 57 (expr -> full_slice .)
    operator_reverse reduce using rule 57 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 57 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 57 (expr -> full_slice .)
    NEWLINE         reduce using rule 57 (expr -> full_slice .)
    $end            reduce using rule 57 (expr -> full_slice .)
    }               reduce using rule 57 (expr -> full_slice .)
    =               shift and go to state 186


state 27

    (103) expr -> ( . expr )
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 187
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 28

    (190) OPERATOR -> operator_add .

    operator_scan   reduce using rule 190 (OPERATOR -> operator_add .)
    operator_reduc  reduce using rule 190 (OPERATOR -> operator_add .)
    (               reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitnot reduce using rule 190 (OPERATOR -> operator_add .)
    operator_not    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_reverse reduce using rule 190 (OPERATOR -> operator_add .)
    operator_sorted_incr reduce using rule 190 (OPERATOR -> operator_add .)
    operator_sorted_decr reduce using rule 190 (OPERATOR -> operator_add .)
    VAR             reduce using rule 190 (OPERATOR -> operator_add .)
    operator_add    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_sub    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_mul    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_div    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_trudiv reduce using rule 190 (OPERATOR -> operator_add .)
    operator_pow    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_join   reduce using rule 190 (OPERATOR -> operator_add .)
    operator_split  reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitand reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitor  reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitxor reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitshiftleft reduce using rule 190 (OPERATOR -> operator_add .)
    operator_bitshiftright reduce using rule 190 (OPERATOR -> operator_add .)
    operator_and    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_or     reduce using rule 190 (OPERATOR -> operator_add .)
    operator_xor    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_contains reduce using rule 190 (OPERATOR -> operator_add .)
    operator_incr   reduce using rule 190 (OPERATOR -> operator_add .)
    operator_decr   reduce using rule 190 (OPERATOR -> operator_add .)
    operator_outer  reduce using rule 190 (OPERATOR -> operator_add .)
    operator_inner  reduce using rule 190 (OPERATOR -> operator_add .)
    operator_rotate reduce using rule 190 (OPERATOR -> operator_add .)
    operator_apply  reduce using rule 190 (OPERATOR -> operator_add .)
    operator_compose reduce using rule 190 (OPERATOR -> operator_add .)
    operator_over   reduce using rule 190 (OPERATOR -> operator_add .)
    operator_map    reduce using rule 190 (OPERATOR -> operator_add .)
    operator_less_than reduce using rule 190 (OPERATOR -> operator_add .)
    operator_less_than_equals reduce using rule 190 (OPERATOR -> operator_add .)
    operator_greater_than reduce using rule 190 (OPERATOR -> operator_add .)
    operator_greater_than_equals reduce using rule 190 (OPERATOR -> operator_add .)
    operator_equals reduce using rule 190 (OPERATOR -> operator_add .)
    operator_not_equals reduce using rule 190 (OPERATOR -> operator_add .)
    operator_smallest reduce using rule 190 (OPERATOR -> operator_add .)
    operator_greatest reduce using rule 190 (OPERATOR -> operator_add .)
    FLOAT           reduce using rule 190 (OPERATOR -> operator_add .)
    NUM             reduce using rule 190 (OPERATOR -> operator_add .)
    STRING_3SQ      reduce using rule 190 (OPERATOR -> operator_add .)
    STRING_3DQ      reduce using rule 190 (OPERATOR -> operator_add .)
    STRING_SQ       reduce using rule 190 (OPERATOR -> operator_add .)
    STRING_DQ       reduce using rule 190 (OPERATOR -> operator_add .)
    true            reduce using rule 190 (OPERATOR -> operator_add .)
    Null            reduce using rule 190 (OPERATOR -> operator_add .)
    false           reduce using rule 190 (OPERATOR -> operator_add .)
    type_type       reduce using rule 190 (OPERATOR -> operator_add .)
    type_num        reduce using rule 190 (OPERATOR -> operator_add .)
    type_bool       reduce using rule 190 (OPERATOR -> operator_add .)
    type_any        reduce using rule 190 (OPERATOR -> operator_add .)
    type_u64        reduce using rule 190 (OPERATOR -> operator_add .)
    type_u32        reduce using rule 190 (OPERATOR -> operator_add .)
    type_u16        reduce using rule 190 (OPERATOR -> operator_add .)
    type_u8         reduce using rule 190 (OPERATOR -> operator_add .)
    type_i64        reduce using rule 190 (OPERATOR -> operator_add .)
    type_i32        reduce using rule 190 (OPERATOR -> operator_add .)
    type_i16        reduce using rule 190 (OPERATOR -> operator_add .)
    type_i8         reduce using rule 190 (OPERATOR -> operator_add .)
    type_f32        reduce using rule 190 (OPERATOR -> operator_add .)
    type_f64        reduce using rule 190 (OPERATOR -> operator_add .)
    type_str        reduce using rule 190 (OPERATOR -> operator_add .)
    type_list       reduce using rule 190 (OPERATOR -> operator_add .)
    type_tuple      reduce using rule 190 (OPERATOR -> operator_add .)
    type_array      reduce using rule 190 (OPERATOR -> operator_add .)
    type_vector     reduce using rule 190 (OPERATOR -> operator_add .)
    type_dict       reduce using rule 190 (OPERATOR -> operator_add .)
    type_generator  reduce using rule 190 (OPERATOR -> operator_add .)
    type_linked_list reduce using rule 190 (OPERATOR -> operator_add .)
    type_doubly_linked_list reduce using rule 190 (OPERATOR -> operator_add .)
    type_deque      reduce using rule 190 (OPERATOR -> operator_add .)
    type_heap       reduce using rule 190 (OPERATOR -> operator_add .)
    type_fibonacci_heap reduce using rule 190 (OPERATOR -> operator_add .)
    type_tree       reduce using rule 190 (OPERATOR -> operator_add .)
    type_trie       reduce using rule 190 (OPERATOR -> operator_add .)
    type_stack      reduce using rule 190 (OPERATOR -> operator_add .)
    type_queue      reduce using rule 190 (OPERATOR -> operator_add .)
    type_binary_search_tree reduce using rule 190 (OPERATOR -> operator_add .)
    type_bitset     reduce using rule 190 (OPERATOR -> operator_add .)
    type_set        reduce using rule 190 (OPERATOR -> operator_add .)
    type_map        reduce using rule 190 (OPERATOR -> operator_add .)
    type_range      reduce using rule 190 (OPERATOR -> operator_add .)
    lambda          reduce using rule 190 (OPERATOR -> operator_add .)


state 29

    (191) OPERATOR -> operator_sub .

    operator_scan   reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_reduc  reduce using rule 191 (OPERATOR -> operator_sub .)
    (               reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitnot reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_not    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_reverse reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_sorted_incr reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_sorted_decr reduce using rule 191 (OPERATOR -> operator_sub .)
    VAR             reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_add    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_sub    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_mul    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_div    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_trudiv reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_pow    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_join   reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_split  reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitand reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitor  reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitxor reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitshiftleft reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_bitshiftright reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_and    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_or     reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_xor    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_contains reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_incr   reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_decr   reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_outer  reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_inner  reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_rotate reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_apply  reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_compose reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_over   reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_map    reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_less_than reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_less_than_equals reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_greater_than reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_greater_than_equals reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_equals reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_not_equals reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_smallest reduce using rule 191 (OPERATOR -> operator_sub .)
    operator_greatest reduce using rule 191 (OPERATOR -> operator_sub .)
    FLOAT           reduce using rule 191 (OPERATOR -> operator_sub .)
    NUM             reduce using rule 191 (OPERATOR -> operator_sub .)
    STRING_3SQ      reduce using rule 191 (OPERATOR -> operator_sub .)
    STRING_3DQ      reduce using rule 191 (OPERATOR -> operator_sub .)
    STRING_SQ       reduce using rule 191 (OPERATOR -> operator_sub .)
    STRING_DQ       reduce using rule 191 (OPERATOR -> operator_sub .)
    true            reduce using rule 191 (OPERATOR -> operator_sub .)
    Null            reduce using rule 191 (OPERATOR -> operator_sub .)
    false           reduce using rule 191 (OPERATOR -> operator_sub .)
    type_type       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_num        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_bool       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_any        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_u64        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_u32        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_u16        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_u8         reduce using rule 191 (OPERATOR -> operator_sub .)
    type_i64        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_i32        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_i16        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_i8         reduce using rule 191 (OPERATOR -> operator_sub .)
    type_f32        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_f64        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_str        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_list       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_tuple      reduce using rule 191 (OPERATOR -> operator_sub .)
    type_array      reduce using rule 191 (OPERATOR -> operator_sub .)
    type_vector     reduce using rule 191 (OPERATOR -> operator_sub .)
    type_dict       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_generator  reduce using rule 191 (OPERATOR -> operator_sub .)
    type_linked_list reduce using rule 191 (OPERATOR -> operator_sub .)
    type_doubly_linked_list reduce using rule 191 (OPERATOR -> operator_sub .)
    type_deque      reduce using rule 191 (OPERATOR -> operator_sub .)
    type_heap       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_fibonacci_heap reduce using rule 191 (OPERATOR -> operator_sub .)
    type_tree       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_trie       reduce using rule 191 (OPERATOR -> operator_sub .)
    type_stack      reduce using rule 191 (OPERATOR -> operator_sub .)
    type_queue      reduce using rule 191 (OPERATOR -> operator_sub .)
    type_binary_search_tree reduce using rule 191 (OPERATOR -> operator_sub .)
    type_bitset     reduce using rule 191 (OPERATOR -> operator_sub .)
    type_set        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_map        reduce using rule 191 (OPERATOR -> operator_sub .)
    type_range      reduce using rule 191 (OPERATOR -> operator_sub .)
    lambda          reduce using rule 191 (OPERATOR -> operator_sub .)


state 30

    (192) OPERATOR -> operator_mul .

    operator_scan   reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_reduc  reduce using rule 192 (OPERATOR -> operator_mul .)
    (               reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitnot reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_not    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_reverse reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_sorted_incr reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_sorted_decr reduce using rule 192 (OPERATOR -> operator_mul .)
    VAR             reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_add    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_sub    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_mul    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_div    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_trudiv reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_pow    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_join   reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_split  reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitand reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitor  reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitxor reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitshiftleft reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_bitshiftright reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_and    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_or     reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_xor    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_contains reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_incr   reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_decr   reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_outer  reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_inner  reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_rotate reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_apply  reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_compose reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_over   reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_map    reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_less_than reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_less_than_equals reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_greater_than reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_greater_than_equals reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_equals reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_not_equals reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_smallest reduce using rule 192 (OPERATOR -> operator_mul .)
    operator_greatest reduce using rule 192 (OPERATOR -> operator_mul .)
    FLOAT           reduce using rule 192 (OPERATOR -> operator_mul .)
    NUM             reduce using rule 192 (OPERATOR -> operator_mul .)
    STRING_3SQ      reduce using rule 192 (OPERATOR -> operator_mul .)
    STRING_3DQ      reduce using rule 192 (OPERATOR -> operator_mul .)
    STRING_SQ       reduce using rule 192 (OPERATOR -> operator_mul .)
    STRING_DQ       reduce using rule 192 (OPERATOR -> operator_mul .)
    true            reduce using rule 192 (OPERATOR -> operator_mul .)
    Null            reduce using rule 192 (OPERATOR -> operator_mul .)
    false           reduce using rule 192 (OPERATOR -> operator_mul .)
    type_type       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_num        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_bool       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_any        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_u64        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_u32        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_u16        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_u8         reduce using rule 192 (OPERATOR -> operator_mul .)
    type_i64        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_i32        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_i16        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_i8         reduce using rule 192 (OPERATOR -> operator_mul .)
    type_f32        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_f64        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_str        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_list       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_tuple      reduce using rule 192 (OPERATOR -> operator_mul .)
    type_array      reduce using rule 192 (OPERATOR -> operator_mul .)
    type_vector     reduce using rule 192 (OPERATOR -> operator_mul .)
    type_dict       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_generator  reduce using rule 192 (OPERATOR -> operator_mul .)
    type_linked_list reduce using rule 192 (OPERATOR -> operator_mul .)
    type_doubly_linked_list reduce using rule 192 (OPERATOR -> operator_mul .)
    type_deque      reduce using rule 192 (OPERATOR -> operator_mul .)
    type_heap       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_fibonacci_heap reduce using rule 192 (OPERATOR -> operator_mul .)
    type_tree       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_trie       reduce using rule 192 (OPERATOR -> operator_mul .)
    type_stack      reduce using rule 192 (OPERATOR -> operator_mul .)
    type_queue      reduce using rule 192 (OPERATOR -> operator_mul .)
    type_binary_search_tree reduce using rule 192 (OPERATOR -> operator_mul .)
    type_bitset     reduce using rule 192 (OPERATOR -> operator_mul .)
    type_set        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_map        reduce using rule 192 (OPERATOR -> operator_mul .)
    type_range      reduce using rule 192 (OPERATOR -> operator_mul .)
    lambda          reduce using rule 192 (OPERATOR -> operator_mul .)


state 31

    (193) OPERATOR -> operator_div .

    operator_scan   reduce using rule 193 (OPERATOR -> operator_div .)
    operator_reduc  reduce using rule 193 (OPERATOR -> operator_div .)
    (               reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitnot reduce using rule 193 (OPERATOR -> operator_div .)
    operator_not    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_reverse reduce using rule 193 (OPERATOR -> operator_div .)
    operator_sorted_incr reduce using rule 193 (OPERATOR -> operator_div .)
    operator_sorted_decr reduce using rule 193 (OPERATOR -> operator_div .)
    VAR             reduce using rule 193 (OPERATOR -> operator_div .)
    operator_add    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_sub    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_mul    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_div    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_trudiv reduce using rule 193 (OPERATOR -> operator_div .)
    operator_pow    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_join   reduce using rule 193 (OPERATOR -> operator_div .)
    operator_split  reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitand reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitor  reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitxor reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitshiftleft reduce using rule 193 (OPERATOR -> operator_div .)
    operator_bitshiftright reduce using rule 193 (OPERATOR -> operator_div .)
    operator_and    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_or     reduce using rule 193 (OPERATOR -> operator_div .)
    operator_xor    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_contains reduce using rule 193 (OPERATOR -> operator_div .)
    operator_incr   reduce using rule 193 (OPERATOR -> operator_div .)
    operator_decr   reduce using rule 193 (OPERATOR -> operator_div .)
    operator_outer  reduce using rule 193 (OPERATOR -> operator_div .)
    operator_inner  reduce using rule 193 (OPERATOR -> operator_div .)
    operator_rotate reduce using rule 193 (OPERATOR -> operator_div .)
    operator_apply  reduce using rule 193 (OPERATOR -> operator_div .)
    operator_compose reduce using rule 193 (OPERATOR -> operator_div .)
    operator_over   reduce using rule 193 (OPERATOR -> operator_div .)
    operator_map    reduce using rule 193 (OPERATOR -> operator_div .)
    operator_less_than reduce using rule 193 (OPERATOR -> operator_div .)
    operator_less_than_equals reduce using rule 193 (OPERATOR -> operator_div .)
    operator_greater_than reduce using rule 193 (OPERATOR -> operator_div .)
    operator_greater_than_equals reduce using rule 193 (OPERATOR -> operator_div .)
    operator_equals reduce using rule 193 (OPERATOR -> operator_div .)
    operator_not_equals reduce using rule 193 (OPERATOR -> operator_div .)
    operator_smallest reduce using rule 193 (OPERATOR -> operator_div .)
    operator_greatest reduce using rule 193 (OPERATOR -> operator_div .)
    FLOAT           reduce using rule 193 (OPERATOR -> operator_div .)
    NUM             reduce using rule 193 (OPERATOR -> operator_div .)
    STRING_3SQ      reduce using rule 193 (OPERATOR -> operator_div .)
    STRING_3DQ      reduce using rule 193 (OPERATOR -> operator_div .)
    STRING_SQ       reduce using rule 193 (OPERATOR -> operator_div .)
    STRING_DQ       reduce using rule 193 (OPERATOR -> operator_div .)
    true            reduce using rule 193 (OPERATOR -> operator_div .)
    Null            reduce using rule 193 (OPERATOR -> operator_div .)
    false           reduce using rule 193 (OPERATOR -> operator_div .)
    type_type       reduce using rule 193 (OPERATOR -> operator_div .)
    type_num        reduce using rule 193 (OPERATOR -> operator_div .)
    type_bool       reduce using rule 193 (OPERATOR -> operator_div .)
    type_any        reduce using rule 193 (OPERATOR -> operator_div .)
    type_u64        reduce using rule 193 (OPERATOR -> operator_div .)
    type_u32        reduce using rule 193 (OPERATOR -> operator_div .)
    type_u16        reduce using rule 193 (OPERATOR -> operator_div .)
    type_u8         reduce using rule 193 (OPERATOR -> operator_div .)
    type_i64        reduce using rule 193 (OPERATOR -> operator_div .)
    type_i32        reduce using rule 193 (OPERATOR -> operator_div .)
    type_i16        reduce using rule 193 (OPERATOR -> operator_div .)
    type_i8         reduce using rule 193 (OPERATOR -> operator_div .)
    type_f32        reduce using rule 193 (OPERATOR -> operator_div .)
    type_f64        reduce using rule 193 (OPERATOR -> operator_div .)
    type_str        reduce using rule 193 (OPERATOR -> operator_div .)
    type_list       reduce using rule 193 (OPERATOR -> operator_div .)
    type_tuple      reduce using rule 193 (OPERATOR -> operator_div .)
    type_array      reduce using rule 193 (OPERATOR -> operator_div .)
    type_vector     reduce using rule 193 (OPERATOR -> operator_div .)
    type_dict       reduce using rule 193 (OPERATOR -> operator_div .)
    type_generator  reduce using rule 193 (OPERATOR -> operator_div .)
    type_linked_list reduce using rule 193 (OPERATOR -> operator_div .)
    type_doubly_linked_list reduce using rule 193 (OPERATOR -> operator_div .)
    type_deque      reduce using rule 193 (OPERATOR -> operator_div .)
    type_heap       reduce using rule 193 (OPERATOR -> operator_div .)
    type_fibonacci_heap reduce using rule 193 (OPERATOR -> operator_div .)
    type_tree       reduce using rule 193 (OPERATOR -> operator_div .)
    type_trie       reduce using rule 193 (OPERATOR -> operator_div .)
    type_stack      reduce using rule 193 (OPERATOR -> operator_div .)
    type_queue      reduce using rule 193 (OPERATOR -> operator_div .)
    type_binary_search_tree reduce using rule 193 (OPERATOR -> operator_div .)
    type_bitset     reduce using rule 193 (OPERATOR -> operator_div .)
    type_set        reduce using rule 193 (OPERATOR -> operator_div .)
    type_map        reduce using rule 193 (OPERATOR -> operator_div .)
    type_range      reduce using rule 193 (OPERATOR -> operator_div .)
    lambda          reduce using rule 193 (OPERATOR -> operator_div .)


state 32

    (194) OPERATOR -> operator_trudiv .

    operator_scan   reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_reduc  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    (               reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitnot reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_not    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_reverse reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_sorted_incr reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_sorted_decr reduce using rule 194 (OPERATOR -> operator_trudiv .)
    VAR             reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_add    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_sub    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_mul    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_div    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_trudiv reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_pow    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_join   reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_split  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitand reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitor  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitxor reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitshiftleft reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_bitshiftright reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_and    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_or     reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_xor    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_contains reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_incr   reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_decr   reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_outer  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_inner  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_rotate reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_apply  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_compose reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_over   reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_map    reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_less_than reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_less_than_equals reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_greater_than reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_greater_than_equals reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_equals reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_not_equals reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_smallest reduce using rule 194 (OPERATOR -> operator_trudiv .)
    operator_greatest reduce using rule 194 (OPERATOR -> operator_trudiv .)
    FLOAT           reduce using rule 194 (OPERATOR -> operator_trudiv .)
    NUM             reduce using rule 194 (OPERATOR -> operator_trudiv .)
    STRING_3SQ      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    STRING_3DQ      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    STRING_SQ       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    STRING_DQ       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    true            reduce using rule 194 (OPERATOR -> operator_trudiv .)
    Null            reduce using rule 194 (OPERATOR -> operator_trudiv .)
    false           reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_type       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_num        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_bool       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_any        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_u64        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_u32        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_u16        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_u8         reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_i64        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_i32        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_i16        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_i8         reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_f32        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_f64        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_str        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_list       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_tuple      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_array      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_vector     reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_dict       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_generator  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_linked_list reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_doubly_linked_list reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_deque      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_heap       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_fibonacci_heap reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_tree       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_trie       reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_stack      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_queue      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_binary_search_tree reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_bitset     reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_set        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_map        reduce using rule 194 (OPERATOR -> operator_trudiv .)
    type_range      reduce using rule 194 (OPERATOR -> operator_trudiv .)
    lambda          reduce using rule 194 (OPERATOR -> operator_trudiv .)


state 33

    (195) OPERATOR -> operator_pow .

    operator_scan   reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_reduc  reduce using rule 195 (OPERATOR -> operator_pow .)
    (               reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitnot reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_not    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_reverse reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_sorted_incr reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_sorted_decr reduce using rule 195 (OPERATOR -> operator_pow .)
    VAR             reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_add    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_sub    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_mul    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_div    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_trudiv reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_pow    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_join   reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_split  reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitand reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitor  reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitxor reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitshiftleft reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_bitshiftright reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_and    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_or     reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_xor    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_contains reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_incr   reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_decr   reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_outer  reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_inner  reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_rotate reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_apply  reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_compose reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_over   reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_map    reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_less_than reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_less_than_equals reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_greater_than reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_greater_than_equals reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_equals reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_not_equals reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_smallest reduce using rule 195 (OPERATOR -> operator_pow .)
    operator_greatest reduce using rule 195 (OPERATOR -> operator_pow .)
    FLOAT           reduce using rule 195 (OPERATOR -> operator_pow .)
    NUM             reduce using rule 195 (OPERATOR -> operator_pow .)
    STRING_3SQ      reduce using rule 195 (OPERATOR -> operator_pow .)
    STRING_3DQ      reduce using rule 195 (OPERATOR -> operator_pow .)
    STRING_SQ       reduce using rule 195 (OPERATOR -> operator_pow .)
    STRING_DQ       reduce using rule 195 (OPERATOR -> operator_pow .)
    true            reduce using rule 195 (OPERATOR -> operator_pow .)
    Null            reduce using rule 195 (OPERATOR -> operator_pow .)
    false           reduce using rule 195 (OPERATOR -> operator_pow .)
    type_type       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_num        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_bool       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_any        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_u64        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_u32        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_u16        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_u8         reduce using rule 195 (OPERATOR -> operator_pow .)
    type_i64        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_i32        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_i16        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_i8         reduce using rule 195 (OPERATOR -> operator_pow .)
    type_f32        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_f64        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_str        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_list       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_tuple      reduce using rule 195 (OPERATOR -> operator_pow .)
    type_array      reduce using rule 195 (OPERATOR -> operator_pow .)
    type_vector     reduce using rule 195 (OPERATOR -> operator_pow .)
    type_dict       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_generator  reduce using rule 195 (OPERATOR -> operator_pow .)
    type_linked_list reduce using rule 195 (OPERATOR -> operator_pow .)
    type_doubly_linked_list reduce using rule 195 (OPERATOR -> operator_pow .)
    type_deque      reduce using rule 195 (OPERATOR -> operator_pow .)
    type_heap       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_fibonacci_heap reduce using rule 195 (OPERATOR -> operator_pow .)
    type_tree       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_trie       reduce using rule 195 (OPERATOR -> operator_pow .)
    type_stack      reduce using rule 195 (OPERATOR -> operator_pow .)
    type_queue      reduce using rule 195 (OPERATOR -> operator_pow .)
    type_binary_search_tree reduce using rule 195 (OPERATOR -> operator_pow .)
    type_bitset     reduce using rule 195 (OPERATOR -> operator_pow .)
    type_set        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_map        reduce using rule 195 (OPERATOR -> operator_pow .)
    type_range      reduce using rule 195 (OPERATOR -> operator_pow .)
    lambda          reduce using rule 195 (OPERATOR -> operator_pow .)


state 34

    (196) OPERATOR -> operator_join .

    operator_scan   reduce using rule 196 (OPERATOR -> operator_join .)
    operator_reduc  reduce using rule 196 (OPERATOR -> operator_join .)
    (               reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitnot reduce using rule 196 (OPERATOR -> operator_join .)
    operator_not    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_reverse reduce using rule 196 (OPERATOR -> operator_join .)
    operator_sorted_incr reduce using rule 196 (OPERATOR -> operator_join .)
    operator_sorted_decr reduce using rule 196 (OPERATOR -> operator_join .)
    VAR             reduce using rule 196 (OPERATOR -> operator_join .)
    operator_add    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_sub    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_mul    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_div    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_trudiv reduce using rule 196 (OPERATOR -> operator_join .)
    operator_pow    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_join   reduce using rule 196 (OPERATOR -> operator_join .)
    operator_split  reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitand reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitor  reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitxor reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitshiftleft reduce using rule 196 (OPERATOR -> operator_join .)
    operator_bitshiftright reduce using rule 196 (OPERATOR -> operator_join .)
    operator_and    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_or     reduce using rule 196 (OPERATOR -> operator_join .)
    operator_xor    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_contains reduce using rule 196 (OPERATOR -> operator_join .)
    operator_incr   reduce using rule 196 (OPERATOR -> operator_join .)
    operator_decr   reduce using rule 196 (OPERATOR -> operator_join .)
    operator_outer  reduce using rule 196 (OPERATOR -> operator_join .)
    operator_inner  reduce using rule 196 (OPERATOR -> operator_join .)
    operator_rotate reduce using rule 196 (OPERATOR -> operator_join .)
    operator_apply  reduce using rule 196 (OPERATOR -> operator_join .)
    operator_compose reduce using rule 196 (OPERATOR -> operator_join .)
    operator_over   reduce using rule 196 (OPERATOR -> operator_join .)
    operator_map    reduce using rule 196 (OPERATOR -> operator_join .)
    operator_less_than reduce using rule 196 (OPERATOR -> operator_join .)
    operator_less_than_equals reduce using rule 196 (OPERATOR -> operator_join .)
    operator_greater_than reduce using rule 196 (OPERATOR -> operator_join .)
    operator_greater_than_equals reduce using rule 196 (OPERATOR -> operator_join .)
    operator_equals reduce using rule 196 (OPERATOR -> operator_join .)
    operator_not_equals reduce using rule 196 (OPERATOR -> operator_join .)
    operator_smallest reduce using rule 196 (OPERATOR -> operator_join .)
    operator_greatest reduce using rule 196 (OPERATOR -> operator_join .)
    FLOAT           reduce using rule 196 (OPERATOR -> operator_join .)
    NUM             reduce using rule 196 (OPERATOR -> operator_join .)
    STRING_3SQ      reduce using rule 196 (OPERATOR -> operator_join .)
    STRING_3DQ      reduce using rule 196 (OPERATOR -> operator_join .)
    STRING_SQ       reduce using rule 196 (OPERATOR -> operator_join .)
    STRING_DQ       reduce using rule 196 (OPERATOR -> operator_join .)
    true            reduce using rule 196 (OPERATOR -> operator_join .)
    Null            reduce using rule 196 (OPERATOR -> operator_join .)
    false           reduce using rule 196 (OPERATOR -> operator_join .)
    type_type       reduce using rule 196 (OPERATOR -> operator_join .)
    type_num        reduce using rule 196 (OPERATOR -> operator_join .)
    type_bool       reduce using rule 196 (OPERATOR -> operator_join .)
    type_any        reduce using rule 196 (OPERATOR -> operator_join .)
    type_u64        reduce using rule 196 (OPERATOR -> operator_join .)
    type_u32        reduce using rule 196 (OPERATOR -> operator_join .)
    type_u16        reduce using rule 196 (OPERATOR -> operator_join .)
    type_u8         reduce using rule 196 (OPERATOR -> operator_join .)
    type_i64        reduce using rule 196 (OPERATOR -> operator_join .)
    type_i32        reduce using rule 196 (OPERATOR -> operator_join .)
    type_i16        reduce using rule 196 (OPERATOR -> operator_join .)
    type_i8         reduce using rule 196 (OPERATOR -> operator_join .)
    type_f32        reduce using rule 196 (OPERATOR -> operator_join .)
    type_f64        reduce using rule 196 (OPERATOR -> operator_join .)
    type_str        reduce using rule 196 (OPERATOR -> operator_join .)
    type_list       reduce using rule 196 (OPERATOR -> operator_join .)
    type_tuple      reduce using rule 196 (OPERATOR -> operator_join .)
    type_array      reduce using rule 196 (OPERATOR -> operator_join .)
    type_vector     reduce using rule 196 (OPERATOR -> operator_join .)
    type_dict       reduce using rule 196 (OPERATOR -> operator_join .)
    type_generator  reduce using rule 196 (OPERATOR -> operator_join .)
    type_linked_list reduce using rule 196 (OPERATOR -> operator_join .)
    type_doubly_linked_list reduce using rule 196 (OPERATOR -> operator_join .)
    type_deque      reduce using rule 196 (OPERATOR -> operator_join .)
    type_heap       reduce using rule 196 (OPERATOR -> operator_join .)
    type_fibonacci_heap reduce using rule 196 (OPERATOR -> operator_join .)
    type_tree       reduce using rule 196 (OPERATOR -> operator_join .)
    type_trie       reduce using rule 196 (OPERATOR -> operator_join .)
    type_stack      reduce using rule 196 (OPERATOR -> operator_join .)
    type_queue      reduce using rule 196 (OPERATOR -> operator_join .)
    type_binary_search_tree reduce using rule 196 (OPERATOR -> operator_join .)
    type_bitset     reduce using rule 196 (OPERATOR -> operator_join .)
    type_set        reduce using rule 196 (OPERATOR -> operator_join .)
    type_map        reduce using rule 196 (OPERATOR -> operator_join .)
    type_range      reduce using rule 196 (OPERATOR -> operator_join .)
    lambda          reduce using rule 196 (OPERATOR -> operator_join .)


state 35

    (197) OPERATOR -> operator_split .

    operator_scan   reduce using rule 197 (OPERATOR -> operator_split .)
    operator_reduc  reduce using rule 197 (OPERATOR -> operator_split .)
    (               reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitnot reduce using rule 197 (OPERATOR -> operator_split .)
    operator_not    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_reverse reduce using rule 197 (OPERATOR -> operator_split .)
    operator_sorted_incr reduce using rule 197 (OPERATOR -> operator_split .)
    operator_sorted_decr reduce using rule 197 (OPERATOR -> operator_split .)
    VAR             reduce using rule 197 (OPERATOR -> operator_split .)
    operator_add    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_sub    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_mul    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_div    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_trudiv reduce using rule 197 (OPERATOR -> operator_split .)
    operator_pow    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_join   reduce using rule 197 (OPERATOR -> operator_split .)
    operator_split  reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitand reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitor  reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitxor reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitshiftleft reduce using rule 197 (OPERATOR -> operator_split .)
    operator_bitshiftright reduce using rule 197 (OPERATOR -> operator_split .)
    operator_and    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_or     reduce using rule 197 (OPERATOR -> operator_split .)
    operator_xor    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_contains reduce using rule 197 (OPERATOR -> operator_split .)
    operator_incr   reduce using rule 197 (OPERATOR -> operator_split .)
    operator_decr   reduce using rule 197 (OPERATOR -> operator_split .)
    operator_outer  reduce using rule 197 (OPERATOR -> operator_split .)
    operator_inner  reduce using rule 197 (OPERATOR -> operator_split .)
    operator_rotate reduce using rule 197 (OPERATOR -> operator_split .)
    operator_apply  reduce using rule 197 (OPERATOR -> operator_split .)
    operator_compose reduce using rule 197 (OPERATOR -> operator_split .)
    operator_over   reduce using rule 197 (OPERATOR -> operator_split .)
    operator_map    reduce using rule 197 (OPERATOR -> operator_split .)
    operator_less_than reduce using rule 197 (OPERATOR -> operator_split .)
    operator_less_than_equals reduce using rule 197 (OPERATOR -> operator_split .)
    operator_greater_than reduce using rule 197 (OPERATOR -> operator_split .)
    operator_greater_than_equals reduce using rule 197 (OPERATOR -> operator_split .)
    operator_equals reduce using rule 197 (OPERATOR -> operator_split .)
    operator_not_equals reduce using rule 197 (OPERATOR -> operator_split .)
    operator_smallest reduce using rule 197 (OPERATOR -> operator_split .)
    operator_greatest reduce using rule 197 (OPERATOR -> operator_split .)
    FLOAT           reduce using rule 197 (OPERATOR -> operator_split .)
    NUM             reduce using rule 197 (OPERATOR -> operator_split .)
    STRING_3SQ      reduce using rule 197 (OPERATOR -> operator_split .)
    STRING_3DQ      reduce using rule 197 (OPERATOR -> operator_split .)
    STRING_SQ       reduce using rule 197 (OPERATOR -> operator_split .)
    STRING_DQ       reduce using rule 197 (OPERATOR -> operator_split .)
    true            reduce using rule 197 (OPERATOR -> operator_split .)
    Null            reduce using rule 197 (OPERATOR -> operator_split .)
    false           reduce using rule 197 (OPERATOR -> operator_split .)
    type_type       reduce using rule 197 (OPERATOR -> operator_split .)
    type_num        reduce using rule 197 (OPERATOR -> operator_split .)
    type_bool       reduce using rule 197 (OPERATOR -> operator_split .)
    type_any        reduce using rule 197 (OPERATOR -> operator_split .)
    type_u64        reduce using rule 197 (OPERATOR -> operator_split .)
    type_u32        reduce using rule 197 (OPERATOR -> operator_split .)
    type_u16        reduce using rule 197 (OPERATOR -> operator_split .)
    type_u8         reduce using rule 197 (OPERATOR -> operator_split .)
    type_i64        reduce using rule 197 (OPERATOR -> operator_split .)
    type_i32        reduce using rule 197 (OPERATOR -> operator_split .)
    type_i16        reduce using rule 197 (OPERATOR -> operator_split .)
    type_i8         reduce using rule 197 (OPERATOR -> operator_split .)
    type_f32        reduce using rule 197 (OPERATOR -> operator_split .)
    type_f64        reduce using rule 197 (OPERATOR -> operator_split .)
    type_str        reduce using rule 197 (OPERATOR -> operator_split .)
    type_list       reduce using rule 197 (OPERATOR -> operator_split .)
    type_tuple      reduce using rule 197 (OPERATOR -> operator_split .)
    type_array      reduce using rule 197 (OPERATOR -> operator_split .)
    type_vector     reduce using rule 197 (OPERATOR -> operator_split .)
    type_dict       reduce using rule 197 (OPERATOR -> operator_split .)
    type_generator  reduce using rule 197 (OPERATOR -> operator_split .)
    type_linked_list reduce using rule 197 (OPERATOR -> operator_split .)
    type_doubly_linked_list reduce using rule 197 (OPERATOR -> operator_split .)
    type_deque      reduce using rule 197 (OPERATOR -> operator_split .)
    type_heap       reduce using rule 197 (OPERATOR -> operator_split .)
    type_fibonacci_heap reduce using rule 197 (OPERATOR -> operator_split .)
    type_tree       reduce using rule 197 (OPERATOR -> operator_split .)
    type_trie       reduce using rule 197 (OPERATOR -> operator_split .)
    type_stack      reduce using rule 197 (OPERATOR -> operator_split .)
    type_queue      reduce using rule 197 (OPERATOR -> operator_split .)
    type_binary_search_tree reduce using rule 197 (OPERATOR -> operator_split .)
    type_bitset     reduce using rule 197 (OPERATOR -> operator_split .)
    type_set        reduce using rule 197 (OPERATOR -> operator_split .)
    type_map        reduce using rule 197 (OPERATOR -> operator_split .)
    type_range      reduce using rule 197 (OPERATOR -> operator_split .)
    lambda          reduce using rule 197 (OPERATOR -> operator_split .)


state 36

    (112) expr -> OPERATOR . operator_scan expr
    (113) expr -> OPERATOR . operator_reduc expr

    operator_scan   shift and go to state 188
    operator_reduc  shift and go to state 189


state 37

    (198) OPERATOR -> operator_scan .

    operator_scan   reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_reduc  reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_inner  reduce using rule 198 (OPERATOR -> operator_scan .)
    (               reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitnot reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_not    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_reverse reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_sorted_incr reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_sorted_decr reduce using rule 198 (OPERATOR -> operator_scan .)
    VAR             reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_add    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_sub    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_mul    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_div    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_trudiv reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_pow    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_join   reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_split  reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitand reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitor  reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitxor reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitshiftleft reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_bitshiftright reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_and    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_or     reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_xor    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_contains reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_incr   reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_decr   reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_outer  reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_rotate reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_apply  reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_compose reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_over   reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_map    reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_less_than reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_less_than_equals reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_greater_than reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_greater_than_equals reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_equals reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_not_equals reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_smallest reduce using rule 198 (OPERATOR -> operator_scan .)
    operator_greatest reduce using rule 198 (OPERATOR -> operator_scan .)
    FLOAT           reduce using rule 198 (OPERATOR -> operator_scan .)
    NUM             reduce using rule 198 (OPERATOR -> operator_scan .)
    STRING_3SQ      reduce using rule 198 (OPERATOR -> operator_scan .)
    STRING_3DQ      reduce using rule 198 (OPERATOR -> operator_scan .)
    STRING_SQ       reduce using rule 198 (OPERATOR -> operator_scan .)
    STRING_DQ       reduce using rule 198 (OPERATOR -> operator_scan .)
    true            reduce using rule 198 (OPERATOR -> operator_scan .)
    Null            reduce using rule 198 (OPERATOR -> operator_scan .)
    false           reduce using rule 198 (OPERATOR -> operator_scan .)
    type_type       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_num        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_bool       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_any        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_u64        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_u32        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_u16        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_u8         reduce using rule 198 (OPERATOR -> operator_scan .)
    type_i64        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_i32        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_i16        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_i8         reduce using rule 198 (OPERATOR -> operator_scan .)
    type_f32        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_f64        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_str        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_list       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_tuple      reduce using rule 198 (OPERATOR -> operator_scan .)
    type_array      reduce using rule 198 (OPERATOR -> operator_scan .)
    type_vector     reduce using rule 198 (OPERATOR -> operator_scan .)
    type_dict       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_generator  reduce using rule 198 (OPERATOR -> operator_scan .)
    type_linked_list reduce using rule 198 (OPERATOR -> operator_scan .)
    type_doubly_linked_list reduce using rule 198 (OPERATOR -> operator_scan .)
    type_deque      reduce using rule 198 (OPERATOR -> operator_scan .)
    type_heap       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_fibonacci_heap reduce using rule 198 (OPERATOR -> operator_scan .)
    type_tree       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_trie       reduce using rule 198 (OPERATOR -> operator_scan .)
    type_stack      reduce using rule 198 (OPERATOR -> operator_scan .)
    type_queue      reduce using rule 198 (OPERATOR -> operator_scan .)
    type_binary_search_tree reduce using rule 198 (OPERATOR -> operator_scan .)
    type_bitset     reduce using rule 198 (OPERATOR -> operator_scan .)
    type_set        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_map        reduce using rule 198 (OPERATOR -> operator_scan .)
    type_range      reduce using rule 198 (OPERATOR -> operator_scan .)
    lambda          reduce using rule 198 (OPERATOR -> operator_scan .)


state 38

    (199) OPERATOR -> operator_reduc .

    operator_scan   reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_reduc  reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_inner  reduce using rule 199 (OPERATOR -> operator_reduc .)
    (               reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitnot reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_not    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_reverse reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_sorted_incr reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_sorted_decr reduce using rule 199 (OPERATOR -> operator_reduc .)
    VAR             reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_add    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_sub    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_mul    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_div    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_trudiv reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_pow    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_join   reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_split  reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitand reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitor  reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitxor reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitshiftleft reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_bitshiftright reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_and    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_or     reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_xor    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_contains reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_incr   reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_decr   reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_outer  reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_rotate reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_apply  reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_compose reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_over   reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_map    reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_less_than reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_less_than_equals reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_greater_than reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_greater_than_equals reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_equals reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_not_equals reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_smallest reduce using rule 199 (OPERATOR -> operator_reduc .)
    operator_greatest reduce using rule 199 (OPERATOR -> operator_reduc .)
    FLOAT           reduce using rule 199 (OPERATOR -> operator_reduc .)
    NUM             reduce using rule 199 (OPERATOR -> operator_reduc .)
    STRING_3SQ      reduce using rule 199 (OPERATOR -> operator_reduc .)
    STRING_3DQ      reduce using rule 199 (OPERATOR -> operator_reduc .)
    STRING_SQ       reduce using rule 199 (OPERATOR -> operator_reduc .)
    STRING_DQ       reduce using rule 199 (OPERATOR -> operator_reduc .)
    true            reduce using rule 199 (OPERATOR -> operator_reduc .)
    Null            reduce using rule 199 (OPERATOR -> operator_reduc .)
    false           reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_type       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_num        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_bool       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_any        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_u64        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_u32        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_u16        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_u8         reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_i64        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_i32        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_i16        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_i8         reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_f32        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_f64        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_str        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_list       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_tuple      reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_array      reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_vector     reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_dict       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_generator  reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_linked_list reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_doubly_linked_list reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_deque      reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_heap       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_fibonacci_heap reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_tree       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_trie       reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_stack      reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_queue      reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_binary_search_tree reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_bitset     reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_set        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_map        reduce using rule 199 (OPERATOR -> operator_reduc .)
    type_range      reduce using rule 199 (OPERATOR -> operator_reduc .)
    lambda          reduce using rule 199 (OPERATOR -> operator_reduc .)


state 39

    (200) OPERATOR -> operator_bitand .

    operator_scan   reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_reduc  reduce using rule 200 (OPERATOR -> operator_bitand .)
    (               reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitnot reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_not    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_reverse reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_sorted_incr reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_sorted_decr reduce using rule 200 (OPERATOR -> operator_bitand .)
    VAR             reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_add    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_sub    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_mul    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_div    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_trudiv reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_pow    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_join   reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_split  reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitand reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitor  reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitxor reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitshiftleft reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_bitshiftright reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_and    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_or     reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_xor    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_contains reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_incr   reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_decr   reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_outer  reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_inner  reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_rotate reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_apply  reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_compose reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_over   reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_map    reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_less_than reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_less_than_equals reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_greater_than reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_greater_than_equals reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_equals reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_not_equals reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_smallest reduce using rule 200 (OPERATOR -> operator_bitand .)
    operator_greatest reduce using rule 200 (OPERATOR -> operator_bitand .)
    FLOAT           reduce using rule 200 (OPERATOR -> operator_bitand .)
    NUM             reduce using rule 200 (OPERATOR -> operator_bitand .)
    STRING_3SQ      reduce using rule 200 (OPERATOR -> operator_bitand .)
    STRING_3DQ      reduce using rule 200 (OPERATOR -> operator_bitand .)
    STRING_SQ       reduce using rule 200 (OPERATOR -> operator_bitand .)
    STRING_DQ       reduce using rule 200 (OPERATOR -> operator_bitand .)
    true            reduce using rule 200 (OPERATOR -> operator_bitand .)
    Null            reduce using rule 200 (OPERATOR -> operator_bitand .)
    false           reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_type       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_num        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_bool       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_any        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_u64        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_u32        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_u16        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_u8         reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_i64        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_i32        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_i16        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_i8         reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_f32        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_f64        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_str        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_list       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_tuple      reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_array      reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_vector     reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_dict       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_generator  reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_linked_list reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_doubly_linked_list reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_deque      reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_heap       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_fibonacci_heap reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_tree       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_trie       reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_stack      reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_queue      reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_binary_search_tree reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_bitset     reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_set        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_map        reduce using rule 200 (OPERATOR -> operator_bitand .)
    type_range      reduce using rule 200 (OPERATOR -> operator_bitand .)
    lambda          reduce using rule 200 (OPERATOR -> operator_bitand .)


state 40

    (201) OPERATOR -> operator_bitor .

    operator_scan   reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_reduc  reduce using rule 201 (OPERATOR -> operator_bitor .)
    (               reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitnot reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_not    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_reverse reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_sorted_incr reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_sorted_decr reduce using rule 201 (OPERATOR -> operator_bitor .)
    VAR             reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_add    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_sub    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_mul    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_div    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_trudiv reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_pow    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_join   reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_split  reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitand reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitor  reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitxor reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitshiftleft reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_bitshiftright reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_and    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_or     reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_xor    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_contains reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_incr   reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_decr   reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_outer  reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_inner  reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_rotate reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_apply  reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_compose reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_over   reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_map    reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_less_than reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_less_than_equals reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_greater_than reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_greater_than_equals reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_equals reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_not_equals reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_smallest reduce using rule 201 (OPERATOR -> operator_bitor .)
    operator_greatest reduce using rule 201 (OPERATOR -> operator_bitor .)
    FLOAT           reduce using rule 201 (OPERATOR -> operator_bitor .)
    NUM             reduce using rule 201 (OPERATOR -> operator_bitor .)
    STRING_3SQ      reduce using rule 201 (OPERATOR -> operator_bitor .)
    STRING_3DQ      reduce using rule 201 (OPERATOR -> operator_bitor .)
    STRING_SQ       reduce using rule 201 (OPERATOR -> operator_bitor .)
    STRING_DQ       reduce using rule 201 (OPERATOR -> operator_bitor .)
    true            reduce using rule 201 (OPERATOR -> operator_bitor .)
    Null            reduce using rule 201 (OPERATOR -> operator_bitor .)
    false           reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_type       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_num        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_bool       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_any        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_u64        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_u32        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_u16        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_u8         reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_i64        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_i32        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_i16        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_i8         reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_f32        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_f64        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_str        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_list       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_tuple      reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_array      reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_vector     reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_dict       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_generator  reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_linked_list reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_doubly_linked_list reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_deque      reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_heap       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_fibonacci_heap reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_tree       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_trie       reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_stack      reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_queue      reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_binary_search_tree reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_bitset     reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_set        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_map        reduce using rule 201 (OPERATOR -> operator_bitor .)
    type_range      reduce using rule 201 (OPERATOR -> operator_bitor .)
    lambda          reduce using rule 201 (OPERATOR -> operator_bitor .)


state 41

    (202) OPERATOR -> operator_bitxor .

    operator_scan   reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_reduc  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    (               reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitnot reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_not    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_reverse reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_sorted_incr reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_sorted_decr reduce using rule 202 (OPERATOR -> operator_bitxor .)
    VAR             reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_add    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_sub    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_mul    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_div    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_trudiv reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_pow    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_join   reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_split  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitand reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitor  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitxor reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitshiftleft reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_bitshiftright reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_and    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_or     reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_xor    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_contains reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_incr   reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_decr   reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_outer  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_inner  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_rotate reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_apply  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_compose reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_over   reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_map    reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_less_than reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_less_than_equals reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_greater_than reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_greater_than_equals reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_equals reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_not_equals reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_smallest reduce using rule 202 (OPERATOR -> operator_bitxor .)
    operator_greatest reduce using rule 202 (OPERATOR -> operator_bitxor .)
    FLOAT           reduce using rule 202 (OPERATOR -> operator_bitxor .)
    NUM             reduce using rule 202 (OPERATOR -> operator_bitxor .)
    STRING_3SQ      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    STRING_3DQ      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    STRING_SQ       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    STRING_DQ       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    true            reduce using rule 202 (OPERATOR -> operator_bitxor .)
    Null            reduce using rule 202 (OPERATOR -> operator_bitxor .)
    false           reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_type       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_num        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_bool       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_any        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_u64        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_u32        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_u16        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_u8         reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_i64        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_i32        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_i16        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_i8         reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_f32        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_f64        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_str        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_list       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_tuple      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_array      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_vector     reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_dict       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_generator  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_linked_list reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_doubly_linked_list reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_deque      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_heap       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_fibonacci_heap reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_tree       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_trie       reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_stack      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_queue      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_binary_search_tree reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_bitset     reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_set        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_map        reduce using rule 202 (OPERATOR -> operator_bitxor .)
    type_range      reduce using rule 202 (OPERATOR -> operator_bitxor .)
    lambda          reduce using rule 202 (OPERATOR -> operator_bitxor .)


state 42

    (203) OPERATOR -> operator_bitshiftleft .

    operator_scan   reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_reduc  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    (               reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitnot reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_not    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_reverse reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_sorted_incr reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_sorted_decr reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    VAR             reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_add    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_sub    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_mul    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_div    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_trudiv reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_pow    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_join   reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_split  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitand reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitor  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitxor reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitshiftleft reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_bitshiftright reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_and    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_or     reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_xor    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_contains reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_incr   reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_decr   reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_outer  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_inner  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_rotate reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_apply  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_compose reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_over   reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_map    reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_less_than reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_less_than_equals reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_greater_than reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_greater_than_equals reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_equals reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_not_equals reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_smallest reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    operator_greatest reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    FLOAT           reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    NUM             reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    STRING_3SQ      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    STRING_3DQ      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    STRING_SQ       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    STRING_DQ       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    true            reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    Null            reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    false           reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_type       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_num        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_bool       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_any        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_u64        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_u32        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_u16        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_u8         reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_i64        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_i32        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_i16        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_i8         reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_f32        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_f64        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_str        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_list       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_tuple      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_array      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_vector     reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_dict       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_generator  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_linked_list reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_doubly_linked_list reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_deque      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_heap       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_fibonacci_heap reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_tree       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_trie       reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_stack      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_queue      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_binary_search_tree reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_bitset     reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_set        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_map        reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    type_range      reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    lambda          reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)


state 43

    (204) OPERATOR -> operator_bitshiftright .

    operator_scan   reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_reduc  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    (               reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitnot reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_not    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_reverse reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_sorted_incr reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_sorted_decr reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    VAR             reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_add    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_sub    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_mul    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_div    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_trudiv reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_pow    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_join   reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_split  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitand reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitor  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitxor reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitshiftleft reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_bitshiftright reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_and    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_or     reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_xor    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_contains reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_incr   reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_decr   reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_outer  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_inner  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_rotate reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_apply  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_compose reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_over   reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_map    reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_less_than reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_less_than_equals reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_greater_than reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_greater_than_equals reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_equals reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_not_equals reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_smallest reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    operator_greatest reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    FLOAT           reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    NUM             reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    STRING_3SQ      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    STRING_3DQ      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    STRING_SQ       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    STRING_DQ       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    true            reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    Null            reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    false           reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_type       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_num        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_bool       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_any        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_u64        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_u32        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_u16        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_u8         reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_i64        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_i32        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_i16        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_i8         reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_f32        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_f64        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_str        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_list       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_tuple      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_array      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_vector     reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_dict       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_generator  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_linked_list reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_doubly_linked_list reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_deque      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_heap       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_fibonacci_heap reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_tree       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_trie       reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_stack      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_queue      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_binary_search_tree reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_bitset     reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_set        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_map        reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    type_range      reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    lambda          reduce using rule 204 (OPERATOR -> operator_bitshiftright .)


state 44

    (205) OPERATOR -> operator_and .

    operator_scan   reduce using rule 205 (OPERATOR -> operator_and .)
    operator_reduc  reduce using rule 205 (OPERATOR -> operator_and .)
    (               reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitnot reduce using rule 205 (OPERATOR -> operator_and .)
    operator_not    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_reverse reduce using rule 205 (OPERATOR -> operator_and .)
    operator_sorted_incr reduce using rule 205 (OPERATOR -> operator_and .)
    operator_sorted_decr reduce using rule 205 (OPERATOR -> operator_and .)
    VAR             reduce using rule 205 (OPERATOR -> operator_and .)
    operator_add    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_sub    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_mul    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_div    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_trudiv reduce using rule 205 (OPERATOR -> operator_and .)
    operator_pow    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_join   reduce using rule 205 (OPERATOR -> operator_and .)
    operator_split  reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitand reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitor  reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitxor reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitshiftleft reduce using rule 205 (OPERATOR -> operator_and .)
    operator_bitshiftright reduce using rule 205 (OPERATOR -> operator_and .)
    operator_and    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_or     reduce using rule 205 (OPERATOR -> operator_and .)
    operator_xor    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_contains reduce using rule 205 (OPERATOR -> operator_and .)
    operator_incr   reduce using rule 205 (OPERATOR -> operator_and .)
    operator_decr   reduce using rule 205 (OPERATOR -> operator_and .)
    operator_outer  reduce using rule 205 (OPERATOR -> operator_and .)
    operator_inner  reduce using rule 205 (OPERATOR -> operator_and .)
    operator_rotate reduce using rule 205 (OPERATOR -> operator_and .)
    operator_apply  reduce using rule 205 (OPERATOR -> operator_and .)
    operator_compose reduce using rule 205 (OPERATOR -> operator_and .)
    operator_over   reduce using rule 205 (OPERATOR -> operator_and .)
    operator_map    reduce using rule 205 (OPERATOR -> operator_and .)
    operator_less_than reduce using rule 205 (OPERATOR -> operator_and .)
    operator_less_than_equals reduce using rule 205 (OPERATOR -> operator_and .)
    operator_greater_than reduce using rule 205 (OPERATOR -> operator_and .)
    operator_greater_than_equals reduce using rule 205 (OPERATOR -> operator_and .)
    operator_equals reduce using rule 205 (OPERATOR -> operator_and .)
    operator_not_equals reduce using rule 205 (OPERATOR -> operator_and .)
    operator_smallest reduce using rule 205 (OPERATOR -> operator_and .)
    operator_greatest reduce using rule 205 (OPERATOR -> operator_and .)
    FLOAT           reduce using rule 205 (OPERATOR -> operator_and .)
    NUM             reduce using rule 205 (OPERATOR -> operator_and .)
    STRING_3SQ      reduce using rule 205 (OPERATOR -> operator_and .)
    STRING_3DQ      reduce using rule 205 (OPERATOR -> operator_and .)
    STRING_SQ       reduce using rule 205 (OPERATOR -> operator_and .)
    STRING_DQ       reduce using rule 205 (OPERATOR -> operator_and .)
    true            reduce using rule 205 (OPERATOR -> operator_and .)
    Null            reduce using rule 205 (OPERATOR -> operator_and .)
    false           reduce using rule 205 (OPERATOR -> operator_and .)
    type_type       reduce using rule 205 (OPERATOR -> operator_and .)
    type_num        reduce using rule 205 (OPERATOR -> operator_and .)
    type_bool       reduce using rule 205 (OPERATOR -> operator_and .)
    type_any        reduce using rule 205 (OPERATOR -> operator_and .)
    type_u64        reduce using rule 205 (OPERATOR -> operator_and .)
    type_u32        reduce using rule 205 (OPERATOR -> operator_and .)
    type_u16        reduce using rule 205 (OPERATOR -> operator_and .)
    type_u8         reduce using rule 205 (OPERATOR -> operator_and .)
    type_i64        reduce using rule 205 (OPERATOR -> operator_and .)
    type_i32        reduce using rule 205 (OPERATOR -> operator_and .)
    type_i16        reduce using rule 205 (OPERATOR -> operator_and .)
    type_i8         reduce using rule 205 (OPERATOR -> operator_and .)
    type_f32        reduce using rule 205 (OPERATOR -> operator_and .)
    type_f64        reduce using rule 205 (OPERATOR -> operator_and .)
    type_str        reduce using rule 205 (OPERATOR -> operator_and .)
    type_list       reduce using rule 205 (OPERATOR -> operator_and .)
    type_tuple      reduce using rule 205 (OPERATOR -> operator_and .)
    type_array      reduce using rule 205 (OPERATOR -> operator_and .)
    type_vector     reduce using rule 205 (OPERATOR -> operator_and .)
    type_dict       reduce using rule 205 (OPERATOR -> operator_and .)
    type_generator  reduce using rule 205 (OPERATOR -> operator_and .)
    type_linked_list reduce using rule 205 (OPERATOR -> operator_and .)
    type_doubly_linked_list reduce using rule 205 (OPERATOR -> operator_and .)
    type_deque      reduce using rule 205 (OPERATOR -> operator_and .)
    type_heap       reduce using rule 205 (OPERATOR -> operator_and .)
    type_fibonacci_heap reduce using rule 205 (OPERATOR -> operator_and .)
    type_tree       reduce using rule 205 (OPERATOR -> operator_and .)
    type_trie       reduce using rule 205 (OPERATOR -> operator_and .)
    type_stack      reduce using rule 205 (OPERATOR -> operator_and .)
    type_queue      reduce using rule 205 (OPERATOR -> operator_and .)
    type_binary_search_tree reduce using rule 205 (OPERATOR -> operator_and .)
    type_bitset     reduce using rule 205 (OPERATOR -> operator_and .)
    type_set        reduce using rule 205 (OPERATOR -> operator_and .)
    type_map        reduce using rule 205 (OPERATOR -> operator_and .)
    type_range      reduce using rule 205 (OPERATOR -> operator_and .)
    lambda          reduce using rule 205 (OPERATOR -> operator_and .)


state 45

    (206) OPERATOR -> operator_or .

    operator_scan   reduce using rule 206 (OPERATOR -> operator_or .)
    operator_reduc  reduce using rule 206 (OPERATOR -> operator_or .)
    (               reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitnot reduce using rule 206 (OPERATOR -> operator_or .)
    operator_not    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_reverse reduce using rule 206 (OPERATOR -> operator_or .)
    operator_sorted_incr reduce using rule 206 (OPERATOR -> operator_or .)
    operator_sorted_decr reduce using rule 206 (OPERATOR -> operator_or .)
    VAR             reduce using rule 206 (OPERATOR -> operator_or .)
    operator_add    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_sub    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_mul    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_div    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_trudiv reduce using rule 206 (OPERATOR -> operator_or .)
    operator_pow    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_join   reduce using rule 206 (OPERATOR -> operator_or .)
    operator_split  reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitand reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitor  reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitxor reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitshiftleft reduce using rule 206 (OPERATOR -> operator_or .)
    operator_bitshiftright reduce using rule 206 (OPERATOR -> operator_or .)
    operator_and    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_or     reduce using rule 206 (OPERATOR -> operator_or .)
    operator_xor    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_contains reduce using rule 206 (OPERATOR -> operator_or .)
    operator_incr   reduce using rule 206 (OPERATOR -> operator_or .)
    operator_decr   reduce using rule 206 (OPERATOR -> operator_or .)
    operator_outer  reduce using rule 206 (OPERATOR -> operator_or .)
    operator_inner  reduce using rule 206 (OPERATOR -> operator_or .)
    operator_rotate reduce using rule 206 (OPERATOR -> operator_or .)
    operator_apply  reduce using rule 206 (OPERATOR -> operator_or .)
    operator_compose reduce using rule 206 (OPERATOR -> operator_or .)
    operator_over   reduce using rule 206 (OPERATOR -> operator_or .)
    operator_map    reduce using rule 206 (OPERATOR -> operator_or .)
    operator_less_than reduce using rule 206 (OPERATOR -> operator_or .)
    operator_less_than_equals reduce using rule 206 (OPERATOR -> operator_or .)
    operator_greater_than reduce using rule 206 (OPERATOR -> operator_or .)
    operator_greater_than_equals reduce using rule 206 (OPERATOR -> operator_or .)
    operator_equals reduce using rule 206 (OPERATOR -> operator_or .)
    operator_not_equals reduce using rule 206 (OPERATOR -> operator_or .)
    operator_smallest reduce using rule 206 (OPERATOR -> operator_or .)
    operator_greatest reduce using rule 206 (OPERATOR -> operator_or .)
    FLOAT           reduce using rule 206 (OPERATOR -> operator_or .)
    NUM             reduce using rule 206 (OPERATOR -> operator_or .)
    STRING_3SQ      reduce using rule 206 (OPERATOR -> operator_or .)
    STRING_3DQ      reduce using rule 206 (OPERATOR -> operator_or .)
    STRING_SQ       reduce using rule 206 (OPERATOR -> operator_or .)
    STRING_DQ       reduce using rule 206 (OPERATOR -> operator_or .)
    true            reduce using rule 206 (OPERATOR -> operator_or .)
    Null            reduce using rule 206 (OPERATOR -> operator_or .)
    false           reduce using rule 206 (OPERATOR -> operator_or .)
    type_type       reduce using rule 206 (OPERATOR -> operator_or .)
    type_num        reduce using rule 206 (OPERATOR -> operator_or .)
    type_bool       reduce using rule 206 (OPERATOR -> operator_or .)
    type_any        reduce using rule 206 (OPERATOR -> operator_or .)
    type_u64        reduce using rule 206 (OPERATOR -> operator_or .)
    type_u32        reduce using rule 206 (OPERATOR -> operator_or .)
    type_u16        reduce using rule 206 (OPERATOR -> operator_or .)
    type_u8         reduce using rule 206 (OPERATOR -> operator_or .)
    type_i64        reduce using rule 206 (OPERATOR -> operator_or .)
    type_i32        reduce using rule 206 (OPERATOR -> operator_or .)
    type_i16        reduce using rule 206 (OPERATOR -> operator_or .)
    type_i8         reduce using rule 206 (OPERATOR -> operator_or .)
    type_f32        reduce using rule 206 (OPERATOR -> operator_or .)
    type_f64        reduce using rule 206 (OPERATOR -> operator_or .)
    type_str        reduce using rule 206 (OPERATOR -> operator_or .)
    type_list       reduce using rule 206 (OPERATOR -> operator_or .)
    type_tuple      reduce using rule 206 (OPERATOR -> operator_or .)
    type_array      reduce using rule 206 (OPERATOR -> operator_or .)
    type_vector     reduce using rule 206 (OPERATOR -> operator_or .)
    type_dict       reduce using rule 206 (OPERATOR -> operator_or .)
    type_generator  reduce using rule 206 (OPERATOR -> operator_or .)
    type_linked_list reduce using rule 206 (OPERATOR -> operator_or .)
    type_doubly_linked_list reduce using rule 206 (OPERATOR -> operator_or .)
    type_deque      reduce using rule 206 (OPERATOR -> operator_or .)
    type_heap       reduce using rule 206 (OPERATOR -> operator_or .)
    type_fibonacci_heap reduce using rule 206 (OPERATOR -> operator_or .)
    type_tree       reduce using rule 206 (OPERATOR -> operator_or .)
    type_trie       reduce using rule 206 (OPERATOR -> operator_or .)
    type_stack      reduce using rule 206 (OPERATOR -> operator_or .)
    type_queue      reduce using rule 206 (OPERATOR -> operator_or .)
    type_binary_search_tree reduce using rule 206 (OPERATOR -> operator_or .)
    type_bitset     reduce using rule 206 (OPERATOR -> operator_or .)
    type_set        reduce using rule 206 (OPERATOR -> operator_or .)
    type_map        reduce using rule 206 (OPERATOR -> operator_or .)
    type_range      reduce using rule 206 (OPERATOR -> operator_or .)
    lambda          reduce using rule 206 (OPERATOR -> operator_or .)


state 46

    (207) OPERATOR -> operator_xor .

    operator_scan   reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_reduc  reduce using rule 207 (OPERATOR -> operator_xor .)
    (               reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitnot reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_not    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_reverse reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_sorted_incr reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_sorted_decr reduce using rule 207 (OPERATOR -> operator_xor .)
    VAR             reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_add    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_sub    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_mul    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_div    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_trudiv reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_pow    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_join   reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_split  reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitand reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitor  reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitxor reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitshiftleft reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_bitshiftright reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_and    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_or     reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_xor    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_contains reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_incr   reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_decr   reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_outer  reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_inner  reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_rotate reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_apply  reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_compose reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_over   reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_map    reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_less_than reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_less_than_equals reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_greater_than reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_greater_than_equals reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_equals reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_not_equals reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_smallest reduce using rule 207 (OPERATOR -> operator_xor .)
    operator_greatest reduce using rule 207 (OPERATOR -> operator_xor .)
    FLOAT           reduce using rule 207 (OPERATOR -> operator_xor .)
    NUM             reduce using rule 207 (OPERATOR -> operator_xor .)
    STRING_3SQ      reduce using rule 207 (OPERATOR -> operator_xor .)
    STRING_3DQ      reduce using rule 207 (OPERATOR -> operator_xor .)
    STRING_SQ       reduce using rule 207 (OPERATOR -> operator_xor .)
    STRING_DQ       reduce using rule 207 (OPERATOR -> operator_xor .)
    true            reduce using rule 207 (OPERATOR -> operator_xor .)
    Null            reduce using rule 207 (OPERATOR -> operator_xor .)
    false           reduce using rule 207 (OPERATOR -> operator_xor .)
    type_type       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_num        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_bool       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_any        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_u64        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_u32        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_u16        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_u8         reduce using rule 207 (OPERATOR -> operator_xor .)
    type_i64        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_i32        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_i16        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_i8         reduce using rule 207 (OPERATOR -> operator_xor .)
    type_f32        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_f64        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_str        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_list       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_tuple      reduce using rule 207 (OPERATOR -> operator_xor .)
    type_array      reduce using rule 207 (OPERATOR -> operator_xor .)
    type_vector     reduce using rule 207 (OPERATOR -> operator_xor .)
    type_dict       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_generator  reduce using rule 207 (OPERATOR -> operator_xor .)
    type_linked_list reduce using rule 207 (OPERATOR -> operator_xor .)
    type_doubly_linked_list reduce using rule 207 (OPERATOR -> operator_xor .)
    type_deque      reduce using rule 207 (OPERATOR -> operator_xor .)
    type_heap       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_fibonacci_heap reduce using rule 207 (OPERATOR -> operator_xor .)
    type_tree       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_trie       reduce using rule 207 (OPERATOR -> operator_xor .)
    type_stack      reduce using rule 207 (OPERATOR -> operator_xor .)
    type_queue      reduce using rule 207 (OPERATOR -> operator_xor .)
    type_binary_search_tree reduce using rule 207 (OPERATOR -> operator_xor .)
    type_bitset     reduce using rule 207 (OPERATOR -> operator_xor .)
    type_set        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_map        reduce using rule 207 (OPERATOR -> operator_xor .)
    type_range      reduce using rule 207 (OPERATOR -> operator_xor .)
    lambda          reduce using rule 207 (OPERATOR -> operator_xor .)


state 47

    (208) OPERATOR -> operator_contains .

    operator_scan   reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_reduc  reduce using rule 208 (OPERATOR -> operator_contains .)
    (               reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitnot reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_not    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_reverse reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_sorted_incr reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_sorted_decr reduce using rule 208 (OPERATOR -> operator_contains .)
    VAR             reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_add    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_sub    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_mul    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_div    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_trudiv reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_pow    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_join   reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_split  reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitand reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitor  reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitxor reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitshiftleft reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_bitshiftright reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_and    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_or     reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_xor    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_contains reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_incr   reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_decr   reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_outer  reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_inner  reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_rotate reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_apply  reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_compose reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_over   reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_map    reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_less_than reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_less_than_equals reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_greater_than reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_greater_than_equals reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_equals reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_not_equals reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_smallest reduce using rule 208 (OPERATOR -> operator_contains .)
    operator_greatest reduce using rule 208 (OPERATOR -> operator_contains .)
    FLOAT           reduce using rule 208 (OPERATOR -> operator_contains .)
    NUM             reduce using rule 208 (OPERATOR -> operator_contains .)
    STRING_3SQ      reduce using rule 208 (OPERATOR -> operator_contains .)
    STRING_3DQ      reduce using rule 208 (OPERATOR -> operator_contains .)
    STRING_SQ       reduce using rule 208 (OPERATOR -> operator_contains .)
    STRING_DQ       reduce using rule 208 (OPERATOR -> operator_contains .)
    true            reduce using rule 208 (OPERATOR -> operator_contains .)
    Null            reduce using rule 208 (OPERATOR -> operator_contains .)
    false           reduce using rule 208 (OPERATOR -> operator_contains .)
    type_type       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_num        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_bool       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_any        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_u64        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_u32        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_u16        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_u8         reduce using rule 208 (OPERATOR -> operator_contains .)
    type_i64        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_i32        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_i16        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_i8         reduce using rule 208 (OPERATOR -> operator_contains .)
    type_f32        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_f64        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_str        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_list       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_tuple      reduce using rule 208 (OPERATOR -> operator_contains .)
    type_array      reduce using rule 208 (OPERATOR -> operator_contains .)
    type_vector     reduce using rule 208 (OPERATOR -> operator_contains .)
    type_dict       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_generator  reduce using rule 208 (OPERATOR -> operator_contains .)
    type_linked_list reduce using rule 208 (OPERATOR -> operator_contains .)
    type_doubly_linked_list reduce using rule 208 (OPERATOR -> operator_contains .)
    type_deque      reduce using rule 208 (OPERATOR -> operator_contains .)
    type_heap       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_fibonacci_heap reduce using rule 208 (OPERATOR -> operator_contains .)
    type_tree       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_trie       reduce using rule 208 (OPERATOR -> operator_contains .)
    type_stack      reduce using rule 208 (OPERATOR -> operator_contains .)
    type_queue      reduce using rule 208 (OPERATOR -> operator_contains .)
    type_binary_search_tree reduce using rule 208 (OPERATOR -> operator_contains .)
    type_bitset     reduce using rule 208 (OPERATOR -> operator_contains .)
    type_set        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_map        reduce using rule 208 (OPERATOR -> operator_contains .)
    type_range      reduce using rule 208 (OPERATOR -> operator_contains .)
    lambda          reduce using rule 208 (OPERATOR -> operator_contains .)


state 48

    (123) expr -> operator_bitnot . expr
    (209) OPERATOR -> operator_bitnot .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_scan   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_reduc  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]

    expr                           shift and go to state 190
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 49

    (124) expr -> operator_not . expr
    (210) OPERATOR -> operator_not .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_scan   [ reduce using rule 210 (OPERATOR -> operator_not .) ]
  ! operator_reduc  [ reduce using rule 210 (OPERATOR -> operator_not .) ]

    expr                           shift and go to state 191
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 50

    (211) OPERATOR -> operator_incr .

    operator_scan   reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_reduc  reduce using rule 211 (OPERATOR -> operator_incr .)
    (               reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitnot reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_not    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_reverse reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_sorted_incr reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_sorted_decr reduce using rule 211 (OPERATOR -> operator_incr .)
    VAR             reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_add    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_sub    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_mul    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_div    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_trudiv reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_pow    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_join   reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_split  reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitand reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitor  reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitxor reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitshiftleft reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_bitshiftright reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_and    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_or     reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_xor    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_contains reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_incr   reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_decr   reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_outer  reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_inner  reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_rotate reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_apply  reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_compose reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_over   reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_map    reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_less_than reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_less_than_equals reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_greater_than reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_greater_than_equals reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_equals reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_not_equals reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_smallest reduce using rule 211 (OPERATOR -> operator_incr .)
    operator_greatest reduce using rule 211 (OPERATOR -> operator_incr .)
    FLOAT           reduce using rule 211 (OPERATOR -> operator_incr .)
    NUM             reduce using rule 211 (OPERATOR -> operator_incr .)
    STRING_3SQ      reduce using rule 211 (OPERATOR -> operator_incr .)
    STRING_3DQ      reduce using rule 211 (OPERATOR -> operator_incr .)
    STRING_SQ       reduce using rule 211 (OPERATOR -> operator_incr .)
    STRING_DQ       reduce using rule 211 (OPERATOR -> operator_incr .)
    true            reduce using rule 211 (OPERATOR -> operator_incr .)
    Null            reduce using rule 211 (OPERATOR -> operator_incr .)
    false           reduce using rule 211 (OPERATOR -> operator_incr .)
    type_type       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_num        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_bool       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_any        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_u64        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_u32        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_u16        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_u8         reduce using rule 211 (OPERATOR -> operator_incr .)
    type_i64        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_i32        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_i16        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_i8         reduce using rule 211 (OPERATOR -> operator_incr .)
    type_f32        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_f64        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_str        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_list       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_tuple      reduce using rule 211 (OPERATOR -> operator_incr .)
    type_array      reduce using rule 211 (OPERATOR -> operator_incr .)
    type_vector     reduce using rule 211 (OPERATOR -> operator_incr .)
    type_dict       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_generator  reduce using rule 211 (OPERATOR -> operator_incr .)
    type_linked_list reduce using rule 211 (OPERATOR -> operator_incr .)
    type_doubly_linked_list reduce using rule 211 (OPERATOR -> operator_incr .)
    type_deque      reduce using rule 211 (OPERATOR -> operator_incr .)
    type_heap       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_fibonacci_heap reduce using rule 211 (OPERATOR -> operator_incr .)
    type_tree       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_trie       reduce using rule 211 (OPERATOR -> operator_incr .)
    type_stack      reduce using rule 211 (OPERATOR -> operator_incr .)
    type_queue      reduce using rule 211 (OPERATOR -> operator_incr .)
    type_binary_search_tree reduce using rule 211 (OPERATOR -> operator_incr .)
    type_bitset     reduce using rule 211 (OPERATOR -> operator_incr .)
    type_set        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_map        reduce using rule 211 (OPERATOR -> operator_incr .)
    type_range      reduce using rule 211 (OPERATOR -> operator_incr .)
    lambda          reduce using rule 211 (OPERATOR -> operator_incr .)


state 51

    (212) OPERATOR -> operator_decr .

    operator_scan   reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_reduc  reduce using rule 212 (OPERATOR -> operator_decr .)
    (               reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitnot reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_not    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_reverse reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_sorted_incr reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_sorted_decr reduce using rule 212 (OPERATOR -> operator_decr .)
    VAR             reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_add    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_sub    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_mul    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_div    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_trudiv reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_pow    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_join   reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_split  reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitand reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitor  reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitxor reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitshiftleft reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_bitshiftright reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_and    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_or     reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_xor    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_contains reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_incr   reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_decr   reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_outer  reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_inner  reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_rotate reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_apply  reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_compose reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_over   reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_map    reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_less_than reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_less_than_equals reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_greater_than reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_greater_than_equals reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_equals reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_not_equals reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_smallest reduce using rule 212 (OPERATOR -> operator_decr .)
    operator_greatest reduce using rule 212 (OPERATOR -> operator_decr .)
    FLOAT           reduce using rule 212 (OPERATOR -> operator_decr .)
    NUM             reduce using rule 212 (OPERATOR -> operator_decr .)
    STRING_3SQ      reduce using rule 212 (OPERATOR -> operator_decr .)
    STRING_3DQ      reduce using rule 212 (OPERATOR -> operator_decr .)
    STRING_SQ       reduce using rule 212 (OPERATOR -> operator_decr .)
    STRING_DQ       reduce using rule 212 (OPERATOR -> operator_decr .)
    true            reduce using rule 212 (OPERATOR -> operator_decr .)
    Null            reduce using rule 212 (OPERATOR -> operator_decr .)
    false           reduce using rule 212 (OPERATOR -> operator_decr .)
    type_type       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_num        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_bool       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_any        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_u64        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_u32        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_u16        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_u8         reduce using rule 212 (OPERATOR -> operator_decr .)
    type_i64        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_i32        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_i16        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_i8         reduce using rule 212 (OPERATOR -> operator_decr .)
    type_f32        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_f64        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_str        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_list       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_tuple      reduce using rule 212 (OPERATOR -> operator_decr .)
    type_array      reduce using rule 212 (OPERATOR -> operator_decr .)
    type_vector     reduce using rule 212 (OPERATOR -> operator_decr .)
    type_dict       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_generator  reduce using rule 212 (OPERATOR -> operator_decr .)
    type_linked_list reduce using rule 212 (OPERATOR -> operator_decr .)
    type_doubly_linked_list reduce using rule 212 (OPERATOR -> operator_decr .)
    type_deque      reduce using rule 212 (OPERATOR -> operator_decr .)
    type_heap       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_fibonacci_heap reduce using rule 212 (OPERATOR -> operator_decr .)
    type_tree       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_trie       reduce using rule 212 (OPERATOR -> operator_decr .)
    type_stack      reduce using rule 212 (OPERATOR -> operator_decr .)
    type_queue      reduce using rule 212 (OPERATOR -> operator_decr .)
    type_binary_search_tree reduce using rule 212 (OPERATOR -> operator_decr .)
    type_bitset     reduce using rule 212 (OPERATOR -> operator_decr .)
    type_set        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_map        reduce using rule 212 (OPERATOR -> operator_decr .)
    type_range      reduce using rule 212 (OPERATOR -> operator_decr .)
    lambda          reduce using rule 212 (OPERATOR -> operator_decr .)


state 52

    (213) OPERATOR -> operator_outer .

    operator_scan   reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_reduc  reduce using rule 213 (OPERATOR -> operator_outer .)
    (               reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitnot reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_not    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_reverse reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_sorted_incr reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_sorted_decr reduce using rule 213 (OPERATOR -> operator_outer .)
    VAR             reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_add    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_sub    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_mul    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_div    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_trudiv reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_pow    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_join   reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_split  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitand reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitor  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitxor reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitshiftleft reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_bitshiftright reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_and    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_or     reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_xor    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_contains reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_incr   reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_decr   reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_outer  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_inner  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_rotate reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_apply  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_compose reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_over   reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_map    reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_less_than reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_less_than_equals reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_greater_than reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_greater_than_equals reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_equals reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_not_equals reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_smallest reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_greatest reduce using rule 213 (OPERATOR -> operator_outer .)
    FLOAT           reduce using rule 213 (OPERATOR -> operator_outer .)
    NUM             reduce using rule 213 (OPERATOR -> operator_outer .)
    STRING_3SQ      reduce using rule 213 (OPERATOR -> operator_outer .)
    STRING_3DQ      reduce using rule 213 (OPERATOR -> operator_outer .)
    STRING_SQ       reduce using rule 213 (OPERATOR -> operator_outer .)
    STRING_DQ       reduce using rule 213 (OPERATOR -> operator_outer .)
    true            reduce using rule 213 (OPERATOR -> operator_outer .)
    Null            reduce using rule 213 (OPERATOR -> operator_outer .)
    false           reduce using rule 213 (OPERATOR -> operator_outer .)
    type_type       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_num        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_bool       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_any        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_u64        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_u32        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_u16        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_u8         reduce using rule 213 (OPERATOR -> operator_outer .)
    type_i64        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_i32        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_i16        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_i8         reduce using rule 213 (OPERATOR -> operator_outer .)
    type_f32        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_f64        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_str        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_list       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_tuple      reduce using rule 213 (OPERATOR -> operator_outer .)
    type_array      reduce using rule 213 (OPERATOR -> operator_outer .)
    type_vector     reduce using rule 213 (OPERATOR -> operator_outer .)
    type_dict       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_generator  reduce using rule 213 (OPERATOR -> operator_outer .)
    type_linked_list reduce using rule 213 (OPERATOR -> operator_outer .)
    type_doubly_linked_list reduce using rule 213 (OPERATOR -> operator_outer .)
    type_deque      reduce using rule 213 (OPERATOR -> operator_outer .)
    type_heap       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_fibonacci_heap reduce using rule 213 (OPERATOR -> operator_outer .)
    type_tree       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_trie       reduce using rule 213 (OPERATOR -> operator_outer .)
    type_stack      reduce using rule 213 (OPERATOR -> operator_outer .)
    type_queue      reduce using rule 213 (OPERATOR -> operator_outer .)
    type_binary_search_tree reduce using rule 213 (OPERATOR -> operator_outer .)
    type_bitset     reduce using rule 213 (OPERATOR -> operator_outer .)
    type_set        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_map        reduce using rule 213 (OPERATOR -> operator_outer .)
    type_range      reduce using rule 213 (OPERATOR -> operator_outer .)
    lambda          reduce using rule 213 (OPERATOR -> operator_outer .)


state 53

    (214) OPERATOR -> operator_inner .

    operator_scan   reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_reduc  reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_inner  reduce using rule 214 (OPERATOR -> operator_inner .)
    (               reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitnot reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_not    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_reverse reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_sorted_incr reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_sorted_decr reduce using rule 214 (OPERATOR -> operator_inner .)
    VAR             reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_add    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_sub    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_mul    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_div    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_trudiv reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_pow    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_join   reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_split  reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitand reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitor  reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitxor reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitshiftleft reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_bitshiftright reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_and    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_or     reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_xor    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_contains reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_incr   reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_decr   reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_outer  reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_rotate reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_apply  reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_compose reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_over   reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_map    reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_less_than reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_less_than_equals reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_greater_than reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_greater_than_equals reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_equals reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_not_equals reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_smallest reduce using rule 214 (OPERATOR -> operator_inner .)
    operator_greatest reduce using rule 214 (OPERATOR -> operator_inner .)
    FLOAT           reduce using rule 214 (OPERATOR -> operator_inner .)
    NUM             reduce using rule 214 (OPERATOR -> operator_inner .)
    STRING_3SQ      reduce using rule 214 (OPERATOR -> operator_inner .)
    STRING_3DQ      reduce using rule 214 (OPERATOR -> operator_inner .)
    STRING_SQ       reduce using rule 214 (OPERATOR -> operator_inner .)
    STRING_DQ       reduce using rule 214 (OPERATOR -> operator_inner .)
    true            reduce using rule 214 (OPERATOR -> operator_inner .)
    Null            reduce using rule 214 (OPERATOR -> operator_inner .)
    false           reduce using rule 214 (OPERATOR -> operator_inner .)
    type_type       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_num        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_bool       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_any        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_u64        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_u32        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_u16        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_u8         reduce using rule 214 (OPERATOR -> operator_inner .)
    type_i64        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_i32        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_i16        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_i8         reduce using rule 214 (OPERATOR -> operator_inner .)
    type_f32        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_f64        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_str        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_list       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_tuple      reduce using rule 214 (OPERATOR -> operator_inner .)
    type_array      reduce using rule 214 (OPERATOR -> operator_inner .)
    type_vector     reduce using rule 214 (OPERATOR -> operator_inner .)
    type_dict       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_generator  reduce using rule 214 (OPERATOR -> operator_inner .)
    type_linked_list reduce using rule 214 (OPERATOR -> operator_inner .)
    type_doubly_linked_list reduce using rule 214 (OPERATOR -> operator_inner .)
    type_deque      reduce using rule 214 (OPERATOR -> operator_inner .)
    type_heap       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_fibonacci_heap reduce using rule 214 (OPERATOR -> operator_inner .)
    type_tree       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_trie       reduce using rule 214 (OPERATOR -> operator_inner .)
    type_stack      reduce using rule 214 (OPERATOR -> operator_inner .)
    type_queue      reduce using rule 214 (OPERATOR -> operator_inner .)
    type_binary_search_tree reduce using rule 214 (OPERATOR -> operator_inner .)
    type_bitset     reduce using rule 214 (OPERATOR -> operator_inner .)
    type_set        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_map        reduce using rule 214 (OPERATOR -> operator_inner .)
    type_range      reduce using rule 214 (OPERATOR -> operator_inner .)
    lambda          reduce using rule 214 (OPERATOR -> operator_inner .)


state 54

    (129) expr -> operator_reverse . expr
    (215) OPERATOR -> operator_reverse .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_scan   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_reduc  reduce using rule 215 (OPERATOR -> operator_reverse .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]

    expr                           shift and go to state 192
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 55

    (216) OPERATOR -> operator_rotate .

    operator_scan   reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_reduc  reduce using rule 216 (OPERATOR -> operator_rotate .)
    (               reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitnot reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_not    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_reverse reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_sorted_incr reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_sorted_decr reduce using rule 216 (OPERATOR -> operator_rotate .)
    VAR             reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_add    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_sub    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_mul    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_div    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_trudiv reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_pow    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_join   reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_split  reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitand reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitor  reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitxor reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitshiftleft reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_bitshiftright reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_and    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_or     reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_xor    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_contains reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_incr   reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_decr   reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_outer  reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_inner  reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_rotate reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_apply  reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_compose reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_over   reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_map    reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_less_than reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_less_than_equals reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_greater_than reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_greater_than_equals reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_equals reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_not_equals reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_smallest reduce using rule 216 (OPERATOR -> operator_rotate .)
    operator_greatest reduce using rule 216 (OPERATOR -> operator_rotate .)
    FLOAT           reduce using rule 216 (OPERATOR -> operator_rotate .)
    NUM             reduce using rule 216 (OPERATOR -> operator_rotate .)
    STRING_3SQ      reduce using rule 216 (OPERATOR -> operator_rotate .)
    STRING_3DQ      reduce using rule 216 (OPERATOR -> operator_rotate .)
    STRING_SQ       reduce using rule 216 (OPERATOR -> operator_rotate .)
    STRING_DQ       reduce using rule 216 (OPERATOR -> operator_rotate .)
    true            reduce using rule 216 (OPERATOR -> operator_rotate .)
    Null            reduce using rule 216 (OPERATOR -> operator_rotate .)
    false           reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_type       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_num        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_bool       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_any        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_u64        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_u32        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_u16        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_u8         reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_i64        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_i32        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_i16        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_i8         reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_f32        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_f64        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_str        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_list       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_tuple      reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_array      reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_vector     reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_dict       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_generator  reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_linked_list reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_doubly_linked_list reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_deque      reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_heap       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_fibonacci_heap reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_tree       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_trie       reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_stack      reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_queue      reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_binary_search_tree reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_bitset     reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_set        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_map        reduce using rule 216 (OPERATOR -> operator_rotate .)
    type_range      reduce using rule 216 (OPERATOR -> operator_rotate .)
    lambda          reduce using rule 216 (OPERATOR -> operator_rotate .)


state 56

    (217) OPERATOR -> operator_apply .

    operator_scan   reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_reduc  reduce using rule 217 (OPERATOR -> operator_apply .)
    (               reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitnot reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_not    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_reverse reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_sorted_incr reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_sorted_decr reduce using rule 217 (OPERATOR -> operator_apply .)
    VAR             reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_add    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_sub    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_mul    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_div    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_trudiv reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_pow    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_join   reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_split  reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitand reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitor  reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitxor reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitshiftleft reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_bitshiftright reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_and    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_or     reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_xor    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_contains reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_incr   reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_decr   reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_outer  reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_inner  reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_rotate reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_apply  reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_compose reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_over   reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_map    reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_less_than reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_less_than_equals reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_greater_than reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_greater_than_equals reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_equals reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_not_equals reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_smallest reduce using rule 217 (OPERATOR -> operator_apply .)
    operator_greatest reduce using rule 217 (OPERATOR -> operator_apply .)
    FLOAT           reduce using rule 217 (OPERATOR -> operator_apply .)
    NUM             reduce using rule 217 (OPERATOR -> operator_apply .)
    STRING_3SQ      reduce using rule 217 (OPERATOR -> operator_apply .)
    STRING_3DQ      reduce using rule 217 (OPERATOR -> operator_apply .)
    STRING_SQ       reduce using rule 217 (OPERATOR -> operator_apply .)
    STRING_DQ       reduce using rule 217 (OPERATOR -> operator_apply .)
    true            reduce using rule 217 (OPERATOR -> operator_apply .)
    Null            reduce using rule 217 (OPERATOR -> operator_apply .)
    false           reduce using rule 217 (OPERATOR -> operator_apply .)
    type_type       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_num        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_bool       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_any        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_u64        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_u32        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_u16        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_u8         reduce using rule 217 (OPERATOR -> operator_apply .)
    type_i64        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_i32        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_i16        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_i8         reduce using rule 217 (OPERATOR -> operator_apply .)
    type_f32        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_f64        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_str        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_list       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_tuple      reduce using rule 217 (OPERATOR -> operator_apply .)
    type_array      reduce using rule 217 (OPERATOR -> operator_apply .)
    type_vector     reduce using rule 217 (OPERATOR -> operator_apply .)
    type_dict       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_generator  reduce using rule 217 (OPERATOR -> operator_apply .)
    type_linked_list reduce using rule 217 (OPERATOR -> operator_apply .)
    type_doubly_linked_list reduce using rule 217 (OPERATOR -> operator_apply .)
    type_deque      reduce using rule 217 (OPERATOR -> operator_apply .)
    type_heap       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_fibonacci_heap reduce using rule 217 (OPERATOR -> operator_apply .)
    type_tree       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_trie       reduce using rule 217 (OPERATOR -> operator_apply .)
    type_stack      reduce using rule 217 (OPERATOR -> operator_apply .)
    type_queue      reduce using rule 217 (OPERATOR -> operator_apply .)
    type_binary_search_tree reduce using rule 217 (OPERATOR -> operator_apply .)
    type_bitset     reduce using rule 217 (OPERATOR -> operator_apply .)
    type_set        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_map        reduce using rule 217 (OPERATOR -> operator_apply .)
    type_range      reduce using rule 217 (OPERATOR -> operator_apply .)
    lambda          reduce using rule 217 (OPERATOR -> operator_apply .)


state 57

    (218) OPERATOR -> operator_compose .

    operator_scan   reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_reduc  reduce using rule 218 (OPERATOR -> operator_compose .)
    (               reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitnot reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_not    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_reverse reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_sorted_incr reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_sorted_decr reduce using rule 218 (OPERATOR -> operator_compose .)
    VAR             reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_add    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_sub    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_mul    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_div    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_trudiv reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_pow    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_join   reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_split  reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitand reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitor  reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitxor reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitshiftleft reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_bitshiftright reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_and    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_or     reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_xor    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_contains reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_incr   reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_decr   reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_outer  reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_inner  reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_rotate reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_apply  reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_compose reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_over   reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_map    reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_less_than reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_less_than_equals reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_greater_than reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_greater_than_equals reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_equals reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_not_equals reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_smallest reduce using rule 218 (OPERATOR -> operator_compose .)
    operator_greatest reduce using rule 218 (OPERATOR -> operator_compose .)
    FLOAT           reduce using rule 218 (OPERATOR -> operator_compose .)
    NUM             reduce using rule 218 (OPERATOR -> operator_compose .)
    STRING_3SQ      reduce using rule 218 (OPERATOR -> operator_compose .)
    STRING_3DQ      reduce using rule 218 (OPERATOR -> operator_compose .)
    STRING_SQ       reduce using rule 218 (OPERATOR -> operator_compose .)
    STRING_DQ       reduce using rule 218 (OPERATOR -> operator_compose .)
    true            reduce using rule 218 (OPERATOR -> operator_compose .)
    Null            reduce using rule 218 (OPERATOR -> operator_compose .)
    false           reduce using rule 218 (OPERATOR -> operator_compose .)
    type_type       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_num        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_bool       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_any        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_u64        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_u32        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_u16        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_u8         reduce using rule 218 (OPERATOR -> operator_compose .)
    type_i64        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_i32        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_i16        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_i8         reduce using rule 218 (OPERATOR -> operator_compose .)
    type_f32        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_f64        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_str        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_list       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_tuple      reduce using rule 218 (OPERATOR -> operator_compose .)
    type_array      reduce using rule 218 (OPERATOR -> operator_compose .)
    type_vector     reduce using rule 218 (OPERATOR -> operator_compose .)
    type_dict       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_generator  reduce using rule 218 (OPERATOR -> operator_compose .)
    type_linked_list reduce using rule 218 (OPERATOR -> operator_compose .)
    type_doubly_linked_list reduce using rule 218 (OPERATOR -> operator_compose .)
    type_deque      reduce using rule 218 (OPERATOR -> operator_compose .)
    type_heap       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_fibonacci_heap reduce using rule 218 (OPERATOR -> operator_compose .)
    type_tree       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_trie       reduce using rule 218 (OPERATOR -> operator_compose .)
    type_stack      reduce using rule 218 (OPERATOR -> operator_compose .)
    type_queue      reduce using rule 218 (OPERATOR -> operator_compose .)
    type_binary_search_tree reduce using rule 218 (OPERATOR -> operator_compose .)
    type_bitset     reduce using rule 218 (OPERATOR -> operator_compose .)
    type_set        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_map        reduce using rule 218 (OPERATOR -> operator_compose .)
    type_range      reduce using rule 218 (OPERATOR -> operator_compose .)
    lambda          reduce using rule 218 (OPERATOR -> operator_compose .)


state 58

    (219) OPERATOR -> operator_over .

    operator_scan   reduce using rule 219 (OPERATOR -> operator_over .)
    operator_reduc  reduce using rule 219 (OPERATOR -> operator_over .)
    (               reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitnot reduce using rule 219 (OPERATOR -> operator_over .)
    operator_not    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_reverse reduce using rule 219 (OPERATOR -> operator_over .)
    operator_sorted_incr reduce using rule 219 (OPERATOR -> operator_over .)
    operator_sorted_decr reduce using rule 219 (OPERATOR -> operator_over .)
    VAR             reduce using rule 219 (OPERATOR -> operator_over .)
    operator_add    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_sub    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_mul    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_div    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_trudiv reduce using rule 219 (OPERATOR -> operator_over .)
    operator_pow    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_join   reduce using rule 219 (OPERATOR -> operator_over .)
    operator_split  reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitand reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitor  reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitxor reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitshiftleft reduce using rule 219 (OPERATOR -> operator_over .)
    operator_bitshiftright reduce using rule 219 (OPERATOR -> operator_over .)
    operator_and    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_or     reduce using rule 219 (OPERATOR -> operator_over .)
    operator_xor    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_contains reduce using rule 219 (OPERATOR -> operator_over .)
    operator_incr   reduce using rule 219 (OPERATOR -> operator_over .)
    operator_decr   reduce using rule 219 (OPERATOR -> operator_over .)
    operator_outer  reduce using rule 219 (OPERATOR -> operator_over .)
    operator_inner  reduce using rule 219 (OPERATOR -> operator_over .)
    operator_rotate reduce using rule 219 (OPERATOR -> operator_over .)
    operator_apply  reduce using rule 219 (OPERATOR -> operator_over .)
    operator_compose reduce using rule 219 (OPERATOR -> operator_over .)
    operator_over   reduce using rule 219 (OPERATOR -> operator_over .)
    operator_map    reduce using rule 219 (OPERATOR -> operator_over .)
    operator_less_than reduce using rule 219 (OPERATOR -> operator_over .)
    operator_less_than_equals reduce using rule 219 (OPERATOR -> operator_over .)
    operator_greater_than reduce using rule 219 (OPERATOR -> operator_over .)
    operator_greater_than_equals reduce using rule 219 (OPERATOR -> operator_over .)
    operator_equals reduce using rule 219 (OPERATOR -> operator_over .)
    operator_not_equals reduce using rule 219 (OPERATOR -> operator_over .)
    operator_smallest reduce using rule 219 (OPERATOR -> operator_over .)
    operator_greatest reduce using rule 219 (OPERATOR -> operator_over .)
    FLOAT           reduce using rule 219 (OPERATOR -> operator_over .)
    NUM             reduce using rule 219 (OPERATOR -> operator_over .)
    STRING_3SQ      reduce using rule 219 (OPERATOR -> operator_over .)
    STRING_3DQ      reduce using rule 219 (OPERATOR -> operator_over .)
    STRING_SQ       reduce using rule 219 (OPERATOR -> operator_over .)
    STRING_DQ       reduce using rule 219 (OPERATOR -> operator_over .)
    true            reduce using rule 219 (OPERATOR -> operator_over .)
    Null            reduce using rule 219 (OPERATOR -> operator_over .)
    false           reduce using rule 219 (OPERATOR -> operator_over .)
    type_type       reduce using rule 219 (OPERATOR -> operator_over .)
    type_num        reduce using rule 219 (OPERATOR -> operator_over .)
    type_bool       reduce using rule 219 (OPERATOR -> operator_over .)
    type_any        reduce using rule 219 (OPERATOR -> operator_over .)
    type_u64        reduce using rule 219 (OPERATOR -> operator_over .)
    type_u32        reduce using rule 219 (OPERATOR -> operator_over .)
    type_u16        reduce using rule 219 (OPERATOR -> operator_over .)
    type_u8         reduce using rule 219 (OPERATOR -> operator_over .)
    type_i64        reduce using rule 219 (OPERATOR -> operator_over .)
    type_i32        reduce using rule 219 (OPERATOR -> operator_over .)
    type_i16        reduce using rule 219 (OPERATOR -> operator_over .)
    type_i8         reduce using rule 219 (OPERATOR -> operator_over .)
    type_f32        reduce using rule 219 (OPERATOR -> operator_over .)
    type_f64        reduce using rule 219 (OPERATOR -> operator_over .)
    type_str        reduce using rule 219 (OPERATOR -> operator_over .)
    type_list       reduce using rule 219 (OPERATOR -> operator_over .)
    type_tuple      reduce using rule 219 (OPERATOR -> operator_over .)
    type_array      reduce using rule 219 (OPERATOR -> operator_over .)
    type_vector     reduce using rule 219 (OPERATOR -> operator_over .)
    type_dict       reduce using rule 219 (OPERATOR -> operator_over .)
    type_generator  reduce using rule 219 (OPERATOR -> operator_over .)
    type_linked_list reduce using rule 219 (OPERATOR -> operator_over .)
    type_doubly_linked_list reduce using rule 219 (OPERATOR -> operator_over .)
    type_deque      reduce using rule 219 (OPERATOR -> operator_over .)
    type_heap       reduce using rule 219 (OPERATOR -> operator_over .)
    type_fibonacci_heap reduce using rule 219 (OPERATOR -> operator_over .)
    type_tree       reduce using rule 219 (OPERATOR -> operator_over .)
    type_trie       reduce using rule 219 (OPERATOR -> operator_over .)
    type_stack      reduce using rule 219 (OPERATOR -> operator_over .)
    type_queue      reduce using rule 219 (OPERATOR -> operator_over .)
    type_binary_search_tree reduce using rule 219 (OPERATOR -> operator_over .)
    type_bitset     reduce using rule 219 (OPERATOR -> operator_over .)
    type_set        reduce using rule 219 (OPERATOR -> operator_over .)
    type_map        reduce using rule 219 (OPERATOR -> operator_over .)
    type_range      reduce using rule 219 (OPERATOR -> operator_over .)
    lambda          reduce using rule 219 (OPERATOR -> operator_over .)


state 59

    (220) OPERATOR -> operator_map .

    operator_scan   reduce using rule 220 (OPERATOR -> operator_map .)
    operator_reduc  reduce using rule 220 (OPERATOR -> operator_map .)
    (               reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitnot reduce using rule 220 (OPERATOR -> operator_map .)
    operator_not    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_reverse reduce using rule 220 (OPERATOR -> operator_map .)
    operator_sorted_incr reduce using rule 220 (OPERATOR -> operator_map .)
    operator_sorted_decr reduce using rule 220 (OPERATOR -> operator_map .)
    VAR             reduce using rule 220 (OPERATOR -> operator_map .)
    operator_add    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_sub    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_mul    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_div    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_trudiv reduce using rule 220 (OPERATOR -> operator_map .)
    operator_pow    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_join   reduce using rule 220 (OPERATOR -> operator_map .)
    operator_split  reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitand reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitor  reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitxor reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitshiftleft reduce using rule 220 (OPERATOR -> operator_map .)
    operator_bitshiftright reduce using rule 220 (OPERATOR -> operator_map .)
    operator_and    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_or     reduce using rule 220 (OPERATOR -> operator_map .)
    operator_xor    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_contains reduce using rule 220 (OPERATOR -> operator_map .)
    operator_incr   reduce using rule 220 (OPERATOR -> operator_map .)
    operator_decr   reduce using rule 220 (OPERATOR -> operator_map .)
    operator_outer  reduce using rule 220 (OPERATOR -> operator_map .)
    operator_inner  reduce using rule 220 (OPERATOR -> operator_map .)
    operator_rotate reduce using rule 220 (OPERATOR -> operator_map .)
    operator_apply  reduce using rule 220 (OPERATOR -> operator_map .)
    operator_compose reduce using rule 220 (OPERATOR -> operator_map .)
    operator_over   reduce using rule 220 (OPERATOR -> operator_map .)
    operator_map    reduce using rule 220 (OPERATOR -> operator_map .)
    operator_less_than reduce using rule 220 (OPERATOR -> operator_map .)
    operator_less_than_equals reduce using rule 220 (OPERATOR -> operator_map .)
    operator_greater_than reduce using rule 220 (OPERATOR -> operator_map .)
    operator_greater_than_equals reduce using rule 220 (OPERATOR -> operator_map .)
    operator_equals reduce using rule 220 (OPERATOR -> operator_map .)
    operator_not_equals reduce using rule 220 (OPERATOR -> operator_map .)
    operator_smallest reduce using rule 220 (OPERATOR -> operator_map .)
    operator_greatest reduce using rule 220 (OPERATOR -> operator_map .)
    FLOAT           reduce using rule 220 (OPERATOR -> operator_map .)
    NUM             reduce using rule 220 (OPERATOR -> operator_map .)
    STRING_3SQ      reduce using rule 220 (OPERATOR -> operator_map .)
    STRING_3DQ      reduce using rule 220 (OPERATOR -> operator_map .)
    STRING_SQ       reduce using rule 220 (OPERATOR -> operator_map .)
    STRING_DQ       reduce using rule 220 (OPERATOR -> operator_map .)
    true            reduce using rule 220 (OPERATOR -> operator_map .)
    Null            reduce using rule 220 (OPERATOR -> operator_map .)
    false           reduce using rule 220 (OPERATOR -> operator_map .)
    type_type       reduce using rule 220 (OPERATOR -> operator_map .)
    type_num        reduce using rule 220 (OPERATOR -> operator_map .)
    type_bool       reduce using rule 220 (OPERATOR -> operator_map .)
    type_any        reduce using rule 220 (OPERATOR -> operator_map .)
    type_u64        reduce using rule 220 (OPERATOR -> operator_map .)
    type_u32        reduce using rule 220 (OPERATOR -> operator_map .)
    type_u16        reduce using rule 220 (OPERATOR -> operator_map .)
    type_u8         reduce using rule 220 (OPERATOR -> operator_map .)
    type_i64        reduce using rule 220 (OPERATOR -> operator_map .)
    type_i32        reduce using rule 220 (OPERATOR -> operator_map .)
    type_i16        reduce using rule 220 (OPERATOR -> operator_map .)
    type_i8         reduce using rule 220 (OPERATOR -> operator_map .)
    type_f32        reduce using rule 220 (OPERATOR -> operator_map .)
    type_f64        reduce using rule 220 (OPERATOR -> operator_map .)
    type_str        reduce using rule 220 (OPERATOR -> operator_map .)
    type_list       reduce using rule 220 (OPERATOR -> operator_map .)
    type_tuple      reduce using rule 220 (OPERATOR -> operator_map .)
    type_array      reduce using rule 220 (OPERATOR -> operator_map .)
    type_vector     reduce using rule 220 (OPERATOR -> operator_map .)
    type_dict       reduce using rule 220 (OPERATOR -> operator_map .)
    type_generator  reduce using rule 220 (OPERATOR -> operator_map .)
    type_linked_list reduce using rule 220 (OPERATOR -> operator_map .)
    type_doubly_linked_list reduce using rule 220 (OPERATOR -> operator_map .)
    type_deque      reduce using rule 220 (OPERATOR -> operator_map .)
    type_heap       reduce using rule 220 (OPERATOR -> operator_map .)
    type_fibonacci_heap reduce using rule 220 (OPERATOR -> operator_map .)
    type_tree       reduce using rule 220 (OPERATOR -> operator_map .)
    type_trie       reduce using rule 220 (OPERATOR -> operator_map .)
    type_stack      reduce using rule 220 (OPERATOR -> operator_map .)
    type_queue      reduce using rule 220 (OPERATOR -> operator_map .)
    type_binary_search_tree reduce using rule 220 (OPERATOR -> operator_map .)
    type_bitset     reduce using rule 220 (OPERATOR -> operator_map .)
    type_set        reduce using rule 220 (OPERATOR -> operator_map .)
    type_map        reduce using rule 220 (OPERATOR -> operator_map .)
    type_range      reduce using rule 220 (OPERATOR -> operator_map .)
    lambda          reduce using rule 220 (OPERATOR -> operator_map .)


state 60

    (135) expr -> operator_sorted_incr . expr
    (221) OPERATOR -> operator_sorted_incr .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_scan   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_reduc  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]

    expr                           shift and go to state 193
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 61

    (136) expr -> operator_sorted_decr . expr
    (222) OPERATOR -> operator_sorted_decr .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_scan   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_reduc  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]

    expr                           shift and go to state 194
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 62

    (223) OPERATOR -> operator_less_than .

    operator_scan   reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_reduc  reduce using rule 223 (OPERATOR -> operator_less_than .)
    (               reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitnot reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_not    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_reverse reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_sorted_incr reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_sorted_decr reduce using rule 223 (OPERATOR -> operator_less_than .)
    VAR             reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_add    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_sub    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_mul    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_div    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_trudiv reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_pow    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_join   reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_split  reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitand reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitor  reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitxor reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitshiftleft reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_bitshiftright reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_and    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_or     reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_xor    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_contains reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_incr   reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_decr   reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_outer  reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_inner  reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_rotate reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_apply  reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_compose reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_over   reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_map    reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_less_than reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_less_than_equals reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_greater_than reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_greater_than_equals reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_equals reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_not_equals reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_smallest reduce using rule 223 (OPERATOR -> operator_less_than .)
    operator_greatest reduce using rule 223 (OPERATOR -> operator_less_than .)
    FLOAT           reduce using rule 223 (OPERATOR -> operator_less_than .)
    NUM             reduce using rule 223 (OPERATOR -> operator_less_than .)
    STRING_3SQ      reduce using rule 223 (OPERATOR -> operator_less_than .)
    STRING_3DQ      reduce using rule 223 (OPERATOR -> operator_less_than .)
    STRING_SQ       reduce using rule 223 (OPERATOR -> operator_less_than .)
    STRING_DQ       reduce using rule 223 (OPERATOR -> operator_less_than .)
    true            reduce using rule 223 (OPERATOR -> operator_less_than .)
    Null            reduce using rule 223 (OPERATOR -> operator_less_than .)
    false           reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_type       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_num        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_bool       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_any        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_u64        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_u32        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_u16        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_u8         reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_i64        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_i32        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_i16        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_i8         reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_f32        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_f64        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_str        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_list       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_tuple      reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_array      reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_vector     reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_dict       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_generator  reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_linked_list reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_doubly_linked_list reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_deque      reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_heap       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_fibonacci_heap reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_tree       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_trie       reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_stack      reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_queue      reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_binary_search_tree reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_bitset     reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_set        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_map        reduce using rule 223 (OPERATOR -> operator_less_than .)
    type_range      reduce using rule 223 (OPERATOR -> operator_less_than .)
    lambda          reduce using rule 223 (OPERATOR -> operator_less_than .)


state 63

    (224) OPERATOR -> operator_less_than_equals .

    operator_scan   reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_reduc  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    (               reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitnot reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_not    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_reverse reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_sorted_incr reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_sorted_decr reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    VAR             reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_add    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_sub    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_mul    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_div    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_trudiv reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_pow    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_join   reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_split  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitand reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitor  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitxor reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitshiftleft reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_bitshiftright reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_and    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_or     reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_xor    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_contains reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_incr   reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_decr   reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_outer  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_inner  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_rotate reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_apply  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_compose reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_over   reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_map    reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_less_than reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_less_than_equals reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_greater_than reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_greater_than_equals reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_equals reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_not_equals reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_smallest reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    operator_greatest reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    FLOAT           reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    NUM             reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    STRING_3SQ      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    STRING_3DQ      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    STRING_SQ       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    STRING_DQ       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    true            reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    Null            reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    false           reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_type       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_num        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_bool       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_any        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_u64        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_u32        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_u16        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_u8         reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_i64        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_i32        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_i16        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_i8         reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_f32        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_f64        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_str        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_list       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_tuple      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_array      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_vector     reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_dict       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_generator  reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_linked_list reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_doubly_linked_list reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_deque      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_heap       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_fibonacci_heap reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_tree       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_trie       reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_stack      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_queue      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_binary_search_tree reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_bitset     reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_set        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_map        reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    type_range      reduce using rule 224 (OPERATOR -> operator_less_than_equals .)
    lambda          reduce using rule 224 (OPERATOR -> operator_less_than_equals .)


state 64

    (225) OPERATOR -> operator_greater_than .

    operator_scan   reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_reduc  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    (               reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitnot reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_not    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_reverse reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_sorted_incr reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_sorted_decr reduce using rule 225 (OPERATOR -> operator_greater_than .)
    VAR             reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_add    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_sub    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_mul    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_div    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_trudiv reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_pow    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_join   reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_split  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitand reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitor  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitxor reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitshiftleft reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_bitshiftright reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_and    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_or     reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_xor    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_contains reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_incr   reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_decr   reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_outer  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_inner  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_rotate reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_apply  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_compose reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_over   reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_map    reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_less_than reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_less_than_equals reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_greater_than reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_greater_than_equals reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_equals reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_not_equals reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_smallest reduce using rule 225 (OPERATOR -> operator_greater_than .)
    operator_greatest reduce using rule 225 (OPERATOR -> operator_greater_than .)
    FLOAT           reduce using rule 225 (OPERATOR -> operator_greater_than .)
    NUM             reduce using rule 225 (OPERATOR -> operator_greater_than .)
    STRING_3SQ      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    STRING_3DQ      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    STRING_SQ       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    STRING_DQ       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    true            reduce using rule 225 (OPERATOR -> operator_greater_than .)
    Null            reduce using rule 225 (OPERATOR -> operator_greater_than .)
    false           reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_type       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_num        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_bool       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_any        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_u64        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_u32        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_u16        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_u8         reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_i64        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_i32        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_i16        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_i8         reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_f32        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_f64        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_str        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_list       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_tuple      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_array      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_vector     reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_dict       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_generator  reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_linked_list reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_doubly_linked_list reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_deque      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_heap       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_fibonacci_heap reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_tree       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_trie       reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_stack      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_queue      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_binary_search_tree reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_bitset     reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_set        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_map        reduce using rule 225 (OPERATOR -> operator_greater_than .)
    type_range      reduce using rule 225 (OPERATOR -> operator_greater_than .)
    lambda          reduce using rule 225 (OPERATOR -> operator_greater_than .)


state 65

    (226) OPERATOR -> operator_greater_than_equals .

    operator_scan   reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_reduc  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    (               reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitnot reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_not    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_reverse reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_sorted_incr reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_sorted_decr reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    VAR             reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_add    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_sub    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_mul    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_div    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_trudiv reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_pow    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_join   reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_split  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitand reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitor  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitxor reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitshiftleft reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_bitshiftright reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_and    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_or     reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_xor    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_contains reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_incr   reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_decr   reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_outer  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_inner  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_rotate reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_apply  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_compose reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_over   reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_map    reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_less_than reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_less_than_equals reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_greater_than reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_greater_than_equals reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_equals reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_not_equals reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_smallest reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    operator_greatest reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    FLOAT           reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    NUM             reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    STRING_3SQ      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    STRING_3DQ      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    STRING_SQ       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    STRING_DQ       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    true            reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    Null            reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    false           reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_type       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_num        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_bool       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_any        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_u64        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_u32        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_u16        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_u8         reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_i64        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_i32        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_i16        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_i8         reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_f32        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_f64        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_str        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_list       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_tuple      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_array      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_vector     reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_dict       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_generator  reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_linked_list reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_doubly_linked_list reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_deque      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_heap       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_fibonacci_heap reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_tree       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_trie       reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_stack      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_queue      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_binary_search_tree reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_bitset     reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_set        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_map        reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    type_range      reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)
    lambda          reduce using rule 226 (OPERATOR -> operator_greater_than_equals .)


state 66

    (227) OPERATOR -> operator_equals .

    operator_scan   reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_reduc  reduce using rule 227 (OPERATOR -> operator_equals .)
    (               reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitnot reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_not    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_reverse reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_sorted_incr reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_sorted_decr reduce using rule 227 (OPERATOR -> operator_equals .)
    VAR             reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_add    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_sub    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_mul    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_div    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_trudiv reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_pow    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_join   reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_split  reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitand reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitor  reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitxor reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitshiftleft reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_bitshiftright reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_and    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_or     reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_xor    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_contains reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_incr   reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_decr   reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_outer  reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_inner  reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_rotate reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_apply  reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_compose reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_over   reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_map    reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_less_than reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_less_than_equals reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_greater_than reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_greater_than_equals reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_equals reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_not_equals reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_smallest reduce using rule 227 (OPERATOR -> operator_equals .)
    operator_greatest reduce using rule 227 (OPERATOR -> operator_equals .)
    FLOAT           reduce using rule 227 (OPERATOR -> operator_equals .)
    NUM             reduce using rule 227 (OPERATOR -> operator_equals .)
    STRING_3SQ      reduce using rule 227 (OPERATOR -> operator_equals .)
    STRING_3DQ      reduce using rule 227 (OPERATOR -> operator_equals .)
    STRING_SQ       reduce using rule 227 (OPERATOR -> operator_equals .)
    STRING_DQ       reduce using rule 227 (OPERATOR -> operator_equals .)
    true            reduce using rule 227 (OPERATOR -> operator_equals .)
    Null            reduce using rule 227 (OPERATOR -> operator_equals .)
    false           reduce using rule 227 (OPERATOR -> operator_equals .)
    type_type       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_num        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_bool       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_any        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_u64        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_u32        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_u16        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_u8         reduce using rule 227 (OPERATOR -> operator_equals .)
    type_i64        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_i32        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_i16        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_i8         reduce using rule 227 (OPERATOR -> operator_equals .)
    type_f32        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_f64        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_str        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_list       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_tuple      reduce using rule 227 (OPERATOR -> operator_equals .)
    type_array      reduce using rule 227 (OPERATOR -> operator_equals .)
    type_vector     reduce using rule 227 (OPERATOR -> operator_equals .)
    type_dict       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_generator  reduce using rule 227 (OPERATOR -> operator_equals .)
    type_linked_list reduce using rule 227 (OPERATOR -> operator_equals .)
    type_doubly_linked_list reduce using rule 227 (OPERATOR -> operator_equals .)
    type_deque      reduce using rule 227 (OPERATOR -> operator_equals .)
    type_heap       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_fibonacci_heap reduce using rule 227 (OPERATOR -> operator_equals .)
    type_tree       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_trie       reduce using rule 227 (OPERATOR -> operator_equals .)
    type_stack      reduce using rule 227 (OPERATOR -> operator_equals .)
    type_queue      reduce using rule 227 (OPERATOR -> operator_equals .)
    type_binary_search_tree reduce using rule 227 (OPERATOR -> operator_equals .)
    type_bitset     reduce using rule 227 (OPERATOR -> operator_equals .)
    type_set        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_map        reduce using rule 227 (OPERATOR -> operator_equals .)
    type_range      reduce using rule 227 (OPERATOR -> operator_equals .)
    lambda          reduce using rule 227 (OPERATOR -> operator_equals .)


state 67

    (228) OPERATOR -> operator_not_equals .

    operator_scan   reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_reduc  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    (               reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitnot reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_not    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_reverse reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_sorted_incr reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_sorted_decr reduce using rule 228 (OPERATOR -> operator_not_equals .)
    VAR             reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_add    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_sub    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_mul    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_div    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_trudiv reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_pow    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_join   reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_split  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitand reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitor  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitxor reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitshiftleft reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_bitshiftright reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_and    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_or     reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_xor    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_contains reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_incr   reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_decr   reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_outer  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_inner  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_rotate reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_apply  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_compose reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_over   reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_map    reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_less_than reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_less_than_equals reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_greater_than reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_greater_than_equals reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_equals reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_not_equals reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_smallest reduce using rule 228 (OPERATOR -> operator_not_equals .)
    operator_greatest reduce using rule 228 (OPERATOR -> operator_not_equals .)
    FLOAT           reduce using rule 228 (OPERATOR -> operator_not_equals .)
    NUM             reduce using rule 228 (OPERATOR -> operator_not_equals .)
    STRING_3SQ      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    STRING_3DQ      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    STRING_SQ       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    STRING_DQ       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    true            reduce using rule 228 (OPERATOR -> operator_not_equals .)
    Null            reduce using rule 228 (OPERATOR -> operator_not_equals .)
    false           reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_type       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_num        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_bool       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_any        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_u64        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_u32        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_u16        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_u8         reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_i64        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_i32        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_i16        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_i8         reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_f32        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_f64        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_str        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_list       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_tuple      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_array      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_vector     reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_dict       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_generator  reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_linked_list reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_doubly_linked_list reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_deque      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_heap       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_fibonacci_heap reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_tree       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_trie       reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_stack      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_queue      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_binary_search_tree reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_bitset     reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_set        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_map        reduce using rule 228 (OPERATOR -> operator_not_equals .)
    type_range      reduce using rule 228 (OPERATOR -> operator_not_equals .)
    lambda          reduce using rule 228 (OPERATOR -> operator_not_equals .)


state 68

    (229) OPERATOR -> operator_smallest .

    operator_scan   reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_reduc  reduce using rule 229 (OPERATOR -> operator_smallest .)
    (               reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitnot reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_not    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_reverse reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_sorted_incr reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_sorted_decr reduce using rule 229 (OPERATOR -> operator_smallest .)
    VAR             reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_add    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_sub    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_mul    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_div    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_trudiv reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_pow    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_join   reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_split  reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitand reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitor  reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitxor reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitshiftleft reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_bitshiftright reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_and    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_or     reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_xor    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_contains reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_incr   reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_decr   reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_outer  reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_inner  reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_rotate reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_apply  reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_compose reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_over   reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_map    reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_less_than reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_less_than_equals reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_greater_than reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_greater_than_equals reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_equals reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_not_equals reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_smallest reduce using rule 229 (OPERATOR -> operator_smallest .)
    operator_greatest reduce using rule 229 (OPERATOR -> operator_smallest .)
    FLOAT           reduce using rule 229 (OPERATOR -> operator_smallest .)
    NUM             reduce using rule 229 (OPERATOR -> operator_smallest .)
    STRING_3SQ      reduce using rule 229 (OPERATOR -> operator_smallest .)
    STRING_3DQ      reduce using rule 229 (OPERATOR -> operator_smallest .)
    STRING_SQ       reduce using rule 229 (OPERATOR -> operator_smallest .)
    STRING_DQ       reduce using rule 229 (OPERATOR -> operator_smallest .)
    true            reduce using rule 229 (OPERATOR -> operator_smallest .)
    Null            reduce using rule 229 (OPERATOR -> operator_smallest .)
    false           reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_type       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_num        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_bool       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_any        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_u64        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_u32        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_u16        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_u8         reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_i64        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_i32        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_i16        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_i8         reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_f32        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_f64        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_str        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_list       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_tuple      reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_array      reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_vector     reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_dict       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_generator  reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_linked_list reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_doubly_linked_list reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_deque      reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_heap       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_fibonacci_heap reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_tree       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_trie       reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_stack      reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_queue      reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_binary_search_tree reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_bitset     reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_set        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_map        reduce using rule 229 (OPERATOR -> operator_smallest .)
    type_range      reduce using rule 229 (OPERATOR -> operator_smallest .)
    lambda          reduce using rule 229 (OPERATOR -> operator_smallest .)


state 69

    (230) OPERATOR -> operator_greatest .

    operator_scan   reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_reduc  reduce using rule 230 (OPERATOR -> operator_greatest .)
    (               reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitnot reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_not    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_reverse reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_sorted_incr reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_sorted_decr reduce using rule 230 (OPERATOR -> operator_greatest .)
    VAR             reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_add    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_sub    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_mul    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_div    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_trudiv reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_pow    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_join   reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_split  reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitand reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitor  reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitxor reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitshiftleft reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_bitshiftright reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_and    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_or     reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_xor    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_contains reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_incr   reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_decr   reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_outer  reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_inner  reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_rotate reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_apply  reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_compose reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_over   reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_map    reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_less_than reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_less_than_equals reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_greater_than reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_greater_than_equals reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_equals reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_not_equals reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_smallest reduce using rule 230 (OPERATOR -> operator_greatest .)
    operator_greatest reduce using rule 230 (OPERATOR -> operator_greatest .)
    FLOAT           reduce using rule 230 (OPERATOR -> operator_greatest .)
    NUM             reduce using rule 230 (OPERATOR -> operator_greatest .)
    STRING_3SQ      reduce using rule 230 (OPERATOR -> operator_greatest .)
    STRING_3DQ      reduce using rule 230 (OPERATOR -> operator_greatest .)
    STRING_SQ       reduce using rule 230 (OPERATOR -> operator_greatest .)
    STRING_DQ       reduce using rule 230 (OPERATOR -> operator_greatest .)
    true            reduce using rule 230 (OPERATOR -> operator_greatest .)
    Null            reduce using rule 230 (OPERATOR -> operator_greatest .)
    false           reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_type       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_num        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_bool       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_any        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_u64        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_u32        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_u16        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_u8         reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_i64        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_i32        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_i16        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_i8         reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_f32        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_f64        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_str        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_list       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_tuple      reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_array      reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_vector     reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_dict       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_generator  reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_linked_list reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_doubly_linked_list reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_deque      reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_heap       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_fibonacci_heap reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_tree       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_trie       reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_stack      reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_queue      reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_binary_search_tree reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_bitset     reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_set        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_map        reduce using rule 230 (OPERATOR -> operator_greatest .)
    type_range      reduce using rule 230 (OPERATOR -> operator_greatest .)
    lambda          reduce using rule 230 (OPERATOR -> operator_greatest .)


state 70

    (145) expr -> VAR .
    (181) return_val -> VAR . ( arguments )
    (66) comma_separated_names -> VAR .
    (67) comma_separated_names -> VAR . , comma_separated_names

    operator_add    reduce using rule 145 (expr -> VAR .)
    operator_sub    reduce using rule 145 (expr -> VAR .)
    operator_mul    reduce using rule 145 (expr -> VAR .)
    operator_div    reduce using rule 145 (expr -> VAR .)
    operator_trudiv reduce using rule 145 (expr -> VAR .)
    operator_pow    reduce using rule 145 (expr -> VAR .)
    operator_join   reduce using rule 145 (expr -> VAR .)
    operator_split  reduce using rule 145 (expr -> VAR .)
    operator_bitand reduce using rule 145 (expr -> VAR .)
    operator_bitor  reduce using rule 145 (expr -> VAR .)
    operator_bitxor reduce using rule 145 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 145 (expr -> VAR .)
    operator_bitshiftright reduce using rule 145 (expr -> VAR .)
    operator_and    reduce using rule 145 (expr -> VAR .)
    operator_or     reduce using rule 145 (expr -> VAR .)
    operator_xor    reduce using rule 145 (expr -> VAR .)
    operator_contains reduce using rule 145 (expr -> VAR .)
    operator_incr   reduce using rule 145 (expr -> VAR .)
    operator_decr   reduce using rule 145 (expr -> VAR .)
    operator_outer  reduce using rule 145 (expr -> VAR .)
    operator_rotate reduce using rule 145 (expr -> VAR .)
    operator_apply  reduce using rule 145 (expr -> VAR .)
    operator_compose reduce using rule 145 (expr -> VAR .)
    operator_over   reduce using rule 145 (expr -> VAR .)
    operator_map    reduce using rule 145 (expr -> VAR .)
    operator_less_than reduce using rule 145 (expr -> VAR .)
    operator_less_than_equals reduce using rule 145 (expr -> VAR .)
    operator_greater_than reduce using rule 145 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 145 (expr -> VAR .)
    operator_equals reduce using rule 145 (expr -> VAR .)
    operator_not_equals reduce using rule 145 (expr -> VAR .)
    operator_smallest reduce using rule 145 (expr -> VAR .)
    operator_greatest reduce using rule 145 (expr -> VAR .)
    [               reduce using rule 145 (expr -> VAR .)
    operator_scan   reduce using rule 145 (expr -> VAR .)
    operator_reduc  reduce using rule 145 (expr -> VAR .)
    operator_bitnot reduce using rule 145 (expr -> VAR .)
    operator_not    reduce using rule 145 (expr -> VAR .)
    operator_inner  reduce using rule 145 (expr -> VAR .)
    operator_reverse reduce using rule 145 (expr -> VAR .)
    operator_sorted_incr reduce using rule 145 (expr -> VAR .)
    operator_sorted_decr reduce using rule 145 (expr -> VAR .)
    NEWLINE         reduce using rule 145 (expr -> VAR .)
    $end            reduce using rule 145 (expr -> VAR .)
    }               reduce using rule 145 (expr -> VAR .)
    (               shift and go to state 195
    =               reduce using rule 66 (comma_separated_names -> VAR .)
    ,               shift and go to state 196


state 71

    (182) expr -> const_val .

    operator_add    reduce using rule 182 (expr -> const_val .)
    operator_sub    reduce using rule 182 (expr -> const_val .)
    operator_mul    reduce using rule 182 (expr -> const_val .)
    operator_div    reduce using rule 182 (expr -> const_val .)
    operator_trudiv reduce using rule 182 (expr -> const_val .)
    operator_pow    reduce using rule 182 (expr -> const_val .)
    operator_join   reduce using rule 182 (expr -> const_val .)
    operator_split  reduce using rule 182 (expr -> const_val .)
    operator_bitand reduce using rule 182 (expr -> const_val .)
    operator_bitor  reduce using rule 182 (expr -> const_val .)
    operator_bitxor reduce using rule 182 (expr -> const_val .)
    operator_bitshiftleft reduce using rule 182 (expr -> const_val .)
    operator_bitshiftright reduce using rule 182 (expr -> const_val .)
    operator_and    reduce using rule 182 (expr -> const_val .)
    operator_or     reduce using rule 182 (expr -> const_val .)
    operator_xor    reduce using rule 182 (expr -> const_val .)
    operator_contains reduce using rule 182 (expr -> const_val .)
    operator_incr   reduce using rule 182 (expr -> const_val .)
    operator_decr   reduce using rule 182 (expr -> const_val .)
    operator_outer  reduce using rule 182 (expr -> const_val .)
    operator_rotate reduce using rule 182 (expr -> const_val .)
    operator_apply  reduce using rule 182 (expr -> const_val .)
    operator_compose reduce using rule 182 (expr -> const_val .)
    operator_over   reduce using rule 182 (expr -> const_val .)
    operator_map    reduce using rule 182 (expr -> const_val .)
    operator_less_than reduce using rule 182 (expr -> const_val .)
    operator_less_than_equals reduce using rule 182 (expr -> const_val .)
    operator_greater_than reduce using rule 182 (expr -> const_val .)
    operator_greater_than_equals reduce using rule 182 (expr -> const_val .)
    operator_equals reduce using rule 182 (expr -> const_val .)
    operator_not_equals reduce using rule 182 (expr -> const_val .)
    operator_smallest reduce using rule 182 (expr -> const_val .)
    operator_greatest reduce using rule 182 (expr -> const_val .)
    [               reduce using rule 182 (expr -> const_val .)
    operator_scan   reduce using rule 182 (expr -> const_val .)
    operator_reduc  reduce using rule 182 (expr -> const_val .)
    operator_bitnot reduce using rule 182 (expr -> const_val .)
    operator_not    reduce using rule 182 (expr -> const_val .)
    operator_inner  reduce using rule 182 (expr -> const_val .)
    operator_reverse reduce using rule 182 (expr -> const_val .)
    operator_sorted_incr reduce using rule 182 (expr -> const_val .)
    operator_sorted_decr reduce using rule 182 (expr -> const_val .)
    NEWLINE         reduce using rule 182 (expr -> const_val .)
    $end            reduce using rule 182 (expr -> const_val .)
    }               reduce using rule 182 (expr -> const_val .)
    )               reduce using rule 182 (expr -> const_val .)
    {               reduce using rule 182 (expr -> const_val .)
    ]               reduce using rule 182 (expr -> const_val .)
    :               reduce using rule 182 (expr -> const_val .)
    ,               reduce using rule 182 (expr -> const_val .)


state 72

    (183) expr -> return_val .

    operator_add    reduce using rule 183 (expr -> return_val .)
    operator_sub    reduce using rule 183 (expr -> return_val .)
    operator_mul    reduce using rule 183 (expr -> return_val .)
    operator_div    reduce using rule 183 (expr -> return_val .)
    operator_trudiv reduce using rule 183 (expr -> return_val .)
    operator_pow    reduce using rule 183 (expr -> return_val .)
    operator_join   reduce using rule 183 (expr -> return_val .)
    operator_split  reduce using rule 183 (expr -> return_val .)
    operator_bitand reduce using rule 183 (expr -> return_val .)
    operator_bitor  reduce using rule 183 (expr -> return_val .)
    operator_bitxor reduce using rule 183 (expr -> return_val .)
    operator_bitshiftleft reduce using rule 183 (expr -> return_val .)
    operator_bitshiftright reduce using rule 183 (expr -> return_val .)
    operator_and    reduce using rule 183 (expr -> return_val .)
    operator_or     reduce using rule 183 (expr -> return_val .)
    operator_xor    reduce using rule 183 (expr -> return_val .)
    operator_contains reduce using rule 183 (expr -> return_val .)
    operator_incr   reduce using rule 183 (expr -> return_val .)
    operator_decr   reduce using rule 183 (expr -> return_val .)
    operator_outer  reduce using rule 183 (expr -> return_val .)
    operator_rotate reduce using rule 183 (expr -> return_val .)
    operator_apply  reduce using rule 183 (expr -> return_val .)
    operator_compose reduce using rule 183 (expr -> return_val .)
    operator_over   reduce using rule 183 (expr -> return_val .)
    operator_map    reduce using rule 183 (expr -> return_val .)
    operator_less_than reduce using rule 183 (expr -> return_val .)
    operator_less_than_equals reduce using rule 183 (expr -> return_val .)
    operator_greater_than reduce using rule 183 (expr -> return_val .)
    operator_greater_than_equals reduce using rule 183 (expr -> return_val .)
    operator_equals reduce using rule 183 (expr -> return_val .)
    operator_not_equals reduce using rule 183 (expr -> return_val .)
    operator_smallest reduce using rule 183 (expr -> return_val .)
    operator_greatest reduce using rule 183 (expr -> return_val .)
    [               reduce using rule 183 (expr -> return_val .)
    operator_scan   reduce using rule 183 (expr -> return_val .)
    operator_reduc  reduce using rule 183 (expr -> return_val .)
    operator_bitnot reduce using rule 183 (expr -> return_val .)
    operator_not    reduce using rule 183 (expr -> return_val .)
    operator_inner  reduce using rule 183 (expr -> return_val .)
    operator_reverse reduce using rule 183 (expr -> return_val .)
    operator_sorted_incr reduce using rule 183 (expr -> return_val .)
    operator_sorted_decr reduce using rule 183 (expr -> return_val .)
    NEWLINE         reduce using rule 183 (expr -> return_val .)
    $end            reduce using rule 183 (expr -> return_val .)
    }               reduce using rule 183 (expr -> return_val .)
    )               reduce using rule 183 (expr -> return_val .)
    {               reduce using rule 183 (expr -> return_val .)
    ]               reduce using rule 183 (expr -> return_val .)
    :               reduce using rule 183 (expr -> return_val .)
    ,               reduce using rule 183 (expr -> return_val .)


state 73

    (184) expr -> lambda_decl .

    operator_add    reduce using rule 184 (expr -> lambda_decl .)
    operator_sub    reduce using rule 184 (expr -> lambda_decl .)
    operator_mul    reduce using rule 184 (expr -> lambda_decl .)
    operator_div    reduce using rule 184 (expr -> lambda_decl .)
    operator_trudiv reduce using rule 184 (expr -> lambda_decl .)
    operator_pow    reduce using rule 184 (expr -> lambda_decl .)
    operator_join   reduce using rule 184 (expr -> lambda_decl .)
    operator_split  reduce using rule 184 (expr -> lambda_decl .)
    operator_bitand reduce using rule 184 (expr -> lambda_decl .)
    operator_bitor  reduce using rule 184 (expr -> lambda_decl .)
    operator_bitxor reduce using rule 184 (expr -> lambda_decl .)
    operator_bitshiftleft reduce using rule 184 (expr -> lambda_decl .)
    operator_bitshiftright reduce using rule 184 (expr -> lambda_decl .)
    operator_and    reduce using rule 184 (expr -> lambda_decl .)
    operator_or     reduce using rule 184 (expr -> lambda_decl .)
    operator_xor    reduce using rule 184 (expr -> lambda_decl .)
    operator_contains reduce using rule 184 (expr -> lambda_decl .)
    operator_incr   reduce using rule 184 (expr -> lambda_decl .)
    operator_decr   reduce using rule 184 (expr -> lambda_decl .)
    operator_outer  reduce using rule 184 (expr -> lambda_decl .)
    operator_rotate reduce using rule 184 (expr -> lambda_decl .)
    operator_apply  reduce using rule 184 (expr -> lambda_decl .)
    operator_compose reduce using rule 184 (expr -> lambda_decl .)
    operator_over   reduce using rule 184 (expr -> lambda_decl .)
    operator_map    reduce using rule 184 (expr -> lambda_decl .)
    operator_less_than reduce using rule 184 (expr -> lambda_decl .)
    operator_less_than_equals reduce using rule 184 (expr -> lambda_decl .)
    operator_greater_than reduce using rule 184 (expr -> lambda_decl .)
    operator_greater_than_equals reduce using rule 184 (expr -> lambda_decl .)
    operator_equals reduce using rule 184 (expr -> lambda_decl .)
    operator_not_equals reduce using rule 184 (expr -> lambda_decl .)
    operator_smallest reduce using rule 184 (expr -> lambda_decl .)
    operator_greatest reduce using rule 184 (expr -> lambda_decl .)
    [               reduce using rule 184 (expr -> lambda_decl .)
    operator_scan   reduce using rule 184 (expr -> lambda_decl .)
    operator_reduc  reduce using rule 184 (expr -> lambda_decl .)
    operator_bitnot reduce using rule 184 (expr -> lambda_decl .)
    operator_not    reduce using rule 184 (expr -> lambda_decl .)
    operator_inner  reduce using rule 184 (expr -> lambda_decl .)
    operator_reverse reduce using rule 184 (expr -> lambda_decl .)
    operator_sorted_incr reduce using rule 184 (expr -> lambda_decl .)
    operator_sorted_decr reduce using rule 184 (expr -> lambda_decl .)
    NEWLINE         reduce using rule 184 (expr -> lambda_decl .)
    $end            reduce using rule 184 (expr -> lambda_decl .)
    }               reduce using rule 184 (expr -> lambda_decl .)
    )               reduce using rule 184 (expr -> lambda_decl .)
    {               reduce using rule 184 (expr -> lambda_decl .)
    ]               reduce using rule 184 (expr -> lambda_decl .)
    :               reduce using rule 184 (expr -> lambda_decl .)
    ,               reduce using rule 184 (expr -> lambda_decl .)


state 74

    (185) expr -> TYPE .
    (65) declaration_stmt -> TYPE . comma_separated_names
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    operator_add    reduce using rule 185 (expr -> TYPE .)
    operator_sub    reduce using rule 185 (expr -> TYPE .)
    operator_mul    reduce using rule 185 (expr -> TYPE .)
    operator_div    reduce using rule 185 (expr -> TYPE .)
    operator_trudiv reduce using rule 185 (expr -> TYPE .)
    operator_pow    reduce using rule 185 (expr -> TYPE .)
    operator_join   reduce using rule 185 (expr -> TYPE .)
    operator_split  reduce using rule 185 (expr -> TYPE .)
    operator_bitand reduce using rule 185 (expr -> TYPE .)
    operator_bitor  reduce using rule 185 (expr -> TYPE .)
    operator_bitxor reduce using rule 185 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 185 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 185 (expr -> TYPE .)
    operator_and    reduce using rule 185 (expr -> TYPE .)
    operator_or     reduce using rule 185 (expr -> TYPE .)
    operator_xor    reduce using rule 185 (expr -> TYPE .)
    operator_contains reduce using rule 185 (expr -> TYPE .)
    operator_incr   reduce using rule 185 (expr -> TYPE .)
    operator_decr   reduce using rule 185 (expr -> TYPE .)
    operator_outer  reduce using rule 185 (expr -> TYPE .)
    operator_rotate reduce using rule 185 (expr -> TYPE .)
    operator_apply  reduce using rule 185 (expr -> TYPE .)
    operator_compose reduce using rule 185 (expr -> TYPE .)
    operator_over   reduce using rule 185 (expr -> TYPE .)
    operator_map    reduce using rule 185 (expr -> TYPE .)
    operator_less_than reduce using rule 185 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 185 (expr -> TYPE .)
    operator_greater_than reduce using rule 185 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 185 (expr -> TYPE .)
    operator_equals reduce using rule 185 (expr -> TYPE .)
    operator_not_equals reduce using rule 185 (expr -> TYPE .)
    operator_smallest reduce using rule 185 (expr -> TYPE .)
    operator_greatest reduce using rule 185 (expr -> TYPE .)
    [               reduce using rule 185 (expr -> TYPE .)
    operator_scan   reduce using rule 185 (expr -> TYPE .)
    operator_reduc  reduce using rule 185 (expr -> TYPE .)
    operator_bitnot reduce using rule 185 (expr -> TYPE .)
    operator_not    reduce using rule 185 (expr -> TYPE .)
    operator_inner  reduce using rule 185 (expr -> TYPE .)
    operator_reverse reduce using rule 185 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 185 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 185 (expr -> TYPE .)
    NEWLINE         reduce using rule 185 (expr -> TYPE .)
    $end            reduce using rule 185 (expr -> TYPE .)
    }               reduce using rule 185 (expr -> TYPE .)
    VAR             shift and go to state 198

    comma_separated_names          shift and go to state 197

state 75

    (69) word_stmt -> break .

    NEWLINE         reduce using rule 69 (word_stmt -> break .)
    $end            reduce using rule 69 (word_stmt -> break .)
    }               reduce using rule 69 (word_stmt -> break .)


state 76

    (71) word_stmt -> continue .

    NEWLINE         reduce using rule 71 (word_stmt -> continue .)
    $end            reduce using rule 71 (word_stmt -> continue .)
    }               reduce using rule 71 (word_stmt -> continue .)


state 77

    (72) word_stmt -> pass .

    NEWLINE         reduce using rule 72 (word_stmt -> pass .)
    $end            reduce using rule 72 (word_stmt -> pass .)
    }               reduce using rule 72 (word_stmt -> pass .)


state 78

    (60) del_stmt -> del . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 199
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 79

    (61) assign_stmt -> comma_separated_names . = expr

    =               shift and go to state 200


state 80

    (83) for_decl -> for . comma_separated_names operator_contains expr
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 198

    comma_separated_names          shift and go to state 201

state 81

    (84) if_decl -> if . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 202
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 82

    (86) else_decl -> else .

    {               reduce using rule 86 (else_decl -> else .)


state 83

    (85) elif_decl -> elif . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 203
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 84

    (87) operator_decl -> operator . ( arguments )

    (               shift and go to state 204


state 85

    (88) struct_decl -> struct . TYPE
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    type_type       shift and go to state 206
    type_num        shift and go to state 207
    type_bool       shift and go to state 208
    type_any        shift and go to state 209
    type_u64        shift and go to state 210
    type_u32        shift and go to state 211
    type_u16        shift and go to state 212
    type_u8         shift and go to state 213
    type_i64        shift and go to state 214
    type_i32        shift and go to state 215
    type_i16        shift and go to state 216
    type_i8         shift and go to state 217
    type_f32        shift and go to state 218
    type_f64        shift and go to state 219
    type_str        shift and go to state 220
    type_list       shift and go to state 221
    type_tuple      shift and go to state 222
    type_array      shift and go to state 223
    type_vector     shift and go to state 224
    type_dict       shift and go to state 225
    type_generator  shift and go to state 226
    type_linked_list shift and go to state 227
    type_doubly_linked_list shift and go to state 228
    type_deque      shift and go to state 229
    type_heap       shift and go to state 230
    type_fibonacci_heap shift and go to state 231
    type_tree       shift and go to state 232
    type_trie       shift and go to state 233
    type_stack      shift and go to state 234
    type_queue      shift and go to state 235
    type_binary_search_tree shift and go to state 236
    type_bitset     shift and go to state 237
    type_set        shift and go to state 238
    type_map        shift and go to state 239
    type_range      shift and go to state 240

    TYPE                           shift and go to state 205

state 86

    (89) while_decl -> while . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 241
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 87

    (90) func_decl -> func . VAR ( def_arguments )

    VAR             shift and go to state 242


state 88

    (94) const_val -> FLOAT .

    operator_add    reduce using rule 94 (const_val -> FLOAT .)
    operator_sub    reduce using rule 94 (const_val -> FLOAT .)
    operator_mul    reduce using rule 94 (const_val -> FLOAT .)
    operator_div    reduce using rule 94 (const_val -> FLOAT .)
    operator_trudiv reduce using rule 94 (const_val -> FLOAT .)
    operator_pow    reduce using rule 94 (const_val -> FLOAT .)
    operator_join   reduce using rule 94 (const_val -> FLOAT .)
    operator_split  reduce using rule 94 (const_val -> FLOAT .)
    operator_bitand reduce using rule 94 (const_val -> FLOAT .)
    operator_bitor  reduce using rule 94 (const_val -> FLOAT .)
    operator_bitxor reduce using rule 94 (const_val -> FLOAT .)
    operator_bitshiftleft reduce using rule 94 (const_val -> FLOAT .)
    operator_bitshiftright reduce using rule 94 (const_val -> FLOAT .)
    operator_and    reduce using rule 94 (const_val -> FLOAT .)
    operator_or     reduce using rule 94 (const_val -> FLOAT .)
    operator_xor    reduce using rule 94 (const_val -> FLOAT .)
    operator_contains reduce using rule 94 (const_val -> FLOAT .)
    operator_incr   reduce using rule 94 (const_val -> FLOAT .)
    operator_decr   reduce using rule 94 (const_val -> FLOAT .)
    operator_outer  reduce using rule 94 (const_val -> FLOAT .)
    operator_rotate reduce using rule 94 (const_val -> FLOAT .)
    operator_apply  reduce using rule 94 (const_val -> FLOAT .)
    operator_compose reduce using rule 94 (const_val -> FLOAT .)
    operator_over   reduce using rule 94 (const_val -> FLOAT .)
    operator_map    reduce using rule 94 (const_val -> FLOAT .)
    operator_less_than reduce using rule 94 (const_val -> FLOAT .)
    operator_less_than_equals reduce using rule 94 (const_val -> FLOAT .)
    operator_greater_than reduce using rule 94 (const_val -> FLOAT .)
    operator_greater_than_equals reduce using rule 94 (const_val -> FLOAT .)
    operator_equals reduce using rule 94 (const_val -> FLOAT .)
    operator_not_equals reduce using rule 94 (const_val -> FLOAT .)
    operator_smallest reduce using rule 94 (const_val -> FLOAT .)
    operator_greatest reduce using rule 94 (const_val -> FLOAT .)
    [               reduce using rule 94 (const_val -> FLOAT .)
    operator_scan   reduce using rule 94 (const_val -> FLOAT .)
    operator_reduc  reduce using rule 94 (const_val -> FLOAT .)
    operator_bitnot reduce using rule 94 (const_val -> FLOAT .)
    operator_not    reduce using rule 94 (const_val -> FLOAT .)
    operator_inner  reduce using rule 94 (const_val -> FLOAT .)
    operator_reverse reduce using rule 94 (const_val -> FLOAT .)
    operator_sorted_incr reduce using rule 94 (const_val -> FLOAT .)
    operator_sorted_decr reduce using rule 94 (const_val -> FLOAT .)
    NEWLINE         reduce using rule 94 (const_val -> FLOAT .)
    $end            reduce using rule 94 (const_val -> FLOAT .)
    }               reduce using rule 94 (const_val -> FLOAT .)
    )               reduce using rule 94 (const_val -> FLOAT .)
    {               reduce using rule 94 (const_val -> FLOAT .)
    ]               reduce using rule 94 (const_val -> FLOAT .)
    :               reduce using rule 94 (const_val -> FLOAT .)
    ,               reduce using rule 94 (const_val -> FLOAT .)


state 89

    (95) const_val -> NUM .

    operator_add    reduce using rule 95 (const_val -> NUM .)
    operator_sub    reduce using rule 95 (const_val -> NUM .)
    operator_mul    reduce using rule 95 (const_val -> NUM .)
    operator_div    reduce using rule 95 (const_val -> NUM .)
    operator_trudiv reduce using rule 95 (const_val -> NUM .)
    operator_pow    reduce using rule 95 (const_val -> NUM .)
    operator_join   reduce using rule 95 (const_val -> NUM .)
    operator_split  reduce using rule 95 (const_val -> NUM .)
    operator_bitand reduce using rule 95 (const_val -> NUM .)
    operator_bitor  reduce using rule 95 (const_val -> NUM .)
    operator_bitxor reduce using rule 95 (const_val -> NUM .)
    operator_bitshiftleft reduce using rule 95 (const_val -> NUM .)
    operator_bitshiftright reduce using rule 95 (const_val -> NUM .)
    operator_and    reduce using rule 95 (const_val -> NUM .)
    operator_or     reduce using rule 95 (const_val -> NUM .)
    operator_xor    reduce using rule 95 (const_val -> NUM .)
    operator_contains reduce using rule 95 (const_val -> NUM .)
    operator_incr   reduce using rule 95 (const_val -> NUM .)
    operator_decr   reduce using rule 95 (const_val -> NUM .)
    operator_outer  reduce using rule 95 (const_val -> NUM .)
    operator_rotate reduce using rule 95 (const_val -> NUM .)
    operator_apply  reduce using rule 95 (const_val -> NUM .)
    operator_compose reduce using rule 95 (const_val -> NUM .)
    operator_over   reduce using rule 95 (const_val -> NUM .)
    operator_map    reduce using rule 95 (const_val -> NUM .)
    operator_less_than reduce using rule 95 (const_val -> NUM .)
    operator_less_than_equals reduce using rule 95 (const_val -> NUM .)
    operator_greater_than reduce using rule 95 (const_val -> NUM .)
    operator_greater_than_equals reduce using rule 95 (const_val -> NUM .)
    operator_equals reduce using rule 95 (const_val -> NUM .)
    operator_not_equals reduce using rule 95 (const_val -> NUM .)
    operator_smallest reduce using rule 95 (const_val -> NUM .)
    operator_greatest reduce using rule 95 (const_val -> NUM .)
    [               reduce using rule 95 (const_val -> NUM .)
    operator_scan   reduce using rule 95 (const_val -> NUM .)
    operator_reduc  reduce using rule 95 (const_val -> NUM .)
    operator_bitnot reduce using rule 95 (const_val -> NUM .)
    operator_not    reduce using rule 95 (const_val -> NUM .)
    operator_inner  reduce using rule 95 (const_val -> NUM .)
    operator_reverse reduce using rule 95 (const_val -> NUM .)
    operator_sorted_incr reduce using rule 95 (const_val -> NUM .)
    operator_sorted_decr reduce using rule 95 (const_val -> NUM .)
    NEWLINE         reduce using rule 95 (const_val -> NUM .)
    $end            reduce using rule 95 (const_val -> NUM .)
    }               reduce using rule 95 (const_val -> NUM .)
    )               reduce using rule 95 (const_val -> NUM .)
    {               reduce using rule 95 (const_val -> NUM .)
    ]               reduce using rule 95 (const_val -> NUM .)
    :               reduce using rule 95 (const_val -> NUM .)
    ,               reduce using rule 95 (const_val -> NUM .)


state 90

    (96) const_val -> STRING_3SQ .

    operator_add    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_sub    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_mul    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_div    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_trudiv reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_pow    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_join   reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_split  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitand reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitor  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitxor reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitshiftleft reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitshiftright reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_and    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_or     reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_xor    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_contains reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_incr   reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_decr   reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_outer  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_rotate reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_apply  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_compose reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_over   reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_map    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_less_than reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_less_than_equals reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_greater_than reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_greater_than_equals reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_equals reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_not_equals reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_smallest reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_greatest reduce using rule 96 (const_val -> STRING_3SQ .)
    [               reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_scan   reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_reduc  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_bitnot reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_not    reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_inner  reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_reverse reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_sorted_incr reduce using rule 96 (const_val -> STRING_3SQ .)
    operator_sorted_decr reduce using rule 96 (const_val -> STRING_3SQ .)
    NEWLINE         reduce using rule 96 (const_val -> STRING_3SQ .)
    $end            reduce using rule 96 (const_val -> STRING_3SQ .)
    }               reduce using rule 96 (const_val -> STRING_3SQ .)
    )               reduce using rule 96 (const_val -> STRING_3SQ .)
    {               reduce using rule 96 (const_val -> STRING_3SQ .)
    ]               reduce using rule 96 (const_val -> STRING_3SQ .)
    :               reduce using rule 96 (const_val -> STRING_3SQ .)
    ,               reduce using rule 96 (const_val -> STRING_3SQ .)


state 91

    (97) const_val -> STRING_3DQ .

    operator_add    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_sub    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_mul    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_div    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_trudiv reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_pow    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_join   reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_split  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitand reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitor  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitxor reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitshiftleft reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitshiftright reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_and    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_or     reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_xor    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_contains reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_incr   reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_decr   reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_outer  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_rotate reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_apply  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_compose reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_over   reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_map    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_less_than reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_less_than_equals reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_greater_than reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_greater_than_equals reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_equals reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_not_equals reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_smallest reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_greatest reduce using rule 97 (const_val -> STRING_3DQ .)
    [               reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_scan   reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_reduc  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_bitnot reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_not    reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_inner  reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_reverse reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_sorted_incr reduce using rule 97 (const_val -> STRING_3DQ .)
    operator_sorted_decr reduce using rule 97 (const_val -> STRING_3DQ .)
    NEWLINE         reduce using rule 97 (const_val -> STRING_3DQ .)
    $end            reduce using rule 97 (const_val -> STRING_3DQ .)
    }               reduce using rule 97 (const_val -> STRING_3DQ .)
    )               reduce using rule 97 (const_val -> STRING_3DQ .)
    {               reduce using rule 97 (const_val -> STRING_3DQ .)
    ]               reduce using rule 97 (const_val -> STRING_3DQ .)
    :               reduce using rule 97 (const_val -> STRING_3DQ .)
    ,               reduce using rule 97 (const_val -> STRING_3DQ .)


state 92

    (98) const_val -> STRING_SQ .

    operator_add    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_sub    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_mul    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_div    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_trudiv reduce using rule 98 (const_val -> STRING_SQ .)
    operator_pow    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_join   reduce using rule 98 (const_val -> STRING_SQ .)
    operator_split  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitand reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitor  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitxor reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitshiftleft reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitshiftright reduce using rule 98 (const_val -> STRING_SQ .)
    operator_and    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_or     reduce using rule 98 (const_val -> STRING_SQ .)
    operator_xor    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_contains reduce using rule 98 (const_val -> STRING_SQ .)
    operator_incr   reduce using rule 98 (const_val -> STRING_SQ .)
    operator_decr   reduce using rule 98 (const_val -> STRING_SQ .)
    operator_outer  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_rotate reduce using rule 98 (const_val -> STRING_SQ .)
    operator_apply  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_compose reduce using rule 98 (const_val -> STRING_SQ .)
    operator_over   reduce using rule 98 (const_val -> STRING_SQ .)
    operator_map    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_less_than reduce using rule 98 (const_val -> STRING_SQ .)
    operator_less_than_equals reduce using rule 98 (const_val -> STRING_SQ .)
    operator_greater_than reduce using rule 98 (const_val -> STRING_SQ .)
    operator_greater_than_equals reduce using rule 98 (const_val -> STRING_SQ .)
    operator_equals reduce using rule 98 (const_val -> STRING_SQ .)
    operator_not_equals reduce using rule 98 (const_val -> STRING_SQ .)
    operator_smallest reduce using rule 98 (const_val -> STRING_SQ .)
    operator_greatest reduce using rule 98 (const_val -> STRING_SQ .)
    [               reduce using rule 98 (const_val -> STRING_SQ .)
    operator_scan   reduce using rule 98 (const_val -> STRING_SQ .)
    operator_reduc  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_bitnot reduce using rule 98 (const_val -> STRING_SQ .)
    operator_not    reduce using rule 98 (const_val -> STRING_SQ .)
    operator_inner  reduce using rule 98 (const_val -> STRING_SQ .)
    operator_reverse reduce using rule 98 (const_val -> STRING_SQ .)
    operator_sorted_incr reduce using rule 98 (const_val -> STRING_SQ .)
    operator_sorted_decr reduce using rule 98 (const_val -> STRING_SQ .)
    NEWLINE         reduce using rule 98 (const_val -> STRING_SQ .)
    $end            reduce using rule 98 (const_val -> STRING_SQ .)
    }               reduce using rule 98 (const_val -> STRING_SQ .)
    )               reduce using rule 98 (const_val -> STRING_SQ .)
    {               reduce using rule 98 (const_val -> STRING_SQ .)
    ]               reduce using rule 98 (const_val -> STRING_SQ .)
    :               reduce using rule 98 (const_val -> STRING_SQ .)
    ,               reduce using rule 98 (const_val -> STRING_SQ .)


state 93

    (99) const_val -> STRING_DQ .

    operator_add    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_sub    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_mul    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_div    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_trudiv reduce using rule 99 (const_val -> STRING_DQ .)
    operator_pow    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_join   reduce using rule 99 (const_val -> STRING_DQ .)
    operator_split  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitand reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitor  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitxor reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitshiftleft reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitshiftright reduce using rule 99 (const_val -> STRING_DQ .)
    operator_and    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_or     reduce using rule 99 (const_val -> STRING_DQ .)
    operator_xor    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_contains reduce using rule 99 (const_val -> STRING_DQ .)
    operator_incr   reduce using rule 99 (const_val -> STRING_DQ .)
    operator_decr   reduce using rule 99 (const_val -> STRING_DQ .)
    operator_outer  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_rotate reduce using rule 99 (const_val -> STRING_DQ .)
    operator_apply  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_compose reduce using rule 99 (const_val -> STRING_DQ .)
    operator_over   reduce using rule 99 (const_val -> STRING_DQ .)
    operator_map    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_less_than reduce using rule 99 (const_val -> STRING_DQ .)
    operator_less_than_equals reduce using rule 99 (const_val -> STRING_DQ .)
    operator_greater_than reduce using rule 99 (const_val -> STRING_DQ .)
    operator_greater_than_equals reduce using rule 99 (const_val -> STRING_DQ .)
    operator_equals reduce using rule 99 (const_val -> STRING_DQ .)
    operator_not_equals reduce using rule 99 (const_val -> STRING_DQ .)
    operator_smallest reduce using rule 99 (const_val -> STRING_DQ .)
    operator_greatest reduce using rule 99 (const_val -> STRING_DQ .)
    [               reduce using rule 99 (const_val -> STRING_DQ .)
    operator_scan   reduce using rule 99 (const_val -> STRING_DQ .)
    operator_reduc  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_bitnot reduce using rule 99 (const_val -> STRING_DQ .)
    operator_not    reduce using rule 99 (const_val -> STRING_DQ .)
    operator_inner  reduce using rule 99 (const_val -> STRING_DQ .)
    operator_reverse reduce using rule 99 (const_val -> STRING_DQ .)
    operator_sorted_incr reduce using rule 99 (const_val -> STRING_DQ .)
    operator_sorted_decr reduce using rule 99 (const_val -> STRING_DQ .)
    NEWLINE         reduce using rule 99 (const_val -> STRING_DQ .)
    $end            reduce using rule 99 (const_val -> STRING_DQ .)
    }               reduce using rule 99 (const_val -> STRING_DQ .)
    )               reduce using rule 99 (const_val -> STRING_DQ .)
    {               reduce using rule 99 (const_val -> STRING_DQ .)
    ]               reduce using rule 99 (const_val -> STRING_DQ .)
    :               reduce using rule 99 (const_val -> STRING_DQ .)
    ,               reduce using rule 99 (const_val -> STRING_DQ .)


state 94

    (100) const_val -> true .

    operator_add    reduce using rule 100 (const_val -> true .)
    operator_sub    reduce using rule 100 (const_val -> true .)
    operator_mul    reduce using rule 100 (const_val -> true .)
    operator_div    reduce using rule 100 (const_val -> true .)
    operator_trudiv reduce using rule 100 (const_val -> true .)
    operator_pow    reduce using rule 100 (const_val -> true .)
    operator_join   reduce using rule 100 (const_val -> true .)
    operator_split  reduce using rule 100 (const_val -> true .)
    operator_bitand reduce using rule 100 (const_val -> true .)
    operator_bitor  reduce using rule 100 (const_val -> true .)
    operator_bitxor reduce using rule 100 (const_val -> true .)
    operator_bitshiftleft reduce using rule 100 (const_val -> true .)
    operator_bitshiftright reduce using rule 100 (const_val -> true .)
    operator_and    reduce using rule 100 (const_val -> true .)
    operator_or     reduce using rule 100 (const_val -> true .)
    operator_xor    reduce using rule 100 (const_val -> true .)
    operator_contains reduce using rule 100 (const_val -> true .)
    operator_incr   reduce using rule 100 (const_val -> true .)
    operator_decr   reduce using rule 100 (const_val -> true .)
    operator_outer  reduce using rule 100 (const_val -> true .)
    operator_rotate reduce using rule 100 (const_val -> true .)
    operator_apply  reduce using rule 100 (const_val -> true .)
    operator_compose reduce using rule 100 (const_val -> true .)
    operator_over   reduce using rule 100 (const_val -> true .)
    operator_map    reduce using rule 100 (const_val -> true .)
    operator_less_than reduce using rule 100 (const_val -> true .)
    operator_less_than_equals reduce using rule 100 (const_val -> true .)
    operator_greater_than reduce using rule 100 (const_val -> true .)
    operator_greater_than_equals reduce using rule 100 (const_val -> true .)
    operator_equals reduce using rule 100 (const_val -> true .)
    operator_not_equals reduce using rule 100 (const_val -> true .)
    operator_smallest reduce using rule 100 (const_val -> true .)
    operator_greatest reduce using rule 100 (const_val -> true .)
    [               reduce using rule 100 (const_val -> true .)
    operator_scan   reduce using rule 100 (const_val -> true .)
    operator_reduc  reduce using rule 100 (const_val -> true .)
    operator_bitnot reduce using rule 100 (const_val -> true .)
    operator_not    reduce using rule 100 (const_val -> true .)
    operator_inner  reduce using rule 100 (const_val -> true .)
    operator_reverse reduce using rule 100 (const_val -> true .)
    operator_sorted_incr reduce using rule 100 (const_val -> true .)
    operator_sorted_decr reduce using rule 100 (const_val -> true .)
    NEWLINE         reduce using rule 100 (const_val -> true .)
    $end            reduce using rule 100 (const_val -> true .)
    }               reduce using rule 100 (const_val -> true .)
    )               reduce using rule 100 (const_val -> true .)
    {               reduce using rule 100 (const_val -> true .)
    ]               reduce using rule 100 (const_val -> true .)
    :               reduce using rule 100 (const_val -> true .)
    ,               reduce using rule 100 (const_val -> true .)


state 95

    (101) const_val -> Null .

    operator_add    reduce using rule 101 (const_val -> Null .)
    operator_sub    reduce using rule 101 (const_val -> Null .)
    operator_mul    reduce using rule 101 (const_val -> Null .)
    operator_div    reduce using rule 101 (const_val -> Null .)
    operator_trudiv reduce using rule 101 (const_val -> Null .)
    operator_pow    reduce using rule 101 (const_val -> Null .)
    operator_join   reduce using rule 101 (const_val -> Null .)
    operator_split  reduce using rule 101 (const_val -> Null .)
    operator_bitand reduce using rule 101 (const_val -> Null .)
    operator_bitor  reduce using rule 101 (const_val -> Null .)
    operator_bitxor reduce using rule 101 (const_val -> Null .)
    operator_bitshiftleft reduce using rule 101 (const_val -> Null .)
    operator_bitshiftright reduce using rule 101 (const_val -> Null .)
    operator_and    reduce using rule 101 (const_val -> Null .)
    operator_or     reduce using rule 101 (const_val -> Null .)
    operator_xor    reduce using rule 101 (const_val -> Null .)
    operator_contains reduce using rule 101 (const_val -> Null .)
    operator_incr   reduce using rule 101 (const_val -> Null .)
    operator_decr   reduce using rule 101 (const_val -> Null .)
    operator_outer  reduce using rule 101 (const_val -> Null .)
    operator_rotate reduce using rule 101 (const_val -> Null .)
    operator_apply  reduce using rule 101 (const_val -> Null .)
    operator_compose reduce using rule 101 (const_val -> Null .)
    operator_over   reduce using rule 101 (const_val -> Null .)
    operator_map    reduce using rule 101 (const_val -> Null .)
    operator_less_than reduce using rule 101 (const_val -> Null .)
    operator_less_than_equals reduce using rule 101 (const_val -> Null .)
    operator_greater_than reduce using rule 101 (const_val -> Null .)
    operator_greater_than_equals reduce using rule 101 (const_val -> Null .)
    operator_equals reduce using rule 101 (const_val -> Null .)
    operator_not_equals reduce using rule 101 (const_val -> Null .)
    operator_smallest reduce using rule 101 (const_val -> Null .)
    operator_greatest reduce using rule 101 (const_val -> Null .)
    [               reduce using rule 101 (const_val -> Null .)
    operator_scan   reduce using rule 101 (const_val -> Null .)
    operator_reduc  reduce using rule 101 (const_val -> Null .)
    operator_bitnot reduce using rule 101 (const_val -> Null .)
    operator_not    reduce using rule 101 (const_val -> Null .)
    operator_inner  reduce using rule 101 (const_val -> Null .)
    operator_reverse reduce using rule 101 (const_val -> Null .)
    operator_sorted_incr reduce using rule 101 (const_val -> Null .)
    operator_sorted_decr reduce using rule 101 (const_val -> Null .)
    NEWLINE         reduce using rule 101 (const_val -> Null .)
    $end            reduce using rule 101 (const_val -> Null .)
    }               reduce using rule 101 (const_val -> Null .)
    )               reduce using rule 101 (const_val -> Null .)
    {               reduce using rule 101 (const_val -> Null .)
    ]               reduce using rule 101 (const_val -> Null .)
    :               reduce using rule 101 (const_val -> Null .)
    ,               reduce using rule 101 (const_val -> Null .)


state 96

    (102) const_val -> false .

    operator_add    reduce using rule 102 (const_val -> false .)
    operator_sub    reduce using rule 102 (const_val -> false .)
    operator_mul    reduce using rule 102 (const_val -> false .)
    operator_div    reduce using rule 102 (const_val -> false .)
    operator_trudiv reduce using rule 102 (const_val -> false .)
    operator_pow    reduce using rule 102 (const_val -> false .)
    operator_join   reduce using rule 102 (const_val -> false .)
    operator_split  reduce using rule 102 (const_val -> false .)
    operator_bitand reduce using rule 102 (const_val -> false .)
    operator_bitor  reduce using rule 102 (const_val -> false .)
    operator_bitxor reduce using rule 102 (const_val -> false .)
    operator_bitshiftleft reduce using rule 102 (const_val -> false .)
    operator_bitshiftright reduce using rule 102 (const_val -> false .)
    operator_and    reduce using rule 102 (const_val -> false .)
    operator_or     reduce using rule 102 (const_val -> false .)
    operator_xor    reduce using rule 102 (const_val -> false .)
    operator_contains reduce using rule 102 (const_val -> false .)
    operator_incr   reduce using rule 102 (const_val -> false .)
    operator_decr   reduce using rule 102 (const_val -> false .)
    operator_outer  reduce using rule 102 (const_val -> false .)
    operator_rotate reduce using rule 102 (const_val -> false .)
    operator_apply  reduce using rule 102 (const_val -> false .)
    operator_compose reduce using rule 102 (const_val -> false .)
    operator_over   reduce using rule 102 (const_val -> false .)
    operator_map    reduce using rule 102 (const_val -> false .)
    operator_less_than reduce using rule 102 (const_val -> false .)
    operator_less_than_equals reduce using rule 102 (const_val -> false .)
    operator_greater_than reduce using rule 102 (const_val -> false .)
    operator_greater_than_equals reduce using rule 102 (const_val -> false .)
    operator_equals reduce using rule 102 (const_val -> false .)
    operator_not_equals reduce using rule 102 (const_val -> false .)
    operator_smallest reduce using rule 102 (const_val -> false .)
    operator_greatest reduce using rule 102 (const_val -> false .)
    [               reduce using rule 102 (const_val -> false .)
    operator_scan   reduce using rule 102 (const_val -> false .)
    operator_reduc  reduce using rule 102 (const_val -> false .)
    operator_bitnot reduce using rule 102 (const_val -> false .)
    operator_not    reduce using rule 102 (const_val -> false .)
    operator_inner  reduce using rule 102 (const_val -> false .)
    operator_reverse reduce using rule 102 (const_val -> false .)
    operator_sorted_incr reduce using rule 102 (const_val -> false .)
    operator_sorted_decr reduce using rule 102 (const_val -> false .)
    NEWLINE         reduce using rule 102 (const_val -> false .)
    $end            reduce using rule 102 (const_val -> false .)
    }               reduce using rule 102 (const_val -> false .)
    )               reduce using rule 102 (const_val -> false .)
    {               reduce using rule 102 (const_val -> false .)
    ]               reduce using rule 102 (const_val -> false .)
    :               reduce using rule 102 (const_val -> false .)
    ,               reduce using rule 102 (const_val -> false .)


state 97

    (146) return_val -> type_type . ( arguments )
    (11) TYPE -> type_type .

    (               shift and go to state 243
    VAR             reduce using rule 11 (TYPE -> type_type .)
    operator_add    reduce using rule 11 (TYPE -> type_type .)
    operator_sub    reduce using rule 11 (TYPE -> type_type .)
    operator_mul    reduce using rule 11 (TYPE -> type_type .)
    operator_div    reduce using rule 11 (TYPE -> type_type .)
    operator_trudiv reduce using rule 11 (TYPE -> type_type .)
    operator_pow    reduce using rule 11 (TYPE -> type_type .)
    operator_join   reduce using rule 11 (TYPE -> type_type .)
    operator_split  reduce using rule 11 (TYPE -> type_type .)
    operator_bitand reduce using rule 11 (TYPE -> type_type .)
    operator_bitor  reduce using rule 11 (TYPE -> type_type .)
    operator_bitxor reduce using rule 11 (TYPE -> type_type .)
    operator_bitshiftleft reduce using rule 11 (TYPE -> type_type .)
    operator_bitshiftright reduce using rule 11 (TYPE -> type_type .)
    operator_and    reduce using rule 11 (TYPE -> type_type .)
    operator_or     reduce using rule 11 (TYPE -> type_type .)
    operator_xor    reduce using rule 11 (TYPE -> type_type .)
    operator_contains reduce using rule 11 (TYPE -> type_type .)
    operator_incr   reduce using rule 11 (TYPE -> type_type .)
    operator_decr   reduce using rule 11 (TYPE -> type_type .)
    operator_outer  reduce using rule 11 (TYPE -> type_type .)
    operator_rotate reduce using rule 11 (TYPE -> type_type .)
    operator_apply  reduce using rule 11 (TYPE -> type_type .)
    operator_compose reduce using rule 11 (TYPE -> type_type .)
    operator_over   reduce using rule 11 (TYPE -> type_type .)
    operator_map    reduce using rule 11 (TYPE -> type_type .)
    operator_less_than reduce using rule 11 (TYPE -> type_type .)
    operator_less_than_equals reduce using rule 11 (TYPE -> type_type .)
    operator_greater_than reduce using rule 11 (TYPE -> type_type .)
    operator_greater_than_equals reduce using rule 11 (TYPE -> type_type .)
    operator_equals reduce using rule 11 (TYPE -> type_type .)
    operator_not_equals reduce using rule 11 (TYPE -> type_type .)
    operator_smallest reduce using rule 11 (TYPE -> type_type .)
    operator_greatest reduce using rule 11 (TYPE -> type_type .)
    [               reduce using rule 11 (TYPE -> type_type .)
    operator_scan   reduce using rule 11 (TYPE -> type_type .)
    operator_reduc  reduce using rule 11 (TYPE -> type_type .)
    operator_bitnot reduce using rule 11 (TYPE -> type_type .)
    operator_not    reduce using rule 11 (TYPE -> type_type .)
    operator_inner  reduce using rule 11 (TYPE -> type_type .)
    operator_reverse reduce using rule 11 (TYPE -> type_type .)
    operator_sorted_incr reduce using rule 11 (TYPE -> type_type .)
    operator_sorted_decr reduce using rule 11 (TYPE -> type_type .)
    NEWLINE         reduce using rule 11 (TYPE -> type_type .)
    $end            reduce using rule 11 (TYPE -> type_type .)
    }               reduce using rule 11 (TYPE -> type_type .)
    )               reduce using rule 11 (TYPE -> type_type .)
    {               reduce using rule 11 (TYPE -> type_type .)
    ]               reduce using rule 11 (TYPE -> type_type .)
    :               reduce using rule 11 (TYPE -> type_type .)
    ,               reduce using rule 11 (TYPE -> type_type .)


state 98

    (147) return_val -> type_num . ( arguments )
    (12) TYPE -> type_num .

    (               shift and go to state 244
    VAR             reduce using rule 12 (TYPE -> type_num .)
    operator_add    reduce using rule 12 (TYPE -> type_num .)
    operator_sub    reduce using rule 12 (TYPE -> type_num .)
    operator_mul    reduce using rule 12 (TYPE -> type_num .)
    operator_div    reduce using rule 12 (TYPE -> type_num .)
    operator_trudiv reduce using rule 12 (TYPE -> type_num .)
    operator_pow    reduce using rule 12 (TYPE -> type_num .)
    operator_join   reduce using rule 12 (TYPE -> type_num .)
    operator_split  reduce using rule 12 (TYPE -> type_num .)
    operator_bitand reduce using rule 12 (TYPE -> type_num .)
    operator_bitor  reduce using rule 12 (TYPE -> type_num .)
    operator_bitxor reduce using rule 12 (TYPE -> type_num .)
    operator_bitshiftleft reduce using rule 12 (TYPE -> type_num .)
    operator_bitshiftright reduce using rule 12 (TYPE -> type_num .)
    operator_and    reduce using rule 12 (TYPE -> type_num .)
    operator_or     reduce using rule 12 (TYPE -> type_num .)
    operator_xor    reduce using rule 12 (TYPE -> type_num .)
    operator_contains reduce using rule 12 (TYPE -> type_num .)
    operator_incr   reduce using rule 12 (TYPE -> type_num .)
    operator_decr   reduce using rule 12 (TYPE -> type_num .)
    operator_outer  reduce using rule 12 (TYPE -> type_num .)
    operator_rotate reduce using rule 12 (TYPE -> type_num .)
    operator_apply  reduce using rule 12 (TYPE -> type_num .)
    operator_compose reduce using rule 12 (TYPE -> type_num .)
    operator_over   reduce using rule 12 (TYPE -> type_num .)
    operator_map    reduce using rule 12 (TYPE -> type_num .)
    operator_less_than reduce using rule 12 (TYPE -> type_num .)
    operator_less_than_equals reduce using rule 12 (TYPE -> type_num .)
    operator_greater_than reduce using rule 12 (TYPE -> type_num .)
    operator_greater_than_equals reduce using rule 12 (TYPE -> type_num .)
    operator_equals reduce using rule 12 (TYPE -> type_num .)
    operator_not_equals reduce using rule 12 (TYPE -> type_num .)
    operator_smallest reduce using rule 12 (TYPE -> type_num .)
    operator_greatest reduce using rule 12 (TYPE -> type_num .)
    [               reduce using rule 12 (TYPE -> type_num .)
    operator_scan   reduce using rule 12 (TYPE -> type_num .)
    operator_reduc  reduce using rule 12 (TYPE -> type_num .)
    operator_bitnot reduce using rule 12 (TYPE -> type_num .)
    operator_not    reduce using rule 12 (TYPE -> type_num .)
    operator_inner  reduce using rule 12 (TYPE -> type_num .)
    operator_reverse reduce using rule 12 (TYPE -> type_num .)
    operator_sorted_incr reduce using rule 12 (TYPE -> type_num .)
    operator_sorted_decr reduce using rule 12 (TYPE -> type_num .)
    NEWLINE         reduce using rule 12 (TYPE -> type_num .)
    $end            reduce using rule 12 (TYPE -> type_num .)
    }               reduce using rule 12 (TYPE -> type_num .)
    )               reduce using rule 12 (TYPE -> type_num .)
    {               reduce using rule 12 (TYPE -> type_num .)
    ]               reduce using rule 12 (TYPE -> type_num .)
    :               reduce using rule 12 (TYPE -> type_num .)
    ,               reduce using rule 12 (TYPE -> type_num .)


state 99

    (148) return_val -> type_bool . ( arguments )
    (13) TYPE -> type_bool .

    (               shift and go to state 245
    VAR             reduce using rule 13 (TYPE -> type_bool .)
    operator_add    reduce using rule 13 (TYPE -> type_bool .)
    operator_sub    reduce using rule 13 (TYPE -> type_bool .)
    operator_mul    reduce using rule 13 (TYPE -> type_bool .)
    operator_div    reduce using rule 13 (TYPE -> type_bool .)
    operator_trudiv reduce using rule 13 (TYPE -> type_bool .)
    operator_pow    reduce using rule 13 (TYPE -> type_bool .)
    operator_join   reduce using rule 13 (TYPE -> type_bool .)
    operator_split  reduce using rule 13 (TYPE -> type_bool .)
    operator_bitand reduce using rule 13 (TYPE -> type_bool .)
    operator_bitor  reduce using rule 13 (TYPE -> type_bool .)
    operator_bitxor reduce using rule 13 (TYPE -> type_bool .)
    operator_bitshiftleft reduce using rule 13 (TYPE -> type_bool .)
    operator_bitshiftright reduce using rule 13 (TYPE -> type_bool .)
    operator_and    reduce using rule 13 (TYPE -> type_bool .)
    operator_or     reduce using rule 13 (TYPE -> type_bool .)
    operator_xor    reduce using rule 13 (TYPE -> type_bool .)
    operator_contains reduce using rule 13 (TYPE -> type_bool .)
    operator_incr   reduce using rule 13 (TYPE -> type_bool .)
    operator_decr   reduce using rule 13 (TYPE -> type_bool .)
    operator_outer  reduce using rule 13 (TYPE -> type_bool .)
    operator_rotate reduce using rule 13 (TYPE -> type_bool .)
    operator_apply  reduce using rule 13 (TYPE -> type_bool .)
    operator_compose reduce using rule 13 (TYPE -> type_bool .)
    operator_over   reduce using rule 13 (TYPE -> type_bool .)
    operator_map    reduce using rule 13 (TYPE -> type_bool .)
    operator_less_than reduce using rule 13 (TYPE -> type_bool .)
    operator_less_than_equals reduce using rule 13 (TYPE -> type_bool .)
    operator_greater_than reduce using rule 13 (TYPE -> type_bool .)
    operator_greater_than_equals reduce using rule 13 (TYPE -> type_bool .)
    operator_equals reduce using rule 13 (TYPE -> type_bool .)
    operator_not_equals reduce using rule 13 (TYPE -> type_bool .)
    operator_smallest reduce using rule 13 (TYPE -> type_bool .)
    operator_greatest reduce using rule 13 (TYPE -> type_bool .)
    [               reduce using rule 13 (TYPE -> type_bool .)
    operator_scan   reduce using rule 13 (TYPE -> type_bool .)
    operator_reduc  reduce using rule 13 (TYPE -> type_bool .)
    operator_bitnot reduce using rule 13 (TYPE -> type_bool .)
    operator_not    reduce using rule 13 (TYPE -> type_bool .)
    operator_inner  reduce using rule 13 (TYPE -> type_bool .)
    operator_reverse reduce using rule 13 (TYPE -> type_bool .)
    operator_sorted_incr reduce using rule 13 (TYPE -> type_bool .)
    operator_sorted_decr reduce using rule 13 (TYPE -> type_bool .)
    NEWLINE         reduce using rule 13 (TYPE -> type_bool .)
    $end            reduce using rule 13 (TYPE -> type_bool .)
    }               reduce using rule 13 (TYPE -> type_bool .)
    )               reduce using rule 13 (TYPE -> type_bool .)
    {               reduce using rule 13 (TYPE -> type_bool .)
    ]               reduce using rule 13 (TYPE -> type_bool .)
    :               reduce using rule 13 (TYPE -> type_bool .)
    ,               reduce using rule 13 (TYPE -> type_bool .)


state 100

    (149) return_val -> type_any . ( arguments )
    (14) TYPE -> type_any .

    (               shift and go to state 246
    VAR             reduce using rule 14 (TYPE -> type_any .)
    operator_add    reduce using rule 14 (TYPE -> type_any .)
    operator_sub    reduce using rule 14 (TYPE -> type_any .)
    operator_mul    reduce using rule 14 (TYPE -> type_any .)
    operator_div    reduce using rule 14 (TYPE -> type_any .)
    operator_trudiv reduce using rule 14 (TYPE -> type_any .)
    operator_pow    reduce using rule 14 (TYPE -> type_any .)
    operator_join   reduce using rule 14 (TYPE -> type_any .)
    operator_split  reduce using rule 14 (TYPE -> type_any .)
    operator_bitand reduce using rule 14 (TYPE -> type_any .)
    operator_bitor  reduce using rule 14 (TYPE -> type_any .)
    operator_bitxor reduce using rule 14 (TYPE -> type_any .)
    operator_bitshiftleft reduce using rule 14 (TYPE -> type_any .)
    operator_bitshiftright reduce using rule 14 (TYPE -> type_any .)
    operator_and    reduce using rule 14 (TYPE -> type_any .)
    operator_or     reduce using rule 14 (TYPE -> type_any .)
    operator_xor    reduce using rule 14 (TYPE -> type_any .)
    operator_contains reduce using rule 14 (TYPE -> type_any .)
    operator_incr   reduce using rule 14 (TYPE -> type_any .)
    operator_decr   reduce using rule 14 (TYPE -> type_any .)
    operator_outer  reduce using rule 14 (TYPE -> type_any .)
    operator_rotate reduce using rule 14 (TYPE -> type_any .)
    operator_apply  reduce using rule 14 (TYPE -> type_any .)
    operator_compose reduce using rule 14 (TYPE -> type_any .)
    operator_over   reduce using rule 14 (TYPE -> type_any .)
    operator_map    reduce using rule 14 (TYPE -> type_any .)
    operator_less_than reduce using rule 14 (TYPE -> type_any .)
    operator_less_than_equals reduce using rule 14 (TYPE -> type_any .)
    operator_greater_than reduce using rule 14 (TYPE -> type_any .)
    operator_greater_than_equals reduce using rule 14 (TYPE -> type_any .)
    operator_equals reduce using rule 14 (TYPE -> type_any .)
    operator_not_equals reduce using rule 14 (TYPE -> type_any .)
    operator_smallest reduce using rule 14 (TYPE -> type_any .)
    operator_greatest reduce using rule 14 (TYPE -> type_any .)
    [               reduce using rule 14 (TYPE -> type_any .)
    operator_scan   reduce using rule 14 (TYPE -> type_any .)
    operator_reduc  reduce using rule 14 (TYPE -> type_any .)
    operator_bitnot reduce using rule 14 (TYPE -> type_any .)
    operator_not    reduce using rule 14 (TYPE -> type_any .)
    operator_inner  reduce using rule 14 (TYPE -> type_any .)
    operator_reverse reduce using rule 14 (TYPE -> type_any .)
    operator_sorted_incr reduce using rule 14 (TYPE -> type_any .)
    operator_sorted_decr reduce using rule 14 (TYPE -> type_any .)
    NEWLINE         reduce using rule 14 (TYPE -> type_any .)
    $end            reduce using rule 14 (TYPE -> type_any .)
    }               reduce using rule 14 (TYPE -> type_any .)
    )               reduce using rule 14 (TYPE -> type_any .)
    {               reduce using rule 14 (TYPE -> type_any .)
    ]               reduce using rule 14 (TYPE -> type_any .)
    :               reduce using rule 14 (TYPE -> type_any .)
    ,               reduce using rule 14 (TYPE -> type_any .)


state 101

    (150) return_val -> type_u64 . ( arguments )
    (15) TYPE -> type_u64 .

    (               shift and go to state 247
    VAR             reduce using rule 15 (TYPE -> type_u64 .)
    operator_add    reduce using rule 15 (TYPE -> type_u64 .)
    operator_sub    reduce using rule 15 (TYPE -> type_u64 .)
    operator_mul    reduce using rule 15 (TYPE -> type_u64 .)
    operator_div    reduce using rule 15 (TYPE -> type_u64 .)
    operator_trudiv reduce using rule 15 (TYPE -> type_u64 .)
    operator_pow    reduce using rule 15 (TYPE -> type_u64 .)
    operator_join   reduce using rule 15 (TYPE -> type_u64 .)
    operator_split  reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitand reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitor  reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitxor reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitshiftleft reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitshiftright reduce using rule 15 (TYPE -> type_u64 .)
    operator_and    reduce using rule 15 (TYPE -> type_u64 .)
    operator_or     reduce using rule 15 (TYPE -> type_u64 .)
    operator_xor    reduce using rule 15 (TYPE -> type_u64 .)
    operator_contains reduce using rule 15 (TYPE -> type_u64 .)
    operator_incr   reduce using rule 15 (TYPE -> type_u64 .)
    operator_decr   reduce using rule 15 (TYPE -> type_u64 .)
    operator_outer  reduce using rule 15 (TYPE -> type_u64 .)
    operator_rotate reduce using rule 15 (TYPE -> type_u64 .)
    operator_apply  reduce using rule 15 (TYPE -> type_u64 .)
    operator_compose reduce using rule 15 (TYPE -> type_u64 .)
    operator_over   reduce using rule 15 (TYPE -> type_u64 .)
    operator_map    reduce using rule 15 (TYPE -> type_u64 .)
    operator_less_than reduce using rule 15 (TYPE -> type_u64 .)
    operator_less_than_equals reduce using rule 15 (TYPE -> type_u64 .)
    operator_greater_than reduce using rule 15 (TYPE -> type_u64 .)
    operator_greater_than_equals reduce using rule 15 (TYPE -> type_u64 .)
    operator_equals reduce using rule 15 (TYPE -> type_u64 .)
    operator_not_equals reduce using rule 15 (TYPE -> type_u64 .)
    operator_smallest reduce using rule 15 (TYPE -> type_u64 .)
    operator_greatest reduce using rule 15 (TYPE -> type_u64 .)
    [               reduce using rule 15 (TYPE -> type_u64 .)
    operator_scan   reduce using rule 15 (TYPE -> type_u64 .)
    operator_reduc  reduce using rule 15 (TYPE -> type_u64 .)
    operator_bitnot reduce using rule 15 (TYPE -> type_u64 .)
    operator_not    reduce using rule 15 (TYPE -> type_u64 .)
    operator_inner  reduce using rule 15 (TYPE -> type_u64 .)
    operator_reverse reduce using rule 15 (TYPE -> type_u64 .)
    operator_sorted_incr reduce using rule 15 (TYPE -> type_u64 .)
    operator_sorted_decr reduce using rule 15 (TYPE -> type_u64 .)
    NEWLINE         reduce using rule 15 (TYPE -> type_u64 .)
    $end            reduce using rule 15 (TYPE -> type_u64 .)
    }               reduce using rule 15 (TYPE -> type_u64 .)
    )               reduce using rule 15 (TYPE -> type_u64 .)
    {               reduce using rule 15 (TYPE -> type_u64 .)
    ]               reduce using rule 15 (TYPE -> type_u64 .)
    :               reduce using rule 15 (TYPE -> type_u64 .)
    ,               reduce using rule 15 (TYPE -> type_u64 .)


state 102

    (151) return_val -> type_u32 . ( arguments )
    (16) TYPE -> type_u32 .

    (               shift and go to state 248
    VAR             reduce using rule 16 (TYPE -> type_u32 .)
    operator_add    reduce using rule 16 (TYPE -> type_u32 .)
    operator_sub    reduce using rule 16 (TYPE -> type_u32 .)
    operator_mul    reduce using rule 16 (TYPE -> type_u32 .)
    operator_div    reduce using rule 16 (TYPE -> type_u32 .)
    operator_trudiv reduce using rule 16 (TYPE -> type_u32 .)
    operator_pow    reduce using rule 16 (TYPE -> type_u32 .)
    operator_join   reduce using rule 16 (TYPE -> type_u32 .)
    operator_split  reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitand reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitor  reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitxor reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitshiftleft reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitshiftright reduce using rule 16 (TYPE -> type_u32 .)
    operator_and    reduce using rule 16 (TYPE -> type_u32 .)
    operator_or     reduce using rule 16 (TYPE -> type_u32 .)
    operator_xor    reduce using rule 16 (TYPE -> type_u32 .)
    operator_contains reduce using rule 16 (TYPE -> type_u32 .)
    operator_incr   reduce using rule 16 (TYPE -> type_u32 .)
    operator_decr   reduce using rule 16 (TYPE -> type_u32 .)
    operator_outer  reduce using rule 16 (TYPE -> type_u32 .)
    operator_rotate reduce using rule 16 (TYPE -> type_u32 .)
    operator_apply  reduce using rule 16 (TYPE -> type_u32 .)
    operator_compose reduce using rule 16 (TYPE -> type_u32 .)
    operator_over   reduce using rule 16 (TYPE -> type_u32 .)
    operator_map    reduce using rule 16 (TYPE -> type_u32 .)
    operator_less_than reduce using rule 16 (TYPE -> type_u32 .)
    operator_less_than_equals reduce using rule 16 (TYPE -> type_u32 .)
    operator_greater_than reduce using rule 16 (TYPE -> type_u32 .)
    operator_greater_than_equals reduce using rule 16 (TYPE -> type_u32 .)
    operator_equals reduce using rule 16 (TYPE -> type_u32 .)
    operator_not_equals reduce using rule 16 (TYPE -> type_u32 .)
    operator_smallest reduce using rule 16 (TYPE -> type_u32 .)
    operator_greatest reduce using rule 16 (TYPE -> type_u32 .)
    [               reduce using rule 16 (TYPE -> type_u32 .)
    operator_scan   reduce using rule 16 (TYPE -> type_u32 .)
    operator_reduc  reduce using rule 16 (TYPE -> type_u32 .)
    operator_bitnot reduce using rule 16 (TYPE -> type_u32 .)
    operator_not    reduce using rule 16 (TYPE -> type_u32 .)
    operator_inner  reduce using rule 16 (TYPE -> type_u32 .)
    operator_reverse reduce using rule 16 (TYPE -> type_u32 .)
    operator_sorted_incr reduce using rule 16 (TYPE -> type_u32 .)
    operator_sorted_decr reduce using rule 16 (TYPE -> type_u32 .)
    NEWLINE         reduce using rule 16 (TYPE -> type_u32 .)
    $end            reduce using rule 16 (TYPE -> type_u32 .)
    }               reduce using rule 16 (TYPE -> type_u32 .)
    )               reduce using rule 16 (TYPE -> type_u32 .)
    {               reduce using rule 16 (TYPE -> type_u32 .)
    ]               reduce using rule 16 (TYPE -> type_u32 .)
    :               reduce using rule 16 (TYPE -> type_u32 .)
    ,               reduce using rule 16 (TYPE -> type_u32 .)


state 103

    (152) return_val -> type_u16 . ( arguments )
    (17) TYPE -> type_u16 .

    (               shift and go to state 249
    VAR             reduce using rule 17 (TYPE -> type_u16 .)
    operator_add    reduce using rule 17 (TYPE -> type_u16 .)
    operator_sub    reduce using rule 17 (TYPE -> type_u16 .)
    operator_mul    reduce using rule 17 (TYPE -> type_u16 .)
    operator_div    reduce using rule 17 (TYPE -> type_u16 .)
    operator_trudiv reduce using rule 17 (TYPE -> type_u16 .)
    operator_pow    reduce using rule 17 (TYPE -> type_u16 .)
    operator_join   reduce using rule 17 (TYPE -> type_u16 .)
    operator_split  reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitand reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitor  reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitxor reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitshiftleft reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitshiftright reduce using rule 17 (TYPE -> type_u16 .)
    operator_and    reduce using rule 17 (TYPE -> type_u16 .)
    operator_or     reduce using rule 17 (TYPE -> type_u16 .)
    operator_xor    reduce using rule 17 (TYPE -> type_u16 .)
    operator_contains reduce using rule 17 (TYPE -> type_u16 .)
    operator_incr   reduce using rule 17 (TYPE -> type_u16 .)
    operator_decr   reduce using rule 17 (TYPE -> type_u16 .)
    operator_outer  reduce using rule 17 (TYPE -> type_u16 .)
    operator_rotate reduce using rule 17 (TYPE -> type_u16 .)
    operator_apply  reduce using rule 17 (TYPE -> type_u16 .)
    operator_compose reduce using rule 17 (TYPE -> type_u16 .)
    operator_over   reduce using rule 17 (TYPE -> type_u16 .)
    operator_map    reduce using rule 17 (TYPE -> type_u16 .)
    operator_less_than reduce using rule 17 (TYPE -> type_u16 .)
    operator_less_than_equals reduce using rule 17 (TYPE -> type_u16 .)
    operator_greater_than reduce using rule 17 (TYPE -> type_u16 .)
    operator_greater_than_equals reduce using rule 17 (TYPE -> type_u16 .)
    operator_equals reduce using rule 17 (TYPE -> type_u16 .)
    operator_not_equals reduce using rule 17 (TYPE -> type_u16 .)
    operator_smallest reduce using rule 17 (TYPE -> type_u16 .)
    operator_greatest reduce using rule 17 (TYPE -> type_u16 .)
    [               reduce using rule 17 (TYPE -> type_u16 .)
    operator_scan   reduce using rule 17 (TYPE -> type_u16 .)
    operator_reduc  reduce using rule 17 (TYPE -> type_u16 .)
    operator_bitnot reduce using rule 17 (TYPE -> type_u16 .)
    operator_not    reduce using rule 17 (TYPE -> type_u16 .)
    operator_inner  reduce using rule 17 (TYPE -> type_u16 .)
    operator_reverse reduce using rule 17 (TYPE -> type_u16 .)
    operator_sorted_incr reduce using rule 17 (TYPE -> type_u16 .)
    operator_sorted_decr reduce using rule 17 (TYPE -> type_u16 .)
    NEWLINE         reduce using rule 17 (TYPE -> type_u16 .)
    $end            reduce using rule 17 (TYPE -> type_u16 .)
    }               reduce using rule 17 (TYPE -> type_u16 .)
    )               reduce using rule 17 (TYPE -> type_u16 .)
    {               reduce using rule 17 (TYPE -> type_u16 .)
    ]               reduce using rule 17 (TYPE -> type_u16 .)
    :               reduce using rule 17 (TYPE -> type_u16 .)
    ,               reduce using rule 17 (TYPE -> type_u16 .)


state 104

    (153) return_val -> type_u8 . ( arguments )
    (18) TYPE -> type_u8 .

    (               shift and go to state 250
    VAR             reduce using rule 18 (TYPE -> type_u8 .)
    operator_add    reduce using rule 18 (TYPE -> type_u8 .)
    operator_sub    reduce using rule 18 (TYPE -> type_u8 .)
    operator_mul    reduce using rule 18 (TYPE -> type_u8 .)
    operator_div    reduce using rule 18 (TYPE -> type_u8 .)
    operator_trudiv reduce using rule 18 (TYPE -> type_u8 .)
    operator_pow    reduce using rule 18 (TYPE -> type_u8 .)
    operator_join   reduce using rule 18 (TYPE -> type_u8 .)
    operator_split  reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitand reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitor  reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitxor reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitshiftleft reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitshiftright reduce using rule 18 (TYPE -> type_u8 .)
    operator_and    reduce using rule 18 (TYPE -> type_u8 .)
    operator_or     reduce using rule 18 (TYPE -> type_u8 .)
    operator_xor    reduce using rule 18 (TYPE -> type_u8 .)
    operator_contains reduce using rule 18 (TYPE -> type_u8 .)
    operator_incr   reduce using rule 18 (TYPE -> type_u8 .)
    operator_decr   reduce using rule 18 (TYPE -> type_u8 .)
    operator_outer  reduce using rule 18 (TYPE -> type_u8 .)
    operator_rotate reduce using rule 18 (TYPE -> type_u8 .)
    operator_apply  reduce using rule 18 (TYPE -> type_u8 .)
    operator_compose reduce using rule 18 (TYPE -> type_u8 .)
    operator_over   reduce using rule 18 (TYPE -> type_u8 .)
    operator_map    reduce using rule 18 (TYPE -> type_u8 .)
    operator_less_than reduce using rule 18 (TYPE -> type_u8 .)
    operator_less_than_equals reduce using rule 18 (TYPE -> type_u8 .)
    operator_greater_than reduce using rule 18 (TYPE -> type_u8 .)
    operator_greater_than_equals reduce using rule 18 (TYPE -> type_u8 .)
    operator_equals reduce using rule 18 (TYPE -> type_u8 .)
    operator_not_equals reduce using rule 18 (TYPE -> type_u8 .)
    operator_smallest reduce using rule 18 (TYPE -> type_u8 .)
    operator_greatest reduce using rule 18 (TYPE -> type_u8 .)
    [               reduce using rule 18 (TYPE -> type_u8 .)
    operator_scan   reduce using rule 18 (TYPE -> type_u8 .)
    operator_reduc  reduce using rule 18 (TYPE -> type_u8 .)
    operator_bitnot reduce using rule 18 (TYPE -> type_u8 .)
    operator_not    reduce using rule 18 (TYPE -> type_u8 .)
    operator_inner  reduce using rule 18 (TYPE -> type_u8 .)
    operator_reverse reduce using rule 18 (TYPE -> type_u8 .)
    operator_sorted_incr reduce using rule 18 (TYPE -> type_u8 .)
    operator_sorted_decr reduce using rule 18 (TYPE -> type_u8 .)
    NEWLINE         reduce using rule 18 (TYPE -> type_u8 .)
    $end            reduce using rule 18 (TYPE -> type_u8 .)
    }               reduce using rule 18 (TYPE -> type_u8 .)
    )               reduce using rule 18 (TYPE -> type_u8 .)
    {               reduce using rule 18 (TYPE -> type_u8 .)
    ]               reduce using rule 18 (TYPE -> type_u8 .)
    :               reduce using rule 18 (TYPE -> type_u8 .)
    ,               reduce using rule 18 (TYPE -> type_u8 .)


state 105

    (154) return_val -> type_i64 . ( arguments )
    (19) TYPE -> type_i64 .

    (               shift and go to state 251
    VAR             reduce using rule 19 (TYPE -> type_i64 .)
    operator_add    reduce using rule 19 (TYPE -> type_i64 .)
    operator_sub    reduce using rule 19 (TYPE -> type_i64 .)
    operator_mul    reduce using rule 19 (TYPE -> type_i64 .)
    operator_div    reduce using rule 19 (TYPE -> type_i64 .)
    operator_trudiv reduce using rule 19 (TYPE -> type_i64 .)
    operator_pow    reduce using rule 19 (TYPE -> type_i64 .)
    operator_join   reduce using rule 19 (TYPE -> type_i64 .)
    operator_split  reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitand reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitor  reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitxor reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitshiftleft reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitshiftright reduce using rule 19 (TYPE -> type_i64 .)
    operator_and    reduce using rule 19 (TYPE -> type_i64 .)
    operator_or     reduce using rule 19 (TYPE -> type_i64 .)
    operator_xor    reduce using rule 19 (TYPE -> type_i64 .)
    operator_contains reduce using rule 19 (TYPE -> type_i64 .)
    operator_incr   reduce using rule 19 (TYPE -> type_i64 .)
    operator_decr   reduce using rule 19 (TYPE -> type_i64 .)
    operator_outer  reduce using rule 19 (TYPE -> type_i64 .)
    operator_rotate reduce using rule 19 (TYPE -> type_i64 .)
    operator_apply  reduce using rule 19 (TYPE -> type_i64 .)
    operator_compose reduce using rule 19 (TYPE -> type_i64 .)
    operator_over   reduce using rule 19 (TYPE -> type_i64 .)
    operator_map    reduce using rule 19 (TYPE -> type_i64 .)
    operator_less_than reduce using rule 19 (TYPE -> type_i64 .)
    operator_less_than_equals reduce using rule 19 (TYPE -> type_i64 .)
    operator_greater_than reduce using rule 19 (TYPE -> type_i64 .)
    operator_greater_than_equals reduce using rule 19 (TYPE -> type_i64 .)
    operator_equals reduce using rule 19 (TYPE -> type_i64 .)
    operator_not_equals reduce using rule 19 (TYPE -> type_i64 .)
    operator_smallest reduce using rule 19 (TYPE -> type_i64 .)
    operator_greatest reduce using rule 19 (TYPE -> type_i64 .)
    [               reduce using rule 19 (TYPE -> type_i64 .)
    operator_scan   reduce using rule 19 (TYPE -> type_i64 .)
    operator_reduc  reduce using rule 19 (TYPE -> type_i64 .)
    operator_bitnot reduce using rule 19 (TYPE -> type_i64 .)
    operator_not    reduce using rule 19 (TYPE -> type_i64 .)
    operator_inner  reduce using rule 19 (TYPE -> type_i64 .)
    operator_reverse reduce using rule 19 (TYPE -> type_i64 .)
    operator_sorted_incr reduce using rule 19 (TYPE -> type_i64 .)
    operator_sorted_decr reduce using rule 19 (TYPE -> type_i64 .)
    NEWLINE         reduce using rule 19 (TYPE -> type_i64 .)
    $end            reduce using rule 19 (TYPE -> type_i64 .)
    }               reduce using rule 19 (TYPE -> type_i64 .)
    )               reduce using rule 19 (TYPE -> type_i64 .)
    {               reduce using rule 19 (TYPE -> type_i64 .)
    ]               reduce using rule 19 (TYPE -> type_i64 .)
    :               reduce using rule 19 (TYPE -> type_i64 .)
    ,               reduce using rule 19 (TYPE -> type_i64 .)


state 106

    (155) return_val -> type_i32 . ( arguments )
    (20) TYPE -> type_i32 .

    (               shift and go to state 252
    VAR             reduce using rule 20 (TYPE -> type_i32 .)
    operator_add    reduce using rule 20 (TYPE -> type_i32 .)
    operator_sub    reduce using rule 20 (TYPE -> type_i32 .)
    operator_mul    reduce using rule 20 (TYPE -> type_i32 .)
    operator_div    reduce using rule 20 (TYPE -> type_i32 .)
    operator_trudiv reduce using rule 20 (TYPE -> type_i32 .)
    operator_pow    reduce using rule 20 (TYPE -> type_i32 .)
    operator_join   reduce using rule 20 (TYPE -> type_i32 .)
    operator_split  reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitand reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitor  reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitxor reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitshiftleft reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitshiftright reduce using rule 20 (TYPE -> type_i32 .)
    operator_and    reduce using rule 20 (TYPE -> type_i32 .)
    operator_or     reduce using rule 20 (TYPE -> type_i32 .)
    operator_xor    reduce using rule 20 (TYPE -> type_i32 .)
    operator_contains reduce using rule 20 (TYPE -> type_i32 .)
    operator_incr   reduce using rule 20 (TYPE -> type_i32 .)
    operator_decr   reduce using rule 20 (TYPE -> type_i32 .)
    operator_outer  reduce using rule 20 (TYPE -> type_i32 .)
    operator_rotate reduce using rule 20 (TYPE -> type_i32 .)
    operator_apply  reduce using rule 20 (TYPE -> type_i32 .)
    operator_compose reduce using rule 20 (TYPE -> type_i32 .)
    operator_over   reduce using rule 20 (TYPE -> type_i32 .)
    operator_map    reduce using rule 20 (TYPE -> type_i32 .)
    operator_less_than reduce using rule 20 (TYPE -> type_i32 .)
    operator_less_than_equals reduce using rule 20 (TYPE -> type_i32 .)
    operator_greater_than reduce using rule 20 (TYPE -> type_i32 .)
    operator_greater_than_equals reduce using rule 20 (TYPE -> type_i32 .)
    operator_equals reduce using rule 20 (TYPE -> type_i32 .)
    operator_not_equals reduce using rule 20 (TYPE -> type_i32 .)
    operator_smallest reduce using rule 20 (TYPE -> type_i32 .)
    operator_greatest reduce using rule 20 (TYPE -> type_i32 .)
    [               reduce using rule 20 (TYPE -> type_i32 .)
    operator_scan   reduce using rule 20 (TYPE -> type_i32 .)
    operator_reduc  reduce using rule 20 (TYPE -> type_i32 .)
    operator_bitnot reduce using rule 20 (TYPE -> type_i32 .)
    operator_not    reduce using rule 20 (TYPE -> type_i32 .)
    operator_inner  reduce using rule 20 (TYPE -> type_i32 .)
    operator_reverse reduce using rule 20 (TYPE -> type_i32 .)
    operator_sorted_incr reduce using rule 20 (TYPE -> type_i32 .)
    operator_sorted_decr reduce using rule 20 (TYPE -> type_i32 .)
    NEWLINE         reduce using rule 20 (TYPE -> type_i32 .)
    $end            reduce using rule 20 (TYPE -> type_i32 .)
    }               reduce using rule 20 (TYPE -> type_i32 .)
    )               reduce using rule 20 (TYPE -> type_i32 .)
    {               reduce using rule 20 (TYPE -> type_i32 .)
    ]               reduce using rule 20 (TYPE -> type_i32 .)
    :               reduce using rule 20 (TYPE -> type_i32 .)
    ,               reduce using rule 20 (TYPE -> type_i32 .)


state 107

    (156) return_val -> type_i16 . ( arguments )
    (21) TYPE -> type_i16 .

    (               shift and go to state 253
    VAR             reduce using rule 21 (TYPE -> type_i16 .)
    operator_add    reduce using rule 21 (TYPE -> type_i16 .)
    operator_sub    reduce using rule 21 (TYPE -> type_i16 .)
    operator_mul    reduce using rule 21 (TYPE -> type_i16 .)
    operator_div    reduce using rule 21 (TYPE -> type_i16 .)
    operator_trudiv reduce using rule 21 (TYPE -> type_i16 .)
    operator_pow    reduce using rule 21 (TYPE -> type_i16 .)
    operator_join   reduce using rule 21 (TYPE -> type_i16 .)
    operator_split  reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitand reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitor  reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitxor reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitshiftleft reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitshiftright reduce using rule 21 (TYPE -> type_i16 .)
    operator_and    reduce using rule 21 (TYPE -> type_i16 .)
    operator_or     reduce using rule 21 (TYPE -> type_i16 .)
    operator_xor    reduce using rule 21 (TYPE -> type_i16 .)
    operator_contains reduce using rule 21 (TYPE -> type_i16 .)
    operator_incr   reduce using rule 21 (TYPE -> type_i16 .)
    operator_decr   reduce using rule 21 (TYPE -> type_i16 .)
    operator_outer  reduce using rule 21 (TYPE -> type_i16 .)
    operator_rotate reduce using rule 21 (TYPE -> type_i16 .)
    operator_apply  reduce using rule 21 (TYPE -> type_i16 .)
    operator_compose reduce using rule 21 (TYPE -> type_i16 .)
    operator_over   reduce using rule 21 (TYPE -> type_i16 .)
    operator_map    reduce using rule 21 (TYPE -> type_i16 .)
    operator_less_than reduce using rule 21 (TYPE -> type_i16 .)
    operator_less_than_equals reduce using rule 21 (TYPE -> type_i16 .)
    operator_greater_than reduce using rule 21 (TYPE -> type_i16 .)
    operator_greater_than_equals reduce using rule 21 (TYPE -> type_i16 .)
    operator_equals reduce using rule 21 (TYPE -> type_i16 .)
    operator_not_equals reduce using rule 21 (TYPE -> type_i16 .)
    operator_smallest reduce using rule 21 (TYPE -> type_i16 .)
    operator_greatest reduce using rule 21 (TYPE -> type_i16 .)
    [               reduce using rule 21 (TYPE -> type_i16 .)
    operator_scan   reduce using rule 21 (TYPE -> type_i16 .)
    operator_reduc  reduce using rule 21 (TYPE -> type_i16 .)
    operator_bitnot reduce using rule 21 (TYPE -> type_i16 .)
    operator_not    reduce using rule 21 (TYPE -> type_i16 .)
    operator_inner  reduce using rule 21 (TYPE -> type_i16 .)
    operator_reverse reduce using rule 21 (TYPE -> type_i16 .)
    operator_sorted_incr reduce using rule 21 (TYPE -> type_i16 .)
    operator_sorted_decr reduce using rule 21 (TYPE -> type_i16 .)
    NEWLINE         reduce using rule 21 (TYPE -> type_i16 .)
    $end            reduce using rule 21 (TYPE -> type_i16 .)
    }               reduce using rule 21 (TYPE -> type_i16 .)
    )               reduce using rule 21 (TYPE -> type_i16 .)
    {               reduce using rule 21 (TYPE -> type_i16 .)
    ]               reduce using rule 21 (TYPE -> type_i16 .)
    :               reduce using rule 21 (TYPE -> type_i16 .)
    ,               reduce using rule 21 (TYPE -> type_i16 .)


state 108

    (157) return_val -> type_i8 . ( arguments )
    (22) TYPE -> type_i8 .

    (               shift and go to state 254
    VAR             reduce using rule 22 (TYPE -> type_i8 .)
    operator_add    reduce using rule 22 (TYPE -> type_i8 .)
    operator_sub    reduce using rule 22 (TYPE -> type_i8 .)
    operator_mul    reduce using rule 22 (TYPE -> type_i8 .)
    operator_div    reduce using rule 22 (TYPE -> type_i8 .)
    operator_trudiv reduce using rule 22 (TYPE -> type_i8 .)
    operator_pow    reduce using rule 22 (TYPE -> type_i8 .)
    operator_join   reduce using rule 22 (TYPE -> type_i8 .)
    operator_split  reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitand reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitor  reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitxor reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitshiftleft reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitshiftright reduce using rule 22 (TYPE -> type_i8 .)
    operator_and    reduce using rule 22 (TYPE -> type_i8 .)
    operator_or     reduce using rule 22 (TYPE -> type_i8 .)
    operator_xor    reduce using rule 22 (TYPE -> type_i8 .)
    operator_contains reduce using rule 22 (TYPE -> type_i8 .)
    operator_incr   reduce using rule 22 (TYPE -> type_i8 .)
    operator_decr   reduce using rule 22 (TYPE -> type_i8 .)
    operator_outer  reduce using rule 22 (TYPE -> type_i8 .)
    operator_rotate reduce using rule 22 (TYPE -> type_i8 .)
    operator_apply  reduce using rule 22 (TYPE -> type_i8 .)
    operator_compose reduce using rule 22 (TYPE -> type_i8 .)
    operator_over   reduce using rule 22 (TYPE -> type_i8 .)
    operator_map    reduce using rule 22 (TYPE -> type_i8 .)
    operator_less_than reduce using rule 22 (TYPE -> type_i8 .)
    operator_less_than_equals reduce using rule 22 (TYPE -> type_i8 .)
    operator_greater_than reduce using rule 22 (TYPE -> type_i8 .)
    operator_greater_than_equals reduce using rule 22 (TYPE -> type_i8 .)
    operator_equals reduce using rule 22 (TYPE -> type_i8 .)
    operator_not_equals reduce using rule 22 (TYPE -> type_i8 .)
    operator_smallest reduce using rule 22 (TYPE -> type_i8 .)
    operator_greatest reduce using rule 22 (TYPE -> type_i8 .)
    [               reduce using rule 22 (TYPE -> type_i8 .)
    operator_scan   reduce using rule 22 (TYPE -> type_i8 .)
    operator_reduc  reduce using rule 22 (TYPE -> type_i8 .)
    operator_bitnot reduce using rule 22 (TYPE -> type_i8 .)
    operator_not    reduce using rule 22 (TYPE -> type_i8 .)
    operator_inner  reduce using rule 22 (TYPE -> type_i8 .)
    operator_reverse reduce using rule 22 (TYPE -> type_i8 .)
    operator_sorted_incr reduce using rule 22 (TYPE -> type_i8 .)
    operator_sorted_decr reduce using rule 22 (TYPE -> type_i8 .)
    NEWLINE         reduce using rule 22 (TYPE -> type_i8 .)
    $end            reduce using rule 22 (TYPE -> type_i8 .)
    }               reduce using rule 22 (TYPE -> type_i8 .)
    )               reduce using rule 22 (TYPE -> type_i8 .)
    {               reduce using rule 22 (TYPE -> type_i8 .)
    ]               reduce using rule 22 (TYPE -> type_i8 .)
    :               reduce using rule 22 (TYPE -> type_i8 .)
    ,               reduce using rule 22 (TYPE -> type_i8 .)


state 109

    (158) return_val -> type_f32 . ( arguments )
    (23) TYPE -> type_f32 .

    (               shift and go to state 255
    VAR             reduce using rule 23 (TYPE -> type_f32 .)
    operator_add    reduce using rule 23 (TYPE -> type_f32 .)
    operator_sub    reduce using rule 23 (TYPE -> type_f32 .)
    operator_mul    reduce using rule 23 (TYPE -> type_f32 .)
    operator_div    reduce using rule 23 (TYPE -> type_f32 .)
    operator_trudiv reduce using rule 23 (TYPE -> type_f32 .)
    operator_pow    reduce using rule 23 (TYPE -> type_f32 .)
    operator_join   reduce using rule 23 (TYPE -> type_f32 .)
    operator_split  reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitand reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitor  reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitxor reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitshiftleft reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitshiftright reduce using rule 23 (TYPE -> type_f32 .)
    operator_and    reduce using rule 23 (TYPE -> type_f32 .)
    operator_or     reduce using rule 23 (TYPE -> type_f32 .)
    operator_xor    reduce using rule 23 (TYPE -> type_f32 .)
    operator_contains reduce using rule 23 (TYPE -> type_f32 .)
    operator_incr   reduce using rule 23 (TYPE -> type_f32 .)
    operator_decr   reduce using rule 23 (TYPE -> type_f32 .)
    operator_outer  reduce using rule 23 (TYPE -> type_f32 .)
    operator_rotate reduce using rule 23 (TYPE -> type_f32 .)
    operator_apply  reduce using rule 23 (TYPE -> type_f32 .)
    operator_compose reduce using rule 23 (TYPE -> type_f32 .)
    operator_over   reduce using rule 23 (TYPE -> type_f32 .)
    operator_map    reduce using rule 23 (TYPE -> type_f32 .)
    operator_less_than reduce using rule 23 (TYPE -> type_f32 .)
    operator_less_than_equals reduce using rule 23 (TYPE -> type_f32 .)
    operator_greater_than reduce using rule 23 (TYPE -> type_f32 .)
    operator_greater_than_equals reduce using rule 23 (TYPE -> type_f32 .)
    operator_equals reduce using rule 23 (TYPE -> type_f32 .)
    operator_not_equals reduce using rule 23 (TYPE -> type_f32 .)
    operator_smallest reduce using rule 23 (TYPE -> type_f32 .)
    operator_greatest reduce using rule 23 (TYPE -> type_f32 .)
    [               reduce using rule 23 (TYPE -> type_f32 .)
    operator_scan   reduce using rule 23 (TYPE -> type_f32 .)
    operator_reduc  reduce using rule 23 (TYPE -> type_f32 .)
    operator_bitnot reduce using rule 23 (TYPE -> type_f32 .)
    operator_not    reduce using rule 23 (TYPE -> type_f32 .)
    operator_inner  reduce using rule 23 (TYPE -> type_f32 .)
    operator_reverse reduce using rule 23 (TYPE -> type_f32 .)
    operator_sorted_incr reduce using rule 23 (TYPE -> type_f32 .)
    operator_sorted_decr reduce using rule 23 (TYPE -> type_f32 .)
    NEWLINE         reduce using rule 23 (TYPE -> type_f32 .)
    $end            reduce using rule 23 (TYPE -> type_f32 .)
    }               reduce using rule 23 (TYPE -> type_f32 .)
    )               reduce using rule 23 (TYPE -> type_f32 .)
    {               reduce using rule 23 (TYPE -> type_f32 .)
    ]               reduce using rule 23 (TYPE -> type_f32 .)
    :               reduce using rule 23 (TYPE -> type_f32 .)
    ,               reduce using rule 23 (TYPE -> type_f32 .)


state 110

    (159) return_val -> type_f64 . ( arguments )
    (24) TYPE -> type_f64 .

    (               shift and go to state 256
    VAR             reduce using rule 24 (TYPE -> type_f64 .)
    operator_add    reduce using rule 24 (TYPE -> type_f64 .)
    operator_sub    reduce using rule 24 (TYPE -> type_f64 .)
    operator_mul    reduce using rule 24 (TYPE -> type_f64 .)
    operator_div    reduce using rule 24 (TYPE -> type_f64 .)
    operator_trudiv reduce using rule 24 (TYPE -> type_f64 .)
    operator_pow    reduce using rule 24 (TYPE -> type_f64 .)
    operator_join   reduce using rule 24 (TYPE -> type_f64 .)
    operator_split  reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitand reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitor  reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitxor reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitshiftleft reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitshiftright reduce using rule 24 (TYPE -> type_f64 .)
    operator_and    reduce using rule 24 (TYPE -> type_f64 .)
    operator_or     reduce using rule 24 (TYPE -> type_f64 .)
    operator_xor    reduce using rule 24 (TYPE -> type_f64 .)
    operator_contains reduce using rule 24 (TYPE -> type_f64 .)
    operator_incr   reduce using rule 24 (TYPE -> type_f64 .)
    operator_decr   reduce using rule 24 (TYPE -> type_f64 .)
    operator_outer  reduce using rule 24 (TYPE -> type_f64 .)
    operator_rotate reduce using rule 24 (TYPE -> type_f64 .)
    operator_apply  reduce using rule 24 (TYPE -> type_f64 .)
    operator_compose reduce using rule 24 (TYPE -> type_f64 .)
    operator_over   reduce using rule 24 (TYPE -> type_f64 .)
    operator_map    reduce using rule 24 (TYPE -> type_f64 .)
    operator_less_than reduce using rule 24 (TYPE -> type_f64 .)
    operator_less_than_equals reduce using rule 24 (TYPE -> type_f64 .)
    operator_greater_than reduce using rule 24 (TYPE -> type_f64 .)
    operator_greater_than_equals reduce using rule 24 (TYPE -> type_f64 .)
    operator_equals reduce using rule 24 (TYPE -> type_f64 .)
    operator_not_equals reduce using rule 24 (TYPE -> type_f64 .)
    operator_smallest reduce using rule 24 (TYPE -> type_f64 .)
    operator_greatest reduce using rule 24 (TYPE -> type_f64 .)
    [               reduce using rule 24 (TYPE -> type_f64 .)
    operator_scan   reduce using rule 24 (TYPE -> type_f64 .)
    operator_reduc  reduce using rule 24 (TYPE -> type_f64 .)
    operator_bitnot reduce using rule 24 (TYPE -> type_f64 .)
    operator_not    reduce using rule 24 (TYPE -> type_f64 .)
    operator_inner  reduce using rule 24 (TYPE -> type_f64 .)
    operator_reverse reduce using rule 24 (TYPE -> type_f64 .)
    operator_sorted_incr reduce using rule 24 (TYPE -> type_f64 .)
    operator_sorted_decr reduce using rule 24 (TYPE -> type_f64 .)
    NEWLINE         reduce using rule 24 (TYPE -> type_f64 .)
    $end            reduce using rule 24 (TYPE -> type_f64 .)
    }               reduce using rule 24 (TYPE -> type_f64 .)
    )               reduce using rule 24 (TYPE -> type_f64 .)
    {               reduce using rule 24 (TYPE -> type_f64 .)
    ]               reduce using rule 24 (TYPE -> type_f64 .)
    :               reduce using rule 24 (TYPE -> type_f64 .)
    ,               reduce using rule 24 (TYPE -> type_f64 .)


state 111

    (160) return_val -> type_str . ( arguments )
    (25) TYPE -> type_str .

    (               shift and go to state 257
    VAR             reduce using rule 25 (TYPE -> type_str .)
    operator_add    reduce using rule 25 (TYPE -> type_str .)
    operator_sub    reduce using rule 25 (TYPE -> type_str .)
    operator_mul    reduce using rule 25 (TYPE -> type_str .)
    operator_div    reduce using rule 25 (TYPE -> type_str .)
    operator_trudiv reduce using rule 25 (TYPE -> type_str .)
    operator_pow    reduce using rule 25 (TYPE -> type_str .)
    operator_join   reduce using rule 25 (TYPE -> type_str .)
    operator_split  reduce using rule 25 (TYPE -> type_str .)
    operator_bitand reduce using rule 25 (TYPE -> type_str .)
    operator_bitor  reduce using rule 25 (TYPE -> type_str .)
    operator_bitxor reduce using rule 25 (TYPE -> type_str .)
    operator_bitshiftleft reduce using rule 25 (TYPE -> type_str .)
    operator_bitshiftright reduce using rule 25 (TYPE -> type_str .)
    operator_and    reduce using rule 25 (TYPE -> type_str .)
    operator_or     reduce using rule 25 (TYPE -> type_str .)
    operator_xor    reduce using rule 25 (TYPE -> type_str .)
    operator_contains reduce using rule 25 (TYPE -> type_str .)
    operator_incr   reduce using rule 25 (TYPE -> type_str .)
    operator_decr   reduce using rule 25 (TYPE -> type_str .)
    operator_outer  reduce using rule 25 (TYPE -> type_str .)
    operator_rotate reduce using rule 25 (TYPE -> type_str .)
    operator_apply  reduce using rule 25 (TYPE -> type_str .)
    operator_compose reduce using rule 25 (TYPE -> type_str .)
    operator_over   reduce using rule 25 (TYPE -> type_str .)
    operator_map    reduce using rule 25 (TYPE -> type_str .)
    operator_less_than reduce using rule 25 (TYPE -> type_str .)
    operator_less_than_equals reduce using rule 25 (TYPE -> type_str .)
    operator_greater_than reduce using rule 25 (TYPE -> type_str .)
    operator_greater_than_equals reduce using rule 25 (TYPE -> type_str .)
    operator_equals reduce using rule 25 (TYPE -> type_str .)
    operator_not_equals reduce using rule 25 (TYPE -> type_str .)
    operator_smallest reduce using rule 25 (TYPE -> type_str .)
    operator_greatest reduce using rule 25 (TYPE -> type_str .)
    [               reduce using rule 25 (TYPE -> type_str .)
    operator_scan   reduce using rule 25 (TYPE -> type_str .)
    operator_reduc  reduce using rule 25 (TYPE -> type_str .)
    operator_bitnot reduce using rule 25 (TYPE -> type_str .)
    operator_not    reduce using rule 25 (TYPE -> type_str .)
    operator_inner  reduce using rule 25 (TYPE -> type_str .)
    operator_reverse reduce using rule 25 (TYPE -> type_str .)
    operator_sorted_incr reduce using rule 25 (TYPE -> type_str .)
    operator_sorted_decr reduce using rule 25 (TYPE -> type_str .)
    NEWLINE         reduce using rule 25 (TYPE -> type_str .)
    $end            reduce using rule 25 (TYPE -> type_str .)
    }               reduce using rule 25 (TYPE -> type_str .)
    )               reduce using rule 25 (TYPE -> type_str .)
    {               reduce using rule 25 (TYPE -> type_str .)
    ]               reduce using rule 25 (TYPE -> type_str .)
    :               reduce using rule 25 (TYPE -> type_str .)
    ,               reduce using rule 25 (TYPE -> type_str .)


state 112

    (161) return_val -> type_list . ( arguments )
    (26) TYPE -> type_list .

    (               shift and go to state 258
    VAR             reduce using rule 26 (TYPE -> type_list .)
    operator_add    reduce using rule 26 (TYPE -> type_list .)
    operator_sub    reduce using rule 26 (TYPE -> type_list .)
    operator_mul    reduce using rule 26 (TYPE -> type_list .)
    operator_div    reduce using rule 26 (TYPE -> type_list .)
    operator_trudiv reduce using rule 26 (TYPE -> type_list .)
    operator_pow    reduce using rule 26 (TYPE -> type_list .)
    operator_join   reduce using rule 26 (TYPE -> type_list .)
    operator_split  reduce using rule 26 (TYPE -> type_list .)
    operator_bitand reduce using rule 26 (TYPE -> type_list .)
    operator_bitor  reduce using rule 26 (TYPE -> type_list .)
    operator_bitxor reduce using rule 26 (TYPE -> type_list .)
    operator_bitshiftleft reduce using rule 26 (TYPE -> type_list .)
    operator_bitshiftright reduce using rule 26 (TYPE -> type_list .)
    operator_and    reduce using rule 26 (TYPE -> type_list .)
    operator_or     reduce using rule 26 (TYPE -> type_list .)
    operator_xor    reduce using rule 26 (TYPE -> type_list .)
    operator_contains reduce using rule 26 (TYPE -> type_list .)
    operator_incr   reduce using rule 26 (TYPE -> type_list .)
    operator_decr   reduce using rule 26 (TYPE -> type_list .)
    operator_outer  reduce using rule 26 (TYPE -> type_list .)
    operator_rotate reduce using rule 26 (TYPE -> type_list .)
    operator_apply  reduce using rule 26 (TYPE -> type_list .)
    operator_compose reduce using rule 26 (TYPE -> type_list .)
    operator_over   reduce using rule 26 (TYPE -> type_list .)
    operator_map    reduce using rule 26 (TYPE -> type_list .)
    operator_less_than reduce using rule 26 (TYPE -> type_list .)
    operator_less_than_equals reduce using rule 26 (TYPE -> type_list .)
    operator_greater_than reduce using rule 26 (TYPE -> type_list .)
    operator_greater_than_equals reduce using rule 26 (TYPE -> type_list .)
    operator_equals reduce using rule 26 (TYPE -> type_list .)
    operator_not_equals reduce using rule 26 (TYPE -> type_list .)
    operator_smallest reduce using rule 26 (TYPE -> type_list .)
    operator_greatest reduce using rule 26 (TYPE -> type_list .)
    [               reduce using rule 26 (TYPE -> type_list .)
    operator_scan   reduce using rule 26 (TYPE -> type_list .)
    operator_reduc  reduce using rule 26 (TYPE -> type_list .)
    operator_bitnot reduce using rule 26 (TYPE -> type_list .)
    operator_not    reduce using rule 26 (TYPE -> type_list .)
    operator_inner  reduce using rule 26 (TYPE -> type_list .)
    operator_reverse reduce using rule 26 (TYPE -> type_list .)
    operator_sorted_incr reduce using rule 26 (TYPE -> type_list .)
    operator_sorted_decr reduce using rule 26 (TYPE -> type_list .)
    NEWLINE         reduce using rule 26 (TYPE -> type_list .)
    $end            reduce using rule 26 (TYPE -> type_list .)
    }               reduce using rule 26 (TYPE -> type_list .)
    )               reduce using rule 26 (TYPE -> type_list .)
    {               reduce using rule 26 (TYPE -> type_list .)
    ]               reduce using rule 26 (TYPE -> type_list .)
    :               reduce using rule 26 (TYPE -> type_list .)
    ,               reduce using rule 26 (TYPE -> type_list .)


state 113

    (162) return_val -> type_tuple . ( arguments )
    (27) TYPE -> type_tuple .

    (               shift and go to state 259
    VAR             reduce using rule 27 (TYPE -> type_tuple .)
    operator_add    reduce using rule 27 (TYPE -> type_tuple .)
    operator_sub    reduce using rule 27 (TYPE -> type_tuple .)
    operator_mul    reduce using rule 27 (TYPE -> type_tuple .)
    operator_div    reduce using rule 27 (TYPE -> type_tuple .)
    operator_trudiv reduce using rule 27 (TYPE -> type_tuple .)
    operator_pow    reduce using rule 27 (TYPE -> type_tuple .)
    operator_join   reduce using rule 27 (TYPE -> type_tuple .)
    operator_split  reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitand reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitor  reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitxor reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitshiftleft reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitshiftright reduce using rule 27 (TYPE -> type_tuple .)
    operator_and    reduce using rule 27 (TYPE -> type_tuple .)
    operator_or     reduce using rule 27 (TYPE -> type_tuple .)
    operator_xor    reduce using rule 27 (TYPE -> type_tuple .)
    operator_contains reduce using rule 27 (TYPE -> type_tuple .)
    operator_incr   reduce using rule 27 (TYPE -> type_tuple .)
    operator_decr   reduce using rule 27 (TYPE -> type_tuple .)
    operator_outer  reduce using rule 27 (TYPE -> type_tuple .)
    operator_rotate reduce using rule 27 (TYPE -> type_tuple .)
    operator_apply  reduce using rule 27 (TYPE -> type_tuple .)
    operator_compose reduce using rule 27 (TYPE -> type_tuple .)
    operator_over   reduce using rule 27 (TYPE -> type_tuple .)
    operator_map    reduce using rule 27 (TYPE -> type_tuple .)
    operator_less_than reduce using rule 27 (TYPE -> type_tuple .)
    operator_less_than_equals reduce using rule 27 (TYPE -> type_tuple .)
    operator_greater_than reduce using rule 27 (TYPE -> type_tuple .)
    operator_greater_than_equals reduce using rule 27 (TYPE -> type_tuple .)
    operator_equals reduce using rule 27 (TYPE -> type_tuple .)
    operator_not_equals reduce using rule 27 (TYPE -> type_tuple .)
    operator_smallest reduce using rule 27 (TYPE -> type_tuple .)
    operator_greatest reduce using rule 27 (TYPE -> type_tuple .)
    [               reduce using rule 27 (TYPE -> type_tuple .)
    operator_scan   reduce using rule 27 (TYPE -> type_tuple .)
    operator_reduc  reduce using rule 27 (TYPE -> type_tuple .)
    operator_bitnot reduce using rule 27 (TYPE -> type_tuple .)
    operator_not    reduce using rule 27 (TYPE -> type_tuple .)
    operator_inner  reduce using rule 27 (TYPE -> type_tuple .)
    operator_reverse reduce using rule 27 (TYPE -> type_tuple .)
    operator_sorted_incr reduce using rule 27 (TYPE -> type_tuple .)
    operator_sorted_decr reduce using rule 27 (TYPE -> type_tuple .)
    NEWLINE         reduce using rule 27 (TYPE -> type_tuple .)
    $end            reduce using rule 27 (TYPE -> type_tuple .)
    }               reduce using rule 27 (TYPE -> type_tuple .)
    )               reduce using rule 27 (TYPE -> type_tuple .)
    {               reduce using rule 27 (TYPE -> type_tuple .)
    ]               reduce using rule 27 (TYPE -> type_tuple .)
    :               reduce using rule 27 (TYPE -> type_tuple .)
    ,               reduce using rule 27 (TYPE -> type_tuple .)


state 114

    (163) return_val -> type_array . ( arguments )
    (28) TYPE -> type_array .

    (               shift and go to state 260
    VAR             reduce using rule 28 (TYPE -> type_array .)
    operator_add    reduce using rule 28 (TYPE -> type_array .)
    operator_sub    reduce using rule 28 (TYPE -> type_array .)
    operator_mul    reduce using rule 28 (TYPE -> type_array .)
    operator_div    reduce using rule 28 (TYPE -> type_array .)
    operator_trudiv reduce using rule 28 (TYPE -> type_array .)
    operator_pow    reduce using rule 28 (TYPE -> type_array .)
    operator_join   reduce using rule 28 (TYPE -> type_array .)
    operator_split  reduce using rule 28 (TYPE -> type_array .)
    operator_bitand reduce using rule 28 (TYPE -> type_array .)
    operator_bitor  reduce using rule 28 (TYPE -> type_array .)
    operator_bitxor reduce using rule 28 (TYPE -> type_array .)
    operator_bitshiftleft reduce using rule 28 (TYPE -> type_array .)
    operator_bitshiftright reduce using rule 28 (TYPE -> type_array .)
    operator_and    reduce using rule 28 (TYPE -> type_array .)
    operator_or     reduce using rule 28 (TYPE -> type_array .)
    operator_xor    reduce using rule 28 (TYPE -> type_array .)
    operator_contains reduce using rule 28 (TYPE -> type_array .)
    operator_incr   reduce using rule 28 (TYPE -> type_array .)
    operator_decr   reduce using rule 28 (TYPE -> type_array .)
    operator_outer  reduce using rule 28 (TYPE -> type_array .)
    operator_rotate reduce using rule 28 (TYPE -> type_array .)
    operator_apply  reduce using rule 28 (TYPE -> type_array .)
    operator_compose reduce using rule 28 (TYPE -> type_array .)
    operator_over   reduce using rule 28 (TYPE -> type_array .)
    operator_map    reduce using rule 28 (TYPE -> type_array .)
    operator_less_than reduce using rule 28 (TYPE -> type_array .)
    operator_less_than_equals reduce using rule 28 (TYPE -> type_array .)
    operator_greater_than reduce using rule 28 (TYPE -> type_array .)
    operator_greater_than_equals reduce using rule 28 (TYPE -> type_array .)
    operator_equals reduce using rule 28 (TYPE -> type_array .)
    operator_not_equals reduce using rule 28 (TYPE -> type_array .)
    operator_smallest reduce using rule 28 (TYPE -> type_array .)
    operator_greatest reduce using rule 28 (TYPE -> type_array .)
    [               reduce using rule 28 (TYPE -> type_array .)
    operator_scan   reduce using rule 28 (TYPE -> type_array .)
    operator_reduc  reduce using rule 28 (TYPE -> type_array .)
    operator_bitnot reduce using rule 28 (TYPE -> type_array .)
    operator_not    reduce using rule 28 (TYPE -> type_array .)
    operator_inner  reduce using rule 28 (TYPE -> type_array .)
    operator_reverse reduce using rule 28 (TYPE -> type_array .)
    operator_sorted_incr reduce using rule 28 (TYPE -> type_array .)
    operator_sorted_decr reduce using rule 28 (TYPE -> type_array .)
    NEWLINE         reduce using rule 28 (TYPE -> type_array .)
    $end            reduce using rule 28 (TYPE -> type_array .)
    }               reduce using rule 28 (TYPE -> type_array .)
    )               reduce using rule 28 (TYPE -> type_array .)
    {               reduce using rule 28 (TYPE -> type_array .)
    ]               reduce using rule 28 (TYPE -> type_array .)
    :               reduce using rule 28 (TYPE -> type_array .)
    ,               reduce using rule 28 (TYPE -> type_array .)


state 115

    (164) return_val -> type_vector . ( arguments )
    (29) TYPE -> type_vector .

    (               shift and go to state 261
    VAR             reduce using rule 29 (TYPE -> type_vector .)
    operator_add    reduce using rule 29 (TYPE -> type_vector .)
    operator_sub    reduce using rule 29 (TYPE -> type_vector .)
    operator_mul    reduce using rule 29 (TYPE -> type_vector .)
    operator_div    reduce using rule 29 (TYPE -> type_vector .)
    operator_trudiv reduce using rule 29 (TYPE -> type_vector .)
    operator_pow    reduce using rule 29 (TYPE -> type_vector .)
    operator_join   reduce using rule 29 (TYPE -> type_vector .)
    operator_split  reduce using rule 29 (TYPE -> type_vector .)
    operator_bitand reduce using rule 29 (TYPE -> type_vector .)
    operator_bitor  reduce using rule 29 (TYPE -> type_vector .)
    operator_bitxor reduce using rule 29 (TYPE -> type_vector .)
    operator_bitshiftleft reduce using rule 29 (TYPE -> type_vector .)
    operator_bitshiftright reduce using rule 29 (TYPE -> type_vector .)
    operator_and    reduce using rule 29 (TYPE -> type_vector .)
    operator_or     reduce using rule 29 (TYPE -> type_vector .)
    operator_xor    reduce using rule 29 (TYPE -> type_vector .)
    operator_contains reduce using rule 29 (TYPE -> type_vector .)
    operator_incr   reduce using rule 29 (TYPE -> type_vector .)
    operator_decr   reduce using rule 29 (TYPE -> type_vector .)
    operator_outer  reduce using rule 29 (TYPE -> type_vector .)
    operator_rotate reduce using rule 29 (TYPE -> type_vector .)
    operator_apply  reduce using rule 29 (TYPE -> type_vector .)
    operator_compose reduce using rule 29 (TYPE -> type_vector .)
    operator_over   reduce using rule 29 (TYPE -> type_vector .)
    operator_map    reduce using rule 29 (TYPE -> type_vector .)
    operator_less_than reduce using rule 29 (TYPE -> type_vector .)
    operator_less_than_equals reduce using rule 29 (TYPE -> type_vector .)
    operator_greater_than reduce using rule 29 (TYPE -> type_vector .)
    operator_greater_than_equals reduce using rule 29 (TYPE -> type_vector .)
    operator_equals reduce using rule 29 (TYPE -> type_vector .)
    operator_not_equals reduce using rule 29 (TYPE -> type_vector .)
    operator_smallest reduce using rule 29 (TYPE -> type_vector .)
    operator_greatest reduce using rule 29 (TYPE -> type_vector .)
    [               reduce using rule 29 (TYPE -> type_vector .)
    operator_scan   reduce using rule 29 (TYPE -> type_vector .)
    operator_reduc  reduce using rule 29 (TYPE -> type_vector .)
    operator_bitnot reduce using rule 29 (TYPE -> type_vector .)
    operator_not    reduce using rule 29 (TYPE -> type_vector .)
    operator_inner  reduce using rule 29 (TYPE -> type_vector .)
    operator_reverse reduce using rule 29 (TYPE -> type_vector .)
    operator_sorted_incr reduce using rule 29 (TYPE -> type_vector .)
    operator_sorted_decr reduce using rule 29 (TYPE -> type_vector .)
    NEWLINE         reduce using rule 29 (TYPE -> type_vector .)
    $end            reduce using rule 29 (TYPE -> type_vector .)
    }               reduce using rule 29 (TYPE -> type_vector .)
    )               reduce using rule 29 (TYPE -> type_vector .)
    {               reduce using rule 29 (TYPE -> type_vector .)
    ]               reduce using rule 29 (TYPE -> type_vector .)
    :               reduce using rule 29 (TYPE -> type_vector .)
    ,               reduce using rule 29 (TYPE -> type_vector .)


state 116

    (165) return_val -> type_dict . ( arguments )
    (30) TYPE -> type_dict .

    (               shift and go to state 262
    VAR             reduce using rule 30 (TYPE -> type_dict .)
    operator_add    reduce using rule 30 (TYPE -> type_dict .)
    operator_sub    reduce using rule 30 (TYPE -> type_dict .)
    operator_mul    reduce using rule 30 (TYPE -> type_dict .)
    operator_div    reduce using rule 30 (TYPE -> type_dict .)
    operator_trudiv reduce using rule 30 (TYPE -> type_dict .)
    operator_pow    reduce using rule 30 (TYPE -> type_dict .)
    operator_join   reduce using rule 30 (TYPE -> type_dict .)
    operator_split  reduce using rule 30 (TYPE -> type_dict .)
    operator_bitand reduce using rule 30 (TYPE -> type_dict .)
    operator_bitor  reduce using rule 30 (TYPE -> type_dict .)
    operator_bitxor reduce using rule 30 (TYPE -> type_dict .)
    operator_bitshiftleft reduce using rule 30 (TYPE -> type_dict .)
    operator_bitshiftright reduce using rule 30 (TYPE -> type_dict .)
    operator_and    reduce using rule 30 (TYPE -> type_dict .)
    operator_or     reduce using rule 30 (TYPE -> type_dict .)
    operator_xor    reduce using rule 30 (TYPE -> type_dict .)
    operator_contains reduce using rule 30 (TYPE -> type_dict .)
    operator_incr   reduce using rule 30 (TYPE -> type_dict .)
    operator_decr   reduce using rule 30 (TYPE -> type_dict .)
    operator_outer  reduce using rule 30 (TYPE -> type_dict .)
    operator_rotate reduce using rule 30 (TYPE -> type_dict .)
    operator_apply  reduce using rule 30 (TYPE -> type_dict .)
    operator_compose reduce using rule 30 (TYPE -> type_dict .)
    operator_over   reduce using rule 30 (TYPE -> type_dict .)
    operator_map    reduce using rule 30 (TYPE -> type_dict .)
    operator_less_than reduce using rule 30 (TYPE -> type_dict .)
    operator_less_than_equals reduce using rule 30 (TYPE -> type_dict .)
    operator_greater_than reduce using rule 30 (TYPE -> type_dict .)
    operator_greater_than_equals reduce using rule 30 (TYPE -> type_dict .)
    operator_equals reduce using rule 30 (TYPE -> type_dict .)
    operator_not_equals reduce using rule 30 (TYPE -> type_dict .)
    operator_smallest reduce using rule 30 (TYPE -> type_dict .)
    operator_greatest reduce using rule 30 (TYPE -> type_dict .)
    [               reduce using rule 30 (TYPE -> type_dict .)
    operator_scan   reduce using rule 30 (TYPE -> type_dict .)
    operator_reduc  reduce using rule 30 (TYPE -> type_dict .)
    operator_bitnot reduce using rule 30 (TYPE -> type_dict .)
    operator_not    reduce using rule 30 (TYPE -> type_dict .)
    operator_inner  reduce using rule 30 (TYPE -> type_dict .)
    operator_reverse reduce using rule 30 (TYPE -> type_dict .)
    operator_sorted_incr reduce using rule 30 (TYPE -> type_dict .)
    operator_sorted_decr reduce using rule 30 (TYPE -> type_dict .)
    NEWLINE         reduce using rule 30 (TYPE -> type_dict .)
    $end            reduce using rule 30 (TYPE -> type_dict .)
    }               reduce using rule 30 (TYPE -> type_dict .)
    )               reduce using rule 30 (TYPE -> type_dict .)
    {               reduce using rule 30 (TYPE -> type_dict .)
    ]               reduce using rule 30 (TYPE -> type_dict .)
    :               reduce using rule 30 (TYPE -> type_dict .)
    ,               reduce using rule 30 (TYPE -> type_dict .)


state 117

    (166) return_val -> type_generator . ( arguments )
    (31) TYPE -> type_generator .

    (               shift and go to state 263
    VAR             reduce using rule 31 (TYPE -> type_generator .)
    operator_add    reduce using rule 31 (TYPE -> type_generator .)
    operator_sub    reduce using rule 31 (TYPE -> type_generator .)
    operator_mul    reduce using rule 31 (TYPE -> type_generator .)
    operator_div    reduce using rule 31 (TYPE -> type_generator .)
    operator_trudiv reduce using rule 31 (TYPE -> type_generator .)
    operator_pow    reduce using rule 31 (TYPE -> type_generator .)
    operator_join   reduce using rule 31 (TYPE -> type_generator .)
    operator_split  reduce using rule 31 (TYPE -> type_generator .)
    operator_bitand reduce using rule 31 (TYPE -> type_generator .)
    operator_bitor  reduce using rule 31 (TYPE -> type_generator .)
    operator_bitxor reduce using rule 31 (TYPE -> type_generator .)
    operator_bitshiftleft reduce using rule 31 (TYPE -> type_generator .)
    operator_bitshiftright reduce using rule 31 (TYPE -> type_generator .)
    operator_and    reduce using rule 31 (TYPE -> type_generator .)
    operator_or     reduce using rule 31 (TYPE -> type_generator .)
    operator_xor    reduce using rule 31 (TYPE -> type_generator .)
    operator_contains reduce using rule 31 (TYPE -> type_generator .)
    operator_incr   reduce using rule 31 (TYPE -> type_generator .)
    operator_decr   reduce using rule 31 (TYPE -> type_generator .)
    operator_outer  reduce using rule 31 (TYPE -> type_generator .)
    operator_rotate reduce using rule 31 (TYPE -> type_generator .)
    operator_apply  reduce using rule 31 (TYPE -> type_generator .)
    operator_compose reduce using rule 31 (TYPE -> type_generator .)
    operator_over   reduce using rule 31 (TYPE -> type_generator .)
    operator_map    reduce using rule 31 (TYPE -> type_generator .)
    operator_less_than reduce using rule 31 (TYPE -> type_generator .)
    operator_less_than_equals reduce using rule 31 (TYPE -> type_generator .)
    operator_greater_than reduce using rule 31 (TYPE -> type_generator .)
    operator_greater_than_equals reduce using rule 31 (TYPE -> type_generator .)
    operator_equals reduce using rule 31 (TYPE -> type_generator .)
    operator_not_equals reduce using rule 31 (TYPE -> type_generator .)
    operator_smallest reduce using rule 31 (TYPE -> type_generator .)
    operator_greatest reduce using rule 31 (TYPE -> type_generator .)
    [               reduce using rule 31 (TYPE -> type_generator .)
    operator_scan   reduce using rule 31 (TYPE -> type_generator .)
    operator_reduc  reduce using rule 31 (TYPE -> type_generator .)
    operator_bitnot reduce using rule 31 (TYPE -> type_generator .)
    operator_not    reduce using rule 31 (TYPE -> type_generator .)
    operator_inner  reduce using rule 31 (TYPE -> type_generator .)
    operator_reverse reduce using rule 31 (TYPE -> type_generator .)
    operator_sorted_incr reduce using rule 31 (TYPE -> type_generator .)
    operator_sorted_decr reduce using rule 31 (TYPE -> type_generator .)
    NEWLINE         reduce using rule 31 (TYPE -> type_generator .)
    $end            reduce using rule 31 (TYPE -> type_generator .)
    }               reduce using rule 31 (TYPE -> type_generator .)
    )               reduce using rule 31 (TYPE -> type_generator .)
    {               reduce using rule 31 (TYPE -> type_generator .)
    ]               reduce using rule 31 (TYPE -> type_generator .)
    :               reduce using rule 31 (TYPE -> type_generator .)
    ,               reduce using rule 31 (TYPE -> type_generator .)


state 118

    (167) return_val -> type_linked_list . ( arguments )
    (32) TYPE -> type_linked_list .

    (               shift and go to state 264
    VAR             reduce using rule 32 (TYPE -> type_linked_list .)
    operator_add    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_sub    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_mul    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_div    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_trudiv reduce using rule 32 (TYPE -> type_linked_list .)
    operator_pow    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_join   reduce using rule 32 (TYPE -> type_linked_list .)
    operator_split  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitand reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitor  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitxor reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitshiftleft reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitshiftright reduce using rule 32 (TYPE -> type_linked_list .)
    operator_and    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_or     reduce using rule 32 (TYPE -> type_linked_list .)
    operator_xor    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_contains reduce using rule 32 (TYPE -> type_linked_list .)
    operator_incr   reduce using rule 32 (TYPE -> type_linked_list .)
    operator_decr   reduce using rule 32 (TYPE -> type_linked_list .)
    operator_outer  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_rotate reduce using rule 32 (TYPE -> type_linked_list .)
    operator_apply  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_compose reduce using rule 32 (TYPE -> type_linked_list .)
    operator_over   reduce using rule 32 (TYPE -> type_linked_list .)
    operator_map    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_less_than reduce using rule 32 (TYPE -> type_linked_list .)
    operator_less_than_equals reduce using rule 32 (TYPE -> type_linked_list .)
    operator_greater_than reduce using rule 32 (TYPE -> type_linked_list .)
    operator_greater_than_equals reduce using rule 32 (TYPE -> type_linked_list .)
    operator_equals reduce using rule 32 (TYPE -> type_linked_list .)
    operator_not_equals reduce using rule 32 (TYPE -> type_linked_list .)
    operator_smallest reduce using rule 32 (TYPE -> type_linked_list .)
    operator_greatest reduce using rule 32 (TYPE -> type_linked_list .)
    [               reduce using rule 32 (TYPE -> type_linked_list .)
    operator_scan   reduce using rule 32 (TYPE -> type_linked_list .)
    operator_reduc  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_bitnot reduce using rule 32 (TYPE -> type_linked_list .)
    operator_not    reduce using rule 32 (TYPE -> type_linked_list .)
    operator_inner  reduce using rule 32 (TYPE -> type_linked_list .)
    operator_reverse reduce using rule 32 (TYPE -> type_linked_list .)
    operator_sorted_incr reduce using rule 32 (TYPE -> type_linked_list .)
    operator_sorted_decr reduce using rule 32 (TYPE -> type_linked_list .)
    NEWLINE         reduce using rule 32 (TYPE -> type_linked_list .)
    $end            reduce using rule 32 (TYPE -> type_linked_list .)
    }               reduce using rule 32 (TYPE -> type_linked_list .)
    )               reduce using rule 32 (TYPE -> type_linked_list .)
    {               reduce using rule 32 (TYPE -> type_linked_list .)
    ]               reduce using rule 32 (TYPE -> type_linked_list .)
    :               reduce using rule 32 (TYPE -> type_linked_list .)
    ,               reduce using rule 32 (TYPE -> type_linked_list .)


state 119

    (168) return_val -> type_doubly_linked_list . ( arguments )
    (33) TYPE -> type_doubly_linked_list .

    (               shift and go to state 265
    VAR             reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_add    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_sub    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_mul    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_div    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_trudiv reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_pow    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_join   reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_split  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitand reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitor  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitxor reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftleft reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftright reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_and    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_or     reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_xor    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_contains reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_incr   reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_decr   reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_outer  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_rotate reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_apply  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_compose reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_over   reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_map    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_less_than reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_less_than_equals reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_greater_than reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_greater_than_equals reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_equals reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_not_equals reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_smallest reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_greatest reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    [               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_scan   reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_reduc  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_bitnot reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_not    reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_inner  reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_reverse reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_sorted_incr reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    operator_sorted_decr reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    NEWLINE         reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    $end            reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    }               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    )               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    {               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    ]               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    :               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    ,               reduce using rule 33 (TYPE -> type_doubly_linked_list .)


state 120

    (169) return_val -> type_deque . ( arguments )
    (34) TYPE -> type_deque .

    (               shift and go to state 266
    VAR             reduce using rule 34 (TYPE -> type_deque .)
    operator_add    reduce using rule 34 (TYPE -> type_deque .)
    operator_sub    reduce using rule 34 (TYPE -> type_deque .)
    operator_mul    reduce using rule 34 (TYPE -> type_deque .)
    operator_div    reduce using rule 34 (TYPE -> type_deque .)
    operator_trudiv reduce using rule 34 (TYPE -> type_deque .)
    operator_pow    reduce using rule 34 (TYPE -> type_deque .)
    operator_join   reduce using rule 34 (TYPE -> type_deque .)
    operator_split  reduce using rule 34 (TYPE -> type_deque .)
    operator_bitand reduce using rule 34 (TYPE -> type_deque .)
    operator_bitor  reduce using rule 34 (TYPE -> type_deque .)
    operator_bitxor reduce using rule 34 (TYPE -> type_deque .)
    operator_bitshiftleft reduce using rule 34 (TYPE -> type_deque .)
    operator_bitshiftright reduce using rule 34 (TYPE -> type_deque .)
    operator_and    reduce using rule 34 (TYPE -> type_deque .)
    operator_or     reduce using rule 34 (TYPE -> type_deque .)
    operator_xor    reduce using rule 34 (TYPE -> type_deque .)
    operator_contains reduce using rule 34 (TYPE -> type_deque .)
    operator_incr   reduce using rule 34 (TYPE -> type_deque .)
    operator_decr   reduce using rule 34 (TYPE -> type_deque .)
    operator_outer  reduce using rule 34 (TYPE -> type_deque .)
    operator_rotate reduce using rule 34 (TYPE -> type_deque .)
    operator_apply  reduce using rule 34 (TYPE -> type_deque .)
    operator_compose reduce using rule 34 (TYPE -> type_deque .)
    operator_over   reduce using rule 34 (TYPE -> type_deque .)
    operator_map    reduce using rule 34 (TYPE -> type_deque .)
    operator_less_than reduce using rule 34 (TYPE -> type_deque .)
    operator_less_than_equals reduce using rule 34 (TYPE -> type_deque .)
    operator_greater_than reduce using rule 34 (TYPE -> type_deque .)
    operator_greater_than_equals reduce using rule 34 (TYPE -> type_deque .)
    operator_equals reduce using rule 34 (TYPE -> type_deque .)
    operator_not_equals reduce using rule 34 (TYPE -> type_deque .)
    operator_smallest reduce using rule 34 (TYPE -> type_deque .)
    operator_greatest reduce using rule 34 (TYPE -> type_deque .)
    [               reduce using rule 34 (TYPE -> type_deque .)
    operator_scan   reduce using rule 34 (TYPE -> type_deque .)
    operator_reduc  reduce using rule 34 (TYPE -> type_deque .)
    operator_bitnot reduce using rule 34 (TYPE -> type_deque .)
    operator_not    reduce using rule 34 (TYPE -> type_deque .)
    operator_inner  reduce using rule 34 (TYPE -> type_deque .)
    operator_reverse reduce using rule 34 (TYPE -> type_deque .)
    operator_sorted_incr reduce using rule 34 (TYPE -> type_deque .)
    operator_sorted_decr reduce using rule 34 (TYPE -> type_deque .)
    NEWLINE         reduce using rule 34 (TYPE -> type_deque .)
    $end            reduce using rule 34 (TYPE -> type_deque .)
    }               reduce using rule 34 (TYPE -> type_deque .)
    )               reduce using rule 34 (TYPE -> type_deque .)
    {               reduce using rule 34 (TYPE -> type_deque .)
    ]               reduce using rule 34 (TYPE -> type_deque .)
    :               reduce using rule 34 (TYPE -> type_deque .)
    ,               reduce using rule 34 (TYPE -> type_deque .)


state 121

    (170) return_val -> type_heap . ( arguments )
    (35) TYPE -> type_heap .

    (               shift and go to state 267
    VAR             reduce using rule 35 (TYPE -> type_heap .)
    operator_add    reduce using rule 35 (TYPE -> type_heap .)
    operator_sub    reduce using rule 35 (TYPE -> type_heap .)
    operator_mul    reduce using rule 35 (TYPE -> type_heap .)
    operator_div    reduce using rule 35 (TYPE -> type_heap .)
    operator_trudiv reduce using rule 35 (TYPE -> type_heap .)
    operator_pow    reduce using rule 35 (TYPE -> type_heap .)
    operator_join   reduce using rule 35 (TYPE -> type_heap .)
    operator_split  reduce using rule 35 (TYPE -> type_heap .)
    operator_bitand reduce using rule 35 (TYPE -> type_heap .)
    operator_bitor  reduce using rule 35 (TYPE -> type_heap .)
    operator_bitxor reduce using rule 35 (TYPE -> type_heap .)
    operator_bitshiftleft reduce using rule 35 (TYPE -> type_heap .)
    operator_bitshiftright reduce using rule 35 (TYPE -> type_heap .)
    operator_and    reduce using rule 35 (TYPE -> type_heap .)
    operator_or     reduce using rule 35 (TYPE -> type_heap .)
    operator_xor    reduce using rule 35 (TYPE -> type_heap .)
    operator_contains reduce using rule 35 (TYPE -> type_heap .)
    operator_incr   reduce using rule 35 (TYPE -> type_heap .)
    operator_decr   reduce using rule 35 (TYPE -> type_heap .)
    operator_outer  reduce using rule 35 (TYPE -> type_heap .)
    operator_rotate reduce using rule 35 (TYPE -> type_heap .)
    operator_apply  reduce using rule 35 (TYPE -> type_heap .)
    operator_compose reduce using rule 35 (TYPE -> type_heap .)
    operator_over   reduce using rule 35 (TYPE -> type_heap .)
    operator_map    reduce using rule 35 (TYPE -> type_heap .)
    operator_less_than reduce using rule 35 (TYPE -> type_heap .)
    operator_less_than_equals reduce using rule 35 (TYPE -> type_heap .)
    operator_greater_than reduce using rule 35 (TYPE -> type_heap .)
    operator_greater_than_equals reduce using rule 35 (TYPE -> type_heap .)
    operator_equals reduce using rule 35 (TYPE -> type_heap .)
    operator_not_equals reduce using rule 35 (TYPE -> type_heap .)
    operator_smallest reduce using rule 35 (TYPE -> type_heap .)
    operator_greatest reduce using rule 35 (TYPE -> type_heap .)
    [               reduce using rule 35 (TYPE -> type_heap .)
    operator_scan   reduce using rule 35 (TYPE -> type_heap .)
    operator_reduc  reduce using rule 35 (TYPE -> type_heap .)
    operator_bitnot reduce using rule 35 (TYPE -> type_heap .)
    operator_not    reduce using rule 35 (TYPE -> type_heap .)
    operator_inner  reduce using rule 35 (TYPE -> type_heap .)
    operator_reverse reduce using rule 35 (TYPE -> type_heap .)
    operator_sorted_incr reduce using rule 35 (TYPE -> type_heap .)
    operator_sorted_decr reduce using rule 35 (TYPE -> type_heap .)
    NEWLINE         reduce using rule 35 (TYPE -> type_heap .)
    $end            reduce using rule 35 (TYPE -> type_heap .)
    }               reduce using rule 35 (TYPE -> type_heap .)
    )               reduce using rule 35 (TYPE -> type_heap .)
    {               reduce using rule 35 (TYPE -> type_heap .)
    ]               reduce using rule 35 (TYPE -> type_heap .)
    :               reduce using rule 35 (TYPE -> type_heap .)
    ,               reduce using rule 35 (TYPE -> type_heap .)


state 122

    (171) return_val -> type_fibonacci_heap . ( arguments )
    (36) TYPE -> type_fibonacci_heap .

    (               shift and go to state 268
    VAR             reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_add    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_sub    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_mul    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_div    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_trudiv reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_pow    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_join   reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_split  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitand reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitor  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitxor reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftleft reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftright reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_and    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_or     reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_xor    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_contains reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_incr   reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_decr   reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_outer  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_rotate reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_apply  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_compose reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_over   reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_map    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_less_than reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_less_than_equals reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_greater_than reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_greater_than_equals reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_equals reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_not_equals reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_smallest reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_greatest reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    [               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_scan   reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_reduc  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_bitnot reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_not    reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_inner  reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_reverse reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_sorted_incr reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    operator_sorted_decr reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    NEWLINE         reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    $end            reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    }               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    )               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    {               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    ]               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    :               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    ,               reduce using rule 36 (TYPE -> type_fibonacci_heap .)


state 123

    (172) return_val -> type_tree . ( arguments )
    (37) TYPE -> type_tree .

    (               shift and go to state 269
    VAR             reduce using rule 37 (TYPE -> type_tree .)
    operator_add    reduce using rule 37 (TYPE -> type_tree .)
    operator_sub    reduce using rule 37 (TYPE -> type_tree .)
    operator_mul    reduce using rule 37 (TYPE -> type_tree .)
    operator_div    reduce using rule 37 (TYPE -> type_tree .)
    operator_trudiv reduce using rule 37 (TYPE -> type_tree .)
    operator_pow    reduce using rule 37 (TYPE -> type_tree .)
    operator_join   reduce using rule 37 (TYPE -> type_tree .)
    operator_split  reduce using rule 37 (TYPE -> type_tree .)
    operator_bitand reduce using rule 37 (TYPE -> type_tree .)
    operator_bitor  reduce using rule 37 (TYPE -> type_tree .)
    operator_bitxor reduce using rule 37 (TYPE -> type_tree .)
    operator_bitshiftleft reduce using rule 37 (TYPE -> type_tree .)
    operator_bitshiftright reduce using rule 37 (TYPE -> type_tree .)
    operator_and    reduce using rule 37 (TYPE -> type_tree .)
    operator_or     reduce using rule 37 (TYPE -> type_tree .)
    operator_xor    reduce using rule 37 (TYPE -> type_tree .)
    operator_contains reduce using rule 37 (TYPE -> type_tree .)
    operator_incr   reduce using rule 37 (TYPE -> type_tree .)
    operator_decr   reduce using rule 37 (TYPE -> type_tree .)
    operator_outer  reduce using rule 37 (TYPE -> type_tree .)
    operator_rotate reduce using rule 37 (TYPE -> type_tree .)
    operator_apply  reduce using rule 37 (TYPE -> type_tree .)
    operator_compose reduce using rule 37 (TYPE -> type_tree .)
    operator_over   reduce using rule 37 (TYPE -> type_tree .)
    operator_map    reduce using rule 37 (TYPE -> type_tree .)
    operator_less_than reduce using rule 37 (TYPE -> type_tree .)
    operator_less_than_equals reduce using rule 37 (TYPE -> type_tree .)
    operator_greater_than reduce using rule 37 (TYPE -> type_tree .)
    operator_greater_than_equals reduce using rule 37 (TYPE -> type_tree .)
    operator_equals reduce using rule 37 (TYPE -> type_tree .)
    operator_not_equals reduce using rule 37 (TYPE -> type_tree .)
    operator_smallest reduce using rule 37 (TYPE -> type_tree .)
    operator_greatest reduce using rule 37 (TYPE -> type_tree .)
    [               reduce using rule 37 (TYPE -> type_tree .)
    operator_scan   reduce using rule 37 (TYPE -> type_tree .)
    operator_reduc  reduce using rule 37 (TYPE -> type_tree .)
    operator_bitnot reduce using rule 37 (TYPE -> type_tree .)
    operator_not    reduce using rule 37 (TYPE -> type_tree .)
    operator_inner  reduce using rule 37 (TYPE -> type_tree .)
    operator_reverse reduce using rule 37 (TYPE -> type_tree .)
    operator_sorted_incr reduce using rule 37 (TYPE -> type_tree .)
    operator_sorted_decr reduce using rule 37 (TYPE -> type_tree .)
    NEWLINE         reduce using rule 37 (TYPE -> type_tree .)
    $end            reduce using rule 37 (TYPE -> type_tree .)
    }               reduce using rule 37 (TYPE -> type_tree .)
    )               reduce using rule 37 (TYPE -> type_tree .)
    {               reduce using rule 37 (TYPE -> type_tree .)
    ]               reduce using rule 37 (TYPE -> type_tree .)
    :               reduce using rule 37 (TYPE -> type_tree .)
    ,               reduce using rule 37 (TYPE -> type_tree .)


state 124

    (173) return_val -> type_trie . ( arguments )
    (38) TYPE -> type_trie .

    (               shift and go to state 270
    VAR             reduce using rule 38 (TYPE -> type_trie .)
    operator_add    reduce using rule 38 (TYPE -> type_trie .)
    operator_sub    reduce using rule 38 (TYPE -> type_trie .)
    operator_mul    reduce using rule 38 (TYPE -> type_trie .)
    operator_div    reduce using rule 38 (TYPE -> type_trie .)
    operator_trudiv reduce using rule 38 (TYPE -> type_trie .)
    operator_pow    reduce using rule 38 (TYPE -> type_trie .)
    operator_join   reduce using rule 38 (TYPE -> type_trie .)
    operator_split  reduce using rule 38 (TYPE -> type_trie .)
    operator_bitand reduce using rule 38 (TYPE -> type_trie .)
    operator_bitor  reduce using rule 38 (TYPE -> type_trie .)
    operator_bitxor reduce using rule 38 (TYPE -> type_trie .)
    operator_bitshiftleft reduce using rule 38 (TYPE -> type_trie .)
    operator_bitshiftright reduce using rule 38 (TYPE -> type_trie .)
    operator_and    reduce using rule 38 (TYPE -> type_trie .)
    operator_or     reduce using rule 38 (TYPE -> type_trie .)
    operator_xor    reduce using rule 38 (TYPE -> type_trie .)
    operator_contains reduce using rule 38 (TYPE -> type_trie .)
    operator_incr   reduce using rule 38 (TYPE -> type_trie .)
    operator_decr   reduce using rule 38 (TYPE -> type_trie .)
    operator_outer  reduce using rule 38 (TYPE -> type_trie .)
    operator_rotate reduce using rule 38 (TYPE -> type_trie .)
    operator_apply  reduce using rule 38 (TYPE -> type_trie .)
    operator_compose reduce using rule 38 (TYPE -> type_trie .)
    operator_over   reduce using rule 38 (TYPE -> type_trie .)
    operator_map    reduce using rule 38 (TYPE -> type_trie .)
    operator_less_than reduce using rule 38 (TYPE -> type_trie .)
    operator_less_than_equals reduce using rule 38 (TYPE -> type_trie .)
    operator_greater_than reduce using rule 38 (TYPE -> type_trie .)
    operator_greater_than_equals reduce using rule 38 (TYPE -> type_trie .)
    operator_equals reduce using rule 38 (TYPE -> type_trie .)
    operator_not_equals reduce using rule 38 (TYPE -> type_trie .)
    operator_smallest reduce using rule 38 (TYPE -> type_trie .)
    operator_greatest reduce using rule 38 (TYPE -> type_trie .)
    [               reduce using rule 38 (TYPE -> type_trie .)
    operator_scan   reduce using rule 38 (TYPE -> type_trie .)
    operator_reduc  reduce using rule 38 (TYPE -> type_trie .)
    operator_bitnot reduce using rule 38 (TYPE -> type_trie .)
    operator_not    reduce using rule 38 (TYPE -> type_trie .)
    operator_inner  reduce using rule 38 (TYPE -> type_trie .)
    operator_reverse reduce using rule 38 (TYPE -> type_trie .)
    operator_sorted_incr reduce using rule 38 (TYPE -> type_trie .)
    operator_sorted_decr reduce using rule 38 (TYPE -> type_trie .)
    NEWLINE         reduce using rule 38 (TYPE -> type_trie .)
    $end            reduce using rule 38 (TYPE -> type_trie .)
    }               reduce using rule 38 (TYPE -> type_trie .)
    )               reduce using rule 38 (TYPE -> type_trie .)
    {               reduce using rule 38 (TYPE -> type_trie .)
    ]               reduce using rule 38 (TYPE -> type_trie .)
    :               reduce using rule 38 (TYPE -> type_trie .)
    ,               reduce using rule 38 (TYPE -> type_trie .)


state 125

    (174) return_val -> type_stack . ( arguments )
    (39) TYPE -> type_stack .

    (               shift and go to state 271
    VAR             reduce using rule 39 (TYPE -> type_stack .)
    operator_add    reduce using rule 39 (TYPE -> type_stack .)
    operator_sub    reduce using rule 39 (TYPE -> type_stack .)
    operator_mul    reduce using rule 39 (TYPE -> type_stack .)
    operator_div    reduce using rule 39 (TYPE -> type_stack .)
    operator_trudiv reduce using rule 39 (TYPE -> type_stack .)
    operator_pow    reduce using rule 39 (TYPE -> type_stack .)
    operator_join   reduce using rule 39 (TYPE -> type_stack .)
    operator_split  reduce using rule 39 (TYPE -> type_stack .)
    operator_bitand reduce using rule 39 (TYPE -> type_stack .)
    operator_bitor  reduce using rule 39 (TYPE -> type_stack .)
    operator_bitxor reduce using rule 39 (TYPE -> type_stack .)
    operator_bitshiftleft reduce using rule 39 (TYPE -> type_stack .)
    operator_bitshiftright reduce using rule 39 (TYPE -> type_stack .)
    operator_and    reduce using rule 39 (TYPE -> type_stack .)
    operator_or     reduce using rule 39 (TYPE -> type_stack .)
    operator_xor    reduce using rule 39 (TYPE -> type_stack .)
    operator_contains reduce using rule 39 (TYPE -> type_stack .)
    operator_incr   reduce using rule 39 (TYPE -> type_stack .)
    operator_decr   reduce using rule 39 (TYPE -> type_stack .)
    operator_outer  reduce using rule 39 (TYPE -> type_stack .)
    operator_rotate reduce using rule 39 (TYPE -> type_stack .)
    operator_apply  reduce using rule 39 (TYPE -> type_stack .)
    operator_compose reduce using rule 39 (TYPE -> type_stack .)
    operator_over   reduce using rule 39 (TYPE -> type_stack .)
    operator_map    reduce using rule 39 (TYPE -> type_stack .)
    operator_less_than reduce using rule 39 (TYPE -> type_stack .)
    operator_less_than_equals reduce using rule 39 (TYPE -> type_stack .)
    operator_greater_than reduce using rule 39 (TYPE -> type_stack .)
    operator_greater_than_equals reduce using rule 39 (TYPE -> type_stack .)
    operator_equals reduce using rule 39 (TYPE -> type_stack .)
    operator_not_equals reduce using rule 39 (TYPE -> type_stack .)
    operator_smallest reduce using rule 39 (TYPE -> type_stack .)
    operator_greatest reduce using rule 39 (TYPE -> type_stack .)
    [               reduce using rule 39 (TYPE -> type_stack .)
    operator_scan   reduce using rule 39 (TYPE -> type_stack .)
    operator_reduc  reduce using rule 39 (TYPE -> type_stack .)
    operator_bitnot reduce using rule 39 (TYPE -> type_stack .)
    operator_not    reduce using rule 39 (TYPE -> type_stack .)
    operator_inner  reduce using rule 39 (TYPE -> type_stack .)
    operator_reverse reduce using rule 39 (TYPE -> type_stack .)
    operator_sorted_incr reduce using rule 39 (TYPE -> type_stack .)
    operator_sorted_decr reduce using rule 39 (TYPE -> type_stack .)
    NEWLINE         reduce using rule 39 (TYPE -> type_stack .)
    $end            reduce using rule 39 (TYPE -> type_stack .)
    }               reduce using rule 39 (TYPE -> type_stack .)
    )               reduce using rule 39 (TYPE -> type_stack .)
    {               reduce using rule 39 (TYPE -> type_stack .)
    ]               reduce using rule 39 (TYPE -> type_stack .)
    :               reduce using rule 39 (TYPE -> type_stack .)
    ,               reduce using rule 39 (TYPE -> type_stack .)


state 126

    (175) return_val -> type_queue . ( arguments )
    (40) TYPE -> type_queue .

    (               shift and go to state 272
    VAR             reduce using rule 40 (TYPE -> type_queue .)
    operator_add    reduce using rule 40 (TYPE -> type_queue .)
    operator_sub    reduce using rule 40 (TYPE -> type_queue .)
    operator_mul    reduce using rule 40 (TYPE -> type_queue .)
    operator_div    reduce using rule 40 (TYPE -> type_queue .)
    operator_trudiv reduce using rule 40 (TYPE -> type_queue .)
    operator_pow    reduce using rule 40 (TYPE -> type_queue .)
    operator_join   reduce using rule 40 (TYPE -> type_queue .)
    operator_split  reduce using rule 40 (TYPE -> type_queue .)
    operator_bitand reduce using rule 40 (TYPE -> type_queue .)
    operator_bitor  reduce using rule 40 (TYPE -> type_queue .)
    operator_bitxor reduce using rule 40 (TYPE -> type_queue .)
    operator_bitshiftleft reduce using rule 40 (TYPE -> type_queue .)
    operator_bitshiftright reduce using rule 40 (TYPE -> type_queue .)
    operator_and    reduce using rule 40 (TYPE -> type_queue .)
    operator_or     reduce using rule 40 (TYPE -> type_queue .)
    operator_xor    reduce using rule 40 (TYPE -> type_queue .)
    operator_contains reduce using rule 40 (TYPE -> type_queue .)
    operator_incr   reduce using rule 40 (TYPE -> type_queue .)
    operator_decr   reduce using rule 40 (TYPE -> type_queue .)
    operator_outer  reduce using rule 40 (TYPE -> type_queue .)
    operator_rotate reduce using rule 40 (TYPE -> type_queue .)
    operator_apply  reduce using rule 40 (TYPE -> type_queue .)
    operator_compose reduce using rule 40 (TYPE -> type_queue .)
    operator_over   reduce using rule 40 (TYPE -> type_queue .)
    operator_map    reduce using rule 40 (TYPE -> type_queue .)
    operator_less_than reduce using rule 40 (TYPE -> type_queue .)
    operator_less_than_equals reduce using rule 40 (TYPE -> type_queue .)
    operator_greater_than reduce using rule 40 (TYPE -> type_queue .)
    operator_greater_than_equals reduce using rule 40 (TYPE -> type_queue .)
    operator_equals reduce using rule 40 (TYPE -> type_queue .)
    operator_not_equals reduce using rule 40 (TYPE -> type_queue .)
    operator_smallest reduce using rule 40 (TYPE -> type_queue .)
    operator_greatest reduce using rule 40 (TYPE -> type_queue .)
    [               reduce using rule 40 (TYPE -> type_queue .)
    operator_scan   reduce using rule 40 (TYPE -> type_queue .)
    operator_reduc  reduce using rule 40 (TYPE -> type_queue .)
    operator_bitnot reduce using rule 40 (TYPE -> type_queue .)
    operator_not    reduce using rule 40 (TYPE -> type_queue .)
    operator_inner  reduce using rule 40 (TYPE -> type_queue .)
    operator_reverse reduce using rule 40 (TYPE -> type_queue .)
    operator_sorted_incr reduce using rule 40 (TYPE -> type_queue .)
    operator_sorted_decr reduce using rule 40 (TYPE -> type_queue .)
    NEWLINE         reduce using rule 40 (TYPE -> type_queue .)
    $end            reduce using rule 40 (TYPE -> type_queue .)
    }               reduce using rule 40 (TYPE -> type_queue .)
    )               reduce using rule 40 (TYPE -> type_queue .)
    {               reduce using rule 40 (TYPE -> type_queue .)
    ]               reduce using rule 40 (TYPE -> type_queue .)
    :               reduce using rule 40 (TYPE -> type_queue .)
    ,               reduce using rule 40 (TYPE -> type_queue .)


state 127

    (176) return_val -> type_binary_search_tree . ( arguments )
    (41) TYPE -> type_binary_search_tree .

    (               shift and go to state 273
    VAR             reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_add    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_sub    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_mul    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_div    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_trudiv reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_pow    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_join   reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_split  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitand reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitor  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitxor reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitshiftleft reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitshiftright reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_and    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_or     reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_xor    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_contains reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_incr   reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_decr   reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_outer  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_rotate reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_apply  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_compose reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_over   reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_map    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_less_than reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_less_than_equals reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_greater_than reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_greater_than_equals reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_equals reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_not_equals reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_smallest reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_greatest reduce using rule 41 (TYPE -> type_binary_search_tree .)
    [               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_scan   reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_reduc  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_bitnot reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_not    reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_inner  reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_reverse reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_sorted_incr reduce using rule 41 (TYPE -> type_binary_search_tree .)
    operator_sorted_decr reduce using rule 41 (TYPE -> type_binary_search_tree .)
    NEWLINE         reduce using rule 41 (TYPE -> type_binary_search_tree .)
    $end            reduce using rule 41 (TYPE -> type_binary_search_tree .)
    }               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    )               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    {               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    ]               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    :               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    ,               reduce using rule 41 (TYPE -> type_binary_search_tree .)


state 128

    (177) return_val -> type_bitset . ( arguments )
    (42) TYPE -> type_bitset .

    (               shift and go to state 274
    VAR             reduce using rule 42 (TYPE -> type_bitset .)
    operator_add    reduce using rule 42 (TYPE -> type_bitset .)
    operator_sub    reduce using rule 42 (TYPE -> type_bitset .)
    operator_mul    reduce using rule 42 (TYPE -> type_bitset .)
    operator_div    reduce using rule 42 (TYPE -> type_bitset .)
    operator_trudiv reduce using rule 42 (TYPE -> type_bitset .)
    operator_pow    reduce using rule 42 (TYPE -> type_bitset .)
    operator_join   reduce using rule 42 (TYPE -> type_bitset .)
    operator_split  reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitand reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitor  reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitxor reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitshiftleft reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitshiftright reduce using rule 42 (TYPE -> type_bitset .)
    operator_and    reduce using rule 42 (TYPE -> type_bitset .)
    operator_or     reduce using rule 42 (TYPE -> type_bitset .)
    operator_xor    reduce using rule 42 (TYPE -> type_bitset .)
    operator_contains reduce using rule 42 (TYPE -> type_bitset .)
    operator_incr   reduce using rule 42 (TYPE -> type_bitset .)
    operator_decr   reduce using rule 42 (TYPE -> type_bitset .)
    operator_outer  reduce using rule 42 (TYPE -> type_bitset .)
    operator_rotate reduce using rule 42 (TYPE -> type_bitset .)
    operator_apply  reduce using rule 42 (TYPE -> type_bitset .)
    operator_compose reduce using rule 42 (TYPE -> type_bitset .)
    operator_over   reduce using rule 42 (TYPE -> type_bitset .)
    operator_map    reduce using rule 42 (TYPE -> type_bitset .)
    operator_less_than reduce using rule 42 (TYPE -> type_bitset .)
    operator_less_than_equals reduce using rule 42 (TYPE -> type_bitset .)
    operator_greater_than reduce using rule 42 (TYPE -> type_bitset .)
    operator_greater_than_equals reduce using rule 42 (TYPE -> type_bitset .)
    operator_equals reduce using rule 42 (TYPE -> type_bitset .)
    operator_not_equals reduce using rule 42 (TYPE -> type_bitset .)
    operator_smallest reduce using rule 42 (TYPE -> type_bitset .)
    operator_greatest reduce using rule 42 (TYPE -> type_bitset .)
    [               reduce using rule 42 (TYPE -> type_bitset .)
    operator_scan   reduce using rule 42 (TYPE -> type_bitset .)
    operator_reduc  reduce using rule 42 (TYPE -> type_bitset .)
    operator_bitnot reduce using rule 42 (TYPE -> type_bitset .)
    operator_not    reduce using rule 42 (TYPE -> type_bitset .)
    operator_inner  reduce using rule 42 (TYPE -> type_bitset .)
    operator_reverse reduce using rule 42 (TYPE -> type_bitset .)
    operator_sorted_incr reduce using rule 42 (TYPE -> type_bitset .)
    operator_sorted_decr reduce using rule 42 (TYPE -> type_bitset .)
    NEWLINE         reduce using rule 42 (TYPE -> type_bitset .)
    $end            reduce using rule 42 (TYPE -> type_bitset .)
    }               reduce using rule 42 (TYPE -> type_bitset .)
    )               reduce using rule 42 (TYPE -> type_bitset .)
    {               reduce using rule 42 (TYPE -> type_bitset .)
    ]               reduce using rule 42 (TYPE -> type_bitset .)
    :               reduce using rule 42 (TYPE -> type_bitset .)
    ,               reduce using rule 42 (TYPE -> type_bitset .)


state 129

    (178) return_val -> type_set . ( arguments )
    (43) TYPE -> type_set .

    (               shift and go to state 275
    VAR             reduce using rule 43 (TYPE -> type_set .)
    operator_add    reduce using rule 43 (TYPE -> type_set .)
    operator_sub    reduce using rule 43 (TYPE -> type_set .)
    operator_mul    reduce using rule 43 (TYPE -> type_set .)
    operator_div    reduce using rule 43 (TYPE -> type_set .)
    operator_trudiv reduce using rule 43 (TYPE -> type_set .)
    operator_pow    reduce using rule 43 (TYPE -> type_set .)
    operator_join   reduce using rule 43 (TYPE -> type_set .)
    operator_split  reduce using rule 43 (TYPE -> type_set .)
    operator_bitand reduce using rule 43 (TYPE -> type_set .)
    operator_bitor  reduce using rule 43 (TYPE -> type_set .)
    operator_bitxor reduce using rule 43 (TYPE -> type_set .)
    operator_bitshiftleft reduce using rule 43 (TYPE -> type_set .)
    operator_bitshiftright reduce using rule 43 (TYPE -> type_set .)
    operator_and    reduce using rule 43 (TYPE -> type_set .)
    operator_or     reduce using rule 43 (TYPE -> type_set .)
    operator_xor    reduce using rule 43 (TYPE -> type_set .)
    operator_contains reduce using rule 43 (TYPE -> type_set .)
    operator_incr   reduce using rule 43 (TYPE -> type_set .)
    operator_decr   reduce using rule 43 (TYPE -> type_set .)
    operator_outer  reduce using rule 43 (TYPE -> type_set .)
    operator_rotate reduce using rule 43 (TYPE -> type_set .)
    operator_apply  reduce using rule 43 (TYPE -> type_set .)
    operator_compose reduce using rule 43 (TYPE -> type_set .)
    operator_over   reduce using rule 43 (TYPE -> type_set .)
    operator_map    reduce using rule 43 (TYPE -> type_set .)
    operator_less_than reduce using rule 43 (TYPE -> type_set .)
    operator_less_than_equals reduce using rule 43 (TYPE -> type_set .)
    operator_greater_than reduce using rule 43 (TYPE -> type_set .)
    operator_greater_than_equals reduce using rule 43 (TYPE -> type_set .)
    operator_equals reduce using rule 43 (TYPE -> type_set .)
    operator_not_equals reduce using rule 43 (TYPE -> type_set .)
    operator_smallest reduce using rule 43 (TYPE -> type_set .)
    operator_greatest reduce using rule 43 (TYPE -> type_set .)
    [               reduce using rule 43 (TYPE -> type_set .)
    operator_scan   reduce using rule 43 (TYPE -> type_set .)
    operator_reduc  reduce using rule 43 (TYPE -> type_set .)
    operator_bitnot reduce using rule 43 (TYPE -> type_set .)
    operator_not    reduce using rule 43 (TYPE -> type_set .)
    operator_inner  reduce using rule 43 (TYPE -> type_set .)
    operator_reverse reduce using rule 43 (TYPE -> type_set .)
    operator_sorted_incr reduce using rule 43 (TYPE -> type_set .)
    operator_sorted_decr reduce using rule 43 (TYPE -> type_set .)
    NEWLINE         reduce using rule 43 (TYPE -> type_set .)
    $end            reduce using rule 43 (TYPE -> type_set .)
    }               reduce using rule 43 (TYPE -> type_set .)
    )               reduce using rule 43 (TYPE -> type_set .)
    {               reduce using rule 43 (TYPE -> type_set .)
    ]               reduce using rule 43 (TYPE -> type_set .)
    :               reduce using rule 43 (TYPE -> type_set .)
    ,               reduce using rule 43 (TYPE -> type_set .)


state 130

    (179) return_val -> type_map . ( arguments )
    (44) TYPE -> type_map .

    (               shift and go to state 276
    VAR             reduce using rule 44 (TYPE -> type_map .)
    operator_add    reduce using rule 44 (TYPE -> type_map .)
    operator_sub    reduce using rule 44 (TYPE -> type_map .)
    operator_mul    reduce using rule 44 (TYPE -> type_map .)
    operator_div    reduce using rule 44 (TYPE -> type_map .)
    operator_trudiv reduce using rule 44 (TYPE -> type_map .)
    operator_pow    reduce using rule 44 (TYPE -> type_map .)
    operator_join   reduce using rule 44 (TYPE -> type_map .)
    operator_split  reduce using rule 44 (TYPE -> type_map .)
    operator_bitand reduce using rule 44 (TYPE -> type_map .)
    operator_bitor  reduce using rule 44 (TYPE -> type_map .)
    operator_bitxor reduce using rule 44 (TYPE -> type_map .)
    operator_bitshiftleft reduce using rule 44 (TYPE -> type_map .)
    operator_bitshiftright reduce using rule 44 (TYPE -> type_map .)
    operator_and    reduce using rule 44 (TYPE -> type_map .)
    operator_or     reduce using rule 44 (TYPE -> type_map .)
    operator_xor    reduce using rule 44 (TYPE -> type_map .)
    operator_contains reduce using rule 44 (TYPE -> type_map .)
    operator_incr   reduce using rule 44 (TYPE -> type_map .)
    operator_decr   reduce using rule 44 (TYPE -> type_map .)
    operator_outer  reduce using rule 44 (TYPE -> type_map .)
    operator_rotate reduce using rule 44 (TYPE -> type_map .)
    operator_apply  reduce using rule 44 (TYPE -> type_map .)
    operator_compose reduce using rule 44 (TYPE -> type_map .)
    operator_over   reduce using rule 44 (TYPE -> type_map .)
    operator_map    reduce using rule 44 (TYPE -> type_map .)
    operator_less_than reduce using rule 44 (TYPE -> type_map .)
    operator_less_than_equals reduce using rule 44 (TYPE -> type_map .)
    operator_greater_than reduce using rule 44 (TYPE -> type_map .)
    operator_greater_than_equals reduce using rule 44 (TYPE -> type_map .)
    operator_equals reduce using rule 44 (TYPE -> type_map .)
    operator_not_equals reduce using rule 44 (TYPE -> type_map .)
    operator_smallest reduce using rule 44 (TYPE -> type_map .)
    operator_greatest reduce using rule 44 (TYPE -> type_map .)
    [               reduce using rule 44 (TYPE -> type_map .)
    operator_scan   reduce using rule 44 (TYPE -> type_map .)
    operator_reduc  reduce using rule 44 (TYPE -> type_map .)
    operator_bitnot reduce using rule 44 (TYPE -> type_map .)
    operator_not    reduce using rule 44 (TYPE -> type_map .)
    operator_inner  reduce using rule 44 (TYPE -> type_map .)
    operator_reverse reduce using rule 44 (TYPE -> type_map .)
    operator_sorted_incr reduce using rule 44 (TYPE -> type_map .)
    operator_sorted_decr reduce using rule 44 (TYPE -> type_map .)
    NEWLINE         reduce using rule 44 (TYPE -> type_map .)
    $end            reduce using rule 44 (TYPE -> type_map .)
    }               reduce using rule 44 (TYPE -> type_map .)
    )               reduce using rule 44 (TYPE -> type_map .)
    {               reduce using rule 44 (TYPE -> type_map .)
    ]               reduce using rule 44 (TYPE -> type_map .)
    :               reduce using rule 44 (TYPE -> type_map .)
    ,               reduce using rule 44 (TYPE -> type_map .)


state 131

    (180) return_val -> type_range . ( arguments )
    (45) TYPE -> type_range .

    (               shift and go to state 277
    VAR             reduce using rule 45 (TYPE -> type_range .)
    operator_add    reduce using rule 45 (TYPE -> type_range .)
    operator_sub    reduce using rule 45 (TYPE -> type_range .)
    operator_mul    reduce using rule 45 (TYPE -> type_range .)
    operator_div    reduce using rule 45 (TYPE -> type_range .)
    operator_trudiv reduce using rule 45 (TYPE -> type_range .)
    operator_pow    reduce using rule 45 (TYPE -> type_range .)
    operator_join   reduce using rule 45 (TYPE -> type_range .)
    operator_split  reduce using rule 45 (TYPE -> type_range .)
    operator_bitand reduce using rule 45 (TYPE -> type_range .)
    operator_bitor  reduce using rule 45 (TYPE -> type_range .)
    operator_bitxor reduce using rule 45 (TYPE -> type_range .)
    operator_bitshiftleft reduce using rule 45 (TYPE -> type_range .)
    operator_bitshiftright reduce using rule 45 (TYPE -> type_range .)
    operator_and    reduce using rule 45 (TYPE -> type_range .)
    operator_or     reduce using rule 45 (TYPE -> type_range .)
    operator_xor    reduce using rule 45 (TYPE -> type_range .)
    operator_contains reduce using rule 45 (TYPE -> type_range .)
    operator_incr   reduce using rule 45 (TYPE -> type_range .)
    operator_decr   reduce using rule 45 (TYPE -> type_range .)
    operator_outer  reduce using rule 45 (TYPE -> type_range .)
    operator_rotate reduce using rule 45 (TYPE -> type_range .)
    operator_apply  reduce using rule 45 (TYPE -> type_range .)
    operator_compose reduce using rule 45 (TYPE -> type_range .)
    operator_over   reduce using rule 45 (TYPE -> type_range .)
    operator_map    reduce using rule 45 (TYPE -> type_range .)
    operator_less_than reduce using rule 45 (TYPE -> type_range .)
    operator_less_than_equals reduce using rule 45 (TYPE -> type_range .)
    operator_greater_than reduce using rule 45 (TYPE -> type_range .)
    operator_greater_than_equals reduce using rule 45 (TYPE -> type_range .)
    operator_equals reduce using rule 45 (TYPE -> type_range .)
    operator_not_equals reduce using rule 45 (TYPE -> type_range .)
    operator_smallest reduce using rule 45 (TYPE -> type_range .)
    operator_greatest reduce using rule 45 (TYPE -> type_range .)
    [               reduce using rule 45 (TYPE -> type_range .)
    operator_scan   reduce using rule 45 (TYPE -> type_range .)
    operator_reduc  reduce using rule 45 (TYPE -> type_range .)
    operator_bitnot reduce using rule 45 (TYPE -> type_range .)
    operator_not    reduce using rule 45 (TYPE -> type_range .)
    operator_inner  reduce using rule 45 (TYPE -> type_range .)
    operator_reverse reduce using rule 45 (TYPE -> type_range .)
    operator_sorted_incr reduce using rule 45 (TYPE -> type_range .)
    operator_sorted_decr reduce using rule 45 (TYPE -> type_range .)
    NEWLINE         reduce using rule 45 (TYPE -> type_range .)
    $end            reduce using rule 45 (TYPE -> type_range .)
    }               reduce using rule 45 (TYPE -> type_range .)
    )               reduce using rule 45 (TYPE -> type_range .)
    {               reduce using rule 45 (TYPE -> type_range .)
    ]               reduce using rule 45 (TYPE -> type_range .)
    :               reduce using rule 45 (TYPE -> type_range .)
    ,               reduce using rule 45 (TYPE -> type_range .)


state 132

    (58) lambda_decl -> lambda . comma_separated_names : expr
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 198

    comma_separated_names          shift and go to state 278

state 133

    (7) stmts -> stmts newline . stmt
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )

    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87

    stmt                           shift and go to state 279
    line_stmt                      shift and go to state 7
    block_stmt                     shift and go to state 280
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    block_decl                     shift and go to state 8
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22

state 134

    (2) program -> newline stmts .
    (3) program -> newline stmts . newline
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 2 (program -> newline stmts .)
    NEWLINE         shift and go to state 6

    newline                        shift and go to state 281

state 135

    (8) stmts -> block_stmt stmts .
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

  ! shift/reduce conflict for NEWLINE resolved as shift
    $end            reduce using rule 8 (stmts -> block_stmt stmts .)
    }               reduce using rule 8 (stmts -> block_stmt stmts .)
    NEWLINE         shift and go to state 6

  ! NEWLINE         [ reduce using rule 8 (stmts -> block_stmt stmts .) ]

    newline                        shift and go to state 133

state 136

    (5) newline -> NEWLINE newline .

    return          reduce using rule 5 (newline -> NEWLINE newline .)
    (               reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitnot reduce using rule 5 (newline -> NEWLINE newline .)
    operator_not    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_reverse reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_incr reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_decr reduce using rule 5 (newline -> NEWLINE newline .)
    VAR             reduce using rule 5 (newline -> NEWLINE newline .)
    break           reduce using rule 5 (newline -> NEWLINE newline .)
    continue        reduce using rule 5 (newline -> NEWLINE newline .)
    pass            reduce using rule 5 (newline -> NEWLINE newline .)
    del             reduce using rule 5 (newline -> NEWLINE newline .)
    for             reduce using rule 5 (newline -> NEWLINE newline .)
    if              reduce using rule 5 (newline -> NEWLINE newline .)
    else            reduce using rule 5 (newline -> NEWLINE newline .)
    elif            reduce using rule 5 (newline -> NEWLINE newline .)
    operator        reduce using rule 5 (newline -> NEWLINE newline .)
    struct          reduce using rule 5 (newline -> NEWLINE newline .)
    while           reduce using rule 5 (newline -> NEWLINE newline .)
    func            reduce using rule 5 (newline -> NEWLINE newline .)
    operator_add    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sub    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_mul    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_div    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_trudiv reduce using rule 5 (newline -> NEWLINE newline .)
    operator_pow    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_join   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_split  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_scan   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_reduc  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitand reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitor  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitxor reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitshiftleft reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitshiftright reduce using rule 5 (newline -> NEWLINE newline .)
    operator_and    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_or     reduce using rule 5 (newline -> NEWLINE newline .)
    operator_xor    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_contains reduce using rule 5 (newline -> NEWLINE newline .)
    operator_incr   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_decr   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_outer  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_inner  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_rotate reduce using rule 5 (newline -> NEWLINE newline .)
    operator_apply  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_compose reduce using rule 5 (newline -> NEWLINE newline .)
    operator_over   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_map    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_less_than reduce using rule 5 (newline -> NEWLINE newline .)
    operator_less_than_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greater_than reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greater_than_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_not_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_smallest reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greatest reduce using rule 5 (newline -> NEWLINE newline .)
    FLOAT           reduce using rule 5 (newline -> NEWLINE newline .)
    NUM             reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3SQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3DQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_SQ       reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_DQ       reduce using rule 5 (newline -> NEWLINE newline .)
    true            reduce using rule 5 (newline -> NEWLINE newline .)
    Null            reduce using rule 5 (newline -> NEWLINE newline .)
    false           reduce using rule 5 (newline -> NEWLINE newline .)
    type_type       reduce using rule 5 (newline -> NEWLINE newline .)
    type_num        reduce using rule 5 (newline -> NEWLINE newline .)
    type_bool       reduce using rule 5 (newline -> NEWLINE newline .)
    type_any        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_i64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_f32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_f64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_str        reduce using rule 5 (newline -> NEWLINE newline .)
    type_list       reduce using rule 5 (newline -> NEWLINE newline .)
    type_tuple      reduce using rule 5 (newline -> NEWLINE newline .)
    type_array      reduce using rule 5 (newline -> NEWLINE newline .)
    type_vector     reduce using rule 5 (newline -> NEWLINE newline .)
    type_dict       reduce using rule 5 (newline -> NEWLINE newline .)
    type_generator  reduce using rule 5 (newline -> NEWLINE newline .)
    type_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_doubly_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_deque      reduce using rule 5 (newline -> NEWLINE newline .)
    type_heap       reduce using rule 5 (newline -> NEWLINE newline .)
    type_fibonacci_heap reduce using rule 5 (newline -> NEWLINE newline .)
    type_tree       reduce using rule 5 (newline -> NEWLINE newline .)
    type_trie       reduce using rule 5 (newline -> NEWLINE newline .)
    type_stack      reduce using rule 5 (newline -> NEWLINE newline .)
    type_queue      reduce using rule 5 (newline -> NEWLINE newline .)
    type_binary_search_tree reduce using rule 5 (newline -> NEWLINE newline .)
    type_bitset     reduce using rule 5 (newline -> NEWLINE newline .)
    type_set        reduce using rule 5 (newline -> NEWLINE newline .)
    type_map        reduce using rule 5 (newline -> NEWLINE newline .)
    type_range      reduce using rule 5 (newline -> NEWLINE newline .)
    lambda          reduce using rule 5 (newline -> NEWLINE newline .)
    $end            reduce using rule 5 (newline -> NEWLINE newline .)
    }               reduce using rule 5 (newline -> NEWLINE newline .)


state 137

    (68) block_stmt -> block_decl { . stmts }
    (73) block_stmt -> block_decl { . }
    (74) block_stmt -> block_decl { . newline }
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmts -> . block_stmt stmts
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    }               shift and go to state 283
    NEWLINE         shift and go to state 6
    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    block_decl                     shift and go to state 8
    stmts                          shift and go to state 282
    newline                        shift and go to state 284
    stmt                           shift and go to state 4
    block_stmt                     shift and go to state 5
    line_stmt                      shift and go to state 7
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79

state 138

    (104) expr -> expr operator_add . expr
    (190) OPERATOR -> operator_add .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 190 (OPERATOR -> operator_add .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 285
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 139

    (105) expr -> expr operator_sub . expr
    (191) OPERATOR -> operator_sub .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 191 (OPERATOR -> operator_sub .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 286
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 140

    (106) expr -> expr operator_mul . expr
    (192) OPERATOR -> operator_mul .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 192 (OPERATOR -> operator_mul .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 287
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 141

    (107) expr -> expr operator_div . expr
    (193) OPERATOR -> operator_div .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 193 (OPERATOR -> operator_div .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 288
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 142

    (108) expr -> expr operator_trudiv . expr
    (194) OPERATOR -> operator_trudiv .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 194 (OPERATOR -> operator_trudiv .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 289
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 143

    (109) expr -> expr operator_pow . expr
    (195) OPERATOR -> operator_pow .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 195 (OPERATOR -> operator_pow .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 290
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 144

    (110) expr -> expr operator_join . expr
    (196) OPERATOR -> operator_join .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 196 (OPERATOR -> operator_join .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 291
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 145

    (111) expr -> expr operator_split . expr
    (197) OPERATOR -> operator_split .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 197 (OPERATOR -> operator_split .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 292
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 146

    (114) expr -> expr operator_bitand . expr
    (200) OPERATOR -> operator_bitand .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 200 (OPERATOR -> operator_bitand .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 293
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 147

    (115) expr -> expr operator_bitor . expr
    (201) OPERATOR -> operator_bitor .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 201 (OPERATOR -> operator_bitor .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 294
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 148

    (116) expr -> expr operator_bitxor . expr
    (202) OPERATOR -> operator_bitxor .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 202 (OPERATOR -> operator_bitxor .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 295
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 149

    (117) expr -> expr operator_bitshiftleft . expr
    (203) OPERATOR -> operator_bitshiftleft .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 203 (OPERATOR -> operator_bitshiftleft .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 296
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 150

    (118) expr -> expr operator_bitshiftright . expr
    (204) OPERATOR -> operator_bitshiftright .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 204 (OPERATOR -> operator_bitshiftright .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 297
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 151

    (119) expr -> expr operator_and . expr
    (205) OPERATOR -> operator_and .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 205 (OPERATOR -> operator_and .) ]

    expr                           shift and go to state 298
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 152

    (120) expr -> expr operator_or . expr
    (206) OPERATOR -> operator_or .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 206 (OPERATOR -> operator_or .) ]

    expr                           shift and go to state 299
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 153

    (121) expr -> expr operator_xor . expr
    (207) OPERATOR -> operator_xor .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 207 (OPERATOR -> operator_xor .) ]

    expr                           shift and go to state 300
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 154

    (122) expr -> expr operator_contains . expr
    (208) OPERATOR -> operator_contains .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 208 (OPERATOR -> operator_contains .) ]

    expr                           shift and go to state 301
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 155

    (125) expr -> expr operator_incr .
    (211) OPERATOR -> operator_incr .

  ! reduce/reduce conflict for operator_inner resolved using rule 125 (expr -> expr operator_incr .)
    operator_add    reduce using rule 125 (expr -> expr operator_incr .)
    operator_sub    reduce using rule 125 (expr -> expr operator_incr .)
    operator_mul    reduce using rule 125 (expr -> expr operator_incr .)
    operator_div    reduce using rule 125 (expr -> expr operator_incr .)
    operator_trudiv reduce using rule 125 (expr -> expr operator_incr .)
    operator_pow    reduce using rule 125 (expr -> expr operator_incr .)
    operator_join   reduce using rule 125 (expr -> expr operator_incr .)
    operator_split  reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitand reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitor  reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitxor reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitshiftleft reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitshiftright reduce using rule 125 (expr -> expr operator_incr .)
    operator_and    reduce using rule 125 (expr -> expr operator_incr .)
    operator_or     reduce using rule 125 (expr -> expr operator_incr .)
    operator_xor    reduce using rule 125 (expr -> expr operator_incr .)
    operator_contains reduce using rule 125 (expr -> expr operator_incr .)
    operator_incr   reduce using rule 125 (expr -> expr operator_incr .)
    operator_decr   reduce using rule 125 (expr -> expr operator_incr .)
    operator_outer  reduce using rule 125 (expr -> expr operator_incr .)
    operator_rotate reduce using rule 125 (expr -> expr operator_incr .)
    operator_apply  reduce using rule 125 (expr -> expr operator_incr .)
    operator_compose reduce using rule 125 (expr -> expr operator_incr .)
    operator_over   reduce using rule 125 (expr -> expr operator_incr .)
    operator_map    reduce using rule 125 (expr -> expr operator_incr .)
    operator_less_than reduce using rule 125 (expr -> expr operator_incr .)
    operator_less_than_equals reduce using rule 125 (expr -> expr operator_incr .)
    operator_greater_than reduce using rule 125 (expr -> expr operator_incr .)
    operator_greater_than_equals reduce using rule 125 (expr -> expr operator_incr .)
    operator_equals reduce using rule 125 (expr -> expr operator_incr .)
    operator_not_equals reduce using rule 125 (expr -> expr operator_incr .)
    operator_smallest reduce using rule 125 (expr -> expr operator_incr .)
    operator_greatest reduce using rule 125 (expr -> expr operator_incr .)
    [               reduce using rule 125 (expr -> expr operator_incr .)
    operator_scan   reduce using rule 125 (expr -> expr operator_incr .)
    operator_reduc  reduce using rule 125 (expr -> expr operator_incr .)
    operator_bitnot reduce using rule 125 (expr -> expr operator_incr .)
    operator_not    reduce using rule 125 (expr -> expr operator_incr .)
    operator_inner  reduce using rule 125 (expr -> expr operator_incr .)
    operator_reverse reduce using rule 125 (expr -> expr operator_incr .)
    operator_sorted_incr reduce using rule 125 (expr -> expr operator_incr .)
    operator_sorted_decr reduce using rule 125 (expr -> expr operator_incr .)
    NEWLINE         reduce using rule 125 (expr -> expr operator_incr .)
    $end            reduce using rule 125 (expr -> expr operator_incr .)
    }               reduce using rule 125 (expr -> expr operator_incr .)
    )               reduce using rule 125 (expr -> expr operator_incr .)
    {               reduce using rule 125 (expr -> expr operator_incr .)
    ]               reduce using rule 125 (expr -> expr operator_incr .)
    :               reduce using rule 125 (expr -> expr operator_incr .)
    ,               reduce using rule 125 (expr -> expr operator_incr .)

  ! operator_inner  [ reduce using rule 211 (OPERATOR -> operator_incr .) ]


state 156

    (126) expr -> expr operator_decr .
    (212) OPERATOR -> operator_decr .

  ! reduce/reduce conflict for operator_inner resolved using rule 126 (expr -> expr operator_decr .)
    operator_add    reduce using rule 126 (expr -> expr operator_decr .)
    operator_sub    reduce using rule 126 (expr -> expr operator_decr .)
    operator_mul    reduce using rule 126 (expr -> expr operator_decr .)
    operator_div    reduce using rule 126 (expr -> expr operator_decr .)
    operator_trudiv reduce using rule 126 (expr -> expr operator_decr .)
    operator_pow    reduce using rule 126 (expr -> expr operator_decr .)
    operator_join   reduce using rule 126 (expr -> expr operator_decr .)
    operator_split  reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitand reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitor  reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitxor reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitshiftleft reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitshiftright reduce using rule 126 (expr -> expr operator_decr .)
    operator_and    reduce using rule 126 (expr -> expr operator_decr .)
    operator_or     reduce using rule 126 (expr -> expr operator_decr .)
    operator_xor    reduce using rule 126 (expr -> expr operator_decr .)
    operator_contains reduce using rule 126 (expr -> expr operator_decr .)
    operator_incr   reduce using rule 126 (expr -> expr operator_decr .)
    operator_decr   reduce using rule 126 (expr -> expr operator_decr .)
    operator_outer  reduce using rule 126 (expr -> expr operator_decr .)
    operator_rotate reduce using rule 126 (expr -> expr operator_decr .)
    operator_apply  reduce using rule 126 (expr -> expr operator_decr .)
    operator_compose reduce using rule 126 (expr -> expr operator_decr .)
    operator_over   reduce using rule 126 (expr -> expr operator_decr .)
    operator_map    reduce using rule 126 (expr -> expr operator_decr .)
    operator_less_than reduce using rule 126 (expr -> expr operator_decr .)
    operator_less_than_equals reduce using rule 126 (expr -> expr operator_decr .)
    operator_greater_than reduce using rule 126 (expr -> expr operator_decr .)
    operator_greater_than_equals reduce using rule 126 (expr -> expr operator_decr .)
    operator_equals reduce using rule 126 (expr -> expr operator_decr .)
    operator_not_equals reduce using rule 126 (expr -> expr operator_decr .)
    operator_smallest reduce using rule 126 (expr -> expr operator_decr .)
    operator_greatest reduce using rule 126 (expr -> expr operator_decr .)
    [               reduce using rule 126 (expr -> expr operator_decr .)
    operator_scan   reduce using rule 126 (expr -> expr operator_decr .)
    operator_reduc  reduce using rule 126 (expr -> expr operator_decr .)
    operator_bitnot reduce using rule 126 (expr -> expr operator_decr .)
    operator_not    reduce using rule 126 (expr -> expr operator_decr .)
    operator_inner  reduce using rule 126 (expr -> expr operator_decr .)
    operator_reverse reduce using rule 126 (expr -> expr operator_decr .)
    operator_sorted_incr reduce using rule 126 (expr -> expr operator_decr .)
    operator_sorted_decr reduce using rule 126 (expr -> expr operator_decr .)
    NEWLINE         reduce using rule 126 (expr -> expr operator_decr .)
    $end            reduce using rule 126 (expr -> expr operator_decr .)
    }               reduce using rule 126 (expr -> expr operator_decr .)
    )               reduce using rule 126 (expr -> expr operator_decr .)
    {               reduce using rule 126 (expr -> expr operator_decr .)
    ]               reduce using rule 126 (expr -> expr operator_decr .)
    :               reduce using rule 126 (expr -> expr operator_decr .)
    ,               reduce using rule 126 (expr -> expr operator_decr .)

  ! operator_inner  [ reduce using rule 212 (OPERATOR -> operator_decr .) ]


state 157

    (127) expr -> expr operator_outer . OPERATOR expr
    (213) OPERATOR -> operator_outer .
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_inner  reduce using rule 213 (OPERATOR -> operator_outer .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_reverse shift and go to state 175
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69

  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 302

state 158

    (128) expr -> expr OPERATOR . operator_inner OPERATOR expr

    operator_inner  shift and go to state 303


state 159

    (130) expr -> expr operator_rotate . expr
    (216) OPERATOR -> operator_rotate .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 216 (OPERATOR -> operator_rotate .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 304
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 160

    (131) expr -> expr operator_apply . expr
    (217) OPERATOR -> operator_apply .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 217 (OPERATOR -> operator_apply .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 305
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 161

    (132) expr -> expr operator_compose . expr
    (218) OPERATOR -> operator_compose .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 218 (OPERATOR -> operator_compose .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 306
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 162

    (133) expr -> expr operator_over . expr
    (219) OPERATOR -> operator_over .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    operator_inner  reduce using rule 219 (OPERATOR -> operator_over .)
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ shift and go to state 53 ]

    expr                           shift and go to state 307
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 163

    (134) expr -> expr operator_map .
    (220) OPERATOR -> operator_map .

  ! reduce/reduce conflict for operator_inner resolved using rule 134 (expr -> expr operator_map .)
    operator_add    reduce using rule 134 (expr -> expr operator_map .)
    operator_sub    reduce using rule 134 (expr -> expr operator_map .)
    operator_mul    reduce using rule 134 (expr -> expr operator_map .)
    operator_div    reduce using rule 134 (expr -> expr operator_map .)
    operator_trudiv reduce using rule 134 (expr -> expr operator_map .)
    operator_pow    reduce using rule 134 (expr -> expr operator_map .)
    operator_join   reduce using rule 134 (expr -> expr operator_map .)
    operator_split  reduce using rule 134 (expr -> expr operator_map .)
    operator_bitand reduce using rule 134 (expr -> expr operator_map .)
    operator_bitor  reduce using rule 134 (expr -> expr operator_map .)
    operator_bitxor reduce using rule 134 (expr -> expr operator_map .)
    operator_bitshiftleft reduce using rule 134 (expr -> expr operator_map .)
    operator_bitshiftright reduce using rule 134 (expr -> expr operator_map .)
    operator_and    reduce using rule 134 (expr -> expr operator_map .)
    operator_or     reduce using rule 134 (expr -> expr operator_map .)
    operator_xor    reduce using rule 134 (expr -> expr operator_map .)
    operator_contains reduce using rule 134 (expr -> expr operator_map .)
    operator_incr   reduce using rule 134 (expr -> expr operator_map .)
    operator_decr   reduce using rule 134 (expr -> expr operator_map .)
    operator_outer  reduce using rule 134 (expr -> expr operator_map .)
    operator_rotate reduce using rule 134 (expr -> expr operator_map .)
    operator_apply  reduce using rule 134 (expr -> expr operator_map .)
    operator_compose reduce using rule 134 (expr -> expr operator_map .)
    operator_over   reduce using rule 134 (expr -> expr operator_map .)
    operator_map    reduce using rule 134 (expr -> expr operator_map .)
    operator_less_than reduce using rule 134 (expr -> expr operator_map .)
    operator_less_than_equals reduce using rule 134 (expr -> expr operator_map .)
    operator_greater_than reduce using rule 134 (expr -> expr operator_map .)
    operator_greater_than_equals reduce using rule 134 (expr -> expr operator_map .)
    operator_equals reduce using rule 134 (expr -> expr operator_map .)
    operator_not_equals reduce using rule 134 (expr -> expr operator_map .)
    operator_smallest reduce using rule 134 (expr -> expr operator_map .)
    operator_greatest reduce using rule 134 (expr -> expr operator_map .)
    [               reduce using rule 134 (expr -> expr operator_map .)
    operator_scan   reduce using rule 134 (expr -> expr operator_map .)
    operator_reduc  reduce using rule 134 (expr -> expr operator_map .)
    operator_bitnot reduce using rule 134 (expr -> expr operator_map .)
    operator_not    reduce using rule 134 (expr -> expr operator_map .)
    operator_inner  reduce using rule 134 (expr -> expr operator_map .)
    operator_reverse reduce using rule 134 (expr -> expr operator_map .)
    operator_sorted_incr reduce using rule 134 (expr -> expr operator_map .)
    operator_sorted_decr reduce using rule 134 (expr -> expr operator_map .)
    NEWLINE         reduce using rule 134 (expr -> expr operator_map .)
    $end            reduce using rule 134 (expr -> expr operator_map .)
    }               reduce using rule 134 (expr -> expr operator_map .)
    )               reduce using rule 134 (expr -> expr operator_map .)
    {               reduce using rule 134 (expr -> expr operator_map .)
    ]               reduce using rule 134 (expr -> expr operator_map .)
    :               reduce using rule 134 (expr -> expr operator_map .)
    ,               reduce using rule 134 (expr -> expr operator_map .)

  ! operator_inner  [ reduce using rule 220 (OPERATOR -> operator_map .) ]


state 164

    (137) expr -> expr operator_less_than . expr
    (223) OPERATOR -> operator_less_than .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 223 (OPERATOR -> operator_less_than .) ]

    expr                           shift and go to state 308
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 165

    (138) expr -> expr operator_less_than_equals . expr
    (224) OPERATOR -> operator_less_than_equals .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 224 (OPERATOR -> operator_less_than_equals .) ]

    expr                           shift and go to state 309
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 166

    (139) expr -> expr operator_greater_than . expr
    (225) OPERATOR -> operator_greater_than .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 225 (OPERATOR -> operator_greater_than .) ]

    expr                           shift and go to state 310
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 167

    (140) expr -> expr operator_greater_than_equals . expr
    (226) OPERATOR -> operator_greater_than_equals .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 226 (OPERATOR -> operator_greater_than_equals .) ]

    expr                           shift and go to state 311
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 168

    (141) expr -> expr operator_equals . expr
    (227) OPERATOR -> operator_equals .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 227 (OPERATOR -> operator_equals .) ]

    expr                           shift and go to state 312
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 169

    (142) expr -> expr operator_not_equals . expr
    (228) OPERATOR -> operator_not_equals .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 228 (OPERATOR -> operator_not_equals .) ]

    expr                           shift and go to state 313
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 170

    (143) expr -> expr operator_smallest . expr
    (229) OPERATOR -> operator_smallest .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 229 (OPERATOR -> operator_smallest .) ]

    expr                           shift and go to state 314
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 171

    (144) expr -> expr operator_greatest . expr
    (230) OPERATOR -> operator_greatest .
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

  ! operator_inner  [ reduce using rule 230 (OPERATOR -> operator_greatest .) ]

    expr                           shift and go to state 315
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 172

    (52) item -> expr [ . expr ]
    (53) simple_slice -> expr [ . expr : expr ]
    (54) full_slice -> expr [ . expr : expr : expr ]
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 316
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 173

    (209) OPERATOR -> operator_bitnot .

    operator_inner  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    (               reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitnot reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_not    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_reverse reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_sorted_incr reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_sorted_decr reduce using rule 209 (OPERATOR -> operator_bitnot .)
    VAR             reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_add    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_sub    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_mul    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_div    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_trudiv reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_pow    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_join   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_split  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_scan   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_reduc  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitand reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitor  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitxor reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitshiftleft reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_bitshiftright reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_and    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_or     reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_xor    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_contains reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_incr   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_decr   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_outer  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_rotate reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_apply  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_compose reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_over   reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_map    reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_less_than reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_less_than_equals reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_greater_than reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_greater_than_equals reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_equals reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_not_equals reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_smallest reduce using rule 209 (OPERATOR -> operator_bitnot .)
    operator_greatest reduce using rule 209 (OPERATOR -> operator_bitnot .)
    FLOAT           reduce using rule 209 (OPERATOR -> operator_bitnot .)
    NUM             reduce using rule 209 (OPERATOR -> operator_bitnot .)
    STRING_3SQ      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    STRING_3DQ      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    STRING_SQ       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    STRING_DQ       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    true            reduce using rule 209 (OPERATOR -> operator_bitnot .)
    Null            reduce using rule 209 (OPERATOR -> operator_bitnot .)
    false           reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_type       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_num        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_bool       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_any        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_u64        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_u32        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_u16        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_u8         reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_i64        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_i32        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_i16        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_i8         reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_f32        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_f64        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_str        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_list       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_tuple      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_array      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_vector     reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_dict       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_generator  reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_linked_list reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_doubly_linked_list reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_deque      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_heap       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_fibonacci_heap reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_tree       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_trie       reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_stack      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_queue      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_binary_search_tree reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_bitset     reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_set        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_map        reduce using rule 209 (OPERATOR -> operator_bitnot .)
    type_range      reduce using rule 209 (OPERATOR -> operator_bitnot .)
    lambda          reduce using rule 209 (OPERATOR -> operator_bitnot .)


state 174

    (210) OPERATOR -> operator_not .

    operator_inner  reduce using rule 210 (OPERATOR -> operator_not .)
    (               reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitnot reduce using rule 210 (OPERATOR -> operator_not .)
    operator_not    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_reverse reduce using rule 210 (OPERATOR -> operator_not .)
    operator_sorted_incr reduce using rule 210 (OPERATOR -> operator_not .)
    operator_sorted_decr reduce using rule 210 (OPERATOR -> operator_not .)
    VAR             reduce using rule 210 (OPERATOR -> operator_not .)
    operator_add    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_sub    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_mul    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_div    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_trudiv reduce using rule 210 (OPERATOR -> operator_not .)
    operator_pow    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_join   reduce using rule 210 (OPERATOR -> operator_not .)
    operator_split  reduce using rule 210 (OPERATOR -> operator_not .)
    operator_scan   reduce using rule 210 (OPERATOR -> operator_not .)
    operator_reduc  reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitand reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitor  reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitxor reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitshiftleft reduce using rule 210 (OPERATOR -> operator_not .)
    operator_bitshiftright reduce using rule 210 (OPERATOR -> operator_not .)
    operator_and    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_or     reduce using rule 210 (OPERATOR -> operator_not .)
    operator_xor    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_contains reduce using rule 210 (OPERATOR -> operator_not .)
    operator_incr   reduce using rule 210 (OPERATOR -> operator_not .)
    operator_decr   reduce using rule 210 (OPERATOR -> operator_not .)
    operator_outer  reduce using rule 210 (OPERATOR -> operator_not .)
    operator_rotate reduce using rule 210 (OPERATOR -> operator_not .)
    operator_apply  reduce using rule 210 (OPERATOR -> operator_not .)
    operator_compose reduce using rule 210 (OPERATOR -> operator_not .)
    operator_over   reduce using rule 210 (OPERATOR -> operator_not .)
    operator_map    reduce using rule 210 (OPERATOR -> operator_not .)
    operator_less_than reduce using rule 210 (OPERATOR -> operator_not .)
    operator_less_than_equals reduce using rule 210 (OPERATOR -> operator_not .)
    operator_greater_than reduce using rule 210 (OPERATOR -> operator_not .)
    operator_greater_than_equals reduce using rule 210 (OPERATOR -> operator_not .)
    operator_equals reduce using rule 210 (OPERATOR -> operator_not .)
    operator_not_equals reduce using rule 210 (OPERATOR -> operator_not .)
    operator_smallest reduce using rule 210 (OPERATOR -> operator_not .)
    operator_greatest reduce using rule 210 (OPERATOR -> operator_not .)
    FLOAT           reduce using rule 210 (OPERATOR -> operator_not .)
    NUM             reduce using rule 210 (OPERATOR -> operator_not .)
    STRING_3SQ      reduce using rule 210 (OPERATOR -> operator_not .)
    STRING_3DQ      reduce using rule 210 (OPERATOR -> operator_not .)
    STRING_SQ       reduce using rule 210 (OPERATOR -> operator_not .)
    STRING_DQ       reduce using rule 210 (OPERATOR -> operator_not .)
    true            reduce using rule 210 (OPERATOR -> operator_not .)
    Null            reduce using rule 210 (OPERATOR -> operator_not .)
    false           reduce using rule 210 (OPERATOR -> operator_not .)
    type_type       reduce using rule 210 (OPERATOR -> operator_not .)
    type_num        reduce using rule 210 (OPERATOR -> operator_not .)
    type_bool       reduce using rule 210 (OPERATOR -> operator_not .)
    type_any        reduce using rule 210 (OPERATOR -> operator_not .)
    type_u64        reduce using rule 210 (OPERATOR -> operator_not .)
    type_u32        reduce using rule 210 (OPERATOR -> operator_not .)
    type_u16        reduce using rule 210 (OPERATOR -> operator_not .)
    type_u8         reduce using rule 210 (OPERATOR -> operator_not .)
    type_i64        reduce using rule 210 (OPERATOR -> operator_not .)
    type_i32        reduce using rule 210 (OPERATOR -> operator_not .)
    type_i16        reduce using rule 210 (OPERATOR -> operator_not .)
    type_i8         reduce using rule 210 (OPERATOR -> operator_not .)
    type_f32        reduce using rule 210 (OPERATOR -> operator_not .)
    type_f64        reduce using rule 210 (OPERATOR -> operator_not .)
    type_str        reduce using rule 210 (OPERATOR -> operator_not .)
    type_list       reduce using rule 210 (OPERATOR -> operator_not .)
    type_tuple      reduce using rule 210 (OPERATOR -> operator_not .)
    type_array      reduce using rule 210 (OPERATOR -> operator_not .)
    type_vector     reduce using rule 210 (OPERATOR -> operator_not .)
    type_dict       reduce using rule 210 (OPERATOR -> operator_not .)
    type_generator  reduce using rule 210 (OPERATOR -> operator_not .)
    type_linked_list reduce using rule 210 (OPERATOR -> operator_not .)
    type_doubly_linked_list reduce using rule 210 (OPERATOR -> operator_not .)
    type_deque      reduce using rule 210 (OPERATOR -> operator_not .)
    type_heap       reduce using rule 210 (OPERATOR -> operator_not .)
    type_fibonacci_heap reduce using rule 210 (OPERATOR -> operator_not .)
    type_tree       reduce using rule 210 (OPERATOR -> operator_not .)
    type_trie       reduce using rule 210 (OPERATOR -> operator_not .)
    type_stack      reduce using rule 210 (OPERATOR -> operator_not .)
    type_queue      reduce using rule 210 (OPERATOR -> operator_not .)
    type_binary_search_tree reduce using rule 210 (OPERATOR -> operator_not .)
    type_bitset     reduce using rule 210 (OPERATOR -> operator_not .)
    type_set        reduce using rule 210 (OPERATOR -> operator_not .)
    type_map        reduce using rule 210 (OPERATOR -> operator_not .)
    type_range      reduce using rule 210 (OPERATOR -> operator_not .)
    lambda          reduce using rule 210 (OPERATOR -> operator_not .)


state 175

    (215) OPERATOR -> operator_reverse .

    operator_inner  reduce using rule 215 (OPERATOR -> operator_reverse .)
    (               reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitnot reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_not    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_reverse reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_sorted_incr reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_sorted_decr reduce using rule 215 (OPERATOR -> operator_reverse .)
    VAR             reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_add    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_sub    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_mul    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_div    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_trudiv reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_pow    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_join   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_split  reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_scan   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_reduc  reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitand reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitor  reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitxor reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitshiftleft reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_bitshiftright reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_and    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_or     reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_xor    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_contains reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_incr   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_decr   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_outer  reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_rotate reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_apply  reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_compose reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_over   reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_map    reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_less_than reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_less_than_equals reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_greater_than reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_greater_than_equals reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_equals reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_not_equals reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_smallest reduce using rule 215 (OPERATOR -> operator_reverse .)
    operator_greatest reduce using rule 215 (OPERATOR -> operator_reverse .)
    FLOAT           reduce using rule 215 (OPERATOR -> operator_reverse .)
    NUM             reduce using rule 215 (OPERATOR -> operator_reverse .)
    STRING_3SQ      reduce using rule 215 (OPERATOR -> operator_reverse .)
    STRING_3DQ      reduce using rule 215 (OPERATOR -> operator_reverse .)
    STRING_SQ       reduce using rule 215 (OPERATOR -> operator_reverse .)
    STRING_DQ       reduce using rule 215 (OPERATOR -> operator_reverse .)
    true            reduce using rule 215 (OPERATOR -> operator_reverse .)
    Null            reduce using rule 215 (OPERATOR -> operator_reverse .)
    false           reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_type       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_num        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_bool       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_any        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_u64        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_u32        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_u16        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_u8         reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_i64        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_i32        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_i16        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_i8         reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_f32        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_f64        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_str        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_list       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_tuple      reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_array      reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_vector     reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_dict       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_generator  reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_linked_list reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_doubly_linked_list reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_deque      reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_heap       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_fibonacci_heap reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_tree       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_trie       reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_stack      reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_queue      reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_binary_search_tree reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_bitset     reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_set        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_map        reduce using rule 215 (OPERATOR -> operator_reverse .)
    type_range      reduce using rule 215 (OPERATOR -> operator_reverse .)
    lambda          reduce using rule 215 (OPERATOR -> operator_reverse .)


state 176

    (221) OPERATOR -> operator_sorted_incr .

    operator_inner  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    (               reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitnot reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_not    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_reverse reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_sorted_incr reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_sorted_decr reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    VAR             reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_add    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_sub    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_mul    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_div    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_trudiv reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_pow    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_join   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_split  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_scan   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_reduc  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitand reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitor  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitxor reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitshiftleft reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_bitshiftright reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_and    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_or     reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_xor    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_contains reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_incr   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_decr   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_outer  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_rotate reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_apply  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_compose reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_over   reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_map    reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_less_than reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_less_than_equals reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_greater_than reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_greater_than_equals reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_equals reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_not_equals reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_smallest reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    operator_greatest reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    FLOAT           reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    NUM             reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    STRING_3SQ      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    STRING_3DQ      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    STRING_SQ       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    STRING_DQ       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    true            reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    Null            reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    false           reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_type       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_num        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_bool       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_any        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_u64        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_u32        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_u16        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_u8         reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_i64        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_i32        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_i16        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_i8         reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_f32        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_f64        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_str        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_list       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_tuple      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_array      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_vector     reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_dict       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_generator  reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_linked_list reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_doubly_linked_list reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_deque      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_heap       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_fibonacci_heap reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_tree       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_trie       reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_stack      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_queue      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_binary_search_tree reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_bitset     reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_set        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_map        reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    type_range      reduce using rule 221 (OPERATOR -> operator_sorted_incr .)
    lambda          reduce using rule 221 (OPERATOR -> operator_sorted_incr .)


state 177

    (222) OPERATOR -> operator_sorted_decr .

    operator_inner  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    (               reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitnot reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_not    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_reverse reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_sorted_incr reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_sorted_decr reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    VAR             reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_add    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_sub    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_mul    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_div    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_trudiv reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_pow    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_join   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_split  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_scan   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_reduc  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitand reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitor  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitxor reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitshiftleft reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_bitshiftright reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_and    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_or     reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_xor    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_contains reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_incr   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_decr   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_outer  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_rotate reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_apply  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_compose reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_over   reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_map    reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_less_than reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_less_than_equals reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_greater_than reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_greater_than_equals reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_equals reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_not_equals reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_smallest reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    operator_greatest reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    FLOAT           reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    NUM             reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    STRING_3SQ      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    STRING_3DQ      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    STRING_SQ       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    STRING_DQ       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    true            reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    Null            reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    false           reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_type       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_num        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_bool       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_any        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_u64        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_u32        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_u16        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_u8         reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_i64        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_i32        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_i16        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_i8         reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_f32        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_f64        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_str        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_list       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_tuple      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_array      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_vector     reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_dict       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_generator  reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_linked_list reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_doubly_linked_list reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_deque      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_heap       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_fibonacci_heap reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_tree       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_trie       reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_stack      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_queue      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_binary_search_tree reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_bitset     reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_set        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_map        reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    type_range      reduce using rule 222 (OPERATOR -> operator_sorted_decr .)
    lambda          reduce using rule 222 (OPERATOR -> operator_sorted_decr .)


state 178

    (59) return_stmt -> return expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 59 (return_stmt -> return expr .)
    $end            reduce using rule 59 (return_stmt -> return expr .)
    }               reduce using rule 59 (return_stmt -> return expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 179

    (55) expr -> item .

    operator_add    reduce using rule 55 (expr -> item .)
    operator_sub    reduce using rule 55 (expr -> item .)
    operator_mul    reduce using rule 55 (expr -> item .)
    operator_div    reduce using rule 55 (expr -> item .)
    operator_trudiv reduce using rule 55 (expr -> item .)
    operator_pow    reduce using rule 55 (expr -> item .)
    operator_join   reduce using rule 55 (expr -> item .)
    operator_split  reduce using rule 55 (expr -> item .)
    operator_bitand reduce using rule 55 (expr -> item .)
    operator_bitor  reduce using rule 55 (expr -> item .)
    operator_bitxor reduce using rule 55 (expr -> item .)
    operator_bitshiftleft reduce using rule 55 (expr -> item .)
    operator_bitshiftright reduce using rule 55 (expr -> item .)
    operator_and    reduce using rule 55 (expr -> item .)
    operator_or     reduce using rule 55 (expr -> item .)
    operator_xor    reduce using rule 55 (expr -> item .)
    operator_contains reduce using rule 55 (expr -> item .)
    operator_incr   reduce using rule 55 (expr -> item .)
    operator_decr   reduce using rule 55 (expr -> item .)
    operator_outer  reduce using rule 55 (expr -> item .)
    operator_rotate reduce using rule 55 (expr -> item .)
    operator_apply  reduce using rule 55 (expr -> item .)
    operator_compose reduce using rule 55 (expr -> item .)
    operator_over   reduce using rule 55 (expr -> item .)
    operator_map    reduce using rule 55 (expr -> item .)
    operator_less_than reduce using rule 55 (expr -> item .)
    operator_less_than_equals reduce using rule 55 (expr -> item .)
    operator_greater_than reduce using rule 55 (expr -> item .)
    operator_greater_than_equals reduce using rule 55 (expr -> item .)
    operator_equals reduce using rule 55 (expr -> item .)
    operator_not_equals reduce using rule 55 (expr -> item .)
    operator_smallest reduce using rule 55 (expr -> item .)
    operator_greatest reduce using rule 55 (expr -> item .)
    [               reduce using rule 55 (expr -> item .)
    operator_scan   reduce using rule 55 (expr -> item .)
    operator_reduc  reduce using rule 55 (expr -> item .)
    operator_bitnot reduce using rule 55 (expr -> item .)
    operator_not    reduce using rule 55 (expr -> item .)
    operator_inner  reduce using rule 55 (expr -> item .)
    operator_reverse reduce using rule 55 (expr -> item .)
    operator_sorted_incr reduce using rule 55 (expr -> item .)
    operator_sorted_decr reduce using rule 55 (expr -> item .)
    NEWLINE         reduce using rule 55 (expr -> item .)
    $end            reduce using rule 55 (expr -> item .)
    }               reduce using rule 55 (expr -> item .)
    )               reduce using rule 55 (expr -> item .)
    {               reduce using rule 55 (expr -> item .)
    ]               reduce using rule 55 (expr -> item .)
    :               reduce using rule 55 (expr -> item .)
    ,               reduce using rule 55 (expr -> item .)


state 180

    (56) expr -> simple_slice .

    operator_add    reduce using rule 56 (expr -> simple_slice .)
    operator_sub    reduce using rule 56 (expr -> simple_slice .)
    operator_mul    reduce using rule 56 (expr -> simple_slice .)
    operator_div    reduce using rule 56 (expr -> simple_slice .)
    operator_trudiv reduce using rule 56 (expr -> simple_slice .)
    operator_pow    reduce using rule 56 (expr -> simple_slice .)
    operator_join   reduce using rule 56 (expr -> simple_slice .)
    operator_split  reduce using rule 56 (expr -> simple_slice .)
    operator_bitand reduce using rule 56 (expr -> simple_slice .)
    operator_bitor  reduce using rule 56 (expr -> simple_slice .)
    operator_bitxor reduce using rule 56 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 56 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 56 (expr -> simple_slice .)
    operator_and    reduce using rule 56 (expr -> simple_slice .)
    operator_or     reduce using rule 56 (expr -> simple_slice .)
    operator_xor    reduce using rule 56 (expr -> simple_slice .)
    operator_contains reduce using rule 56 (expr -> simple_slice .)
    operator_incr   reduce using rule 56 (expr -> simple_slice .)
    operator_decr   reduce using rule 56 (expr -> simple_slice .)
    operator_outer  reduce using rule 56 (expr -> simple_slice .)
    operator_rotate reduce using rule 56 (expr -> simple_slice .)
    operator_apply  reduce using rule 56 (expr -> simple_slice .)
    operator_compose reduce using rule 56 (expr -> simple_slice .)
    operator_over   reduce using rule 56 (expr -> simple_slice .)
    operator_map    reduce using rule 56 (expr -> simple_slice .)
    operator_less_than reduce using rule 56 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 56 (expr -> simple_slice .)
    operator_greater_than reduce using rule 56 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 56 (expr -> simple_slice .)
    operator_equals reduce using rule 56 (expr -> simple_slice .)
    operator_not_equals reduce using rule 56 (expr -> simple_slice .)
    operator_smallest reduce using rule 56 (expr -> simple_slice .)
    operator_greatest reduce using rule 56 (expr -> simple_slice .)
    [               reduce using rule 56 (expr -> simple_slice .)
    operator_scan   reduce using rule 56 (expr -> simple_slice .)
    operator_reduc  reduce using rule 56 (expr -> simple_slice .)
    operator_bitnot reduce using rule 56 (expr -> simple_slice .)
    operator_not    reduce using rule 56 (expr -> simple_slice .)
    operator_inner  reduce using rule 56 (expr -> simple_slice .)
    operator_reverse reduce using rule 56 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 56 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 56 (expr -> simple_slice .)
    NEWLINE         reduce using rule 56 (expr -> simple_slice .)
    $end            reduce using rule 56 (expr -> simple_slice .)
    }               reduce using rule 56 (expr -> simple_slice .)
    )               reduce using rule 56 (expr -> simple_slice .)
    {               reduce using rule 56 (expr -> simple_slice .)
    ]               reduce using rule 56 (expr -> simple_slice .)
    :               reduce using rule 56 (expr -> simple_slice .)
    ,               reduce using rule 56 (expr -> simple_slice .)


state 181

    (57) expr -> full_slice .

    operator_add    reduce using rule 57 (expr -> full_slice .)
    operator_sub    reduce using rule 57 (expr -> full_slice .)
    operator_mul    reduce using rule 57 (expr -> full_slice .)
    operator_div    reduce using rule 57 (expr -> full_slice .)
    operator_trudiv reduce using rule 57 (expr -> full_slice .)
    operator_pow    reduce using rule 57 (expr -> full_slice .)
    operator_join   reduce using rule 57 (expr -> full_slice .)
    operator_split  reduce using rule 57 (expr -> full_slice .)
    operator_bitand reduce using rule 57 (expr -> full_slice .)
    operator_bitor  reduce using rule 57 (expr -> full_slice .)
    operator_bitxor reduce using rule 57 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 57 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 57 (expr -> full_slice .)
    operator_and    reduce using rule 57 (expr -> full_slice .)
    operator_or     reduce using rule 57 (expr -> full_slice .)
    operator_xor    reduce using rule 57 (expr -> full_slice .)
    operator_contains reduce using rule 57 (expr -> full_slice .)
    operator_incr   reduce using rule 57 (expr -> full_slice .)
    operator_decr   reduce using rule 57 (expr -> full_slice .)
    operator_outer  reduce using rule 57 (expr -> full_slice .)
    operator_rotate reduce using rule 57 (expr -> full_slice .)
    operator_apply  reduce using rule 57 (expr -> full_slice .)
    operator_compose reduce using rule 57 (expr -> full_slice .)
    operator_over   reduce using rule 57 (expr -> full_slice .)
    operator_map    reduce using rule 57 (expr -> full_slice .)
    operator_less_than reduce using rule 57 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 57 (expr -> full_slice .)
    operator_greater_than reduce using rule 57 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 57 (expr -> full_slice .)
    operator_equals reduce using rule 57 (expr -> full_slice .)
    operator_not_equals reduce using rule 57 (expr -> full_slice .)
    operator_smallest reduce using rule 57 (expr -> full_slice .)
    operator_greatest reduce using rule 57 (expr -> full_slice .)
    [               reduce using rule 57 (expr -> full_slice .)
    operator_scan   reduce using rule 57 (expr -> full_slice .)
    operator_reduc  reduce using rule 57 (expr -> full_slice .)
    operator_bitnot reduce using rule 57 (expr -> full_slice .)
    operator_not    reduce using rule 57 (expr -> full_slice .)
    operator_inner  reduce using rule 57 (expr -> full_slice .)
    operator_reverse reduce using rule 57 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 57 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 57 (expr -> full_slice .)
    NEWLINE         reduce using rule 57 (expr -> full_slice .)
    $end            reduce using rule 57 (expr -> full_slice .)
    }               reduce using rule 57 (expr -> full_slice .)
    )               reduce using rule 57 (expr -> full_slice .)
    {               reduce using rule 57 (expr -> full_slice .)
    ]               reduce using rule 57 (expr -> full_slice .)
    :               reduce using rule 57 (expr -> full_slice .)
    ,               reduce using rule 57 (expr -> full_slice .)


state 182

    (145) expr -> VAR .
    (181) return_val -> VAR . ( arguments )

    operator_add    reduce using rule 145 (expr -> VAR .)
    operator_sub    reduce using rule 145 (expr -> VAR .)
    operator_mul    reduce using rule 145 (expr -> VAR .)
    operator_div    reduce using rule 145 (expr -> VAR .)
    operator_trudiv reduce using rule 145 (expr -> VAR .)
    operator_pow    reduce using rule 145 (expr -> VAR .)
    operator_join   reduce using rule 145 (expr -> VAR .)
    operator_split  reduce using rule 145 (expr -> VAR .)
    operator_bitand reduce using rule 145 (expr -> VAR .)
    operator_bitor  reduce using rule 145 (expr -> VAR .)
    operator_bitxor reduce using rule 145 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 145 (expr -> VAR .)
    operator_bitshiftright reduce using rule 145 (expr -> VAR .)
    operator_and    reduce using rule 145 (expr -> VAR .)
    operator_or     reduce using rule 145 (expr -> VAR .)
    operator_xor    reduce using rule 145 (expr -> VAR .)
    operator_contains reduce using rule 145 (expr -> VAR .)
    operator_incr   reduce using rule 145 (expr -> VAR .)
    operator_decr   reduce using rule 145 (expr -> VAR .)
    operator_outer  reduce using rule 145 (expr -> VAR .)
    operator_rotate reduce using rule 145 (expr -> VAR .)
    operator_apply  reduce using rule 145 (expr -> VAR .)
    operator_compose reduce using rule 145 (expr -> VAR .)
    operator_over   reduce using rule 145 (expr -> VAR .)
    operator_map    reduce using rule 145 (expr -> VAR .)
    operator_less_than reduce using rule 145 (expr -> VAR .)
    operator_less_than_equals reduce using rule 145 (expr -> VAR .)
    operator_greater_than reduce using rule 145 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 145 (expr -> VAR .)
    operator_equals reduce using rule 145 (expr -> VAR .)
    operator_not_equals reduce using rule 145 (expr -> VAR .)
    operator_smallest reduce using rule 145 (expr -> VAR .)
    operator_greatest reduce using rule 145 (expr -> VAR .)
    [               reduce using rule 145 (expr -> VAR .)
    operator_scan   reduce using rule 145 (expr -> VAR .)
    operator_reduc  reduce using rule 145 (expr -> VAR .)
    operator_bitnot reduce using rule 145 (expr -> VAR .)
    operator_not    reduce using rule 145 (expr -> VAR .)
    operator_inner  reduce using rule 145 (expr -> VAR .)
    operator_reverse reduce using rule 145 (expr -> VAR .)
    operator_sorted_incr reduce using rule 145 (expr -> VAR .)
    operator_sorted_decr reduce using rule 145 (expr -> VAR .)
    NEWLINE         reduce using rule 145 (expr -> VAR .)
    $end            reduce using rule 145 (expr -> VAR .)
    }               reduce using rule 145 (expr -> VAR .)
    )               reduce using rule 145 (expr -> VAR .)
    {               reduce using rule 145 (expr -> VAR .)
    ]               reduce using rule 145 (expr -> VAR .)
    :               reduce using rule 145 (expr -> VAR .)
    ,               reduce using rule 145 (expr -> VAR .)
    (               shift and go to state 195


state 183

    (185) expr -> TYPE .

    operator_add    reduce using rule 185 (expr -> TYPE .)
    operator_sub    reduce using rule 185 (expr -> TYPE .)
    operator_mul    reduce using rule 185 (expr -> TYPE .)
    operator_div    reduce using rule 185 (expr -> TYPE .)
    operator_trudiv reduce using rule 185 (expr -> TYPE .)
    operator_pow    reduce using rule 185 (expr -> TYPE .)
    operator_join   reduce using rule 185 (expr -> TYPE .)
    operator_split  reduce using rule 185 (expr -> TYPE .)
    operator_bitand reduce using rule 185 (expr -> TYPE .)
    operator_bitor  reduce using rule 185 (expr -> TYPE .)
    operator_bitxor reduce using rule 185 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 185 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 185 (expr -> TYPE .)
    operator_and    reduce using rule 185 (expr -> TYPE .)
    operator_or     reduce using rule 185 (expr -> TYPE .)
    operator_xor    reduce using rule 185 (expr -> TYPE .)
    operator_contains reduce using rule 185 (expr -> TYPE .)
    operator_incr   reduce using rule 185 (expr -> TYPE .)
    operator_decr   reduce using rule 185 (expr -> TYPE .)
    operator_outer  reduce using rule 185 (expr -> TYPE .)
    operator_rotate reduce using rule 185 (expr -> TYPE .)
    operator_apply  reduce using rule 185 (expr -> TYPE .)
    operator_compose reduce using rule 185 (expr -> TYPE .)
    operator_over   reduce using rule 185 (expr -> TYPE .)
    operator_map    reduce using rule 185 (expr -> TYPE .)
    operator_less_than reduce using rule 185 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 185 (expr -> TYPE .)
    operator_greater_than reduce using rule 185 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 185 (expr -> TYPE .)
    operator_equals reduce using rule 185 (expr -> TYPE .)
    operator_not_equals reduce using rule 185 (expr -> TYPE .)
    operator_smallest reduce using rule 185 (expr -> TYPE .)
    operator_greatest reduce using rule 185 (expr -> TYPE .)
    [               reduce using rule 185 (expr -> TYPE .)
    operator_scan   reduce using rule 185 (expr -> TYPE .)
    operator_reduc  reduce using rule 185 (expr -> TYPE .)
    operator_bitnot reduce using rule 185 (expr -> TYPE .)
    operator_not    reduce using rule 185 (expr -> TYPE .)
    operator_inner  reduce using rule 185 (expr -> TYPE .)
    operator_reverse reduce using rule 185 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 185 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 185 (expr -> TYPE .)
    NEWLINE         reduce using rule 185 (expr -> TYPE .)
    $end            reduce using rule 185 (expr -> TYPE .)
    }               reduce using rule 185 (expr -> TYPE .)
    )               reduce using rule 185 (expr -> TYPE .)
    {               reduce using rule 185 (expr -> TYPE .)
    ]               reduce using rule 185 (expr -> TYPE .)
    :               reduce using rule 185 (expr -> TYPE .)
    ,               reduce using rule 185 (expr -> TYPE .)


state 184

    (62) assign_stmt -> item = . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    item                           shift and go to state 179
    expr                           shift and go to state 317
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 185

    (63) assign_stmt -> simple_slice = . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    simple_slice                   shift and go to state 180
    expr                           shift and go to state 318
    item                           shift and go to state 179
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 186

    (64) assign_stmt -> full_slice = . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    full_slice                     shift and go to state 181
    expr                           shift and go to state 319
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 187

    (103) expr -> ( expr . )
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    )               shift and go to state 320
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 188

    (112) expr -> OPERATOR operator_scan . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    OPERATOR                       shift and go to state 36
    expr                           shift and go to state 321
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 189

    (113) expr -> OPERATOR operator_reduc . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    OPERATOR                       shift and go to state 36
    expr                           shift and go to state 322
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 190

    (123) expr -> operator_bitnot expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_sub    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_mul    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_div    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_trudiv reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_pow    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_join   reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_split  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitand reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitor  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitxor reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitshiftleft reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitshiftright reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_and    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_or     reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_xor    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_contains reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_incr   reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_decr   reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_outer  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_rotate reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_apply  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_less_than reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_less_than_equals reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_greater_than reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_greater_than_equals reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_equals reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_not_equals reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_smallest reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_greatest reduce using rule 123 (expr -> operator_bitnot expr .)
    [               reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_scan   reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_reduc  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_bitnot reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_not    reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_inner  reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_reverse reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_sorted_incr reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_sorted_decr reduce using rule 123 (expr -> operator_bitnot expr .)
    NEWLINE         reduce using rule 123 (expr -> operator_bitnot expr .)
    $end            reduce using rule 123 (expr -> operator_bitnot expr .)
    }               reduce using rule 123 (expr -> operator_bitnot expr .)
    )               reduce using rule 123 (expr -> operator_bitnot expr .)
    {               reduce using rule 123 (expr -> operator_bitnot expr .)
    ]               reduce using rule 123 (expr -> operator_bitnot expr .)
    :               reduce using rule 123 (expr -> operator_bitnot expr .)
    ,               reduce using rule 123 (expr -> operator_bitnot expr .)
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163

  ! operator_compose [ reduce using rule 123 (expr -> operator_bitnot expr .) ]
  ! operator_over   [ reduce using rule 123 (expr -> operator_bitnot expr .) ]
  ! operator_map    [ reduce using rule 123 (expr -> operator_bitnot expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 191

    (124) expr -> operator_not expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 124 (expr -> operator_not expr .)
    operator_or     reduce using rule 124 (expr -> operator_not expr .)
    operator_xor    reduce using rule 124 (expr -> operator_not expr .)
    operator_contains reduce using rule 124 (expr -> operator_not expr .)
    operator_less_than reduce using rule 124 (expr -> operator_not expr .)
    operator_less_than_equals reduce using rule 124 (expr -> operator_not expr .)
    operator_greater_than reduce using rule 124 (expr -> operator_not expr .)
    operator_greater_than_equals reduce using rule 124 (expr -> operator_not expr .)
    operator_equals reduce using rule 124 (expr -> operator_not expr .)
    operator_not_equals reduce using rule 124 (expr -> operator_not expr .)
    operator_smallest reduce using rule 124 (expr -> operator_not expr .)
    operator_greatest reduce using rule 124 (expr -> operator_not expr .)
    [               reduce using rule 124 (expr -> operator_not expr .)
    operator_not    reduce using rule 124 (expr -> operator_not expr .)
    NEWLINE         reduce using rule 124 (expr -> operator_not expr .)
    $end            reduce using rule 124 (expr -> operator_not expr .)
    }               reduce using rule 124 (expr -> operator_not expr .)
    )               reduce using rule 124 (expr -> operator_not expr .)
    {               reduce using rule 124 (expr -> operator_not expr .)
    ]               reduce using rule 124 (expr -> operator_not expr .)
    :               reduce using rule 124 (expr -> operator_not expr .)
    ,               reduce using rule 124 (expr -> operator_not expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_sub    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_mul    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_div    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_trudiv [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_pow    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_join   [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_split  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitand [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitor  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitxor [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitshiftleft [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitshiftright [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_incr   [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_decr   [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_outer  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_rotate [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_apply  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_compose [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_over   [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_map    [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_scan   [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_reduc  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_bitnot [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_inner  [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_reverse [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_sorted_incr [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_sorted_decr [ reduce using rule 124 (expr -> operator_not expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 192

    (129) expr -> operator_reverse expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_sub    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_mul    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_div    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_trudiv reduce using rule 129 (expr -> operator_reverse expr .)
    operator_pow    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_join   reduce using rule 129 (expr -> operator_reverse expr .)
    operator_split  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitand reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitor  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitxor reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitshiftleft reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitshiftright reduce using rule 129 (expr -> operator_reverse expr .)
    operator_and    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_or     reduce using rule 129 (expr -> operator_reverse expr .)
    operator_xor    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_contains reduce using rule 129 (expr -> operator_reverse expr .)
    operator_incr   reduce using rule 129 (expr -> operator_reverse expr .)
    operator_decr   reduce using rule 129 (expr -> operator_reverse expr .)
    operator_outer  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_rotate reduce using rule 129 (expr -> operator_reverse expr .)
    operator_apply  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_less_than reduce using rule 129 (expr -> operator_reverse expr .)
    operator_less_than_equals reduce using rule 129 (expr -> operator_reverse expr .)
    operator_greater_than reduce using rule 129 (expr -> operator_reverse expr .)
    operator_greater_than_equals reduce using rule 129 (expr -> operator_reverse expr .)
    operator_equals reduce using rule 129 (expr -> operator_reverse expr .)
    operator_not_equals reduce using rule 129 (expr -> operator_reverse expr .)
    operator_smallest reduce using rule 129 (expr -> operator_reverse expr .)
    operator_greatest reduce using rule 129 (expr -> operator_reverse expr .)
    [               reduce using rule 129 (expr -> operator_reverse expr .)
    operator_scan   reduce using rule 129 (expr -> operator_reverse expr .)
    operator_reduc  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_bitnot reduce using rule 129 (expr -> operator_reverse expr .)
    operator_not    reduce using rule 129 (expr -> operator_reverse expr .)
    operator_inner  reduce using rule 129 (expr -> operator_reverse expr .)
    operator_reverse reduce using rule 129 (expr -> operator_reverse expr .)
    operator_sorted_incr reduce using rule 129 (expr -> operator_reverse expr .)
    operator_sorted_decr reduce using rule 129 (expr -> operator_reverse expr .)
    NEWLINE         reduce using rule 129 (expr -> operator_reverse expr .)
    $end            reduce using rule 129 (expr -> operator_reverse expr .)
    }               reduce using rule 129 (expr -> operator_reverse expr .)
    )               reduce using rule 129 (expr -> operator_reverse expr .)
    {               reduce using rule 129 (expr -> operator_reverse expr .)
    ]               reduce using rule 129 (expr -> operator_reverse expr .)
    :               reduce using rule 129 (expr -> operator_reverse expr .)
    ,               reduce using rule 129 (expr -> operator_reverse expr .)
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163

  ! operator_compose [ reduce using rule 129 (expr -> operator_reverse expr .) ]
  ! operator_over   [ reduce using rule 129 (expr -> operator_reverse expr .) ]
  ! operator_map    [ reduce using rule 129 (expr -> operator_reverse expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 193

    (135) expr -> operator_sorted_incr expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_sub    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_mul    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_div    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_trudiv reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_pow    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_join   reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_split  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitand reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitor  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitxor reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitshiftleft reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitshiftright reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_and    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_or     reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_xor    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_contains reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_incr   reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_decr   reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_outer  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_rotate reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_apply  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_less_than reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_less_than_equals reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_greater_than reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_greater_than_equals reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_equals reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_not_equals reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_smallest reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_greatest reduce using rule 135 (expr -> operator_sorted_incr expr .)
    [               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_scan   reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_reduc  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_bitnot reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_not    reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_inner  reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_reverse reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_sorted_incr reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_sorted_decr reduce using rule 135 (expr -> operator_sorted_incr expr .)
    NEWLINE         reduce using rule 135 (expr -> operator_sorted_incr expr .)
    $end            reduce using rule 135 (expr -> operator_sorted_incr expr .)
    }               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    )               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    {               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    ]               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    :               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    ,               reduce using rule 135 (expr -> operator_sorted_incr expr .)
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163

  ! operator_compose [ reduce using rule 135 (expr -> operator_sorted_incr expr .) ]
  ! operator_over   [ reduce using rule 135 (expr -> operator_sorted_incr expr .) ]
  ! operator_map    [ reduce using rule 135 (expr -> operator_sorted_incr expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 194

    (136) expr -> operator_sorted_decr expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_sub    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_mul    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_div    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_trudiv reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_pow    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_join   reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_split  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitand reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitor  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitxor reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitshiftleft reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitshiftright reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_and    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_or     reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_xor    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_contains reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_incr   reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_decr   reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_outer  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_rotate reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_apply  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_less_than reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_less_than_equals reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_greater_than reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_greater_than_equals reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_equals reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_not_equals reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_smallest reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_greatest reduce using rule 136 (expr -> operator_sorted_decr expr .)
    [               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_scan   reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_reduc  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_bitnot reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_not    reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_inner  reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_reverse reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_sorted_incr reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_sorted_decr reduce using rule 136 (expr -> operator_sorted_decr expr .)
    NEWLINE         reduce using rule 136 (expr -> operator_sorted_decr expr .)
    $end            reduce using rule 136 (expr -> operator_sorted_decr expr .)
    }               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    )               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    {               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    ]               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    :               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    ,               reduce using rule 136 (expr -> operator_sorted_decr expr .)
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163

  ! operator_compose [ reduce using rule 136 (expr -> operator_sorted_decr expr .) ]
  ! operator_over   [ reduce using rule 136 (expr -> operator_sorted_decr expr .) ]
  ! operator_map    [ reduce using rule 136 (expr -> operator_sorted_decr expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 195

    (181) return_val -> VAR ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 323
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 196

    (67) comma_separated_names -> VAR , . comma_separated_names
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 198

    comma_separated_names          shift and go to state 326

state 197

    (65) declaration_stmt -> TYPE comma_separated_names .

    NEWLINE         reduce using rule 65 (declaration_stmt -> TYPE comma_separated_names .)
    $end            reduce using rule 65 (declaration_stmt -> TYPE comma_separated_names .)
    }               reduce using rule 65 (declaration_stmt -> TYPE comma_separated_names .)
    ;               reduce using rule 65 (declaration_stmt -> TYPE comma_separated_names .)
    )               reduce using rule 65 (declaration_stmt -> TYPE comma_separated_names .)


state 198

    (66) comma_separated_names -> VAR .
    (67) comma_separated_names -> VAR . , comma_separated_names

    NEWLINE         reduce using rule 66 (comma_separated_names -> VAR .)
    $end            reduce using rule 66 (comma_separated_names -> VAR .)
    }               reduce using rule 66 (comma_separated_names -> VAR .)
    operator_contains reduce using rule 66 (comma_separated_names -> VAR .)
    :               reduce using rule 66 (comma_separated_names -> VAR .)
    =               reduce using rule 66 (comma_separated_names -> VAR .)
    ;               reduce using rule 66 (comma_separated_names -> VAR .)
    )               reduce using rule 66 (comma_separated_names -> VAR .)
    ,               shift and go to state 196


state 199

    (60) del_stmt -> del expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 60 (del_stmt -> del expr .)
    $end            reduce using rule 60 (del_stmt -> del expr .)
    }               reduce using rule 60 (del_stmt -> del expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 200

    (61) assign_stmt -> comma_separated_names = . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 327
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 201

    (83) for_decl -> for comma_separated_names . operator_contains expr

    operator_contains shift and go to state 328


state 202

    (84) if_decl -> if expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    {               reduce using rule 84 (if_decl -> if expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 203

    (85) elif_decl -> elif expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    {               reduce using rule 85 (elif_decl -> elif expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 204

    (87) operator_decl -> operator ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 329
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 205

    (88) struct_decl -> struct TYPE .

    {               reduce using rule 88 (struct_decl -> struct TYPE .)


state 206

    (11) TYPE -> type_type .

    {               reduce using rule 11 (TYPE -> type_type .)
    VAR             reduce using rule 11 (TYPE -> type_type .)


state 207

    (12) TYPE -> type_num .

    {               reduce using rule 12 (TYPE -> type_num .)
    VAR             reduce using rule 12 (TYPE -> type_num .)


state 208

    (13) TYPE -> type_bool .

    {               reduce using rule 13 (TYPE -> type_bool .)
    VAR             reduce using rule 13 (TYPE -> type_bool .)


state 209

    (14) TYPE -> type_any .

    {               reduce using rule 14 (TYPE -> type_any .)
    VAR             reduce using rule 14 (TYPE -> type_any .)


state 210

    (15) TYPE -> type_u64 .

    {               reduce using rule 15 (TYPE -> type_u64 .)
    VAR             reduce using rule 15 (TYPE -> type_u64 .)


state 211

    (16) TYPE -> type_u32 .

    {               reduce using rule 16 (TYPE -> type_u32 .)
    VAR             reduce using rule 16 (TYPE -> type_u32 .)


state 212

    (17) TYPE -> type_u16 .

    {               reduce using rule 17 (TYPE -> type_u16 .)
    VAR             reduce using rule 17 (TYPE -> type_u16 .)


state 213

    (18) TYPE -> type_u8 .

    {               reduce using rule 18 (TYPE -> type_u8 .)
    VAR             reduce using rule 18 (TYPE -> type_u8 .)


state 214

    (19) TYPE -> type_i64 .

    {               reduce using rule 19 (TYPE -> type_i64 .)
    VAR             reduce using rule 19 (TYPE -> type_i64 .)


state 215

    (20) TYPE -> type_i32 .

    {               reduce using rule 20 (TYPE -> type_i32 .)
    VAR             reduce using rule 20 (TYPE -> type_i32 .)


state 216

    (21) TYPE -> type_i16 .

    {               reduce using rule 21 (TYPE -> type_i16 .)
    VAR             reduce using rule 21 (TYPE -> type_i16 .)


state 217

    (22) TYPE -> type_i8 .

    {               reduce using rule 22 (TYPE -> type_i8 .)
    VAR             reduce using rule 22 (TYPE -> type_i8 .)


state 218

    (23) TYPE -> type_f32 .

    {               reduce using rule 23 (TYPE -> type_f32 .)
    VAR             reduce using rule 23 (TYPE -> type_f32 .)


state 219

    (24) TYPE -> type_f64 .

    {               reduce using rule 24 (TYPE -> type_f64 .)
    VAR             reduce using rule 24 (TYPE -> type_f64 .)


state 220

    (25) TYPE -> type_str .

    {               reduce using rule 25 (TYPE -> type_str .)
    VAR             reduce using rule 25 (TYPE -> type_str .)


state 221

    (26) TYPE -> type_list .

    {               reduce using rule 26 (TYPE -> type_list .)
    VAR             reduce using rule 26 (TYPE -> type_list .)


state 222

    (27) TYPE -> type_tuple .

    {               reduce using rule 27 (TYPE -> type_tuple .)
    VAR             reduce using rule 27 (TYPE -> type_tuple .)


state 223

    (28) TYPE -> type_array .

    {               reduce using rule 28 (TYPE -> type_array .)
    VAR             reduce using rule 28 (TYPE -> type_array .)


state 224

    (29) TYPE -> type_vector .

    {               reduce using rule 29 (TYPE -> type_vector .)
    VAR             reduce using rule 29 (TYPE -> type_vector .)


state 225

    (30) TYPE -> type_dict .

    {               reduce using rule 30 (TYPE -> type_dict .)
    VAR             reduce using rule 30 (TYPE -> type_dict .)


state 226

    (31) TYPE -> type_generator .

    {               reduce using rule 31 (TYPE -> type_generator .)
    VAR             reduce using rule 31 (TYPE -> type_generator .)


state 227

    (32) TYPE -> type_linked_list .

    {               reduce using rule 32 (TYPE -> type_linked_list .)
    VAR             reduce using rule 32 (TYPE -> type_linked_list .)


state 228

    (33) TYPE -> type_doubly_linked_list .

    {               reduce using rule 33 (TYPE -> type_doubly_linked_list .)
    VAR             reduce using rule 33 (TYPE -> type_doubly_linked_list .)


state 229

    (34) TYPE -> type_deque .

    {               reduce using rule 34 (TYPE -> type_deque .)
    VAR             reduce using rule 34 (TYPE -> type_deque .)


state 230

    (35) TYPE -> type_heap .

    {               reduce using rule 35 (TYPE -> type_heap .)
    VAR             reduce using rule 35 (TYPE -> type_heap .)


state 231

    (36) TYPE -> type_fibonacci_heap .

    {               reduce using rule 36 (TYPE -> type_fibonacci_heap .)
    VAR             reduce using rule 36 (TYPE -> type_fibonacci_heap .)


state 232

    (37) TYPE -> type_tree .

    {               reduce using rule 37 (TYPE -> type_tree .)
    VAR             reduce using rule 37 (TYPE -> type_tree .)


state 233

    (38) TYPE -> type_trie .

    {               reduce using rule 38 (TYPE -> type_trie .)
    VAR             reduce using rule 38 (TYPE -> type_trie .)


state 234

    (39) TYPE -> type_stack .

    {               reduce using rule 39 (TYPE -> type_stack .)
    VAR             reduce using rule 39 (TYPE -> type_stack .)


state 235

    (40) TYPE -> type_queue .

    {               reduce using rule 40 (TYPE -> type_queue .)
    VAR             reduce using rule 40 (TYPE -> type_queue .)


state 236

    (41) TYPE -> type_binary_search_tree .

    {               reduce using rule 41 (TYPE -> type_binary_search_tree .)
    VAR             reduce using rule 41 (TYPE -> type_binary_search_tree .)


state 237

    (42) TYPE -> type_bitset .

    {               reduce using rule 42 (TYPE -> type_bitset .)
    VAR             reduce using rule 42 (TYPE -> type_bitset .)


state 238

    (43) TYPE -> type_set .

    {               reduce using rule 43 (TYPE -> type_set .)
    VAR             reduce using rule 43 (TYPE -> type_set .)


state 239

    (44) TYPE -> type_map .

    {               reduce using rule 44 (TYPE -> type_map .)
    VAR             reduce using rule 44 (TYPE -> type_map .)


state 240

    (45) TYPE -> type_range .

    {               reduce using rule 45 (TYPE -> type_range .)
    VAR             reduce using rule 45 (TYPE -> type_range .)


state 241

    (89) while_decl -> while expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    {               reduce using rule 89 (while_decl -> while expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 242

    (90) func_decl -> func VAR . ( def_arguments )

    (               shift and go to state 330


state 243

    (146) return_val -> type_type ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 331
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 244

    (147) return_val -> type_num ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 332
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 245

    (148) return_val -> type_bool ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 333
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 246

    (149) return_val -> type_any ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 334
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 247

    (150) return_val -> type_u64 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 335
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 248

    (151) return_val -> type_u32 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 336
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 249

    (152) return_val -> type_u16 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 337
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 250

    (153) return_val -> type_u8 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 338
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 251

    (154) return_val -> type_i64 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 339
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 252

    (155) return_val -> type_i32 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 340
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 253

    (156) return_val -> type_i16 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 341
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 254

    (157) return_val -> type_i8 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 342
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 255

    (158) return_val -> type_f32 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 343
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 256

    (159) return_val -> type_f64 ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 344
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 257

    (160) return_val -> type_str ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 345
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 258

    (161) return_val -> type_list ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 346
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 259

    (162) return_val -> type_tuple ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 347
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 260

    (163) return_val -> type_array ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 348
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 261

    (164) return_val -> type_vector ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 349
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 262

    (165) return_val -> type_dict ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 350
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 263

    (166) return_val -> type_generator ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 351
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 264

    (167) return_val -> type_linked_list ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 352
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 265

    (168) return_val -> type_doubly_linked_list ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 353
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 266

    (169) return_val -> type_deque ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 354
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 267

    (170) return_val -> type_heap ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 355
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 268

    (171) return_val -> type_fibonacci_heap ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 356
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 269

    (172) return_val -> type_tree ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 357
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 270

    (173) return_val -> type_trie ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 358
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 271

    (174) return_val -> type_stack ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 359
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 272

    (175) return_val -> type_queue ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 360
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 273

    (176) return_val -> type_binary_search_tree ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 361
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 274

    (177) return_val -> type_bitset ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 362
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 275

    (178) return_val -> type_set ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 363
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 276

    (179) return_val -> type_map ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 364
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 277

    (180) return_val -> type_range ( . arguments )
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    )               reduce using rule 186 (empty -> .)
    ,               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 365
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 278

    (58) lambda_decl -> lambda comma_separated_names . : expr

    :               shift and go to state 366


state 279

    (7) stmts -> stmts newline stmt .

    NEWLINE         reduce using rule 7 (stmts -> stmts newline stmt .)
    $end            reduce using rule 7 (stmts -> stmts newline stmt .)
    }               reduce using rule 7 (stmts -> stmts newline stmt .)


state 280

    (10) stmt -> block_stmt .

    NEWLINE         reduce using rule 10 (stmt -> block_stmt .)
    $end            reduce using rule 10 (stmt -> block_stmt .)
    }               reduce using rule 10 (stmt -> block_stmt .)


state 281

    (3) program -> newline stmts newline .
    (7) stmts -> stmts newline . stmt
    (9) stmt -> . line_stmt
    (10) stmt -> . block_stmt
    (46) line_stmt -> . return_stmt
    (47) line_stmt -> . expr
    (48) line_stmt -> . word_stmt
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . assign_stmt
    (68) block_stmt -> . block_decl { stmts }
    (73) block_stmt -> . block_decl { }
    (74) block_stmt -> . block_decl { newline }
    (59) return_stmt -> . return expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (69) word_stmt -> . break
    (70) word_stmt -> . return
    (71) word_stmt -> . continue
    (72) word_stmt -> . pass
    (60) del_stmt -> . del expr
    (65) declaration_stmt -> . TYPE comma_separated_names
    (61) assign_stmt -> . comma_separated_names = expr
    (62) assign_stmt -> . item = expr
    (63) assign_stmt -> . simple_slice = expr
    (64) assign_stmt -> . full_slice = expr
    (75) block_decl -> . for_decl
    (76) block_decl -> . if_decl
    (77) block_decl -> . else_decl
    (78) block_decl -> . elif_decl
    (79) block_decl -> . operator_decl
    (80) block_decl -> . struct_decl
    (81) block_decl -> . while_decl
    (82) block_decl -> . func_decl
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names
    (83) for_decl -> . for comma_separated_names operator_contains expr
    (84) if_decl -> . if expr
    (86) else_decl -> . else
    (85) elif_decl -> . elif expr
    (87) operator_decl -> . operator ( arguments )
    (88) struct_decl -> . struct TYPE
    (89) while_decl -> . while expr
    (90) func_decl -> . func VAR ( def_arguments )

    $end            reduce using rule 3 (program -> newline stmts newline .)
    return          shift and go to state 23
    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 70
    break           shift and go to state 75
    continue        shift and go to state 76
    pass            shift and go to state 77
    del             shift and go to state 78
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132
    for             shift and go to state 80
    if              shift and go to state 81
    else            shift and go to state 82
    elif            shift and go to state 83
    operator        shift and go to state 84
    struct          shift and go to state 85
    while           shift and go to state 86
    func            shift and go to state 87

    stmt                           shift and go to state 279
    line_stmt                      shift and go to state 7
    block_stmt                     shift and go to state 280
    return_stmt                    shift and go to state 9
    expr                           shift and go to state 10
    word_stmt                      shift and go to state 11
    del_stmt                       shift and go to state 12
    declaration_stmt               shift and go to state 13
    assign_stmt                    shift and go to state 14
    block_decl                     shift and go to state 8
    item                           shift and go to state 24
    simple_slice                   shift and go to state 25
    full_slice                     shift and go to state 26
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 74
    comma_separated_names          shift and go to state 79
    for_decl                       shift and go to state 15
    if_decl                        shift and go to state 16
    else_decl                      shift and go to state 17
    elif_decl                      shift and go to state 18
    operator_decl                  shift and go to state 19
    struct_decl                    shift and go to state 20
    while_decl                     shift and go to state 21
    func_decl                      shift and go to state 22

state 282

    (68) block_stmt -> block_decl { stmts . }
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    }               shift and go to state 367
    NEWLINE         shift and go to state 6

    newline                        shift and go to state 133

state 283

    (73) block_stmt -> block_decl { } .

    return          reduce using rule 73 (block_stmt -> block_decl { } .)
    (               reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitnot reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_not    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_reverse reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_sorted_incr reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_sorted_decr reduce using rule 73 (block_stmt -> block_decl { } .)
    VAR             reduce using rule 73 (block_stmt -> block_decl { } .)
    break           reduce using rule 73 (block_stmt -> block_decl { } .)
    continue        reduce using rule 73 (block_stmt -> block_decl { } .)
    pass            reduce using rule 73 (block_stmt -> block_decl { } .)
    del             reduce using rule 73 (block_stmt -> block_decl { } .)
    for             reduce using rule 73 (block_stmt -> block_decl { } .)
    if              reduce using rule 73 (block_stmt -> block_decl { } .)
    else            reduce using rule 73 (block_stmt -> block_decl { } .)
    elif            reduce using rule 73 (block_stmt -> block_decl { } .)
    operator        reduce using rule 73 (block_stmt -> block_decl { } .)
    struct          reduce using rule 73 (block_stmt -> block_decl { } .)
    while           reduce using rule 73 (block_stmt -> block_decl { } .)
    func            reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_add    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_sub    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_mul    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_div    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_trudiv reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_pow    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_join   reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_split  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_scan   reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_reduc  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitand reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitor  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitxor reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitshiftleft reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_bitshiftright reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_and    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_or     reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_xor    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_contains reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_incr   reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_decr   reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_outer  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_inner  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_rotate reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_apply  reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_compose reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_over   reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_map    reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_less_than reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_less_than_equals reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_greater_than reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_greater_than_equals reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_equals reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_not_equals reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_smallest reduce using rule 73 (block_stmt -> block_decl { } .)
    operator_greatest reduce using rule 73 (block_stmt -> block_decl { } .)
    FLOAT           reduce using rule 73 (block_stmt -> block_decl { } .)
    NUM             reduce using rule 73 (block_stmt -> block_decl { } .)
    STRING_3SQ      reduce using rule 73 (block_stmt -> block_decl { } .)
    STRING_3DQ      reduce using rule 73 (block_stmt -> block_decl { } .)
    STRING_SQ       reduce using rule 73 (block_stmt -> block_decl { } .)
    STRING_DQ       reduce using rule 73 (block_stmt -> block_decl { } .)
    true            reduce using rule 73 (block_stmt -> block_decl { } .)
    Null            reduce using rule 73 (block_stmt -> block_decl { } .)
    false           reduce using rule 73 (block_stmt -> block_decl { } .)
    type_type       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_num        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_bool       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_any        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_u64        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_u32        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_u16        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_u8         reduce using rule 73 (block_stmt -> block_decl { } .)
    type_i64        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_i32        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_i16        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_i8         reduce using rule 73 (block_stmt -> block_decl { } .)
    type_f32        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_f64        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_str        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_list       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_tuple      reduce using rule 73 (block_stmt -> block_decl { } .)
    type_array      reduce using rule 73 (block_stmt -> block_decl { } .)
    type_vector     reduce using rule 73 (block_stmt -> block_decl { } .)
    type_dict       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_generator  reduce using rule 73 (block_stmt -> block_decl { } .)
    type_linked_list reduce using rule 73 (block_stmt -> block_decl { } .)
    type_doubly_linked_list reduce using rule 73 (block_stmt -> block_decl { } .)
    type_deque      reduce using rule 73 (block_stmt -> block_decl { } .)
    type_heap       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_fibonacci_heap reduce using rule 73 (block_stmt -> block_decl { } .)
    type_tree       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_trie       reduce using rule 73 (block_stmt -> block_decl { } .)
    type_stack      reduce using rule 73 (block_stmt -> block_decl { } .)
    type_queue      reduce using rule 73 (block_stmt -> block_decl { } .)
    type_binary_search_tree reduce using rule 73 (block_stmt -> block_decl { } .)
    type_bitset     reduce using rule 73 (block_stmt -> block_decl { } .)
    type_set        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_map        reduce using rule 73 (block_stmt -> block_decl { } .)
    type_range      reduce using rule 73 (block_stmt -> block_decl { } .)
    lambda          reduce using rule 73 (block_stmt -> block_decl { } .)
    NEWLINE         reduce using rule 73 (block_stmt -> block_decl { } .)
    $end            reduce using rule 73 (block_stmt -> block_decl { } .)
    }               reduce using rule 73 (block_stmt -> block_decl { } .)


state 284

    (74) block_stmt -> block_decl { newline . }

    }               shift and go to state 368


state 285

    (104) expr -> expr operator_add expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 104 (expr -> expr operator_add expr .)
    operator_sub    reduce using rule 104 (expr -> expr operator_add expr .)
    operator_join   reduce using rule 104 (expr -> expr operator_add expr .)
    operator_split  reduce using rule 104 (expr -> expr operator_add expr .)
    operator_bitand reduce using rule 104 (expr -> expr operator_add expr .)
    operator_bitor  reduce using rule 104 (expr -> expr operator_add expr .)
    operator_bitxor reduce using rule 104 (expr -> expr operator_add expr .)
    operator_bitshiftleft reduce using rule 104 (expr -> expr operator_add expr .)
    operator_bitshiftright reduce using rule 104 (expr -> expr operator_add expr .)
    operator_and    reduce using rule 104 (expr -> expr operator_add expr .)
    operator_or     reduce using rule 104 (expr -> expr operator_add expr .)
    operator_xor    reduce using rule 104 (expr -> expr operator_add expr .)
    operator_contains reduce using rule 104 (expr -> expr operator_add expr .)
    operator_outer  reduce using rule 104 (expr -> expr operator_add expr .)
    operator_less_than reduce using rule 104 (expr -> expr operator_add expr .)
    operator_less_than_equals reduce using rule 104 (expr -> expr operator_add expr .)
    operator_greater_than reduce using rule 104 (expr -> expr operator_add expr .)
    operator_greater_than_equals reduce using rule 104 (expr -> expr operator_add expr .)
    operator_equals reduce using rule 104 (expr -> expr operator_add expr .)
    operator_not_equals reduce using rule 104 (expr -> expr operator_add expr .)
    operator_smallest reduce using rule 104 (expr -> expr operator_add expr .)
    operator_greatest reduce using rule 104 (expr -> expr operator_add expr .)
    [               reduce using rule 104 (expr -> expr operator_add expr .)
    operator_not    reduce using rule 104 (expr -> expr operator_add expr .)
    operator_inner  reduce using rule 104 (expr -> expr operator_add expr .)
    NEWLINE         reduce using rule 104 (expr -> expr operator_add expr .)
    $end            reduce using rule 104 (expr -> expr operator_add expr .)
    }               reduce using rule 104 (expr -> expr operator_add expr .)
    )               reduce using rule 104 (expr -> expr operator_add expr .)
    {               reduce using rule 104 (expr -> expr operator_add expr .)
    ]               reduce using rule 104 (expr -> expr operator_add expr .)
    :               reduce using rule 104 (expr -> expr operator_add expr .)
    ,               reduce using rule 104 (expr -> expr operator_add expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_div    [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_trudiv [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_pow    [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_incr   [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_decr   [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_rotate [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_apply  [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_compose [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_over   [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_map    [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_scan   [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_reduc  [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_bitnot [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_reverse [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_sorted_incr [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_sorted_decr [ reduce using rule 104 (expr -> expr operator_add expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 286

    (105) expr -> expr operator_sub expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_sub    reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_join   reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_split  reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_bitand reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_bitor  reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_bitxor reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_bitshiftleft reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_bitshiftright reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_and    reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_or     reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_xor    reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_contains reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_outer  reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_less_than reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_less_than_equals reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_greater_than reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_greater_than_equals reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_equals reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_not_equals reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_smallest reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_greatest reduce using rule 105 (expr -> expr operator_sub expr .)
    [               reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_not    reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_inner  reduce using rule 105 (expr -> expr operator_sub expr .)
    NEWLINE         reduce using rule 105 (expr -> expr operator_sub expr .)
    $end            reduce using rule 105 (expr -> expr operator_sub expr .)
    }               reduce using rule 105 (expr -> expr operator_sub expr .)
    )               reduce using rule 105 (expr -> expr operator_sub expr .)
    {               reduce using rule 105 (expr -> expr operator_sub expr .)
    ]               reduce using rule 105 (expr -> expr operator_sub expr .)
    :               reduce using rule 105 (expr -> expr operator_sub expr .)
    ,               reduce using rule 105 (expr -> expr operator_sub expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_div    [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_trudiv [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_pow    [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_incr   [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_decr   [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_rotate [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_apply  [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_compose [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_over   [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_map    [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_scan   [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_reduc  [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_bitnot [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_reverse [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_incr [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_decr [ reduce using rule 105 (expr -> expr operator_sub expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 287

    (106) expr -> expr operator_mul expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_sub    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_mul    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_div    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_trudiv reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_join   reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_split  reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_bitand reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_bitor  reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_bitxor reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_bitshiftleft reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_bitshiftright reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_and    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_or     reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_xor    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_contains reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_outer  reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_less_than reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_less_than_equals reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_greater_than reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_greater_than_equals reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_equals reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_not_equals reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_smallest reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_greatest reduce using rule 106 (expr -> expr operator_mul expr .)
    [               reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_not    reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_inner  reduce using rule 106 (expr -> expr operator_mul expr .)
    NEWLINE         reduce using rule 106 (expr -> expr operator_mul expr .)
    $end            reduce using rule 106 (expr -> expr operator_mul expr .)
    }               reduce using rule 106 (expr -> expr operator_mul expr .)
    )               reduce using rule 106 (expr -> expr operator_mul expr .)
    {               reduce using rule 106 (expr -> expr operator_mul expr .)
    ]               reduce using rule 106 (expr -> expr operator_mul expr .)
    :               reduce using rule 106 (expr -> expr operator_mul expr .)
    ,               reduce using rule 106 (expr -> expr operator_mul expr .)
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_pow    [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_incr   [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_decr   [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_rotate [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_apply  [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_compose [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_over   [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_map    [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_scan   [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_reduc  [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_bitnot [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_reverse [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_incr [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_decr [ reduce using rule 106 (expr -> expr operator_mul expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 288

    (107) expr -> expr operator_div expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_sub    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_mul    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_div    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_trudiv reduce using rule 107 (expr -> expr operator_div expr .)
    operator_join   reduce using rule 107 (expr -> expr operator_div expr .)
    operator_split  reduce using rule 107 (expr -> expr operator_div expr .)
    operator_bitand reduce using rule 107 (expr -> expr operator_div expr .)
    operator_bitor  reduce using rule 107 (expr -> expr operator_div expr .)
    operator_bitxor reduce using rule 107 (expr -> expr operator_div expr .)
    operator_bitshiftleft reduce using rule 107 (expr -> expr operator_div expr .)
    operator_bitshiftright reduce using rule 107 (expr -> expr operator_div expr .)
    operator_and    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_or     reduce using rule 107 (expr -> expr operator_div expr .)
    operator_xor    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_contains reduce using rule 107 (expr -> expr operator_div expr .)
    operator_outer  reduce using rule 107 (expr -> expr operator_div expr .)
    operator_less_than reduce using rule 107 (expr -> expr operator_div expr .)
    operator_less_than_equals reduce using rule 107 (expr -> expr operator_div expr .)
    operator_greater_than reduce using rule 107 (expr -> expr operator_div expr .)
    operator_greater_than_equals reduce using rule 107 (expr -> expr operator_div expr .)
    operator_equals reduce using rule 107 (expr -> expr operator_div expr .)
    operator_not_equals reduce using rule 107 (expr -> expr operator_div expr .)
    operator_smallest reduce using rule 107 (expr -> expr operator_div expr .)
    operator_greatest reduce using rule 107 (expr -> expr operator_div expr .)
    [               reduce using rule 107 (expr -> expr operator_div expr .)
    operator_not    reduce using rule 107 (expr -> expr operator_div expr .)
    operator_inner  reduce using rule 107 (expr -> expr operator_div expr .)
    NEWLINE         reduce using rule 107 (expr -> expr operator_div expr .)
    $end            reduce using rule 107 (expr -> expr operator_div expr .)
    }               reduce using rule 107 (expr -> expr operator_div expr .)
    )               reduce using rule 107 (expr -> expr operator_div expr .)
    {               reduce using rule 107 (expr -> expr operator_div expr .)
    ]               reduce using rule 107 (expr -> expr operator_div expr .)
    :               reduce using rule 107 (expr -> expr operator_div expr .)
    ,               reduce using rule 107 (expr -> expr operator_div expr .)
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_pow    [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_incr   [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_decr   [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_rotate [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_apply  [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_compose [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_over   [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_map    [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_scan   [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_reduc  [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_bitnot [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_reverse [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_sorted_incr [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_sorted_decr [ reduce using rule 107 (expr -> expr operator_div expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 289

    (108) expr -> expr operator_trudiv expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_sub    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_mul    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_div    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_trudiv reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_join   reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_split  reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_bitand reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_bitor  reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_bitxor reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_bitshiftleft reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_bitshiftright reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_and    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_or     reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_xor    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_contains reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_outer  reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_less_than reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_less_than_equals reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_greater_than reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_greater_than_equals reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_equals reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_not_equals reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_smallest reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_greatest reduce using rule 108 (expr -> expr operator_trudiv expr .)
    [               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_not    reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_inner  reduce using rule 108 (expr -> expr operator_trudiv expr .)
    NEWLINE         reduce using rule 108 (expr -> expr operator_trudiv expr .)
    $end            reduce using rule 108 (expr -> expr operator_trudiv expr .)
    }               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    )               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    {               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    ]               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    :               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    ,               reduce using rule 108 (expr -> expr operator_trudiv expr .)
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_pow    [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_incr   [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_decr   [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_rotate [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_apply  [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_compose [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_over   [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_map    [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_scan   [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_reduc  [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitnot [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_reverse [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_incr [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_decr [ reduce using rule 108 (expr -> expr operator_trudiv expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 290

    (109) expr -> expr operator_pow expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_sub    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_mul    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_div    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_trudiv reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_pow    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_join   reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_split  reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_bitand reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_bitor  reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_bitxor reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_bitshiftleft reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_bitshiftright reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_and    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_or     reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_xor    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_contains reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_outer  reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_less_than reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_less_than_equals reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_greater_than reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_greater_than_equals reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_equals reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_not_equals reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_smallest reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_greatest reduce using rule 109 (expr -> expr operator_pow expr .)
    [               reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_not    reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_inner  reduce using rule 109 (expr -> expr operator_pow expr .)
    NEWLINE         reduce using rule 109 (expr -> expr operator_pow expr .)
    $end            reduce using rule 109 (expr -> expr operator_pow expr .)
    }               reduce using rule 109 (expr -> expr operator_pow expr .)
    )               reduce using rule 109 (expr -> expr operator_pow expr .)
    {               reduce using rule 109 (expr -> expr operator_pow expr .)
    ]               reduce using rule 109 (expr -> expr operator_pow expr .)
    :               reduce using rule 109 (expr -> expr operator_pow expr .)
    ,               reduce using rule 109 (expr -> expr operator_pow expr .)
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_incr   [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_decr   [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_rotate [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_apply  [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_compose [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_over   [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_map    [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_scan   [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_reduc  [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_bitnot [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_reverse [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_incr [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_decr [ reduce using rule 109 (expr -> expr operator_pow expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 291

    (110) expr -> expr operator_join expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 110 (expr -> expr operator_join expr .)
    operator_sub    reduce using rule 110 (expr -> expr operator_join expr .)
    operator_join   reduce using rule 110 (expr -> expr operator_join expr .)
    operator_split  reduce using rule 110 (expr -> expr operator_join expr .)
    operator_bitand reduce using rule 110 (expr -> expr operator_join expr .)
    operator_bitor  reduce using rule 110 (expr -> expr operator_join expr .)
    operator_bitxor reduce using rule 110 (expr -> expr operator_join expr .)
    operator_bitshiftleft reduce using rule 110 (expr -> expr operator_join expr .)
    operator_bitshiftright reduce using rule 110 (expr -> expr operator_join expr .)
    operator_and    reduce using rule 110 (expr -> expr operator_join expr .)
    operator_or     reduce using rule 110 (expr -> expr operator_join expr .)
    operator_xor    reduce using rule 110 (expr -> expr operator_join expr .)
    operator_contains reduce using rule 110 (expr -> expr operator_join expr .)
    operator_outer  reduce using rule 110 (expr -> expr operator_join expr .)
    operator_less_than reduce using rule 110 (expr -> expr operator_join expr .)
    operator_less_than_equals reduce using rule 110 (expr -> expr operator_join expr .)
    operator_greater_than reduce using rule 110 (expr -> expr operator_join expr .)
    operator_greater_than_equals reduce using rule 110 (expr -> expr operator_join expr .)
    operator_equals reduce using rule 110 (expr -> expr operator_join expr .)
    operator_not_equals reduce using rule 110 (expr -> expr operator_join expr .)
    operator_smallest reduce using rule 110 (expr -> expr operator_join expr .)
    operator_greatest reduce using rule 110 (expr -> expr operator_join expr .)
    [               reduce using rule 110 (expr -> expr operator_join expr .)
    operator_not    reduce using rule 110 (expr -> expr operator_join expr .)
    operator_inner  reduce using rule 110 (expr -> expr operator_join expr .)
    NEWLINE         reduce using rule 110 (expr -> expr operator_join expr .)
    $end            reduce using rule 110 (expr -> expr operator_join expr .)
    }               reduce using rule 110 (expr -> expr operator_join expr .)
    )               reduce using rule 110 (expr -> expr operator_join expr .)
    {               reduce using rule 110 (expr -> expr operator_join expr .)
    ]               reduce using rule 110 (expr -> expr operator_join expr .)
    :               reduce using rule 110 (expr -> expr operator_join expr .)
    ,               reduce using rule 110 (expr -> expr operator_join expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_div    [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_trudiv [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_pow    [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_incr   [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_decr   [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_rotate [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_apply  [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_compose [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_over   [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_map    [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_scan   [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_reduc  [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_bitnot [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_reverse [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_sorted_incr [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_sorted_decr [ reduce using rule 110 (expr -> expr operator_join expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 292

    (111) expr -> expr operator_split expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 111 (expr -> expr operator_split expr .)
    operator_sub    reduce using rule 111 (expr -> expr operator_split expr .)
    operator_join   reduce using rule 111 (expr -> expr operator_split expr .)
    operator_split  reduce using rule 111 (expr -> expr operator_split expr .)
    operator_bitand reduce using rule 111 (expr -> expr operator_split expr .)
    operator_bitor  reduce using rule 111 (expr -> expr operator_split expr .)
    operator_bitxor reduce using rule 111 (expr -> expr operator_split expr .)
    operator_bitshiftleft reduce using rule 111 (expr -> expr operator_split expr .)
    operator_bitshiftright reduce using rule 111 (expr -> expr operator_split expr .)
    operator_and    reduce using rule 111 (expr -> expr operator_split expr .)
    operator_or     reduce using rule 111 (expr -> expr operator_split expr .)
    operator_xor    reduce using rule 111 (expr -> expr operator_split expr .)
    operator_contains reduce using rule 111 (expr -> expr operator_split expr .)
    operator_outer  reduce using rule 111 (expr -> expr operator_split expr .)
    operator_less_than reduce using rule 111 (expr -> expr operator_split expr .)
    operator_less_than_equals reduce using rule 111 (expr -> expr operator_split expr .)
    operator_greater_than reduce using rule 111 (expr -> expr operator_split expr .)
    operator_greater_than_equals reduce using rule 111 (expr -> expr operator_split expr .)
    operator_equals reduce using rule 111 (expr -> expr operator_split expr .)
    operator_not_equals reduce using rule 111 (expr -> expr operator_split expr .)
    operator_smallest reduce using rule 111 (expr -> expr operator_split expr .)
    operator_greatest reduce using rule 111 (expr -> expr operator_split expr .)
    [               reduce using rule 111 (expr -> expr operator_split expr .)
    operator_not    reduce using rule 111 (expr -> expr operator_split expr .)
    operator_inner  reduce using rule 111 (expr -> expr operator_split expr .)
    NEWLINE         reduce using rule 111 (expr -> expr operator_split expr .)
    $end            reduce using rule 111 (expr -> expr operator_split expr .)
    }               reduce using rule 111 (expr -> expr operator_split expr .)
    )               reduce using rule 111 (expr -> expr operator_split expr .)
    {               reduce using rule 111 (expr -> expr operator_split expr .)
    ]               reduce using rule 111 (expr -> expr operator_split expr .)
    :               reduce using rule 111 (expr -> expr operator_split expr .)
    ,               reduce using rule 111 (expr -> expr operator_split expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_div    [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_trudiv [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_pow    [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_incr   [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_decr   [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_rotate [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_apply  [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_compose [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_over   [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_map    [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_scan   [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_reduc  [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_bitnot [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_reverse [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_sorted_incr [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_sorted_decr [ reduce using rule 111 (expr -> expr operator_split expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 293

    (114) expr -> expr operator_bitand expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_sub    reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_join   reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_split  reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_bitand reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_bitor  reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_bitxor reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_bitshiftleft reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_bitshiftright reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_and    reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_or     reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_xor    reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_contains reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_outer  reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_less_than reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_less_than_equals reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_greater_than reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_greater_than_equals reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_equals reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_not_equals reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_smallest reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_greatest reduce using rule 114 (expr -> expr operator_bitand expr .)
    [               reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_not    reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_inner  reduce using rule 114 (expr -> expr operator_bitand expr .)
    NEWLINE         reduce using rule 114 (expr -> expr operator_bitand expr .)
    $end            reduce using rule 114 (expr -> expr operator_bitand expr .)
    }               reduce using rule 114 (expr -> expr operator_bitand expr .)
    )               reduce using rule 114 (expr -> expr operator_bitand expr .)
    {               reduce using rule 114 (expr -> expr operator_bitand expr .)
    ]               reduce using rule 114 (expr -> expr operator_bitand expr .)
    :               reduce using rule 114 (expr -> expr operator_bitand expr .)
    ,               reduce using rule 114 (expr -> expr operator_bitand expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_div    [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_trudiv [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_pow    [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_incr   [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_decr   [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_rotate [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_apply  [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_compose [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_over   [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_map    [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_scan   [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_reduc  [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_bitnot [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_reverse [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_incr [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_decr [ reduce using rule 114 (expr -> expr operator_bitand expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 294

    (115) expr -> expr operator_bitor expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_sub    reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_join   reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_split  reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_bitand reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_bitor  reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_bitxor reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_bitshiftleft reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_bitshiftright reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_and    reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_or     reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_xor    reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_contains reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_outer  reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_less_than reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_less_than_equals reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_greater_than reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_greater_than_equals reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_equals reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_not_equals reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_smallest reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_greatest reduce using rule 115 (expr -> expr operator_bitor expr .)
    [               reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_not    reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_inner  reduce using rule 115 (expr -> expr operator_bitor expr .)
    NEWLINE         reduce using rule 115 (expr -> expr operator_bitor expr .)
    $end            reduce using rule 115 (expr -> expr operator_bitor expr .)
    }               reduce using rule 115 (expr -> expr operator_bitor expr .)
    )               reduce using rule 115 (expr -> expr operator_bitor expr .)
    {               reduce using rule 115 (expr -> expr operator_bitor expr .)
    ]               reduce using rule 115 (expr -> expr operator_bitor expr .)
    :               reduce using rule 115 (expr -> expr operator_bitor expr .)
    ,               reduce using rule 115 (expr -> expr operator_bitor expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_div    [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_trudiv [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_pow    [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_incr   [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_decr   [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_rotate [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_apply  [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_compose [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_over   [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_map    [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_scan   [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_reduc  [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_bitnot [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_reverse [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_incr [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_decr [ reduce using rule 115 (expr -> expr operator_bitor expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 295

    (116) expr -> expr operator_bitxor expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_sub    reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_join   reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_split  reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_bitand reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_bitor  reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_bitxor reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_bitshiftleft reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_bitshiftright reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_and    reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_or     reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_xor    reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_contains reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_outer  reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_less_than reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_less_than_equals reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_greater_than reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_greater_than_equals reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_equals reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_not_equals reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_smallest reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_greatest reduce using rule 116 (expr -> expr operator_bitxor expr .)
    [               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_not    reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_inner  reduce using rule 116 (expr -> expr operator_bitxor expr .)
    NEWLINE         reduce using rule 116 (expr -> expr operator_bitxor expr .)
    $end            reduce using rule 116 (expr -> expr operator_bitxor expr .)
    }               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    )               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    {               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    ]               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    :               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    ,               reduce using rule 116 (expr -> expr operator_bitxor expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_div    [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_trudiv [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_pow    [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_incr   [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_decr   [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_rotate [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_apply  [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_compose [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_over   [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_map    [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_scan   [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_reduc  [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitnot [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_reverse [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_incr [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_decr [ reduce using rule 116 (expr -> expr operator_bitxor expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 296

    (117) expr -> expr operator_bitshiftleft expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_sub    reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_join   reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_split  reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_bitand reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_bitor  reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_bitxor reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftleft reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftright reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_and    reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_or     reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_xor    reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_contains reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_outer  reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than_equals reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than_equals reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_equals reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_not_equals reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_smallest reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_greatest reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    [               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_not    reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_inner  reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    NEWLINE         reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    $end            reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    }               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    )               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    {               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    ]               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    :               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    ,               reduce using rule 117 (expr -> expr operator_bitshiftleft expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_div    [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_trudiv [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_pow    [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_incr   [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_decr   [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_rotate [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_apply  [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_compose [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_over   [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_map    [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_scan   [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reduc  [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitnot [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reverse [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_incr [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_decr [ reduce using rule 117 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 297

    (118) expr -> expr operator_bitshiftright expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_sub    reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_join   reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_split  reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_bitand reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_bitor  reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_bitxor reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftleft reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftright reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_and    reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_or     reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_xor    reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_contains reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_outer  reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_less_than reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_less_than_equals reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than_equals reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_equals reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_not_equals reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_smallest reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_greatest reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    [               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_not    reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_inner  reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    NEWLINE         reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    $end            reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    }               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    )               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    {               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    ]               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    :               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    ,               reduce using rule 118 (expr -> expr operator_bitshiftright expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_div    [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_trudiv [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_pow    [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_incr   [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_decr   [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_rotate [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_apply  [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_compose [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_over   [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_map    [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_scan   [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reduc  [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitnot [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reverse [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_incr [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_decr [ reduce using rule 118 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 298

    (119) expr -> expr operator_and expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 119 (expr -> expr operator_and expr .)
    operator_or     reduce using rule 119 (expr -> expr operator_and expr .)
    operator_xor    reduce using rule 119 (expr -> expr operator_and expr .)
    operator_contains reduce using rule 119 (expr -> expr operator_and expr .)
    operator_less_than reduce using rule 119 (expr -> expr operator_and expr .)
    operator_less_than_equals reduce using rule 119 (expr -> expr operator_and expr .)
    operator_greater_than reduce using rule 119 (expr -> expr operator_and expr .)
    operator_greater_than_equals reduce using rule 119 (expr -> expr operator_and expr .)
    operator_equals reduce using rule 119 (expr -> expr operator_and expr .)
    operator_not_equals reduce using rule 119 (expr -> expr operator_and expr .)
    operator_smallest reduce using rule 119 (expr -> expr operator_and expr .)
    operator_greatest reduce using rule 119 (expr -> expr operator_and expr .)
    [               reduce using rule 119 (expr -> expr operator_and expr .)
    operator_not    reduce using rule 119 (expr -> expr operator_and expr .)
    NEWLINE         reduce using rule 119 (expr -> expr operator_and expr .)
    $end            reduce using rule 119 (expr -> expr operator_and expr .)
    }               reduce using rule 119 (expr -> expr operator_and expr .)
    )               reduce using rule 119 (expr -> expr operator_and expr .)
    {               reduce using rule 119 (expr -> expr operator_and expr .)
    ]               reduce using rule 119 (expr -> expr operator_and expr .)
    :               reduce using rule 119 (expr -> expr operator_and expr .)
    ,               reduce using rule 119 (expr -> expr operator_and expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_sub    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_mul    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_div    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_trudiv [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_pow    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_join   [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_split  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitand [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitor  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitxor [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftleft [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftright [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_incr   [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_decr   [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_outer  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_rotate [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_apply  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_compose [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_over   [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_map    [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_scan   [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_reduc  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_bitnot [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_inner  [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_reverse [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_sorted_incr [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_sorted_decr [ reduce using rule 119 (expr -> expr operator_and expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 299

    (120) expr -> expr operator_or expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 120 (expr -> expr operator_or expr .)
    operator_or     reduce using rule 120 (expr -> expr operator_or expr .)
    operator_xor    reduce using rule 120 (expr -> expr operator_or expr .)
    operator_contains reduce using rule 120 (expr -> expr operator_or expr .)
    operator_less_than reduce using rule 120 (expr -> expr operator_or expr .)
    operator_less_than_equals reduce using rule 120 (expr -> expr operator_or expr .)
    operator_greater_than reduce using rule 120 (expr -> expr operator_or expr .)
    operator_greater_than_equals reduce using rule 120 (expr -> expr operator_or expr .)
    operator_equals reduce using rule 120 (expr -> expr operator_or expr .)
    operator_not_equals reduce using rule 120 (expr -> expr operator_or expr .)
    operator_smallest reduce using rule 120 (expr -> expr operator_or expr .)
    operator_greatest reduce using rule 120 (expr -> expr operator_or expr .)
    [               reduce using rule 120 (expr -> expr operator_or expr .)
    operator_not    reduce using rule 120 (expr -> expr operator_or expr .)
    NEWLINE         reduce using rule 120 (expr -> expr operator_or expr .)
    $end            reduce using rule 120 (expr -> expr operator_or expr .)
    }               reduce using rule 120 (expr -> expr operator_or expr .)
    )               reduce using rule 120 (expr -> expr operator_or expr .)
    {               reduce using rule 120 (expr -> expr operator_or expr .)
    ]               reduce using rule 120 (expr -> expr operator_or expr .)
    :               reduce using rule 120 (expr -> expr operator_or expr .)
    ,               reduce using rule 120 (expr -> expr operator_or expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_sub    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_mul    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_div    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_trudiv [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_pow    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_join   [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_split  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitand [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitor  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitxor [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftleft [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftright [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_incr   [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_decr   [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_outer  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_rotate [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_apply  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_compose [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_over   [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_map    [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_scan   [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_reduc  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_bitnot [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_inner  [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_reverse [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_sorted_incr [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_sorted_decr [ reduce using rule 120 (expr -> expr operator_or expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 300

    (121) expr -> expr operator_xor expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_or     reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_xor    reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_contains reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_less_than reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_less_than_equals reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_greater_than reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_greater_than_equals reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_equals reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_not_equals reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_smallest reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_greatest reduce using rule 121 (expr -> expr operator_xor expr .)
    [               reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_not    reduce using rule 121 (expr -> expr operator_xor expr .)
    NEWLINE         reduce using rule 121 (expr -> expr operator_xor expr .)
    $end            reduce using rule 121 (expr -> expr operator_xor expr .)
    }               reduce using rule 121 (expr -> expr operator_xor expr .)
    )               reduce using rule 121 (expr -> expr operator_xor expr .)
    {               reduce using rule 121 (expr -> expr operator_xor expr .)
    ]               reduce using rule 121 (expr -> expr operator_xor expr .)
    :               reduce using rule 121 (expr -> expr operator_xor expr .)
    ,               reduce using rule 121 (expr -> expr operator_xor expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_sub    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_mul    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_div    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_trudiv [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_pow    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_join   [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_split  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitand [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitor  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitxor [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftright [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_incr   [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_decr   [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_outer  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_rotate [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_apply  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_compose [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_over   [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_map    [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_scan   [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_reduc  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_bitnot [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_inner  [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_reverse [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_incr [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_decr [ reduce using rule 121 (expr -> expr operator_xor expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 301

    (122) expr -> expr operator_contains expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_or     reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_xor    reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_contains reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_less_than reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_less_than_equals reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_greater_than reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_greater_than_equals reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_equals reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_not_equals reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_smallest reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_greatest reduce using rule 122 (expr -> expr operator_contains expr .)
    [               reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_not    reduce using rule 122 (expr -> expr operator_contains expr .)
    NEWLINE         reduce using rule 122 (expr -> expr operator_contains expr .)
    $end            reduce using rule 122 (expr -> expr operator_contains expr .)
    }               reduce using rule 122 (expr -> expr operator_contains expr .)
    )               reduce using rule 122 (expr -> expr operator_contains expr .)
    {               reduce using rule 122 (expr -> expr operator_contains expr .)
    ]               reduce using rule 122 (expr -> expr operator_contains expr .)
    :               reduce using rule 122 (expr -> expr operator_contains expr .)
    ,               reduce using rule 122 (expr -> expr operator_contains expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_sub    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_mul    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_div    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_trudiv [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_pow    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_join   [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_split  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitand [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitor  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitxor [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftleft [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftright [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_incr   [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_decr   [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_outer  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_rotate [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_apply  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_compose [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_over   [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_map    [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_scan   [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_reduc  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_bitnot [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_inner  [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_reverse [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_incr [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_decr [ reduce using rule 122 (expr -> expr operator_contains expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 302

    (127) expr -> expr operator_outer OPERATOR . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 369
    OPERATOR                       shift and go to state 36
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 303

    (128) expr -> expr OPERATOR operator_inner . OPERATOR expr
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69

    OPERATOR                       shift and go to state 370

state 304

    (130) expr -> expr operator_rotate expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_sub    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_mul    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_div    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_trudiv reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_pow    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_join   reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_split  reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_bitand reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_bitor  reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_bitxor reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_bitshiftleft reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_bitshiftright reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_and    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_or     reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_xor    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_contains reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_outer  reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_rotate reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_apply  reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_less_than reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_less_than_equals reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_greater_than reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_greater_than_equals reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_equals reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_not_equals reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_smallest reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_greatest reduce using rule 130 (expr -> expr operator_rotate expr .)
    [               reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_scan   reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_reduc  reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_not    reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_inner  reduce using rule 130 (expr -> expr operator_rotate expr .)
    NEWLINE         reduce using rule 130 (expr -> expr operator_rotate expr .)
    $end            reduce using rule 130 (expr -> expr operator_rotate expr .)
    }               reduce using rule 130 (expr -> expr operator_rotate expr .)
    )               reduce using rule 130 (expr -> expr operator_rotate expr .)
    {               reduce using rule 130 (expr -> expr operator_rotate expr .)
    ]               reduce using rule 130 (expr -> expr operator_rotate expr .)
    :               reduce using rule 130 (expr -> expr operator_rotate expr .)
    ,               reduce using rule 130 (expr -> expr operator_rotate expr .)
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_incr   [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_decr   [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_compose [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_over   [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_map    [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_bitnot [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_reverse [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_incr [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_decr [ reduce using rule 130 (expr -> expr operator_rotate expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 305

    (131) expr -> expr operator_apply expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_sub    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_mul    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_div    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_trudiv reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_pow    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_join   reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_split  reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_bitand reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_bitor  reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_bitxor reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_bitshiftleft reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_bitshiftright reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_and    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_or     reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_xor    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_contains reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_outer  reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_rotate reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_apply  reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_less_than reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_less_than_equals reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_greater_than reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_greater_than_equals reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_equals reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_not_equals reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_smallest reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_greatest reduce using rule 131 (expr -> expr operator_apply expr .)
    [               reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_scan   reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_reduc  reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_not    reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_inner  reduce using rule 131 (expr -> expr operator_apply expr .)
    NEWLINE         reduce using rule 131 (expr -> expr operator_apply expr .)
    $end            reduce using rule 131 (expr -> expr operator_apply expr .)
    }               reduce using rule 131 (expr -> expr operator_apply expr .)
    )               reduce using rule 131 (expr -> expr operator_apply expr .)
    {               reduce using rule 131 (expr -> expr operator_apply expr .)
    ]               reduce using rule 131 (expr -> expr operator_apply expr .)
    :               reduce using rule 131 (expr -> expr operator_apply expr .)
    ,               reduce using rule 131 (expr -> expr operator_apply expr .)
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_incr   [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_decr   [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_compose [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_over   [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_map    [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_bitnot [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_reverse [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_incr [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_decr [ reduce using rule 131 (expr -> expr operator_apply expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 306

    (132) expr -> expr operator_compose expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_sub    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_mul    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_div    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_trudiv reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_pow    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_join   reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_split  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitand reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitor  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitxor reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitshiftleft reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitshiftright reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_and    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_or     reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_xor    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_contains reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_incr   reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_decr   reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_outer  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_rotate reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_apply  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_compose reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_over   reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_map    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_less_than reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_less_than_equals reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_greater_than reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_greater_than_equals reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_equals reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_not_equals reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_smallest reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_greatest reduce using rule 132 (expr -> expr operator_compose expr .)
    [               reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_scan   reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_reduc  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_bitnot reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_not    reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_inner  reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_reverse reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_sorted_incr reduce using rule 132 (expr -> expr operator_compose expr .)
    operator_sorted_decr reduce using rule 132 (expr -> expr operator_compose expr .)
    NEWLINE         reduce using rule 132 (expr -> expr operator_compose expr .)
    $end            reduce using rule 132 (expr -> expr operator_compose expr .)
    }               reduce using rule 132 (expr -> expr operator_compose expr .)
    )               reduce using rule 132 (expr -> expr operator_compose expr .)
    {               reduce using rule 132 (expr -> expr operator_compose expr .)
    ]               reduce using rule 132 (expr -> expr operator_compose expr .)
    :               reduce using rule 132 (expr -> expr operator_compose expr .)
    ,               reduce using rule 132 (expr -> expr operator_compose expr .)

  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_compose [ shift and go to state 161 ]
  ! operator_over   [ shift and go to state 162 ]
  ! operator_map    [ shift and go to state 163 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 307

    (133) expr -> expr operator_over expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_sub    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_mul    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_div    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_trudiv reduce using rule 133 (expr -> expr operator_over expr .)
    operator_pow    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_join   reduce using rule 133 (expr -> expr operator_over expr .)
    operator_split  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitand reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitor  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitxor reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitshiftleft reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitshiftright reduce using rule 133 (expr -> expr operator_over expr .)
    operator_and    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_or     reduce using rule 133 (expr -> expr operator_over expr .)
    operator_xor    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_contains reduce using rule 133 (expr -> expr operator_over expr .)
    operator_incr   reduce using rule 133 (expr -> expr operator_over expr .)
    operator_decr   reduce using rule 133 (expr -> expr operator_over expr .)
    operator_outer  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_rotate reduce using rule 133 (expr -> expr operator_over expr .)
    operator_apply  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_over   reduce using rule 133 (expr -> expr operator_over expr .)
    operator_map    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_less_than reduce using rule 133 (expr -> expr operator_over expr .)
    operator_less_than_equals reduce using rule 133 (expr -> expr operator_over expr .)
    operator_greater_than reduce using rule 133 (expr -> expr operator_over expr .)
    operator_greater_than_equals reduce using rule 133 (expr -> expr operator_over expr .)
    operator_equals reduce using rule 133 (expr -> expr operator_over expr .)
    operator_not_equals reduce using rule 133 (expr -> expr operator_over expr .)
    operator_smallest reduce using rule 133 (expr -> expr operator_over expr .)
    operator_greatest reduce using rule 133 (expr -> expr operator_over expr .)
    [               reduce using rule 133 (expr -> expr operator_over expr .)
    operator_scan   reduce using rule 133 (expr -> expr operator_over expr .)
    operator_reduc  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_bitnot reduce using rule 133 (expr -> expr operator_over expr .)
    operator_not    reduce using rule 133 (expr -> expr operator_over expr .)
    operator_inner  reduce using rule 133 (expr -> expr operator_over expr .)
    operator_reverse reduce using rule 133 (expr -> expr operator_over expr .)
    operator_sorted_incr reduce using rule 133 (expr -> expr operator_over expr .)
    operator_sorted_decr reduce using rule 133 (expr -> expr operator_over expr .)
    NEWLINE         reduce using rule 133 (expr -> expr operator_over expr .)
    $end            reduce using rule 133 (expr -> expr operator_over expr .)
    }               reduce using rule 133 (expr -> expr operator_over expr .)
    )               reduce using rule 133 (expr -> expr operator_over expr .)
    {               reduce using rule 133 (expr -> expr operator_over expr .)
    ]               reduce using rule 133 (expr -> expr operator_over expr .)
    :               reduce using rule 133 (expr -> expr operator_over expr .)
    ,               reduce using rule 133 (expr -> expr operator_over expr .)
    operator_compose shift and go to state 161

  ! operator_compose [ reduce using rule 133 (expr -> expr operator_over expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_incr   [ shift and go to state 155 ]
  ! operator_decr   [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_over   [ shift and go to state 162 ]
  ! operator_map    [ shift and go to state 163 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_bitnot [ shift and go to state 173 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]
  ! operator_reverse [ shift and go to state 175 ]
  ! operator_sorted_incr [ shift and go to state 176 ]
  ! operator_sorted_decr [ shift and go to state 177 ]

    OPERATOR                       shift and go to state 158

state 308

    (137) expr -> expr operator_less_than expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_or     reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_xor    reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_contains reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_less_than reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_less_than_equals reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_greater_than reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_greater_than_equals reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_equals reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_not_equals reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_smallest reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_greatest reduce using rule 137 (expr -> expr operator_less_than expr .)
    [               reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_not    reduce using rule 137 (expr -> expr operator_less_than expr .)
    NEWLINE         reduce using rule 137 (expr -> expr operator_less_than expr .)
    $end            reduce using rule 137 (expr -> expr operator_less_than expr .)
    }               reduce using rule 137 (expr -> expr operator_less_than expr .)
    )               reduce using rule 137 (expr -> expr operator_less_than expr .)
    {               reduce using rule 137 (expr -> expr operator_less_than expr .)
    ]               reduce using rule 137 (expr -> expr operator_less_than expr .)
    :               reduce using rule 137 (expr -> expr operator_less_than expr .)
    ,               reduce using rule 137 (expr -> expr operator_less_than expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_sub    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_mul    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_div    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_trudiv [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_pow    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_join   [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_split  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitand [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitor  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitxor [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_incr   [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_decr   [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_outer  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_rotate [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_apply  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_compose [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_over   [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_map    [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_scan   [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_reduc  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_bitnot [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_inner  [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_reverse [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 137 (expr -> expr operator_less_than expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 309

    (138) expr -> expr operator_less_than_equals expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_or     reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_xor    reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_contains reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_less_than reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_less_than_equals reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than_equals reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_equals reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_not_equals reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_smallest reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_greatest reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    [               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_not    reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    NEWLINE         reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    $end            reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    }               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    )               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    {               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    ]               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    :               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    ,               reduce using rule 138 (expr -> expr operator_less_than_equals expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_div    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_join   [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_split  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_compose [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_over   [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_map    [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_inner  [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 138 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 310

    (139) expr -> expr operator_greater_than expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_or     reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_xor    reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_contains reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_less_than reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_less_than_equals reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_greater_than reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_greater_than_equals reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_equals reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_not_equals reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_smallest reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_greatest reduce using rule 139 (expr -> expr operator_greater_than expr .)
    [               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_not    reduce using rule 139 (expr -> expr operator_greater_than expr .)
    NEWLINE         reduce using rule 139 (expr -> expr operator_greater_than expr .)
    $end            reduce using rule 139 (expr -> expr operator_greater_than expr .)
    }               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    )               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    {               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    ]               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    :               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    ,               reduce using rule 139 (expr -> expr operator_greater_than expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_sub    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_mul    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_div    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_trudiv [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_pow    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_join   [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_split  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitand [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitor  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitxor [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_incr   [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_decr   [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_outer  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_rotate [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_apply  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_compose [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_over   [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_map    [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_scan   [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_reduc  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitnot [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_inner  [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_reverse [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 139 (expr -> expr operator_greater_than expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 311

    (140) expr -> expr operator_greater_than_equals expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_or     reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_xor    reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_contains reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than_equals reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than_equals reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_equals reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_not_equals reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_smallest reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_greatest reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    [               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_not    reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    NEWLINE         reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    $end            reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    }               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    )               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    {               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    ]               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    :               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    ,               reduce using rule 140 (expr -> expr operator_greater_than_equals expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_div    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_join   [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_split  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_compose [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_over   [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_map    [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_inner  [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 140 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 312

    (141) expr -> expr operator_equals expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_or     reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_xor    reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_contains reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_less_than reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_less_than_equals reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_greater_than reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_greater_than_equals reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_equals reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_not_equals reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_smallest reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_greatest reduce using rule 141 (expr -> expr operator_equals expr .)
    [               reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_not    reduce using rule 141 (expr -> expr operator_equals expr .)
    NEWLINE         reduce using rule 141 (expr -> expr operator_equals expr .)
    $end            reduce using rule 141 (expr -> expr operator_equals expr .)
    }               reduce using rule 141 (expr -> expr operator_equals expr .)
    )               reduce using rule 141 (expr -> expr operator_equals expr .)
    {               reduce using rule 141 (expr -> expr operator_equals expr .)
    ]               reduce using rule 141 (expr -> expr operator_equals expr .)
    :               reduce using rule 141 (expr -> expr operator_equals expr .)
    ,               reduce using rule 141 (expr -> expr operator_equals expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_sub    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_mul    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_div    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_trudiv [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_pow    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_join   [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_split  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitand [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitor  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitxor [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_incr   [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_decr   [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_outer  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_rotate [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_apply  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_compose [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_over   [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_map    [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_scan   [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_reduc  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_bitnot [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_inner  [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_reverse [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 141 (expr -> expr operator_equals expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 313

    (142) expr -> expr operator_not_equals expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_or     reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_xor    reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_contains reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_less_than reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_less_than_equals reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_greater_than reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_greater_than_equals reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_equals reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_not_equals reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_smallest reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_greatest reduce using rule 142 (expr -> expr operator_not_equals expr .)
    [               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_not    reduce using rule 142 (expr -> expr operator_not_equals expr .)
    NEWLINE         reduce using rule 142 (expr -> expr operator_not_equals expr .)
    $end            reduce using rule 142 (expr -> expr operator_not_equals expr .)
    }               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    )               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    {               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    ]               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    :               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    ,               reduce using rule 142 (expr -> expr operator_not_equals expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_sub    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_mul    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_div    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_trudiv [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_pow    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_join   [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_split  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitand [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitor  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitxor [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_incr   [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_decr   [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_outer  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_rotate [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_apply  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_compose [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_over   [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_map    [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_scan   [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_reduc  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitnot [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_inner  [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_reverse [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 142 (expr -> expr operator_not_equals expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 314

    (143) expr -> expr operator_smallest expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_or     reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_xor    reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_contains reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_less_than reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_less_than_equals reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_greater_than reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_greater_than_equals reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_equals reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_not_equals reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_smallest reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_greatest reduce using rule 143 (expr -> expr operator_smallest expr .)
    [               reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_not    reduce using rule 143 (expr -> expr operator_smallest expr .)
    NEWLINE         reduce using rule 143 (expr -> expr operator_smallest expr .)
    $end            reduce using rule 143 (expr -> expr operator_smallest expr .)
    }               reduce using rule 143 (expr -> expr operator_smallest expr .)
    )               reduce using rule 143 (expr -> expr operator_smallest expr .)
    {               reduce using rule 143 (expr -> expr operator_smallest expr .)
    ]               reduce using rule 143 (expr -> expr operator_smallest expr .)
    :               reduce using rule 143 (expr -> expr operator_smallest expr .)
    ,               reduce using rule 143 (expr -> expr operator_smallest expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_sub    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_mul    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_div    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_trudiv [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_pow    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_join   [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_split  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitand [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitor  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitxor [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftright [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_incr   [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_decr   [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_outer  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_rotate [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_apply  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_compose [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_over   [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_map    [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_scan   [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_reduc  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_bitnot [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_inner  [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_reverse [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_incr [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_decr [ reduce using rule 143 (expr -> expr operator_smallest expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 315

    (144) expr -> expr operator_greatest expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_and    reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_or     reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_xor    reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_contains reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_less_than reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_less_than_equals reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_greater_than reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_greater_than_equals reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_equals reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_not_equals reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_smallest reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_greatest reduce using rule 144 (expr -> expr operator_greatest expr .)
    [               reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_not    reduce using rule 144 (expr -> expr operator_greatest expr .)
    NEWLINE         reduce using rule 144 (expr -> expr operator_greatest expr .)
    $end            reduce using rule 144 (expr -> expr operator_greatest expr .)
    }               reduce using rule 144 (expr -> expr operator_greatest expr .)
    )               reduce using rule 144 (expr -> expr operator_greatest expr .)
    {               reduce using rule 144 (expr -> expr operator_greatest expr .)
    ]               reduce using rule 144 (expr -> expr operator_greatest expr .)
    :               reduce using rule 144 (expr -> expr operator_greatest expr .)
    ,               reduce using rule 144 (expr -> expr operator_greatest expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_sub    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_mul    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_div    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_trudiv [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_pow    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_join   [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_split  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitand [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitor  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitxor [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftright [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_incr   [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_decr   [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_outer  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_rotate [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_apply  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_compose [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_over   [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_map    [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_scan   [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_reduc  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_bitnot [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_inner  [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_reverse [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_incr [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_decr [ reduce using rule 144 (expr -> expr operator_greatest expr .) ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]

    OPERATOR                       shift and go to state 158

state 316

    (52) item -> expr [ expr . ]
    (53) simple_slice -> expr [ expr . : expr ]
    (54) full_slice -> expr [ expr . : expr : expr ]
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    ]               shift and go to state 371
    :               shift and go to state 372
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 317

    (62) assign_stmt -> item = expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 62 (assign_stmt -> item = expr .)
    $end            reduce using rule 62 (assign_stmt -> item = expr .)
    }               reduce using rule 62 (assign_stmt -> item = expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 318

    (63) assign_stmt -> simple_slice = expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 63 (assign_stmt -> simple_slice = expr .)
    $end            reduce using rule 63 (assign_stmt -> simple_slice = expr .)
    }               reduce using rule 63 (assign_stmt -> simple_slice = expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 319

    (64) assign_stmt -> full_slice = expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 64 (assign_stmt -> full_slice = expr .)
    $end            reduce using rule 64 (assign_stmt -> full_slice = expr .)
    }               reduce using rule 64 (assign_stmt -> full_slice = expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 320

    (103) expr -> ( expr ) .

    operator_add    reduce using rule 103 (expr -> ( expr ) .)
    operator_sub    reduce using rule 103 (expr -> ( expr ) .)
    operator_mul    reduce using rule 103 (expr -> ( expr ) .)
    operator_div    reduce using rule 103 (expr -> ( expr ) .)
    operator_trudiv reduce using rule 103 (expr -> ( expr ) .)
    operator_pow    reduce using rule 103 (expr -> ( expr ) .)
    operator_join   reduce using rule 103 (expr -> ( expr ) .)
    operator_split  reduce using rule 103 (expr -> ( expr ) .)
    operator_bitand reduce using rule 103 (expr -> ( expr ) .)
    operator_bitor  reduce using rule 103 (expr -> ( expr ) .)
    operator_bitxor reduce using rule 103 (expr -> ( expr ) .)
    operator_bitshiftleft reduce using rule 103 (expr -> ( expr ) .)
    operator_bitshiftright reduce using rule 103 (expr -> ( expr ) .)
    operator_and    reduce using rule 103 (expr -> ( expr ) .)
    operator_or     reduce using rule 103 (expr -> ( expr ) .)
    operator_xor    reduce using rule 103 (expr -> ( expr ) .)
    operator_contains reduce using rule 103 (expr -> ( expr ) .)
    operator_incr   reduce using rule 103 (expr -> ( expr ) .)
    operator_decr   reduce using rule 103 (expr -> ( expr ) .)
    operator_outer  reduce using rule 103 (expr -> ( expr ) .)
    operator_rotate reduce using rule 103 (expr -> ( expr ) .)
    operator_apply  reduce using rule 103 (expr -> ( expr ) .)
    operator_compose reduce using rule 103 (expr -> ( expr ) .)
    operator_over   reduce using rule 103 (expr -> ( expr ) .)
    operator_map    reduce using rule 103 (expr -> ( expr ) .)
    operator_less_than reduce using rule 103 (expr -> ( expr ) .)
    operator_less_than_equals reduce using rule 103 (expr -> ( expr ) .)
    operator_greater_than reduce using rule 103 (expr -> ( expr ) .)
    operator_greater_than_equals reduce using rule 103 (expr -> ( expr ) .)
    operator_equals reduce using rule 103 (expr -> ( expr ) .)
    operator_not_equals reduce using rule 103 (expr -> ( expr ) .)
    operator_smallest reduce using rule 103 (expr -> ( expr ) .)
    operator_greatest reduce using rule 103 (expr -> ( expr ) .)
    [               reduce using rule 103 (expr -> ( expr ) .)
    operator_scan   reduce using rule 103 (expr -> ( expr ) .)
    operator_reduc  reduce using rule 103 (expr -> ( expr ) .)
    operator_bitnot reduce using rule 103 (expr -> ( expr ) .)
    operator_not    reduce using rule 103 (expr -> ( expr ) .)
    operator_inner  reduce using rule 103 (expr -> ( expr ) .)
    operator_reverse reduce using rule 103 (expr -> ( expr ) .)
    operator_sorted_incr reduce using rule 103 (expr -> ( expr ) .)
    operator_sorted_decr reduce using rule 103 (expr -> ( expr ) .)
    NEWLINE         reduce using rule 103 (expr -> ( expr ) .)
    $end            reduce using rule 103 (expr -> ( expr ) .)
    }               reduce using rule 103 (expr -> ( expr ) .)
    )               reduce using rule 103 (expr -> ( expr ) .)
    {               reduce using rule 103 (expr -> ( expr ) .)
    ]               reduce using rule 103 (expr -> ( expr ) .)
    :               reduce using rule 103 (expr -> ( expr ) .)
    ,               reduce using rule 103 (expr -> ( expr ) .)


state 321

    (112) expr -> OPERATOR operator_scan expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_sub    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_mul    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_div    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_trudiv reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_pow    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_join   reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_split  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_bitand reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_bitor  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_bitxor reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_bitshiftleft reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_bitshiftright reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_and    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_or     reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_xor    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_contains reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_outer  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_rotate reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_apply  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_less_than reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_less_than_equals reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_greater_than reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_greater_than_equals reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_equals reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_not_equals reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_smallest reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_greatest reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    [               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_scan   reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_reduc  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_not    reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_inner  reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    NEWLINE         reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    $end            reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    }               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    )               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    {               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    ]               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    :               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    ,               reduce using rule 112 (expr -> OPERATOR operator_scan expr .)
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_incr   [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_decr   [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_compose [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_over   [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_map    [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_bitnot [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_reverse [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_sorted_incr [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_sorted_decr [ reduce using rule 112 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 322

    (113) expr -> OPERATOR operator_reduc expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_sub    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_mul    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_div    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_trudiv reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_pow    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_join   reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_split  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_bitand reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_bitor  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_bitxor reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_bitshiftleft reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_bitshiftright reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_and    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_or     reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_xor    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_contains reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_outer  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_rotate reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_apply  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_less_than reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_less_than_equals reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_greater_than reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_greater_than_equals reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_equals reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_not_equals reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_smallest reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_greatest reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    [               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_scan   reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_reduc  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_not    reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_inner  reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    NEWLINE         reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    $end            reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    }               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    )               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    {               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    ]               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    :               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    ,               reduce using rule 113 (expr -> OPERATOR operator_reduc expr .)
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_incr   [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_decr   [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_compose [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_over   [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_map    [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_bitnot [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_reverse [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_sorted_incr [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_sorted_decr [ reduce using rule 113 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_mul    [ shift and go to state 140 ]
  ! operator_div    [ shift and go to state 141 ]
  ! operator_trudiv [ shift and go to state 142 ]
  ! operator_pow    [ shift and go to state 143 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_rotate [ shift and go to state 159 ]
  ! operator_apply  [ shift and go to state 160 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_scan   [ shift and go to state 37 ]
  ! operator_reduc  [ shift and go to state 38 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 323

    (181) return_val -> VAR ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 373
    ,               shift and go to state 374


state 324

    (187) arguments -> expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    )               reduce using rule 187 (arguments -> expr .)
    ,               reduce using rule 187 (arguments -> expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 325

    (189) arguments -> empty .

    )               reduce using rule 189 (arguments -> empty .)
    ,               reduce using rule 189 (arguments -> empty .)


state 326

    (67) comma_separated_names -> VAR , comma_separated_names .

    =               reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    NEWLINE         reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    $end            reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    }               reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    operator_contains reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    :               reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    ;               reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)
    )               reduce using rule 67 (comma_separated_names -> VAR , comma_separated_names .)


state 327

    (61) assign_stmt -> comma_separated_names = expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    NEWLINE         reduce using rule 61 (assign_stmt -> comma_separated_names = expr .)
    $end            reduce using rule 61 (assign_stmt -> comma_separated_names = expr .)
    }               reduce using rule 61 (assign_stmt -> comma_separated_names = expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 328

    (83) for_decl -> for comma_separated_names operator_contains . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 375
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 329

    (87) operator_decl -> operator ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 376
    ,               shift and go to state 374


state 330

    (90) func_decl -> func VAR ( . def_arguments )
    (91) def_arguments -> . declaration_stmt
    (92) def_arguments -> . empty
    (93) def_arguments -> . declaration_stmt ; def_arguments
    (65) declaration_stmt -> . TYPE comma_separated_names
    (186) empty -> .
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    )               reduce using rule 186 (empty -> .)
    type_type       shift and go to state 206
    type_num        shift and go to state 207
    type_bool       shift and go to state 208
    type_any        shift and go to state 209
    type_u64        shift and go to state 210
    type_u32        shift and go to state 211
    type_u16        shift and go to state 212
    type_u8         shift and go to state 213
    type_i64        shift and go to state 214
    type_i32        shift and go to state 215
    type_i16        shift and go to state 216
    type_i8         shift and go to state 217
    type_f32        shift and go to state 218
    type_f64        shift and go to state 219
    type_str        shift and go to state 220
    type_list       shift and go to state 221
    type_tuple      shift and go to state 222
    type_array      shift and go to state 223
    type_vector     shift and go to state 224
    type_dict       shift and go to state 225
    type_generator  shift and go to state 226
    type_linked_list shift and go to state 227
    type_doubly_linked_list shift and go to state 228
    type_deque      shift and go to state 229
    type_heap       shift and go to state 230
    type_fibonacci_heap shift and go to state 231
    type_tree       shift and go to state 232
    type_trie       shift and go to state 233
    type_stack      shift and go to state 234
    type_queue      shift and go to state 235
    type_binary_search_tree shift and go to state 236
    type_bitset     shift and go to state 237
    type_set        shift and go to state 238
    type_map        shift and go to state 239
    type_range      shift and go to state 240

    def_arguments                  shift and go to state 377
    declaration_stmt               shift and go to state 378
    empty                          shift and go to state 379
    TYPE                           shift and go to state 380

state 331

    (146) return_val -> type_type ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 381
    ,               shift and go to state 374


state 332

    (147) return_val -> type_num ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 382
    ,               shift and go to state 374


state 333

    (148) return_val -> type_bool ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 383
    ,               shift and go to state 374


state 334

    (149) return_val -> type_any ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 384
    ,               shift and go to state 374


state 335

    (150) return_val -> type_u64 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 385
    ,               shift and go to state 374


state 336

    (151) return_val -> type_u32 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 386
    ,               shift and go to state 374


state 337

    (152) return_val -> type_u16 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 387
    ,               shift and go to state 374


state 338

    (153) return_val -> type_u8 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 388
    ,               shift and go to state 374


state 339

    (154) return_val -> type_i64 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 389
    ,               shift and go to state 374


state 340

    (155) return_val -> type_i32 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 390
    ,               shift and go to state 374


state 341

    (156) return_val -> type_i16 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 391
    ,               shift and go to state 374


state 342

    (157) return_val -> type_i8 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 392
    ,               shift and go to state 374


state 343

    (158) return_val -> type_f32 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 393
    ,               shift and go to state 374


state 344

    (159) return_val -> type_f64 ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 394
    ,               shift and go to state 374


state 345

    (160) return_val -> type_str ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 395
    ,               shift and go to state 374


state 346

    (161) return_val -> type_list ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 396
    ,               shift and go to state 374


state 347

    (162) return_val -> type_tuple ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 397
    ,               shift and go to state 374


state 348

    (163) return_val -> type_array ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 398
    ,               shift and go to state 374


state 349

    (164) return_val -> type_vector ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 399
    ,               shift and go to state 374


state 350

    (165) return_val -> type_dict ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 400
    ,               shift and go to state 374


state 351

    (166) return_val -> type_generator ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 401
    ,               shift and go to state 374


state 352

    (167) return_val -> type_linked_list ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 402
    ,               shift and go to state 374


state 353

    (168) return_val -> type_doubly_linked_list ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 403
    ,               shift and go to state 374


state 354

    (169) return_val -> type_deque ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 404
    ,               shift and go to state 374


state 355

    (170) return_val -> type_heap ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 405
    ,               shift and go to state 374


state 356

    (171) return_val -> type_fibonacci_heap ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 406
    ,               shift and go to state 374


state 357

    (172) return_val -> type_tree ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 407
    ,               shift and go to state 374


state 358

    (173) return_val -> type_trie ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 408
    ,               shift and go to state 374


state 359

    (174) return_val -> type_stack ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 409
    ,               shift and go to state 374


state 360

    (175) return_val -> type_queue ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 410
    ,               shift and go to state 374


state 361

    (176) return_val -> type_binary_search_tree ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 411
    ,               shift and go to state 374


state 362

    (177) return_val -> type_bitset ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 412
    ,               shift and go to state 374


state 363

    (178) return_val -> type_set ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 413
    ,               shift and go to state 374


state 364

    (179) return_val -> type_map ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 414
    ,               shift and go to state 374


state 365

    (180) return_val -> type_range ( arguments . )
    (188) arguments -> arguments . , arguments

    )               shift and go to state 415
    ,               shift and go to state 374


state 366

    (58) lambda_decl -> lambda comma_separated_names : . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 416
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 367

    (68) block_stmt -> block_decl { stmts } .

    return          reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    (               reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitnot reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_not    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_reverse reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_sorted_incr reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_sorted_decr reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    VAR             reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    break           reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    continue        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    pass            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    del             reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    for             reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    if              reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    else            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    elif            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    struct          reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    while           reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    func            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_add    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_sub    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_mul    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_div    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_trudiv reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_pow    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_join   reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_split  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_scan   reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_reduc  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitand reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitor  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitxor reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitshiftleft reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_bitshiftright reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_and    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_or     reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_xor    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_contains reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_incr   reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_decr   reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_outer  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_inner  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_rotate reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_apply  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_compose reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_over   reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_map    reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_less_than reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_less_than_equals reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_greater_than reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_greater_than_equals reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_equals reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_not_equals reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_smallest reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    operator_greatest reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    FLOAT           reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    NUM             reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    STRING_3SQ      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    STRING_3DQ      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    STRING_SQ       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    STRING_DQ       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    true            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    Null            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    false           reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_type       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_num        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_bool       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_any        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_u64        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_u32        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_u16        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_u8         reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_i64        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_i32        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_i16        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_i8         reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_f32        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_f64        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_str        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_list       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_tuple      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_array      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_vector     reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_dict       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_generator  reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_linked_list reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_doubly_linked_list reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_deque      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_heap       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_fibonacci_heap reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_tree       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_trie       reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_stack      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_queue      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_binary_search_tree reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_bitset     reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_set        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_map        reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    type_range      reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    lambda          reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    NEWLINE         reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    $end            reduce using rule 68 (block_stmt -> block_decl { stmts } .)
    }               reduce using rule 68 (block_stmt -> block_decl { stmts } .)


state 368

    (74) block_stmt -> block_decl { newline } .

    return          reduce using rule 74 (block_stmt -> block_decl { newline } .)
    (               reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitnot reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_not    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_reverse reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_sorted_incr reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_sorted_decr reduce using rule 74 (block_stmt -> block_decl { newline } .)
    VAR             reduce using rule 74 (block_stmt -> block_decl { newline } .)
    break           reduce using rule 74 (block_stmt -> block_decl { newline } .)
    continue        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    pass            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    del             reduce using rule 74 (block_stmt -> block_decl { newline } .)
    for             reduce using rule 74 (block_stmt -> block_decl { newline } .)
    if              reduce using rule 74 (block_stmt -> block_decl { newline } .)
    else            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    elif            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    struct          reduce using rule 74 (block_stmt -> block_decl { newline } .)
    while           reduce using rule 74 (block_stmt -> block_decl { newline } .)
    func            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_add    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_sub    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_mul    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_div    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_trudiv reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_pow    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_join   reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_split  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_scan   reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_reduc  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitand reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitor  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitxor reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitshiftleft reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_bitshiftright reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_and    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_or     reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_xor    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_contains reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_incr   reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_decr   reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_outer  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_inner  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_rotate reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_apply  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_compose reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_over   reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_map    reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_less_than reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_less_than_equals reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_greater_than reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_greater_than_equals reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_equals reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_not_equals reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_smallest reduce using rule 74 (block_stmt -> block_decl { newline } .)
    operator_greatest reduce using rule 74 (block_stmt -> block_decl { newline } .)
    FLOAT           reduce using rule 74 (block_stmt -> block_decl { newline } .)
    NUM             reduce using rule 74 (block_stmt -> block_decl { newline } .)
    STRING_3SQ      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    STRING_3DQ      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    STRING_SQ       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    STRING_DQ       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    true            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    Null            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    false           reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_type       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_num        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_bool       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_any        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_u64        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_u32        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_u16        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_u8         reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_i64        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_i32        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_i16        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_i8         reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_f32        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_f64        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_str        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_list       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_tuple      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_array      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_vector     reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_dict       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_generator  reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_linked_list reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_doubly_linked_list reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_deque      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_heap       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_fibonacci_heap reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_tree       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_trie       reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_stack      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_queue      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_binary_search_tree reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_bitset     reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_set        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_map        reduce using rule 74 (block_stmt -> block_decl { newline } .)
    type_range      reduce using rule 74 (block_stmt -> block_decl { newline } .)
    lambda          reduce using rule 74 (block_stmt -> block_decl { newline } .)
    NEWLINE         reduce using rule 74 (block_stmt -> block_decl { newline } .)
    $end            reduce using rule 74 (block_stmt -> block_decl { newline } .)
    }               reduce using rule 74 (block_stmt -> block_decl { newline } .)


state 369

    (127) expr -> expr operator_outer OPERATOR expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_sub    reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_join   reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_split  reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitand reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitor  reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitxor reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitshiftleft reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitshiftright reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_and    reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_or     reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_xor    reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_contains reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_outer  reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_less_than reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_less_than_equals reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_greater_than reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_greater_than_equals reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_equals reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_not_equals reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_smallest reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_greatest reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    [               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_not    reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_inner  reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    NEWLINE         reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    $end            reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    }               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    )               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    {               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    ]               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    :               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    ,               reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_div    [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_trudiv [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_pow    [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_incr   [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_decr   [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_rotate [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_apply  [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_compose [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_over   [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_map    [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_scan   [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_reduc  [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_bitnot [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_reverse [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_sorted_incr [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_sorted_decr [ reduce using rule 127 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 370

    (128) expr -> expr OPERATOR operator_inner OPERATOR . expr
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 417
    OPERATOR                       shift and go to state 36
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 371

    (52) item -> expr [ expr ] .

    =               reduce using rule 52 (item -> expr [ expr ] .)
    operator_add    reduce using rule 52 (item -> expr [ expr ] .)
    operator_sub    reduce using rule 52 (item -> expr [ expr ] .)
    operator_mul    reduce using rule 52 (item -> expr [ expr ] .)
    operator_div    reduce using rule 52 (item -> expr [ expr ] .)
    operator_trudiv reduce using rule 52 (item -> expr [ expr ] .)
    operator_pow    reduce using rule 52 (item -> expr [ expr ] .)
    operator_join   reduce using rule 52 (item -> expr [ expr ] .)
    operator_split  reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitand reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitor  reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitxor reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitshiftleft reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitshiftright reduce using rule 52 (item -> expr [ expr ] .)
    operator_and    reduce using rule 52 (item -> expr [ expr ] .)
    operator_or     reduce using rule 52 (item -> expr [ expr ] .)
    operator_xor    reduce using rule 52 (item -> expr [ expr ] .)
    operator_contains reduce using rule 52 (item -> expr [ expr ] .)
    operator_incr   reduce using rule 52 (item -> expr [ expr ] .)
    operator_decr   reduce using rule 52 (item -> expr [ expr ] .)
    operator_outer  reduce using rule 52 (item -> expr [ expr ] .)
    operator_rotate reduce using rule 52 (item -> expr [ expr ] .)
    operator_apply  reduce using rule 52 (item -> expr [ expr ] .)
    operator_compose reduce using rule 52 (item -> expr [ expr ] .)
    operator_over   reduce using rule 52 (item -> expr [ expr ] .)
    operator_map    reduce using rule 52 (item -> expr [ expr ] .)
    operator_less_than reduce using rule 52 (item -> expr [ expr ] .)
    operator_less_than_equals reduce using rule 52 (item -> expr [ expr ] .)
    operator_greater_than reduce using rule 52 (item -> expr [ expr ] .)
    operator_greater_than_equals reduce using rule 52 (item -> expr [ expr ] .)
    operator_equals reduce using rule 52 (item -> expr [ expr ] .)
    operator_not_equals reduce using rule 52 (item -> expr [ expr ] .)
    operator_smallest reduce using rule 52 (item -> expr [ expr ] .)
    operator_greatest reduce using rule 52 (item -> expr [ expr ] .)
    [               reduce using rule 52 (item -> expr [ expr ] .)
    operator_scan   reduce using rule 52 (item -> expr [ expr ] .)
    operator_reduc  reduce using rule 52 (item -> expr [ expr ] .)
    operator_bitnot reduce using rule 52 (item -> expr [ expr ] .)
    operator_not    reduce using rule 52 (item -> expr [ expr ] .)
    operator_inner  reduce using rule 52 (item -> expr [ expr ] .)
    operator_reverse reduce using rule 52 (item -> expr [ expr ] .)
    operator_sorted_incr reduce using rule 52 (item -> expr [ expr ] .)
    operator_sorted_decr reduce using rule 52 (item -> expr [ expr ] .)
    NEWLINE         reduce using rule 52 (item -> expr [ expr ] .)
    $end            reduce using rule 52 (item -> expr [ expr ] .)
    }               reduce using rule 52 (item -> expr [ expr ] .)
    )               reduce using rule 52 (item -> expr [ expr ] .)
    {               reduce using rule 52 (item -> expr [ expr ] .)
    ]               reduce using rule 52 (item -> expr [ expr ] .)
    :               reduce using rule 52 (item -> expr [ expr ] .)
    ,               reduce using rule 52 (item -> expr [ expr ] .)


state 372

    (53) simple_slice -> expr [ expr : . expr ]
    (54) full_slice -> expr [ expr : . expr : expr ]
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 418
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 373

    (181) return_val -> VAR ( arguments ) .

    operator_add    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_sub    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_mul    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_div    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_trudiv reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_pow    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_join   reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_split  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitand reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitor  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitxor reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitshiftleft reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitshiftright reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_and    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_or     reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_xor    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_contains reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_incr   reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_decr   reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_outer  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_rotate reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_apply  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_compose reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_over   reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_map    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_less_than reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_less_than_equals reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_greater_than reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_greater_than_equals reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_equals reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_not_equals reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_smallest reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_greatest reduce using rule 181 (return_val -> VAR ( arguments ) .)
    [               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_scan   reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_reduc  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_bitnot reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_not    reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_inner  reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_reverse reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_sorted_incr reduce using rule 181 (return_val -> VAR ( arguments ) .)
    operator_sorted_decr reduce using rule 181 (return_val -> VAR ( arguments ) .)
    NEWLINE         reduce using rule 181 (return_val -> VAR ( arguments ) .)
    $end            reduce using rule 181 (return_val -> VAR ( arguments ) .)
    }               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    )               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    {               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    ]               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    :               reduce using rule 181 (return_val -> VAR ( arguments ) .)
    ,               reduce using rule 181 (return_val -> VAR ( arguments ) .)


state 374

    (188) arguments -> arguments , . arguments
    (187) arguments -> . expr
    (188) arguments -> . arguments , arguments
    (189) arguments -> . empty
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (186) empty -> .
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    ,               reduce using rule 186 (empty -> .)
    )               reduce using rule 186 (empty -> .)
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    arguments                      shift and go to state 419
    expr                           shift and go to state 324
    empty                          shift and go to state 325
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 375

    (83) for_decl -> for comma_separated_names operator_contains expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    {               reduce using rule 83 (for_decl -> for comma_separated_names operator_contains expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 376

    (87) operator_decl -> operator ( arguments ) .

    {               reduce using rule 87 (operator_decl -> operator ( arguments ) .)


state 377

    (90) func_decl -> func VAR ( def_arguments . )

    )               shift and go to state 420


state 378

    (91) def_arguments -> declaration_stmt .
    (93) def_arguments -> declaration_stmt . ; def_arguments

    )               reduce using rule 91 (def_arguments -> declaration_stmt .)
    ;               shift and go to state 421


state 379

    (92) def_arguments -> empty .

    )               reduce using rule 92 (def_arguments -> empty .)


state 380

    (65) declaration_stmt -> TYPE . comma_separated_names
    (66) comma_separated_names -> . VAR
    (67) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 198

    comma_separated_names          shift and go to state 197

state 381

    (146) return_val -> type_type ( arguments ) .

    operator_add    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_sub    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_mul    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_div    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_trudiv reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_pow    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_join   reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_split  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitand reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitor  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitxor reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitshiftleft reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitshiftright reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_and    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_or     reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_xor    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_contains reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_incr   reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_decr   reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_outer  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_rotate reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_apply  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_compose reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_over   reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_map    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_less_than reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_less_than_equals reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_greater_than reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_greater_than_equals reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_equals reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_not_equals reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_smallest reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_greatest reduce using rule 146 (return_val -> type_type ( arguments ) .)
    [               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_scan   reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_reduc  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_bitnot reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_not    reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_inner  reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_reverse reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_sorted_incr reduce using rule 146 (return_val -> type_type ( arguments ) .)
    operator_sorted_decr reduce using rule 146 (return_val -> type_type ( arguments ) .)
    NEWLINE         reduce using rule 146 (return_val -> type_type ( arguments ) .)
    $end            reduce using rule 146 (return_val -> type_type ( arguments ) .)
    }               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    )               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    {               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    ]               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    :               reduce using rule 146 (return_val -> type_type ( arguments ) .)
    ,               reduce using rule 146 (return_val -> type_type ( arguments ) .)


state 382

    (147) return_val -> type_num ( arguments ) .

    operator_add    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_sub    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_mul    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_div    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_trudiv reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_pow    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_join   reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_split  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitand reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitor  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitxor reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitshiftleft reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitshiftright reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_and    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_or     reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_xor    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_contains reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_incr   reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_decr   reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_outer  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_rotate reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_apply  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_compose reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_over   reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_map    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_less_than reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_less_than_equals reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_greater_than reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_greater_than_equals reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_equals reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_not_equals reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_smallest reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_greatest reduce using rule 147 (return_val -> type_num ( arguments ) .)
    [               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_scan   reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_reduc  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_bitnot reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_not    reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_inner  reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_reverse reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_sorted_incr reduce using rule 147 (return_val -> type_num ( arguments ) .)
    operator_sorted_decr reduce using rule 147 (return_val -> type_num ( arguments ) .)
    NEWLINE         reduce using rule 147 (return_val -> type_num ( arguments ) .)
    $end            reduce using rule 147 (return_val -> type_num ( arguments ) .)
    }               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    )               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    {               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    ]               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    :               reduce using rule 147 (return_val -> type_num ( arguments ) .)
    ,               reduce using rule 147 (return_val -> type_num ( arguments ) .)


state 383

    (148) return_val -> type_bool ( arguments ) .

    operator_add    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_sub    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_mul    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_div    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_trudiv reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_pow    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_join   reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_split  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitand reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitor  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitxor reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftleft reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftright reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_and    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_or     reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_xor    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_contains reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_incr   reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_decr   reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_outer  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_rotate reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_apply  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_compose reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_over   reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_map    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_less_than reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_less_than_equals reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_greater_than reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_greater_than_equals reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_equals reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_not_equals reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_smallest reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_greatest reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    [               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_scan   reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_reduc  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_bitnot reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_not    reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_inner  reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_reverse reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_sorted_incr reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    operator_sorted_decr reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    NEWLINE         reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    $end            reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    }               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    )               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    {               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    ]               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    :               reduce using rule 148 (return_val -> type_bool ( arguments ) .)
    ,               reduce using rule 148 (return_val -> type_bool ( arguments ) .)


state 384

    (149) return_val -> type_any ( arguments ) .

    operator_add    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_sub    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_mul    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_div    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_trudiv reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_pow    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_join   reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_split  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitand reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitor  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitxor reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitshiftleft reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitshiftright reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_and    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_or     reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_xor    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_contains reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_incr   reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_decr   reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_outer  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_rotate reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_apply  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_compose reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_over   reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_map    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_less_than reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_less_than_equals reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_greater_than reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_greater_than_equals reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_equals reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_not_equals reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_smallest reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_greatest reduce using rule 149 (return_val -> type_any ( arguments ) .)
    [               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_scan   reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_reduc  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_bitnot reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_not    reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_inner  reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_reverse reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_sorted_incr reduce using rule 149 (return_val -> type_any ( arguments ) .)
    operator_sorted_decr reduce using rule 149 (return_val -> type_any ( arguments ) .)
    NEWLINE         reduce using rule 149 (return_val -> type_any ( arguments ) .)
    $end            reduce using rule 149 (return_val -> type_any ( arguments ) .)
    }               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    )               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    {               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    ]               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    :               reduce using rule 149 (return_val -> type_any ( arguments ) .)
    ,               reduce using rule 149 (return_val -> type_any ( arguments ) .)


state 385

    (150) return_val -> type_u64 ( arguments ) .

    operator_add    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_sub    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_mul    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_div    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_trudiv reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_pow    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_join   reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_split  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitand reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitor  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitxor reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftright reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_and    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_or     reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_xor    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_contains reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_incr   reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_decr   reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_outer  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_rotate reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_apply  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_compose reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_over   reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_map    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_less_than reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_less_than_equals reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_equals reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_not_equals reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_smallest reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_greatest reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    [               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_scan   reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_reduc  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_bitnot reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_not    reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_inner  reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_reverse reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_incr reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_decr reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    NEWLINE         reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    $end            reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    }               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    )               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    {               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    ]               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    :               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)
    ,               reduce using rule 150 (return_val -> type_u64 ( arguments ) .)


state 386

    (151) return_val -> type_u32 ( arguments ) .

    operator_add    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_sub    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_mul    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_div    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_trudiv reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_pow    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_join   reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_split  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitand reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitor  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitxor reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftright reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_and    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_or     reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_xor    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_contains reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_incr   reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_decr   reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_outer  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_rotate reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_apply  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_compose reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_over   reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_map    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_less_than reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_less_than_equals reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_equals reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_not_equals reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_smallest reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_greatest reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    [               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_scan   reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_reduc  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_bitnot reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_not    reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_inner  reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_reverse reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_incr reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_decr reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    NEWLINE         reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    $end            reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    }               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    )               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    {               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    ]               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    :               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)
    ,               reduce using rule 151 (return_val -> type_u32 ( arguments ) .)


state 387

    (152) return_val -> type_u16 ( arguments ) .

    operator_add    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_sub    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_mul    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_div    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_trudiv reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_pow    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_join   reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_split  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitand reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitor  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitxor reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftright reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_and    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_or     reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_xor    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_contains reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_incr   reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_decr   reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_outer  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_rotate reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_apply  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_compose reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_over   reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_map    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_less_than reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_less_than_equals reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_equals reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_not_equals reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_smallest reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_greatest reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    [               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_scan   reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_reduc  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_bitnot reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_not    reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_inner  reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_reverse reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_incr reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_decr reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    NEWLINE         reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    $end            reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    }               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    )               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    {               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    ]               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    :               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)
    ,               reduce using rule 152 (return_val -> type_u16 ( arguments ) .)


state 388

    (153) return_val -> type_u8 ( arguments ) .

    operator_add    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_sub    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_mul    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_div    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_trudiv reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_pow    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_join   reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_split  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitand reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitor  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitxor reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftright reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_and    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_or     reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_xor    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_contains reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_incr   reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_decr   reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_outer  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_rotate reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_apply  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_compose reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_over   reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_map    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_less_than reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_less_than_equals reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_equals reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_not_equals reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_smallest reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_greatest reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    [               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_scan   reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_reduc  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_bitnot reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_not    reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_inner  reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_reverse reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_incr reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_decr reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    NEWLINE         reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    $end            reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    }               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    )               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    {               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    ]               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    :               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)
    ,               reduce using rule 153 (return_val -> type_u8 ( arguments ) .)


state 389

    (154) return_val -> type_i64 ( arguments ) .

    operator_add    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_sub    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_mul    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_div    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_trudiv reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_pow    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_join   reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_split  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitand reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitor  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitxor reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftright reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_and    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_or     reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_xor    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_contains reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_incr   reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_decr   reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_outer  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_rotate reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_apply  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_compose reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_over   reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_map    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_less_than reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_less_than_equals reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_equals reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_not_equals reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_smallest reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_greatest reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    [               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_scan   reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_reduc  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_bitnot reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_not    reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_inner  reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_reverse reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_incr reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_decr reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    NEWLINE         reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    $end            reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    }               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    )               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    {               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    ]               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    :               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)
    ,               reduce using rule 154 (return_val -> type_i64 ( arguments ) .)


state 390

    (155) return_val -> type_i32 ( arguments ) .

    operator_add    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_sub    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_mul    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_div    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_trudiv reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_pow    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_join   reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_split  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitand reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitor  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitxor reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftright reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_and    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_or     reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_xor    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_contains reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_incr   reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_decr   reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_outer  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_rotate reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_apply  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_compose reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_over   reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_map    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_less_than reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_less_than_equals reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_equals reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_not_equals reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_smallest reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_greatest reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    [               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_scan   reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_reduc  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_bitnot reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_not    reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_inner  reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_reverse reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_incr reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_decr reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    NEWLINE         reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    $end            reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    }               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    )               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    {               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    ]               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    :               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)
    ,               reduce using rule 155 (return_val -> type_i32 ( arguments ) .)


state 391

    (156) return_val -> type_i16 ( arguments ) .

    operator_add    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_sub    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_mul    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_div    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_trudiv reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_pow    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_join   reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_split  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitand reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitor  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitxor reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftright reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_and    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_or     reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_xor    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_contains reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_incr   reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_decr   reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_outer  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_rotate reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_apply  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_compose reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_over   reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_map    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_less_than reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_less_than_equals reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_equals reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_not_equals reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_smallest reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_greatest reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    [               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_scan   reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_reduc  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_bitnot reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_not    reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_inner  reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_reverse reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_incr reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_decr reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    NEWLINE         reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    $end            reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    }               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    )               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    {               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    ]               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    :               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)
    ,               reduce using rule 156 (return_val -> type_i16 ( arguments ) .)


state 392

    (157) return_val -> type_i8 ( arguments ) .

    operator_add    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_sub    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_mul    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_div    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_trudiv reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_pow    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_join   reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_split  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitand reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitor  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitxor reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftright reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_and    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_or     reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_xor    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_contains reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_incr   reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_decr   reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_outer  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_rotate reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_apply  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_compose reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_over   reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_map    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_less_than reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_less_than_equals reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_equals reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_not_equals reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_smallest reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_greatest reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    [               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_scan   reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_reduc  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_bitnot reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_not    reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_inner  reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_reverse reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_incr reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_decr reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    NEWLINE         reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    $end            reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    }               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    )               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    {               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    ]               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    :               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)
    ,               reduce using rule 157 (return_val -> type_i8 ( arguments ) .)


state 393

    (158) return_val -> type_f32 ( arguments ) .

    operator_add    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_sub    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_mul    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_div    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_trudiv reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_pow    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_join   reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_split  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitand reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitor  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitxor reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftright reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_and    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_or     reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_xor    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_contains reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_incr   reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_decr   reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_outer  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_rotate reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_apply  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_compose reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_over   reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_map    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_less_than reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_less_than_equals reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_equals reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_not_equals reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_smallest reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_greatest reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    [               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_scan   reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_reduc  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_bitnot reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_not    reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_inner  reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_reverse reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_incr reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_decr reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    NEWLINE         reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    $end            reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    }               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    )               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    {               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    ]               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    :               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)
    ,               reduce using rule 158 (return_val -> type_f32 ( arguments ) .)


state 394

    (159) return_val -> type_f64 ( arguments ) .

    operator_add    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_sub    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_mul    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_div    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_trudiv reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_pow    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_join   reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_split  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitand reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitor  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitxor reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftright reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_and    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_or     reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_xor    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_contains reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_incr   reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_decr   reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_outer  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_rotate reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_apply  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_compose reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_over   reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_map    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_less_than reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_less_than_equals reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_equals reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_not_equals reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_smallest reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_greatest reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    [               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_scan   reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_reduc  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_bitnot reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_not    reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_inner  reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_reverse reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_incr reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_decr reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    NEWLINE         reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    $end            reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    }               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    )               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    {               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    ]               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    :               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)
    ,               reduce using rule 159 (return_val -> type_f64 ( arguments ) .)


state 395

    (160) return_val -> type_str ( arguments ) .

    operator_add    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_sub    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_mul    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_div    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_trudiv reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_pow    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_join   reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_split  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitand reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitor  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitxor reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitshiftleft reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitshiftright reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_and    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_or     reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_xor    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_contains reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_incr   reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_decr   reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_outer  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_rotate reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_apply  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_compose reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_over   reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_map    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_less_than reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_less_than_equals reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_greater_than reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_greater_than_equals reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_equals reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_not_equals reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_smallest reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_greatest reduce using rule 160 (return_val -> type_str ( arguments ) .)
    [               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_scan   reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_reduc  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_bitnot reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_not    reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_inner  reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_reverse reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_sorted_incr reduce using rule 160 (return_val -> type_str ( arguments ) .)
    operator_sorted_decr reduce using rule 160 (return_val -> type_str ( arguments ) .)
    NEWLINE         reduce using rule 160 (return_val -> type_str ( arguments ) .)
    $end            reduce using rule 160 (return_val -> type_str ( arguments ) .)
    }               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    )               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    {               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    ]               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    :               reduce using rule 160 (return_val -> type_str ( arguments ) .)
    ,               reduce using rule 160 (return_val -> type_str ( arguments ) .)


state 396

    (161) return_val -> type_list ( arguments ) .

    operator_add    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_sub    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_mul    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_div    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_trudiv reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_pow    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_join   reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_split  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitand reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitor  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitxor reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitshiftright reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_and    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_or     reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_xor    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_contains reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_incr   reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_decr   reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_outer  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_rotate reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_apply  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_compose reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_over   reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_map    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_less_than reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_less_than_equals reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_greater_than reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_equals reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_not_equals reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_smallest reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_greatest reduce using rule 161 (return_val -> type_list ( arguments ) .)
    [               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_scan   reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_reduc  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_bitnot reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_not    reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_inner  reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_reverse reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_sorted_incr reduce using rule 161 (return_val -> type_list ( arguments ) .)
    operator_sorted_decr reduce using rule 161 (return_val -> type_list ( arguments ) .)
    NEWLINE         reduce using rule 161 (return_val -> type_list ( arguments ) .)
    $end            reduce using rule 161 (return_val -> type_list ( arguments ) .)
    }               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    )               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    {               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    ]               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    :               reduce using rule 161 (return_val -> type_list ( arguments ) .)
    ,               reduce using rule 161 (return_val -> type_list ( arguments ) .)


state 397

    (162) return_val -> type_tuple ( arguments ) .

    operator_add    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_sub    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_mul    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_div    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_trudiv reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_pow    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_join   reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_split  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitand reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitor  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitxor reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftleft reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftright reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_and    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_or     reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_xor    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_contains reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_incr   reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_decr   reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_outer  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_rotate reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_apply  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_compose reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_over   reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_map    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_less_than reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_less_than_equals reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than_equals reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_equals reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_not_equals reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_smallest reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_greatest reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    [               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_scan   reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_reduc  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_bitnot reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_not    reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_inner  reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_reverse reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_incr reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_decr reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    NEWLINE         reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    $end            reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    }               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    )               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    {               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    ]               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    :               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)
    ,               reduce using rule 162 (return_val -> type_tuple ( arguments ) .)


state 398

    (163) return_val -> type_array ( arguments ) .

    operator_add    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_sub    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_mul    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_div    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_trudiv reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_pow    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_join   reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_split  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitand reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitor  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitxor reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitshiftleft reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitshiftright reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_and    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_or     reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_xor    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_contains reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_incr   reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_decr   reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_outer  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_rotate reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_apply  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_compose reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_over   reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_map    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_less_than reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_less_than_equals reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_greater_than reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_greater_than_equals reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_equals reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_not_equals reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_smallest reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_greatest reduce using rule 163 (return_val -> type_array ( arguments ) .)
    [               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_scan   reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_reduc  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_bitnot reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_not    reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_inner  reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_reverse reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_sorted_incr reduce using rule 163 (return_val -> type_array ( arguments ) .)
    operator_sorted_decr reduce using rule 163 (return_val -> type_array ( arguments ) .)
    NEWLINE         reduce using rule 163 (return_val -> type_array ( arguments ) .)
    $end            reduce using rule 163 (return_val -> type_array ( arguments ) .)
    }               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    )               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    {               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    ]               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    :               reduce using rule 163 (return_val -> type_array ( arguments ) .)
    ,               reduce using rule 163 (return_val -> type_array ( arguments ) .)


state 399

    (164) return_val -> type_vector ( arguments ) .

    operator_add    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_sub    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_mul    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_div    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_trudiv reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_pow    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_join   reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_split  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitand reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitor  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitxor reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftleft reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftright reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_and    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_or     reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_xor    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_contains reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_incr   reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_decr   reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_outer  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_rotate reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_apply  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_compose reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_over   reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_map    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_less_than reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_less_than_equals reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_greater_than reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_greater_than_equals reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_equals reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_not_equals reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_smallest reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_greatest reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    [               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_scan   reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_reduc  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_bitnot reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_not    reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_inner  reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_reverse reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_sorted_incr reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    operator_sorted_decr reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    NEWLINE         reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    $end            reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    }               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    )               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    {               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    ]               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    :               reduce using rule 164 (return_val -> type_vector ( arguments ) .)
    ,               reduce using rule 164 (return_val -> type_vector ( arguments ) .)


state 400

    (165) return_val -> type_dict ( arguments ) .

    operator_add    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_sub    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_mul    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_div    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_trudiv reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_pow    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_join   reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_split  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitand reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitor  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitxor reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftleft reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftright reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_and    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_or     reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_xor    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_contains reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_incr   reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_decr   reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_outer  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_rotate reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_apply  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_compose reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_over   reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_map    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_less_than reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_less_than_equals reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_greater_than reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_greater_than_equals reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_equals reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_not_equals reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_smallest reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_greatest reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    [               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_scan   reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_reduc  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_bitnot reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_not    reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_inner  reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_reverse reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_sorted_incr reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    operator_sorted_decr reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    NEWLINE         reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    $end            reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    }               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    )               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    {               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    ]               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    :               reduce using rule 165 (return_val -> type_dict ( arguments ) .)
    ,               reduce using rule 165 (return_val -> type_dict ( arguments ) .)


state 401

    (166) return_val -> type_generator ( arguments ) .

    operator_add    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_sub    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_mul    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_div    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_trudiv reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_pow    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_join   reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_split  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitand reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitor  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitxor reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftleft reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftright reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_and    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_or     reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_xor    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_contains reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_incr   reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_decr   reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_outer  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_rotate reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_apply  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_compose reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_over   reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_map    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_less_than reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_less_than_equals reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_greater_than reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_greater_than_equals reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_equals reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_not_equals reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_smallest reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_greatest reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    [               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_scan   reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_reduc  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_bitnot reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_not    reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_inner  reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_reverse reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_sorted_incr reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    operator_sorted_decr reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    NEWLINE         reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    $end            reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    }               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    )               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    {               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    ]               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    :               reduce using rule 166 (return_val -> type_generator ( arguments ) .)
    ,               reduce using rule 166 (return_val -> type_generator ( arguments ) .)


state 402

    (167) return_val -> type_linked_list ( arguments ) .

    operator_add    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_sub    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_mul    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_div    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_pow    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_join   reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_split  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitand reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_and    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_or     reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_xor    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_contains reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_incr   reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_decr   reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_outer  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_rotate reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_apply  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_compose reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_over   reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_map    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_equals reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_smallest reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_greatest reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    [               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_scan   reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_not    reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_inner  reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_reverse reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    $end            reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    }               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    )               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    {               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    ]               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    :               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)
    ,               reduce using rule 167 (return_val -> type_linked_list ( arguments ) .)


state 403

    (168) return_val -> type_doubly_linked_list ( arguments ) .

    operator_add    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sub    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_mul    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_div    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_pow    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_join   reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_split  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitand reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_and    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_or     reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_xor    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_contains reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_incr   reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_decr   reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_outer  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_rotate reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_apply  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_compose reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_over   reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_map    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_equals reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_smallest reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greatest reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    [               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_scan   reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not    reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_inner  reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reverse reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    $end            reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    }               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    )               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    {               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    ]               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    :               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)
    ,               reduce using rule 168 (return_val -> type_doubly_linked_list ( arguments ) .)


state 404

    (169) return_val -> type_deque ( arguments ) .

    operator_add    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_sub    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_mul    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_div    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_trudiv reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_pow    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_join   reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_split  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitand reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitor  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitxor reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftleft reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftright reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_and    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_or     reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_xor    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_contains reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_incr   reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_decr   reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_outer  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_rotate reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_apply  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_compose reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_over   reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_map    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_less_than reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_less_than_equals reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_greater_than reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_greater_than_equals reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_equals reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_not_equals reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_smallest reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_greatest reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    [               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_scan   reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_reduc  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_bitnot reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_not    reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_inner  reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_reverse reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_sorted_incr reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    operator_sorted_decr reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    NEWLINE         reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    $end            reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    }               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    )               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    {               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    ]               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    :               reduce using rule 169 (return_val -> type_deque ( arguments ) .)
    ,               reduce using rule 169 (return_val -> type_deque ( arguments ) .)


state 405

    (170) return_val -> type_heap ( arguments ) .

    operator_add    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_sub    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_mul    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_div    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_trudiv reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_pow    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_join   reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_split  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitand reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitor  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitxor reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_and    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_or     reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_xor    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_contains reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_incr   reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_decr   reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_outer  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_rotate reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_apply  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_compose reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_over   reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_map    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_less_than reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_greater_than reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_equals reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_not_equals reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_smallest reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_greatest reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    [               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_scan   reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_reduc  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_bitnot reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_not    reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_inner  reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_reverse reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    NEWLINE         reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    $end            reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    }               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    )               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    {               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    ]               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    :               reduce using rule 170 (return_val -> type_heap ( arguments ) .)
    ,               reduce using rule 170 (return_val -> type_heap ( arguments ) .)


state 406

    (171) return_val -> type_fibonacci_heap ( arguments ) .

    operator_add    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sub    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_mul    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_div    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_trudiv reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_pow    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_join   reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_split  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitand reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitor  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitxor reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_and    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_or     reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_xor    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_contains reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_incr   reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_decr   reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_outer  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_rotate reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_apply  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_compose reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_over   reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_map    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_equals reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not_equals reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_smallest reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greatest reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    [               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_scan   reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reduc  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitnot reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not    reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_inner  reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reverse reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    NEWLINE         reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    $end            reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    }               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    )               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    {               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    ]               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    :               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)
    ,               reduce using rule 171 (return_val -> type_fibonacci_heap ( arguments ) .)


state 407

    (172) return_val -> type_tree ( arguments ) .

    operator_add    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_sub    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_mul    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_div    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_trudiv reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_pow    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_join   reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_split  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitand reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitor  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitxor reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_and    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_or     reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_xor    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_contains reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_incr   reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_decr   reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_outer  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_rotate reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_apply  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_compose reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_over   reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_map    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_less_than reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_greater_than reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_equals reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_not_equals reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_smallest reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_greatest reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    [               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_scan   reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_reduc  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_bitnot reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_not    reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_inner  reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_reverse reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    NEWLINE         reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    $end            reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    }               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    )               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    {               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    ]               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    :               reduce using rule 172 (return_val -> type_tree ( arguments ) .)
    ,               reduce using rule 172 (return_val -> type_tree ( arguments ) .)


state 408

    (173) return_val -> type_trie ( arguments ) .

    operator_add    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_sub    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_mul    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_div    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_trudiv reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_pow    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_join   reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_split  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitand reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitor  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitxor reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftleft reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftright reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_and    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_or     reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_xor    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_contains reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_incr   reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_decr   reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_outer  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_rotate reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_apply  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_compose reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_over   reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_map    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_less_than reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_less_than_equals reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_greater_than reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_greater_than_equals reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_equals reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_not_equals reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_smallest reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_greatest reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    [               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_scan   reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_reduc  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_bitnot reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_not    reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_inner  reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_reverse reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_sorted_incr reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    operator_sorted_decr reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    NEWLINE         reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    $end            reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    }               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    )               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    {               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    ]               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    :               reduce using rule 173 (return_val -> type_trie ( arguments ) .)
    ,               reduce using rule 173 (return_val -> type_trie ( arguments ) .)


state 409

    (174) return_val -> type_stack ( arguments ) .

    operator_add    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_sub    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_mul    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_div    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_trudiv reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_pow    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_join   reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_split  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitand reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitor  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitxor reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftleft reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftright reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_and    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_or     reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_xor    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_contains reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_incr   reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_decr   reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_outer  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_rotate reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_apply  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_compose reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_over   reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_map    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_less_than reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_less_than_equals reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_greater_than reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_greater_than_equals reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_equals reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_not_equals reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_smallest reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_greatest reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    [               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_scan   reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_reduc  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_bitnot reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_not    reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_inner  reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_reverse reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_sorted_incr reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    operator_sorted_decr reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    NEWLINE         reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    $end            reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    }               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    )               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    {               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    ]               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    :               reduce using rule 174 (return_val -> type_stack ( arguments ) .)
    ,               reduce using rule 174 (return_val -> type_stack ( arguments ) .)


state 410

    (175) return_val -> type_queue ( arguments ) .

    operator_add    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_sub    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_mul    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_div    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_trudiv reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_pow    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_join   reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_split  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitand reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitor  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitxor reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftleft reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftright reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_and    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_or     reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_xor    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_contains reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_incr   reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_decr   reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_outer  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_rotate reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_apply  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_compose reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_over   reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_map    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_less_than reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_less_than_equals reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_greater_than reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_greater_than_equals reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_equals reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_not_equals reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_smallest reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_greatest reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    [               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_scan   reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_reduc  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_bitnot reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_not    reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_inner  reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_reverse reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_sorted_incr reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    operator_sorted_decr reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    NEWLINE         reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    $end            reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    }               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    )               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    {               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    ]               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    :               reduce using rule 175 (return_val -> type_queue ( arguments ) .)
    ,               reduce using rule 175 (return_val -> type_queue ( arguments ) .)


state 411

    (176) return_val -> type_binary_search_tree ( arguments ) .

    operator_add    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sub    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_mul    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_div    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_trudiv reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_pow    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_join   reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_split  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitand reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitor  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitxor reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_and    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_or     reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_xor    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_contains reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_incr   reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_decr   reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_outer  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_rotate reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_apply  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_compose reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_over   reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_map    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_equals reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not_equals reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_smallest reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greatest reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    [               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_scan   reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reduc  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitnot reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not    reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_inner  reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reverse reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    NEWLINE         reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    $end            reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    }               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    )               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    {               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    ]               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    :               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)
    ,               reduce using rule 176 (return_val -> type_binary_search_tree ( arguments ) .)


state 412

    (177) return_val -> type_bitset ( arguments ) .

    operator_add    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_sub    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_mul    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_div    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_trudiv reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_pow    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_join   reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_split  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitand reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitor  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitxor reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftleft reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftright reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_and    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_or     reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_xor    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_contains reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_incr   reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_decr   reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_outer  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_rotate reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_apply  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_compose reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_over   reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_map    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_less_than reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_less_than_equals reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than_equals reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_equals reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_not_equals reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_smallest reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_greatest reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    [               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_scan   reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_reduc  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_bitnot reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_not    reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_inner  reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_reverse reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_incr reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_decr reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    NEWLINE         reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    $end            reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    }               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    )               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    {               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    ]               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    :               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)
    ,               reduce using rule 177 (return_val -> type_bitset ( arguments ) .)


state 413

    (178) return_val -> type_set ( arguments ) .

    operator_add    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_sub    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_mul    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_div    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_trudiv reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_pow    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_join   reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_split  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitand reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitor  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitxor reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitshiftleft reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitshiftright reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_and    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_or     reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_xor    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_contains reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_incr   reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_decr   reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_outer  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_rotate reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_apply  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_compose reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_over   reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_map    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_less_than reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_less_than_equals reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_greater_than reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_greater_than_equals reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_equals reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_not_equals reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_smallest reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_greatest reduce using rule 178 (return_val -> type_set ( arguments ) .)
    [               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_scan   reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_reduc  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_bitnot reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_not    reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_inner  reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_reverse reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_sorted_incr reduce using rule 178 (return_val -> type_set ( arguments ) .)
    operator_sorted_decr reduce using rule 178 (return_val -> type_set ( arguments ) .)
    NEWLINE         reduce using rule 178 (return_val -> type_set ( arguments ) .)
    $end            reduce using rule 178 (return_val -> type_set ( arguments ) .)
    }               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    )               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    {               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    ]               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    :               reduce using rule 178 (return_val -> type_set ( arguments ) .)
    ,               reduce using rule 178 (return_val -> type_set ( arguments ) .)


state 414

    (179) return_val -> type_map ( arguments ) .

    operator_add    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_sub    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_mul    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_div    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_trudiv reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_pow    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_join   reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_split  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitand reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitor  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitxor reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitshiftleft reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitshiftright reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_and    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_or     reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_xor    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_contains reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_incr   reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_decr   reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_outer  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_rotate reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_apply  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_compose reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_over   reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_map    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_less_than reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_less_than_equals reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_greater_than reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_greater_than_equals reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_equals reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_not_equals reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_smallest reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_greatest reduce using rule 179 (return_val -> type_map ( arguments ) .)
    [               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_scan   reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_reduc  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_bitnot reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_not    reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_inner  reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_reverse reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_sorted_incr reduce using rule 179 (return_val -> type_map ( arguments ) .)
    operator_sorted_decr reduce using rule 179 (return_val -> type_map ( arguments ) .)
    NEWLINE         reduce using rule 179 (return_val -> type_map ( arguments ) .)
    $end            reduce using rule 179 (return_val -> type_map ( arguments ) .)
    }               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    )               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    {               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    ]               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    :               reduce using rule 179 (return_val -> type_map ( arguments ) .)
    ,               reduce using rule 179 (return_val -> type_map ( arguments ) .)


state 415

    (180) return_val -> type_range ( arguments ) .

    operator_add    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_sub    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_mul    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_div    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_trudiv reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_pow    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_join   reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_split  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitand reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitor  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitxor reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitshiftleft reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitshiftright reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_and    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_or     reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_xor    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_contains reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_incr   reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_decr   reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_outer  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_rotate reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_apply  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_compose reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_over   reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_map    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_less_than reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_less_than_equals reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_greater_than reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_greater_than_equals reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_equals reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_not_equals reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_smallest reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_greatest reduce using rule 180 (return_val -> type_range ( arguments ) .)
    [               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_scan   reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_reduc  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_bitnot reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_not    reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_inner  reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_reverse reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_sorted_incr reduce using rule 180 (return_val -> type_range ( arguments ) .)
    operator_sorted_decr reduce using rule 180 (return_val -> type_range ( arguments ) .)
    NEWLINE         reduce using rule 180 (return_val -> type_range ( arguments ) .)
    $end            reduce using rule 180 (return_val -> type_range ( arguments ) .)
    }               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    )               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    {               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    ]               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    :               reduce using rule 180 (return_val -> type_range ( arguments ) .)
    ,               reduce using rule 180 (return_val -> type_range ( arguments ) .)


state 416

    (58) lambda_decl -> lambda comma_separated_names : expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
    NEWLINE         reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    $end            reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    }               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    )               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    {               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    ]               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    :               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    ,               reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_add    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sub    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_mul    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_div    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_trudiv [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_pow    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_join   [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_split  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitand [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitor  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitxor [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftleft [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftright [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_and    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_or     [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_xor    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_contains [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_incr   [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_decr   [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_outer  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_rotate [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_apply  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_compose [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_over   [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_map    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than_equals [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than_equals [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_equals [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not_equals [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_smallest [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greatest [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! [               [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_scan   [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reduc  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitnot [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not    [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_inner  [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reverse [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_incr [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_decr [ reduce using rule 58 (lambda_decl -> lambda comma_separated_names : expr .) ]

    OPERATOR                       shift and go to state 158

state 417

    (128) expr -> expr OPERATOR operator_inner OPERATOR expr .
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    operator_add    reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_sub    reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_join   reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_split  reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitand reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitor  reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitxor reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitshiftleft reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitshiftright reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_and    reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_or     reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_xor    reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_contains reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_outer  reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_less_than reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_less_than_equals reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greater_than reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greater_than_equals reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_equals reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_not_equals reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_smallest reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greatest reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    [               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_not    reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_inner  reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    NEWLINE         reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    $end            reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    }               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    )               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    {               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    ]               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    :               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    ,               reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

  ! operator_mul    [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_div    [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_trudiv [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_pow    [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_incr   [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_decr   [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_rotate [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_apply  [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_compose [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_over   [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_map    [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_scan   [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_reduc  [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_bitnot [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_reverse [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_sorted_incr [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_sorted_decr [ reduce using rule 128 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_add    [ shift and go to state 138 ]
  ! operator_sub    [ shift and go to state 139 ]
  ! operator_join   [ shift and go to state 144 ]
  ! operator_split  [ shift and go to state 145 ]
  ! operator_bitand [ shift and go to state 146 ]
  ! operator_bitor  [ shift and go to state 147 ]
  ! operator_bitxor [ shift and go to state 148 ]
  ! operator_bitshiftleft [ shift and go to state 149 ]
  ! operator_bitshiftright [ shift and go to state 150 ]
  ! operator_and    [ shift and go to state 151 ]
  ! operator_or     [ shift and go to state 152 ]
  ! operator_xor    [ shift and go to state 153 ]
  ! operator_contains [ shift and go to state 154 ]
  ! operator_outer  [ shift and go to state 157 ]
  ! operator_less_than [ shift and go to state 164 ]
  ! operator_less_than_equals [ shift and go to state 165 ]
  ! operator_greater_than [ shift and go to state 166 ]
  ! operator_greater_than_equals [ shift and go to state 167 ]
  ! operator_equals [ shift and go to state 168 ]
  ! operator_not_equals [ shift and go to state 169 ]
  ! operator_smallest [ shift and go to state 170 ]
  ! operator_greatest [ shift and go to state 171 ]
  ! [               [ shift and go to state 172 ]
  ! operator_not    [ shift and go to state 174 ]
  ! operator_inner  [ shift and go to state 53 ]

    OPERATOR                       shift and go to state 158

state 418

    (53) simple_slice -> expr [ expr : expr . ]
    (54) full_slice -> expr [ expr : expr . : expr ]
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    ]               shift and go to state 423
    :               shift and go to state 422
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 419

    (188) arguments -> arguments , arguments .
    (188) arguments -> arguments . , arguments

  ! shift/reduce conflict for , resolved as shift
    )               reduce using rule 188 (arguments -> arguments , arguments .)
    ,               shift and go to state 374

  ! ,               [ reduce using rule 188 (arguments -> arguments , arguments .) ]


state 420

    (90) func_decl -> func VAR ( def_arguments ) .

    {               reduce using rule 90 (func_decl -> func VAR ( def_arguments ) .)


state 421

    (93) def_arguments -> declaration_stmt ; . def_arguments
    (91) def_arguments -> . declaration_stmt
    (92) def_arguments -> . empty
    (93) def_arguments -> . declaration_stmt ; def_arguments
    (65) declaration_stmt -> . TYPE comma_separated_names
    (186) empty -> .
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    )               reduce using rule 186 (empty -> .)
    type_type       shift and go to state 206
    type_num        shift and go to state 207
    type_bool       shift and go to state 208
    type_any        shift and go to state 209
    type_u64        shift and go to state 210
    type_u32        shift and go to state 211
    type_u16        shift and go to state 212
    type_u8         shift and go to state 213
    type_i64        shift and go to state 214
    type_i32        shift and go to state 215
    type_i16        shift and go to state 216
    type_i8         shift and go to state 217
    type_f32        shift and go to state 218
    type_f64        shift and go to state 219
    type_str        shift and go to state 220
    type_list       shift and go to state 221
    type_tuple      shift and go to state 222
    type_array      shift and go to state 223
    type_vector     shift and go to state 224
    type_dict       shift and go to state 225
    type_generator  shift and go to state 226
    type_linked_list shift and go to state 227
    type_doubly_linked_list shift and go to state 228
    type_deque      shift and go to state 229
    type_heap       shift and go to state 230
    type_fibonacci_heap shift and go to state 231
    type_tree       shift and go to state 232
    type_trie       shift and go to state 233
    type_stack      shift and go to state 234
    type_queue      shift and go to state 235
    type_binary_search_tree shift and go to state 236
    type_bitset     shift and go to state 237
    type_set        shift and go to state 238
    type_map        shift and go to state 239
    type_range      shift and go to state 240

    declaration_stmt               shift and go to state 378
    def_arguments                  shift and go to state 424
    empty                          shift and go to state 379
    TYPE                           shift and go to state 380

state 422

    (54) full_slice -> expr [ expr : expr : . expr ]
    (55) expr -> . item
    (56) expr -> . simple_slice
    (57) expr -> . full_slice
    (103) expr -> . ( expr )
    (104) expr -> . expr operator_add expr
    (105) expr -> . expr operator_sub expr
    (106) expr -> . expr operator_mul expr
    (107) expr -> . expr operator_div expr
    (108) expr -> . expr operator_trudiv expr
    (109) expr -> . expr operator_pow expr
    (110) expr -> . expr operator_join expr
    (111) expr -> . expr operator_split expr
    (112) expr -> . OPERATOR operator_scan expr
    (113) expr -> . OPERATOR operator_reduc expr
    (114) expr -> . expr operator_bitand expr
    (115) expr -> . expr operator_bitor expr
    (116) expr -> . expr operator_bitxor expr
    (117) expr -> . expr operator_bitshiftleft expr
    (118) expr -> . expr operator_bitshiftright expr
    (119) expr -> . expr operator_and expr
    (120) expr -> . expr operator_or expr
    (121) expr -> . expr operator_xor expr
    (122) expr -> . expr operator_contains expr
    (123) expr -> . operator_bitnot expr
    (124) expr -> . operator_not expr
    (125) expr -> . expr operator_incr
    (126) expr -> . expr operator_decr
    (127) expr -> . expr operator_outer OPERATOR expr
    (128) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (129) expr -> . operator_reverse expr
    (130) expr -> . expr operator_rotate expr
    (131) expr -> . expr operator_apply expr
    (132) expr -> . expr operator_compose expr
    (133) expr -> . expr operator_over expr
    (134) expr -> . expr operator_map
    (135) expr -> . operator_sorted_incr expr
    (136) expr -> . operator_sorted_decr expr
    (137) expr -> . expr operator_less_than expr
    (138) expr -> . expr operator_less_than_equals expr
    (139) expr -> . expr operator_greater_than expr
    (140) expr -> . expr operator_greater_than_equals expr
    (141) expr -> . expr operator_equals expr
    (142) expr -> . expr operator_not_equals expr
    (143) expr -> . expr operator_smallest expr
    (144) expr -> . expr operator_greatest expr
    (145) expr -> . VAR
    (182) expr -> . const_val
    (183) expr -> . return_val
    (184) expr -> . lambda_decl
    (185) expr -> . TYPE
    (52) item -> . expr [ expr ]
    (53) simple_slice -> . expr [ expr : expr ]
    (54) full_slice -> . expr [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest
    (94) const_val -> . FLOAT
    (95) const_val -> . NUM
    (96) const_val -> . STRING_3SQ
    (97) const_val -> . STRING_3DQ
    (98) const_val -> . STRING_SQ
    (99) const_val -> . STRING_DQ
    (100) const_val -> . true
    (101) const_val -> . Null
    (102) const_val -> . false
    (146) return_val -> . type_type ( arguments )
    (147) return_val -> . type_num ( arguments )
    (148) return_val -> . type_bool ( arguments )
    (149) return_val -> . type_any ( arguments )
    (150) return_val -> . type_u64 ( arguments )
    (151) return_val -> . type_u32 ( arguments )
    (152) return_val -> . type_u16 ( arguments )
    (153) return_val -> . type_u8 ( arguments )
    (154) return_val -> . type_i64 ( arguments )
    (155) return_val -> . type_i32 ( arguments )
    (156) return_val -> . type_i16 ( arguments )
    (157) return_val -> . type_i8 ( arguments )
    (158) return_val -> . type_f32 ( arguments )
    (159) return_val -> . type_f64 ( arguments )
    (160) return_val -> . type_str ( arguments )
    (161) return_val -> . type_list ( arguments )
    (162) return_val -> . type_tuple ( arguments )
    (163) return_val -> . type_array ( arguments )
    (164) return_val -> . type_vector ( arguments )
    (165) return_val -> . type_dict ( arguments )
    (166) return_val -> . type_generator ( arguments )
    (167) return_val -> . type_linked_list ( arguments )
    (168) return_val -> . type_doubly_linked_list ( arguments )
    (169) return_val -> . type_deque ( arguments )
    (170) return_val -> . type_heap ( arguments )
    (171) return_val -> . type_fibonacci_heap ( arguments )
    (172) return_val -> . type_tree ( arguments )
    (173) return_val -> . type_trie ( arguments )
    (174) return_val -> . type_stack ( arguments )
    (175) return_val -> . type_queue ( arguments )
    (176) return_val -> . type_binary_search_tree ( arguments )
    (177) return_val -> . type_bitset ( arguments )
    (178) return_val -> . type_set ( arguments )
    (179) return_val -> . type_map ( arguments )
    (180) return_val -> . type_range ( arguments )
    (181) return_val -> . VAR ( arguments )
    (58) lambda_decl -> . lambda comma_separated_names : expr
    (11) TYPE -> . type_type
    (12) TYPE -> . type_num
    (13) TYPE -> . type_bool
    (14) TYPE -> . type_any
    (15) TYPE -> . type_u64
    (16) TYPE -> . type_u32
    (17) TYPE -> . type_u16
    (18) TYPE -> . type_u8
    (19) TYPE -> . type_i64
    (20) TYPE -> . type_i32
    (21) TYPE -> . type_i16
    (22) TYPE -> . type_i8
    (23) TYPE -> . type_f32
    (24) TYPE -> . type_f64
    (25) TYPE -> . type_str
    (26) TYPE -> . type_list
    (27) TYPE -> . type_tuple
    (28) TYPE -> . type_array
    (29) TYPE -> . type_vector
    (30) TYPE -> . type_dict
    (31) TYPE -> . type_generator
    (32) TYPE -> . type_linked_list
    (33) TYPE -> . type_doubly_linked_list
    (34) TYPE -> . type_deque
    (35) TYPE -> . type_heap
    (36) TYPE -> . type_fibonacci_heap
    (37) TYPE -> . type_tree
    (38) TYPE -> . type_trie
    (39) TYPE -> . type_stack
    (40) TYPE -> . type_queue
    (41) TYPE -> . type_binary_search_tree
    (42) TYPE -> . type_bitset
    (43) TYPE -> . type_set
    (44) TYPE -> . type_map
    (45) TYPE -> . type_range

    (               shift and go to state 27
    operator_bitnot shift and go to state 48
    operator_not    shift and go to state 49
    operator_reverse shift and go to state 54
    operator_sorted_incr shift and go to state 60
    operator_sorted_decr shift and go to state 61
    VAR             shift and go to state 182
    operator_add    shift and go to state 28
    operator_sub    shift and go to state 29
    operator_mul    shift and go to state 30
    operator_div    shift and go to state 31
    operator_trudiv shift and go to state 32
    operator_pow    shift and go to state 33
    operator_join   shift and go to state 34
    operator_split  shift and go to state 35
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitand shift and go to state 39
    operator_bitor  shift and go to state 40
    operator_bitxor shift and go to state 41
    operator_bitshiftleft shift and go to state 42
    operator_bitshiftright shift and go to state 43
    operator_and    shift and go to state 44
    operator_or     shift and go to state 45
    operator_xor    shift and go to state 46
    operator_contains shift and go to state 47
    operator_incr   shift and go to state 50
    operator_decr   shift and go to state 51
    operator_outer  shift and go to state 52
    operator_inner  shift and go to state 53
    operator_rotate shift and go to state 55
    operator_apply  shift and go to state 56
    operator_compose shift and go to state 57
    operator_over   shift and go to state 58
    operator_map    shift and go to state 59
    operator_less_than shift and go to state 62
    operator_less_than_equals shift and go to state 63
    operator_greater_than shift and go to state 64
    operator_greater_than_equals shift and go to state 65
    operator_equals shift and go to state 66
    operator_not_equals shift and go to state 67
    operator_smallest shift and go to state 68
    operator_greatest shift and go to state 69
    FLOAT           shift and go to state 88
    NUM             shift and go to state 89
    STRING_3SQ      shift and go to state 90
    STRING_3DQ      shift and go to state 91
    STRING_SQ       shift and go to state 92
    STRING_DQ       shift and go to state 93
    true            shift and go to state 94
    Null            shift and go to state 95
    false           shift and go to state 96
    type_type       shift and go to state 97
    type_num        shift and go to state 98
    type_bool       shift and go to state 99
    type_any        shift and go to state 100
    type_u64        shift and go to state 101
    type_u32        shift and go to state 102
    type_u16        shift and go to state 103
    type_u8         shift and go to state 104
    type_i64        shift and go to state 105
    type_i32        shift and go to state 106
    type_i16        shift and go to state 107
    type_i8         shift and go to state 108
    type_f32        shift and go to state 109
    type_f64        shift and go to state 110
    type_str        shift and go to state 111
    type_list       shift and go to state 112
    type_tuple      shift and go to state 113
    type_array      shift and go to state 114
    type_vector     shift and go to state 115
    type_dict       shift and go to state 116
    type_generator  shift and go to state 117
    type_linked_list shift and go to state 118
    type_doubly_linked_list shift and go to state 119
    type_deque      shift and go to state 120
    type_heap       shift and go to state 121
    type_fibonacci_heap shift and go to state 122
    type_tree       shift and go to state 123
    type_trie       shift and go to state 124
    type_stack      shift and go to state 125
    type_queue      shift and go to state 126
    type_binary_search_tree shift and go to state 127
    type_bitset     shift and go to state 128
    type_set        shift and go to state 129
    type_map        shift and go to state 130
    type_range      shift and go to state 131
    lambda          shift and go to state 132

    expr                           shift and go to state 425
    item                           shift and go to state 179
    simple_slice                   shift and go to state 180
    full_slice                     shift and go to state 181
    OPERATOR                       shift and go to state 36
    const_val                      shift and go to state 71
    return_val                     shift and go to state 72
    lambda_decl                    shift and go to state 73
    TYPE                           shift and go to state 183

state 423

    (53) simple_slice -> expr [ expr : expr ] .

    =               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_add    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_sub    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_mul    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_div    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_trudiv reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_pow    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_join   reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_split  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitand reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitor  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitxor reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitshiftleft reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitshiftright reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_and    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_or     reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_xor    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_contains reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_incr   reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_decr   reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_outer  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_rotate reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_apply  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_compose reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_over   reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_map    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_less_than reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_less_than_equals reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_greater_than reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_greater_than_equals reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_equals reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_not_equals reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_smallest reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_greatest reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    [               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_scan   reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_reduc  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_bitnot reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_not    reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_inner  reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_reverse reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_sorted_incr reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    operator_sorted_decr reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    NEWLINE         reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    $end            reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    }               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    )               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    {               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    ]               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    :               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)
    ,               reduce using rule 53 (simple_slice -> expr [ expr : expr ] .)


state 424

    (93) def_arguments -> declaration_stmt ; def_arguments .

    )               reduce using rule 93 (def_arguments -> declaration_stmt ; def_arguments .)


state 425

    (54) full_slice -> expr [ expr : expr : expr . ]
    (104) expr -> expr . operator_add expr
    (105) expr -> expr . operator_sub expr
    (106) expr -> expr . operator_mul expr
    (107) expr -> expr . operator_div expr
    (108) expr -> expr . operator_trudiv expr
    (109) expr -> expr . operator_pow expr
    (110) expr -> expr . operator_join expr
    (111) expr -> expr . operator_split expr
    (114) expr -> expr . operator_bitand expr
    (115) expr -> expr . operator_bitor expr
    (116) expr -> expr . operator_bitxor expr
    (117) expr -> expr . operator_bitshiftleft expr
    (118) expr -> expr . operator_bitshiftright expr
    (119) expr -> expr . operator_and expr
    (120) expr -> expr . operator_or expr
    (121) expr -> expr . operator_xor expr
    (122) expr -> expr . operator_contains expr
    (125) expr -> expr . operator_incr
    (126) expr -> expr . operator_decr
    (127) expr -> expr . operator_outer OPERATOR expr
    (128) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (130) expr -> expr . operator_rotate expr
    (131) expr -> expr . operator_apply expr
    (132) expr -> expr . operator_compose expr
    (133) expr -> expr . operator_over expr
    (134) expr -> expr . operator_map
    (137) expr -> expr . operator_less_than expr
    (138) expr -> expr . operator_less_than_equals expr
    (139) expr -> expr . operator_greater_than expr
    (140) expr -> expr . operator_greater_than_equals expr
    (141) expr -> expr . operator_equals expr
    (142) expr -> expr . operator_not_equals expr
    (143) expr -> expr . operator_smallest expr
    (144) expr -> expr . operator_greatest expr
    (52) item -> expr . [ expr ]
    (53) simple_slice -> expr . [ expr : expr ]
    (54) full_slice -> expr . [ expr : expr : expr ]
    (190) OPERATOR -> . operator_add
    (191) OPERATOR -> . operator_sub
    (192) OPERATOR -> . operator_mul
    (193) OPERATOR -> . operator_div
    (194) OPERATOR -> . operator_trudiv
    (195) OPERATOR -> . operator_pow
    (196) OPERATOR -> . operator_join
    (197) OPERATOR -> . operator_split
    (198) OPERATOR -> . operator_scan
    (199) OPERATOR -> . operator_reduc
    (200) OPERATOR -> . operator_bitand
    (201) OPERATOR -> . operator_bitor
    (202) OPERATOR -> . operator_bitxor
    (203) OPERATOR -> . operator_bitshiftleft
    (204) OPERATOR -> . operator_bitshiftright
    (205) OPERATOR -> . operator_and
    (206) OPERATOR -> . operator_or
    (207) OPERATOR -> . operator_xor
    (208) OPERATOR -> . operator_contains
    (209) OPERATOR -> . operator_bitnot
    (210) OPERATOR -> . operator_not
    (211) OPERATOR -> . operator_incr
    (212) OPERATOR -> . operator_decr
    (213) OPERATOR -> . operator_outer
    (214) OPERATOR -> . operator_inner
    (215) OPERATOR -> . operator_reverse
    (216) OPERATOR -> . operator_rotate
    (217) OPERATOR -> . operator_apply
    (218) OPERATOR -> . operator_compose
    (219) OPERATOR -> . operator_over
    (220) OPERATOR -> . operator_map
    (221) OPERATOR -> . operator_sorted_incr
    (222) OPERATOR -> . operator_sorted_decr
    (223) OPERATOR -> . operator_less_than
    (224) OPERATOR -> . operator_less_than_equals
    (225) OPERATOR -> . operator_greater_than
    (226) OPERATOR -> . operator_greater_than_equals
    (227) OPERATOR -> . operator_equals
    (228) OPERATOR -> . operator_not_equals
    (229) OPERATOR -> . operator_smallest
    (230) OPERATOR -> . operator_greatest

    ]               shift and go to state 426
    operator_add    shift and go to state 138
    operator_sub    shift and go to state 139
    operator_mul    shift and go to state 140
    operator_div    shift and go to state 141
    operator_trudiv shift and go to state 142
    operator_pow    shift and go to state 143
    operator_join   shift and go to state 144
    operator_split  shift and go to state 145
    operator_bitand shift and go to state 146
    operator_bitor  shift and go to state 147
    operator_bitxor shift and go to state 148
    operator_bitshiftleft shift and go to state 149
    operator_bitshiftright shift and go to state 150
    operator_and    shift and go to state 151
    operator_or     shift and go to state 152
    operator_xor    shift and go to state 153
    operator_contains shift and go to state 154
    operator_incr   shift and go to state 155
    operator_decr   shift and go to state 156
    operator_outer  shift and go to state 157
    operator_rotate shift and go to state 159
    operator_apply  shift and go to state 160
    operator_compose shift and go to state 161
    operator_over   shift and go to state 162
    operator_map    shift and go to state 163
    operator_less_than shift and go to state 164
    operator_less_than_equals shift and go to state 165
    operator_greater_than shift and go to state 166
    operator_greater_than_equals shift and go to state 167
    operator_equals shift and go to state 168
    operator_not_equals shift and go to state 169
    operator_smallest shift and go to state 170
    operator_greatest shift and go to state 171
    [               shift and go to state 172
    operator_scan   shift and go to state 37
    operator_reduc  shift and go to state 38
    operator_bitnot shift and go to state 173
    operator_not    shift and go to state 174
    operator_inner  shift and go to state 53
    operator_reverse shift and go to state 175
    operator_sorted_incr shift and go to state 176
    operator_sorted_decr shift and go to state 177

    OPERATOR                       shift and go to state 158

state 426

    (54) full_slice -> expr [ expr : expr : expr ] .

    =               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_add    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sub    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_mul    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_div    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_trudiv reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_pow    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_join   reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_split  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitand reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitor  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitxor reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitshiftleft reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitshiftright reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_and    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_or     reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_xor    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_contains reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_incr   reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_decr   reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_outer  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_rotate reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_apply  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_compose reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_over   reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_map    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_less_than reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_less_than_equals reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greater_than reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greater_than_equals reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_equals reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_not_equals reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_smallest reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greatest reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    [               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_scan   reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_reduc  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitnot reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_not    reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_inner  reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_reverse reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sorted_incr reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sorted_decr reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    NEWLINE         reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    $end            reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    }               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    )               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    {               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    ]               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    :               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)
    ,               reduce using rule 54 (full_slice -> expr [ expr : expr : expr ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 135 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 416 resolved as shift
WARNING: shift/reduce conflict for [ in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 416 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 416 resolved as shift
WARNING: shift/reduce conflict for , in state 419 resolved as shift
WARNING: reduce/reduce conflict in state 155 resolved using rule (expr -> expr operator_incr)
WARNING: rejected rule (OPERATOR -> operator_incr) in state 155
WARNING: reduce/reduce conflict in state 156 resolved using rule (expr -> expr operator_decr)
WARNING: rejected rule (OPERATOR -> operator_decr) in state 156
WARNING: reduce/reduce conflict in state 163 resolved using rule (expr -> expr operator_map)
WARNING: rejected rule (OPERATOR -> operator_map) in state 163

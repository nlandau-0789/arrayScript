Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> stmts
Rule 2     program -> newline stmts
Rule 3     program -> newline stmts newline
Rule 4     newline -> NEWLINE
Rule 5     newline -> NEWLINE newline
Rule 6     stmts -> stmt
Rule 7     stmts -> stmts newline stmt
Rule 8     stmt -> line_stmt
Rule 9     stmt -> block_stmt
Rule 10    TYPE -> type_type
Rule 11    TYPE -> type_num
Rule 12    TYPE -> type_bool
Rule 13    TYPE -> type_any
Rule 14    TYPE -> type_u64
Rule 15    TYPE -> type_u32
Rule 16    TYPE -> type_u16
Rule 17    TYPE -> type_u8
Rule 18    TYPE -> type_i64
Rule 19    TYPE -> type_i32
Rule 20    TYPE -> type_i16
Rule 21    TYPE -> type_i8
Rule 22    TYPE -> type_f32
Rule 23    TYPE -> type_f64
Rule 24    TYPE -> type_str
Rule 25    TYPE -> type_list
Rule 26    TYPE -> type_tuple
Rule 27    TYPE -> type_array
Rule 28    TYPE -> type_vector
Rule 29    TYPE -> type_dict
Rule 30    TYPE -> type_generator
Rule 31    TYPE -> type_linked_list
Rule 32    TYPE -> type_doubly_linked_list
Rule 33    TYPE -> type_deque
Rule 34    TYPE -> type_heap
Rule 35    TYPE -> type_fibonacci_heap
Rule 36    TYPE -> type_tree
Rule 37    TYPE -> type_trie
Rule 38    TYPE -> type_stack
Rule 39    TYPE -> type_queue
Rule 40    TYPE -> type_binary_search_tree
Rule 41    TYPE -> type_bitset
Rule 42    TYPE -> type_set
Rule 43    TYPE -> type_map
Rule 44    TYPE -> type_range
Rule 45    TYPE -> type_bad_struct
Rule 46    TYPE -> type_bad_struct2
Rule 47    line_stmt -> return_stmt
Rule 48    line_stmt -> expr
Rule 49    line_stmt -> del_stmt
Rule 50    line_stmt -> declaration_stmt
Rule 51    line_stmt -> pass
Rule 52    line_stmt -> continue
Rule 53    line_stmt -> break
Rule 54    line_stmt -> assign_stmt
Rule 55    item -> expr [ expr ]
Rule 56    simple_slice -> expr [ expr : expr ]
Rule 57    full_slice -> expr [ expr : expr : expr ]
Rule 58    expr -> item
Rule 59    expr -> simple_slice
Rule 60    expr -> full_slice
Rule 61    lambda_decl -> lambda comma_separated_names : expr
Rule 62    return_stmt -> return expr
Rule 63    del_stmt -> del expr
Rule 64    assign_stmt -> comma_separated_names = expr
Rule 65    assign_stmt -> item = expr
Rule 66    assign_stmt -> simple_slice = expr
Rule 67    assign_stmt -> full_slice = expr
Rule 68    declaration_stmt -> TYPE comma_separated_names
Rule 69    comma_separated_names -> VAR
Rule 70    comma_separated_names -> VAR , comma_separated_names
Rule 71    block_stmt -> block_decl { stmts }
Rule 72    block_stmt -> block_decl { }
Rule 73    block_stmt -> block_decl { newline }
Rule 74    block_decl -> for_decl
Rule 75    block_decl -> if_decl
Rule 76    block_decl -> else
Rule 77    block_decl -> elif_decl
Rule 78    block_decl -> operator_decl
Rule 79    block_decl -> struct_decl
Rule 80    block_decl -> while_decl
Rule 81    block_decl -> func_decl
Rule 82    for_decl -> for comma_separated_names operator_contains expr
Rule 83    if_decl -> if expr
Rule 84    elif_decl -> elif expr
Rule 85    operator_decl -> operator ( arguments )
Rule 86    struct_decl -> struct TYPE
Rule 87    while_decl -> while expr
Rule 88    func_decl -> func VAR ( def_arguments )
Rule 89    def_arguments -> declaration_stmt
Rule 90    def_arguments -> empty
Rule 91    def_arguments -> declaration_stmt ; def_arguments
Rule 92    const_val -> FLOAT
Rule 93    const_val -> NUM
Rule 94    const_val -> STRING_3SQ
Rule 95    const_val -> STRING_3DQ
Rule 96    const_val -> STRING_SQ
Rule 97    const_val -> STRING_DQ
Rule 98    const_val -> true
Rule 99    const_val -> Null
Rule 100   const_val -> false
Rule 101   expr -> ( expr )
Rule 102   expr -> expr operator_add expr
Rule 103   expr -> expr operator_sub expr
Rule 104   expr -> expr operator_mul expr
Rule 105   expr -> expr operator_div expr
Rule 106   expr -> expr operator_trudiv expr
Rule 107   expr -> expr operator_pow expr
Rule 108   expr -> expr operator_join expr
Rule 109   expr -> expr operator_split expr
Rule 110   expr -> OPERATOR operator_scan expr
Rule 111   expr -> OPERATOR operator_reduc expr
Rule 112   expr -> expr operator_bitand expr
Rule 113   expr -> expr operator_bitor expr
Rule 114   expr -> expr operator_bitxor expr
Rule 115   expr -> expr operator_bitshiftleft expr
Rule 116   expr -> expr operator_bitshiftright expr
Rule 117   expr -> expr operator_and expr
Rule 118   expr -> expr operator_or expr
Rule 119   expr -> expr operator_xor expr
Rule 120   expr -> expr operator_contains expr
Rule 121   expr -> operator_bitnot expr
Rule 122   expr -> operator_not expr
Rule 123   expr -> expr operator_incr
Rule 124   expr -> expr operator_decr
Rule 125   expr -> expr operator_outer OPERATOR expr
Rule 126   expr -> expr OPERATOR operator_inner OPERATOR expr
Rule 127   expr -> operator_reverse expr
Rule 128   expr -> expr operator_rotate expr
Rule 129   expr -> expr operator_apply expr
Rule 130   expr -> expr operator_compose expr
Rule 131   expr -> expr operator_over expr
Rule 132   expr -> expr operator_map
Rule 133   expr -> operator_sorted_incr expr
Rule 134   expr -> operator_sorted_decr expr
Rule 135   expr -> expr operator_less_than expr
Rule 136   expr -> expr operator_less_than_equals expr
Rule 137   expr -> expr operator_greater_than expr
Rule 138   expr -> expr operator_greater_than_equals expr
Rule 139   expr -> expr operator_equals expr
Rule 140   expr -> expr operator_not_equals expr
Rule 141   expr -> expr operator_smallest expr
Rule 142   expr -> expr operator_greatest expr
Rule 143   expr -> expr operator_goodname expr
Rule 144   expr -> operator_s_combinator expr expr expr
Rule 145   expr -> operator_s_combinator_2 OPERATOR OPERATOR expr
Rule 146   expr -> operator_goodname2 expr
Rule 147   expr -> VAR
Rule 148   return_val -> type_type ( arguments )
Rule 149   return_val -> type_num ( arguments )
Rule 150   return_val -> type_bool ( arguments )
Rule 151   return_val -> type_any ( arguments )
Rule 152   return_val -> type_u64 ( arguments )
Rule 153   return_val -> type_u32 ( arguments )
Rule 154   return_val -> type_u16 ( arguments )
Rule 155   return_val -> type_u8 ( arguments )
Rule 156   return_val -> type_i64 ( arguments )
Rule 157   return_val -> type_i32 ( arguments )
Rule 158   return_val -> type_i16 ( arguments )
Rule 159   return_val -> type_i8 ( arguments )
Rule 160   return_val -> type_f32 ( arguments )
Rule 161   return_val -> type_f64 ( arguments )
Rule 162   return_val -> type_str ( arguments )
Rule 163   return_val -> type_list ( arguments )
Rule 164   return_val -> type_tuple ( arguments )
Rule 165   return_val -> type_array ( arguments )
Rule 166   return_val -> type_vector ( arguments )
Rule 167   return_val -> type_dict ( arguments )
Rule 168   return_val -> type_generator ( arguments )
Rule 169   return_val -> type_linked_list ( arguments )
Rule 170   return_val -> type_doubly_linked_list ( arguments )
Rule 171   return_val -> type_deque ( arguments )
Rule 172   return_val -> type_heap ( arguments )
Rule 173   return_val -> type_fibonacci_heap ( arguments )
Rule 174   return_val -> type_tree ( arguments )
Rule 175   return_val -> type_trie ( arguments )
Rule 176   return_val -> type_stack ( arguments )
Rule 177   return_val -> type_queue ( arguments )
Rule 178   return_val -> type_binary_search_tree ( arguments )
Rule 179   return_val -> type_bitset ( arguments )
Rule 180   return_val -> type_set ( arguments )
Rule 181   return_val -> type_map ( arguments )
Rule 182   return_val -> type_range ( arguments )
Rule 183   return_val -> type_bad_struct ( arguments )
Rule 184   return_val -> type_bad_struct2 ( arguments )
Rule 185   return_val -> VAR ( arguments )
Rule 186   expr -> const_val
Rule 187   expr -> return_val
Rule 188   expr -> lambda_decl
Rule 189   expr -> TYPE
Rule 190   empty -> <empty>
Rule 191   arguments -> expr
Rule 192   arguments -> arguments , arguments
Rule 193   arguments -> empty
Rule 194   OPERATOR -> operator_add
Rule 195   OPERATOR -> operator_sub
Rule 196   OPERATOR -> operator_mul
Rule 197   OPERATOR -> operator_div
Rule 198   OPERATOR -> operator_trudiv
Rule 199   OPERATOR -> operator_pow
Rule 200   OPERATOR -> operator_join
Rule 201   OPERATOR -> operator_split
Rule 202   OPERATOR -> operator_scan
Rule 203   OPERATOR -> operator_reduc
Rule 204   OPERATOR -> operator_bitand
Rule 205   OPERATOR -> operator_bitor
Rule 206   OPERATOR -> operator_bitxor
Rule 207   OPERATOR -> operator_bitshiftleft
Rule 208   OPERATOR -> operator_bitshiftright
Rule 209   OPERATOR -> operator_and
Rule 210   OPERATOR -> operator_or
Rule 211   OPERATOR -> operator_xor
Rule 212   OPERATOR -> operator_contains
Rule 213   OPERATOR -> operator_bitnot
Rule 214   OPERATOR -> operator_not
Rule 215   OPERATOR -> operator_incr
Rule 216   OPERATOR -> operator_decr
Rule 217   OPERATOR -> operator_outer
Rule 218   OPERATOR -> operator_inner
Rule 219   OPERATOR -> operator_reverse
Rule 220   OPERATOR -> operator_rotate
Rule 221   OPERATOR -> operator_apply
Rule 222   OPERATOR -> operator_compose
Rule 223   OPERATOR -> operator_over
Rule 224   OPERATOR -> operator_map
Rule 225   OPERATOR -> operator_sorted_incr
Rule 226   OPERATOR -> operator_sorted_decr
Rule 227   OPERATOR -> operator_less_than
Rule 228   OPERATOR -> operator_less_than_equals
Rule 229   OPERATOR -> operator_greater_than
Rule 230   OPERATOR -> operator_greater_than_equals
Rule 231   OPERATOR -> operator_equals
Rule 232   OPERATOR -> operator_not_equals
Rule 233   OPERATOR -> operator_smallest
Rule 234   OPERATOR -> operator_greatest
Rule 235   OPERATOR -> operator_goodname
Rule 236   OPERATOR -> operator_s_combinator
Rule 237   OPERATOR -> operator_s_combinator_2
Rule 238   OPERATOR -> operator_goodname2

Terminals, with rules where they appear

(                    : 85 88 101 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185
)                    : 85 88 101 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185
,                    : 70 192
:                    : 56 57 57 61
;                    : 91
=                    : 64 65 66 67
FLOAT                : 92
NEWLINE              : 4 5
NUM                  : 93
Null                 : 99
STRING_3DQ           : 95
STRING_3SQ           : 94
STRING_DQ            : 97
STRING_SQ            : 96
VAR                  : 69 70 88 147 185
[                    : 55 56 57
]                    : 55 56 57
break                : 53
continue             : 52
del                  : 63
elif                 : 84
else                 : 76
error                : 
false                : 100
for                  : 82
func                 : 88
if                   : 83
lambda               : 61
operator             : 85
operator_add         : 102 194
operator_and         : 117 209
operator_apply       : 129 221
operator_bitand      : 112 204
operator_bitnot      : 121 213
operator_bitor       : 113 205
operator_bitshiftleft : 115 207
operator_bitshiftright : 116 208
operator_bitxor      : 114 206
operator_compose     : 130 222
operator_contains    : 82 120 212
operator_decr        : 124 216
operator_div         : 105 197
operator_equals      : 139 231
operator_goodname    : 143 235
operator_goodname2   : 146 238
operator_greater_than : 137 229
operator_greater_than_equals : 138 230
operator_greatest    : 142 234
operator_incr        : 123 215
operator_inner       : 126 218
operator_join        : 108 200
operator_less_than   : 135 227
operator_less_than_equals : 136 228
operator_map         : 132 224
operator_mul         : 104 196
operator_not         : 122 214
operator_not_equals  : 140 232
operator_or          : 118 210
operator_outer       : 125 217
operator_over        : 131 223
operator_pow         : 107 199
operator_reduc       : 111 203
operator_reverse     : 127 219
operator_rotate      : 128 220
operator_s_combinator : 144 236
operator_s_combinator_2 : 145 237
operator_scan        : 110 202
operator_smallest    : 141 233
operator_sorted_decr : 134 226
operator_sorted_incr : 133 225
operator_split       : 109 201
operator_sub         : 103 195
operator_trudiv      : 106 198
operator_xor         : 119 211
pass                 : 51
return               : 62
struct               : 86
true                 : 98
type_any             : 13 151
type_array           : 27 165
type_bad_struct      : 45 183
type_bad_struct2     : 46 184
type_binary_search_tree : 40 178
type_bitset          : 41 179
type_bool            : 12 150
type_deque           : 33 171
type_dict            : 29 167
type_doubly_linked_list : 32 170
type_f32             : 22 160
type_f64             : 23 161
type_fibonacci_heap  : 35 173
type_generator       : 30 168
type_heap            : 34 172
type_i16             : 20 158
type_i32             : 19 157
type_i64             : 18 156
type_i8              : 21 159
type_linked_list     : 31 169
type_list            : 25 163
type_map             : 43 181
type_num             : 11 149
type_queue           : 39 177
type_range           : 44 182
type_set             : 42 180
type_stack           : 38 176
type_str             : 24 162
type_tree            : 36 174
type_trie            : 37 175
type_tuple           : 26 164
type_type            : 10 148
type_u16             : 16 154
type_u32             : 15 153
type_u64             : 14 152
type_u8              : 17 155
type_vector          : 28 166
while                : 87
{                    : 71 72 73
}                    : 71 72 73

Nonterminals, with rules where they appear

OPERATOR             : 110 111 125 126 126 145 145
TYPE                 : 68 86 189
arguments            : 85 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 192 192
assign_stmt          : 54
block_decl           : 71 72 73
block_stmt           : 9
comma_separated_names : 61 64 68 70 82
const_val            : 186
declaration_stmt     : 50 89 91
def_arguments        : 88 91
del_stmt             : 49
elif_decl            : 77
empty                : 90 193
expr                 : 48 55 55 56 56 56 57 57 57 57 61 62 63 64 65 66 67 82 83 84 87 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 122 123 124 125 125 126 126 127 128 128 129 129 130 130 131 131 132 133 134 135 135 136 136 137 137 138 138 139 139 140 140 141 141 142 142 143 143 144 144 144 145 146 191
for_decl             : 74
full_slice           : 60 67
func_decl            : 81
if_decl              : 75
item                 : 58 65
lambda_decl          : 188
line_stmt            : 8
newline              : 2 3 3 5 7 73
operator_decl        : 78
program              : 0
return_stmt          : 47
return_val           : 187
simple_slice         : 59 66
stmt                 : 6 7
stmts                : 1 2 3 7 71
struct_decl          : 79
while_decl           : 80

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . stmts
    (2) program -> . newline stmts
    (3) program -> . newline stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (72) block_stmt -> . block_decl { }
    (73) block_stmt -> . block_decl { newline }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (74) block_decl -> . for_decl
    (75) block_decl -> . if_decl
    (76) block_decl -> . else
    (77) block_decl -> . elif_decl
    (78) block_decl -> . operator_decl
    (79) block_decl -> . struct_decl
    (80) block_decl -> . while_decl
    (81) block_decl -> . func_decl
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (82) for_decl -> . for comma_separated_names operator_contains expr
    (83) if_decl -> . if expr
    (84) elif_decl -> . elif expr
    (85) operator_decl -> . operator ( arguments )
    (86) struct_decl -> . struct TYPE
    (87) while_decl -> . while expr
    (88) func_decl -> . func VAR ( def_arguments )

    NEWLINE         shift and go to state 5
    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 68
    del             shift and go to state 73
    else            shift and go to state 77
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129
    for             shift and go to state 130
    if              shift and go to state 131
    elif            shift and go to state 132
    operator        shift and go to state 133
    struct          shift and go to state 134
    while           shift and go to state 135
    func            shift and go to state 136

    program                        shift and go to state 1
    stmts                          shift and go to state 2
    newline                        shift and go to state 3
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 72
    comma_separated_names          shift and go to state 74
    for_decl                       shift and go to state 75
    if_decl                        shift and go to state 76
    elif_decl                      shift and go to state 78
    operator_decl                  shift and go to state 79
    struct_decl                    shift and go to state 80
    while_decl                     shift and go to state 81
    func_decl                      shift and go to state 82

state 1

    (0) S' -> program .



state 2

    (1) program -> stmts .
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 1 (program -> stmts .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 137

state 3

    (2) program -> newline . stmts
    (3) program -> newline . stmts newline
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (72) block_stmt -> . block_decl { }
    (73) block_stmt -> . block_decl { newline }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (74) block_decl -> . for_decl
    (75) block_decl -> . if_decl
    (76) block_decl -> . else
    (77) block_decl -> . elif_decl
    (78) block_decl -> . operator_decl
    (79) block_decl -> . struct_decl
    (80) block_decl -> . while_decl
    (81) block_decl -> . func_decl
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (82) for_decl -> . for comma_separated_names operator_contains expr
    (83) if_decl -> . if expr
    (84) elif_decl -> . elif expr
    (85) operator_decl -> . operator ( arguments )
    (86) struct_decl -> . struct TYPE
    (87) while_decl -> . while expr
    (88) func_decl -> . func VAR ( def_arguments )

    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 68
    del             shift and go to state 73
    else            shift and go to state 77
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129
    for             shift and go to state 130
    if              shift and go to state 131
    elif            shift and go to state 132
    operator        shift and go to state 133
    struct          shift and go to state 134
    while           shift and go to state 135
    func            shift and go to state 136

    stmts                          shift and go to state 138
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 72
    comma_separated_names          shift and go to state 74
    for_decl                       shift and go to state 75
    if_decl                        shift and go to state 76
    elif_decl                      shift and go to state 78
    operator_decl                  shift and go to state 79
    struct_decl                    shift and go to state 80
    while_decl                     shift and go to state 81
    func_decl                      shift and go to state 82

state 4

    (6) stmts -> stmt .

    NEWLINE         reduce using rule 6 (stmts -> stmt .)
    $end            reduce using rule 6 (stmts -> stmt .)
    }               reduce using rule 6 (stmts -> stmt .)


state 5

    (4) newline -> NEWLINE .
    (5) newline -> NEWLINE . newline
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    pass            reduce using rule 4 (newline -> NEWLINE .)
    continue        reduce using rule 4 (newline -> NEWLINE .)
    break           reduce using rule 4 (newline -> NEWLINE .)
    return          reduce using rule 4 (newline -> NEWLINE .)
    (               reduce using rule 4 (newline -> NEWLINE .)
    operator_bitnot reduce using rule 4 (newline -> NEWLINE .)
    operator_not    reduce using rule 4 (newline -> NEWLINE .)
    operator_reverse reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_incr reduce using rule 4 (newline -> NEWLINE .)
    operator_sorted_decr reduce using rule 4 (newline -> NEWLINE .)
    operator_s_combinator reduce using rule 4 (newline -> NEWLINE .)
    operator_s_combinator_2 reduce using rule 4 (newline -> NEWLINE .)
    operator_goodname2 reduce using rule 4 (newline -> NEWLINE .)
    VAR             reduce using rule 4 (newline -> NEWLINE .)
    del             reduce using rule 4 (newline -> NEWLINE .)
    else            reduce using rule 4 (newline -> NEWLINE .)
    operator_add    reduce using rule 4 (newline -> NEWLINE .)
    operator_sub    reduce using rule 4 (newline -> NEWLINE .)
    operator_mul    reduce using rule 4 (newline -> NEWLINE .)
    operator_div    reduce using rule 4 (newline -> NEWLINE .)
    operator_trudiv reduce using rule 4 (newline -> NEWLINE .)
    operator_pow    reduce using rule 4 (newline -> NEWLINE .)
    operator_join   reduce using rule 4 (newline -> NEWLINE .)
    operator_split  reduce using rule 4 (newline -> NEWLINE .)
    operator_scan   reduce using rule 4 (newline -> NEWLINE .)
    operator_reduc  reduce using rule 4 (newline -> NEWLINE .)
    operator_bitand reduce using rule 4 (newline -> NEWLINE .)
    operator_bitor  reduce using rule 4 (newline -> NEWLINE .)
    operator_bitxor reduce using rule 4 (newline -> NEWLINE .)
    operator_bitshiftleft reduce using rule 4 (newline -> NEWLINE .)
    operator_bitshiftright reduce using rule 4 (newline -> NEWLINE .)
    operator_and    reduce using rule 4 (newline -> NEWLINE .)
    operator_or     reduce using rule 4 (newline -> NEWLINE .)
    operator_xor    reduce using rule 4 (newline -> NEWLINE .)
    operator_contains reduce using rule 4 (newline -> NEWLINE .)
    operator_incr   reduce using rule 4 (newline -> NEWLINE .)
    operator_decr   reduce using rule 4 (newline -> NEWLINE .)
    operator_outer  reduce using rule 4 (newline -> NEWLINE .)
    operator_inner  reduce using rule 4 (newline -> NEWLINE .)
    operator_rotate reduce using rule 4 (newline -> NEWLINE .)
    operator_apply  reduce using rule 4 (newline -> NEWLINE .)
    operator_compose reduce using rule 4 (newline -> NEWLINE .)
    operator_over   reduce using rule 4 (newline -> NEWLINE .)
    operator_map    reduce using rule 4 (newline -> NEWLINE .)
    operator_less_than reduce using rule 4 (newline -> NEWLINE .)
    operator_less_than_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_greater_than reduce using rule 4 (newline -> NEWLINE .)
    operator_greater_than_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_not_equals reduce using rule 4 (newline -> NEWLINE .)
    operator_smallest reduce using rule 4 (newline -> NEWLINE .)
    operator_greatest reduce using rule 4 (newline -> NEWLINE .)
    operator_goodname reduce using rule 4 (newline -> NEWLINE .)
    FLOAT           reduce using rule 4 (newline -> NEWLINE .)
    NUM             reduce using rule 4 (newline -> NEWLINE .)
    STRING_3SQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_3DQ      reduce using rule 4 (newline -> NEWLINE .)
    STRING_SQ       reduce using rule 4 (newline -> NEWLINE .)
    STRING_DQ       reduce using rule 4 (newline -> NEWLINE .)
    true            reduce using rule 4 (newline -> NEWLINE .)
    Null            reduce using rule 4 (newline -> NEWLINE .)
    false           reduce using rule 4 (newline -> NEWLINE .)
    type_type       reduce using rule 4 (newline -> NEWLINE .)
    type_num        reduce using rule 4 (newline -> NEWLINE .)
    type_bool       reduce using rule 4 (newline -> NEWLINE .)
    type_any        reduce using rule 4 (newline -> NEWLINE .)
    type_u64        reduce using rule 4 (newline -> NEWLINE .)
    type_u32        reduce using rule 4 (newline -> NEWLINE .)
    type_u16        reduce using rule 4 (newline -> NEWLINE .)
    type_u8         reduce using rule 4 (newline -> NEWLINE .)
    type_i64        reduce using rule 4 (newline -> NEWLINE .)
    type_i32        reduce using rule 4 (newline -> NEWLINE .)
    type_i16        reduce using rule 4 (newline -> NEWLINE .)
    type_i8         reduce using rule 4 (newline -> NEWLINE .)
    type_f32        reduce using rule 4 (newline -> NEWLINE .)
    type_f64        reduce using rule 4 (newline -> NEWLINE .)
    type_str        reduce using rule 4 (newline -> NEWLINE .)
    type_list       reduce using rule 4 (newline -> NEWLINE .)
    type_tuple      reduce using rule 4 (newline -> NEWLINE .)
    type_array      reduce using rule 4 (newline -> NEWLINE .)
    type_vector     reduce using rule 4 (newline -> NEWLINE .)
    type_dict       reduce using rule 4 (newline -> NEWLINE .)
    type_generator  reduce using rule 4 (newline -> NEWLINE .)
    type_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_doubly_linked_list reduce using rule 4 (newline -> NEWLINE .)
    type_deque      reduce using rule 4 (newline -> NEWLINE .)
    type_heap       reduce using rule 4 (newline -> NEWLINE .)
    type_fibonacci_heap reduce using rule 4 (newline -> NEWLINE .)
    type_tree       reduce using rule 4 (newline -> NEWLINE .)
    type_trie       reduce using rule 4 (newline -> NEWLINE .)
    type_stack      reduce using rule 4 (newline -> NEWLINE .)
    type_queue      reduce using rule 4 (newline -> NEWLINE .)
    type_binary_search_tree reduce using rule 4 (newline -> NEWLINE .)
    type_bitset     reduce using rule 4 (newline -> NEWLINE .)
    type_set        reduce using rule 4 (newline -> NEWLINE .)
    type_map        reduce using rule 4 (newline -> NEWLINE .)
    type_range      reduce using rule 4 (newline -> NEWLINE .)
    type_bad_struct reduce using rule 4 (newline -> NEWLINE .)
    type_bad_struct2 reduce using rule 4 (newline -> NEWLINE .)
    lambda          reduce using rule 4 (newline -> NEWLINE .)
    for             reduce using rule 4 (newline -> NEWLINE .)
    if              reduce using rule 4 (newline -> NEWLINE .)
    elif            reduce using rule 4 (newline -> NEWLINE .)
    operator        reduce using rule 4 (newline -> NEWLINE .)
    struct          reduce using rule 4 (newline -> NEWLINE .)
    while           reduce using rule 4 (newline -> NEWLINE .)
    func            reduce using rule 4 (newline -> NEWLINE .)
    $end            reduce using rule 4 (newline -> NEWLINE .)
    }               reduce using rule 4 (newline -> NEWLINE .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 139

state 6

    (8) stmt -> line_stmt .

    NEWLINE         reduce using rule 8 (stmt -> line_stmt .)
    $end            reduce using rule 8 (stmt -> line_stmt .)
    }               reduce using rule 8 (stmt -> line_stmt .)


state 7

    (9) stmt -> block_stmt .

    NEWLINE         reduce using rule 9 (stmt -> block_stmt .)
    $end            reduce using rule 9 (stmt -> block_stmt .)
    }               reduce using rule 9 (stmt -> block_stmt .)


state 8

    (47) line_stmt -> return_stmt .

    NEWLINE         reduce using rule 47 (line_stmt -> return_stmt .)
    $end            reduce using rule 47 (line_stmt -> return_stmt .)
    }               reduce using rule 47 (line_stmt -> return_stmt .)


state 9

    (48) line_stmt -> expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 48 (line_stmt -> expr .)
    $end            reduce using rule 48 (line_stmt -> expr .)
    }               reduce using rule 48 (line_stmt -> expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 10

    (49) line_stmt -> del_stmt .

    NEWLINE         reduce using rule 49 (line_stmt -> del_stmt .)
    $end            reduce using rule 49 (line_stmt -> del_stmt .)
    }               reduce using rule 49 (line_stmt -> del_stmt .)


state 11

    (50) line_stmt -> declaration_stmt .

    NEWLINE         reduce using rule 50 (line_stmt -> declaration_stmt .)
    $end            reduce using rule 50 (line_stmt -> declaration_stmt .)
    }               reduce using rule 50 (line_stmt -> declaration_stmt .)


state 12

    (51) line_stmt -> pass .

    NEWLINE         reduce using rule 51 (line_stmt -> pass .)
    $end            reduce using rule 51 (line_stmt -> pass .)
    }               reduce using rule 51 (line_stmt -> pass .)


state 13

    (52) line_stmt -> continue .

    NEWLINE         reduce using rule 52 (line_stmt -> continue .)
    $end            reduce using rule 52 (line_stmt -> continue .)
    }               reduce using rule 52 (line_stmt -> continue .)


state 14

    (53) line_stmt -> break .

    NEWLINE         reduce using rule 53 (line_stmt -> break .)
    $end            reduce using rule 53 (line_stmt -> break .)
    }               reduce using rule 53 (line_stmt -> break .)


state 15

    (54) line_stmt -> assign_stmt .

    NEWLINE         reduce using rule 54 (line_stmt -> assign_stmt .)
    $end            reduce using rule 54 (line_stmt -> assign_stmt .)
    }               reduce using rule 54 (line_stmt -> assign_stmt .)


state 16

    (71) block_stmt -> block_decl . { stmts }
    (72) block_stmt -> block_decl . { }
    (73) block_stmt -> block_decl . { newline }

    {               shift and go to state 184


state 17

    (62) return_stmt -> return . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 185
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 18

    (58) expr -> item .
    (65) assign_stmt -> item . = expr

    operator_add    reduce using rule 58 (expr -> item .)
    operator_sub    reduce using rule 58 (expr -> item .)
    operator_mul    reduce using rule 58 (expr -> item .)
    operator_div    reduce using rule 58 (expr -> item .)
    operator_trudiv reduce using rule 58 (expr -> item .)
    operator_pow    reduce using rule 58 (expr -> item .)
    operator_join   reduce using rule 58 (expr -> item .)
    operator_split  reduce using rule 58 (expr -> item .)
    operator_bitand reduce using rule 58 (expr -> item .)
    operator_bitor  reduce using rule 58 (expr -> item .)
    operator_bitxor reduce using rule 58 (expr -> item .)
    operator_bitshiftleft reduce using rule 58 (expr -> item .)
    operator_bitshiftright reduce using rule 58 (expr -> item .)
    operator_and    reduce using rule 58 (expr -> item .)
    operator_or     reduce using rule 58 (expr -> item .)
    operator_xor    reduce using rule 58 (expr -> item .)
    operator_contains reduce using rule 58 (expr -> item .)
    operator_incr   reduce using rule 58 (expr -> item .)
    operator_decr   reduce using rule 58 (expr -> item .)
    operator_outer  reduce using rule 58 (expr -> item .)
    operator_rotate reduce using rule 58 (expr -> item .)
    operator_apply  reduce using rule 58 (expr -> item .)
    operator_compose reduce using rule 58 (expr -> item .)
    operator_over   reduce using rule 58 (expr -> item .)
    operator_map    reduce using rule 58 (expr -> item .)
    operator_less_than reduce using rule 58 (expr -> item .)
    operator_less_than_equals reduce using rule 58 (expr -> item .)
    operator_greater_than reduce using rule 58 (expr -> item .)
    operator_greater_than_equals reduce using rule 58 (expr -> item .)
    operator_equals reduce using rule 58 (expr -> item .)
    operator_not_equals reduce using rule 58 (expr -> item .)
    operator_smallest reduce using rule 58 (expr -> item .)
    operator_greatest reduce using rule 58 (expr -> item .)
    operator_goodname reduce using rule 58 (expr -> item .)
    [               reduce using rule 58 (expr -> item .)
    operator_scan   reduce using rule 58 (expr -> item .)
    operator_reduc  reduce using rule 58 (expr -> item .)
    operator_bitnot reduce using rule 58 (expr -> item .)
    operator_not    reduce using rule 58 (expr -> item .)
    operator_inner  reduce using rule 58 (expr -> item .)
    operator_reverse reduce using rule 58 (expr -> item .)
    operator_sorted_incr reduce using rule 58 (expr -> item .)
    operator_sorted_decr reduce using rule 58 (expr -> item .)
    operator_s_combinator reduce using rule 58 (expr -> item .)
    operator_s_combinator_2 reduce using rule 58 (expr -> item .)
    operator_goodname2 reduce using rule 58 (expr -> item .)
    NEWLINE         reduce using rule 58 (expr -> item .)
    $end            reduce using rule 58 (expr -> item .)
    }               reduce using rule 58 (expr -> item .)
    =               shift and go to state 191


state 19

    (59) expr -> simple_slice .
    (66) assign_stmt -> simple_slice . = expr

    operator_add    reduce using rule 59 (expr -> simple_slice .)
    operator_sub    reduce using rule 59 (expr -> simple_slice .)
    operator_mul    reduce using rule 59 (expr -> simple_slice .)
    operator_div    reduce using rule 59 (expr -> simple_slice .)
    operator_trudiv reduce using rule 59 (expr -> simple_slice .)
    operator_pow    reduce using rule 59 (expr -> simple_slice .)
    operator_join   reduce using rule 59 (expr -> simple_slice .)
    operator_split  reduce using rule 59 (expr -> simple_slice .)
    operator_bitand reduce using rule 59 (expr -> simple_slice .)
    operator_bitor  reduce using rule 59 (expr -> simple_slice .)
    operator_bitxor reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 59 (expr -> simple_slice .)
    operator_and    reduce using rule 59 (expr -> simple_slice .)
    operator_or     reduce using rule 59 (expr -> simple_slice .)
    operator_xor    reduce using rule 59 (expr -> simple_slice .)
    operator_contains reduce using rule 59 (expr -> simple_slice .)
    operator_incr   reduce using rule 59 (expr -> simple_slice .)
    operator_decr   reduce using rule 59 (expr -> simple_slice .)
    operator_outer  reduce using rule 59 (expr -> simple_slice .)
    operator_rotate reduce using rule 59 (expr -> simple_slice .)
    operator_apply  reduce using rule 59 (expr -> simple_slice .)
    operator_compose reduce using rule 59 (expr -> simple_slice .)
    operator_over   reduce using rule 59 (expr -> simple_slice .)
    operator_map    reduce using rule 59 (expr -> simple_slice .)
    operator_less_than reduce using rule 59 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_equals reduce using rule 59 (expr -> simple_slice .)
    operator_not_equals reduce using rule 59 (expr -> simple_slice .)
    operator_smallest reduce using rule 59 (expr -> simple_slice .)
    operator_greatest reduce using rule 59 (expr -> simple_slice .)
    operator_goodname reduce using rule 59 (expr -> simple_slice .)
    [               reduce using rule 59 (expr -> simple_slice .)
    operator_scan   reduce using rule 59 (expr -> simple_slice .)
    operator_reduc  reduce using rule 59 (expr -> simple_slice .)
    operator_bitnot reduce using rule 59 (expr -> simple_slice .)
    operator_not    reduce using rule 59 (expr -> simple_slice .)
    operator_inner  reduce using rule 59 (expr -> simple_slice .)
    operator_reverse reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator_2 reduce using rule 59 (expr -> simple_slice .)
    operator_goodname2 reduce using rule 59 (expr -> simple_slice .)
    NEWLINE         reduce using rule 59 (expr -> simple_slice .)
    $end            reduce using rule 59 (expr -> simple_slice .)
    }               reduce using rule 59 (expr -> simple_slice .)
    =               shift and go to state 192


state 20

    (60) expr -> full_slice .
    (67) assign_stmt -> full_slice . = expr

    operator_add    reduce using rule 60 (expr -> full_slice .)
    operator_sub    reduce using rule 60 (expr -> full_slice .)
    operator_mul    reduce using rule 60 (expr -> full_slice .)
    operator_div    reduce using rule 60 (expr -> full_slice .)
    operator_trudiv reduce using rule 60 (expr -> full_slice .)
    operator_pow    reduce using rule 60 (expr -> full_slice .)
    operator_join   reduce using rule 60 (expr -> full_slice .)
    operator_split  reduce using rule 60 (expr -> full_slice .)
    operator_bitand reduce using rule 60 (expr -> full_slice .)
    operator_bitor  reduce using rule 60 (expr -> full_slice .)
    operator_bitxor reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 60 (expr -> full_slice .)
    operator_and    reduce using rule 60 (expr -> full_slice .)
    operator_or     reduce using rule 60 (expr -> full_slice .)
    operator_xor    reduce using rule 60 (expr -> full_slice .)
    operator_contains reduce using rule 60 (expr -> full_slice .)
    operator_incr   reduce using rule 60 (expr -> full_slice .)
    operator_decr   reduce using rule 60 (expr -> full_slice .)
    operator_outer  reduce using rule 60 (expr -> full_slice .)
    operator_rotate reduce using rule 60 (expr -> full_slice .)
    operator_apply  reduce using rule 60 (expr -> full_slice .)
    operator_compose reduce using rule 60 (expr -> full_slice .)
    operator_over   reduce using rule 60 (expr -> full_slice .)
    operator_map    reduce using rule 60 (expr -> full_slice .)
    operator_less_than reduce using rule 60 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_greater_than reduce using rule 60 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_equals reduce using rule 60 (expr -> full_slice .)
    operator_not_equals reduce using rule 60 (expr -> full_slice .)
    operator_smallest reduce using rule 60 (expr -> full_slice .)
    operator_greatest reduce using rule 60 (expr -> full_slice .)
    operator_goodname reduce using rule 60 (expr -> full_slice .)
    [               reduce using rule 60 (expr -> full_slice .)
    operator_scan   reduce using rule 60 (expr -> full_slice .)
    operator_reduc  reduce using rule 60 (expr -> full_slice .)
    operator_bitnot reduce using rule 60 (expr -> full_slice .)
    operator_not    reduce using rule 60 (expr -> full_slice .)
    operator_inner  reduce using rule 60 (expr -> full_slice .)
    operator_reverse reduce using rule 60 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 60 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator_2 reduce using rule 60 (expr -> full_slice .)
    operator_goodname2 reduce using rule 60 (expr -> full_slice .)
    NEWLINE         reduce using rule 60 (expr -> full_slice .)
    $end            reduce using rule 60 (expr -> full_slice .)
    }               reduce using rule 60 (expr -> full_slice .)
    =               shift and go to state 193


state 21

    (101) expr -> ( . expr )
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 194
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 22

    (194) OPERATOR -> operator_add .

    operator_scan   reduce using rule 194 (OPERATOR -> operator_add .)
    operator_reduc  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_add    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_sub    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_mul    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_div    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_trudiv reduce using rule 194 (OPERATOR -> operator_add .)
    operator_pow    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_join   reduce using rule 194 (OPERATOR -> operator_add .)
    operator_split  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitand reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitor  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitxor reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitshiftleft reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitshiftright reduce using rule 194 (OPERATOR -> operator_add .)
    operator_and    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_or     reduce using rule 194 (OPERATOR -> operator_add .)
    operator_xor    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_contains reduce using rule 194 (OPERATOR -> operator_add .)
    operator_bitnot reduce using rule 194 (OPERATOR -> operator_add .)
    operator_not    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_incr   reduce using rule 194 (OPERATOR -> operator_add .)
    operator_decr   reduce using rule 194 (OPERATOR -> operator_add .)
    operator_outer  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_inner  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_reverse reduce using rule 194 (OPERATOR -> operator_add .)
    operator_rotate reduce using rule 194 (OPERATOR -> operator_add .)
    operator_apply  reduce using rule 194 (OPERATOR -> operator_add .)
    operator_compose reduce using rule 194 (OPERATOR -> operator_add .)
    operator_over   reduce using rule 194 (OPERATOR -> operator_add .)
    operator_map    reduce using rule 194 (OPERATOR -> operator_add .)
    operator_sorted_incr reduce using rule 194 (OPERATOR -> operator_add .)
    operator_sorted_decr reduce using rule 194 (OPERATOR -> operator_add .)
    operator_less_than reduce using rule 194 (OPERATOR -> operator_add .)
    operator_less_than_equals reduce using rule 194 (OPERATOR -> operator_add .)
    operator_greater_than reduce using rule 194 (OPERATOR -> operator_add .)
    operator_greater_than_equals reduce using rule 194 (OPERATOR -> operator_add .)
    operator_equals reduce using rule 194 (OPERATOR -> operator_add .)
    operator_not_equals reduce using rule 194 (OPERATOR -> operator_add .)
    operator_smallest reduce using rule 194 (OPERATOR -> operator_add .)
    operator_greatest reduce using rule 194 (OPERATOR -> operator_add .)
    operator_goodname reduce using rule 194 (OPERATOR -> operator_add .)
    operator_s_combinator reduce using rule 194 (OPERATOR -> operator_add .)
    operator_s_combinator_2 reduce using rule 194 (OPERATOR -> operator_add .)
    operator_goodname2 reduce using rule 194 (OPERATOR -> operator_add .)
    (               reduce using rule 194 (OPERATOR -> operator_add .)
    VAR             reduce using rule 194 (OPERATOR -> operator_add .)
    FLOAT           reduce using rule 194 (OPERATOR -> operator_add .)
    NUM             reduce using rule 194 (OPERATOR -> operator_add .)
    STRING_3SQ      reduce using rule 194 (OPERATOR -> operator_add .)
    STRING_3DQ      reduce using rule 194 (OPERATOR -> operator_add .)
    STRING_SQ       reduce using rule 194 (OPERATOR -> operator_add .)
    STRING_DQ       reduce using rule 194 (OPERATOR -> operator_add .)
    true            reduce using rule 194 (OPERATOR -> operator_add .)
    Null            reduce using rule 194 (OPERATOR -> operator_add .)
    false           reduce using rule 194 (OPERATOR -> operator_add .)
    type_type       reduce using rule 194 (OPERATOR -> operator_add .)
    type_num        reduce using rule 194 (OPERATOR -> operator_add .)
    type_bool       reduce using rule 194 (OPERATOR -> operator_add .)
    type_any        reduce using rule 194 (OPERATOR -> operator_add .)
    type_u64        reduce using rule 194 (OPERATOR -> operator_add .)
    type_u32        reduce using rule 194 (OPERATOR -> operator_add .)
    type_u16        reduce using rule 194 (OPERATOR -> operator_add .)
    type_u8         reduce using rule 194 (OPERATOR -> operator_add .)
    type_i64        reduce using rule 194 (OPERATOR -> operator_add .)
    type_i32        reduce using rule 194 (OPERATOR -> operator_add .)
    type_i16        reduce using rule 194 (OPERATOR -> operator_add .)
    type_i8         reduce using rule 194 (OPERATOR -> operator_add .)
    type_f32        reduce using rule 194 (OPERATOR -> operator_add .)
    type_f64        reduce using rule 194 (OPERATOR -> operator_add .)
    type_str        reduce using rule 194 (OPERATOR -> operator_add .)
    type_list       reduce using rule 194 (OPERATOR -> operator_add .)
    type_tuple      reduce using rule 194 (OPERATOR -> operator_add .)
    type_array      reduce using rule 194 (OPERATOR -> operator_add .)
    type_vector     reduce using rule 194 (OPERATOR -> operator_add .)
    type_dict       reduce using rule 194 (OPERATOR -> operator_add .)
    type_generator  reduce using rule 194 (OPERATOR -> operator_add .)
    type_linked_list reduce using rule 194 (OPERATOR -> operator_add .)
    type_doubly_linked_list reduce using rule 194 (OPERATOR -> operator_add .)
    type_deque      reduce using rule 194 (OPERATOR -> operator_add .)
    type_heap       reduce using rule 194 (OPERATOR -> operator_add .)
    type_fibonacci_heap reduce using rule 194 (OPERATOR -> operator_add .)
    type_tree       reduce using rule 194 (OPERATOR -> operator_add .)
    type_trie       reduce using rule 194 (OPERATOR -> operator_add .)
    type_stack      reduce using rule 194 (OPERATOR -> operator_add .)
    type_queue      reduce using rule 194 (OPERATOR -> operator_add .)
    type_binary_search_tree reduce using rule 194 (OPERATOR -> operator_add .)
    type_bitset     reduce using rule 194 (OPERATOR -> operator_add .)
    type_set        reduce using rule 194 (OPERATOR -> operator_add .)
    type_map        reduce using rule 194 (OPERATOR -> operator_add .)
    type_range      reduce using rule 194 (OPERATOR -> operator_add .)
    type_bad_struct reduce using rule 194 (OPERATOR -> operator_add .)
    type_bad_struct2 reduce using rule 194 (OPERATOR -> operator_add .)
    lambda          reduce using rule 194 (OPERATOR -> operator_add .)


state 23

    (195) OPERATOR -> operator_sub .

    operator_scan   reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_reduc  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_add    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_sub    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_mul    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_div    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_trudiv reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_pow    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_join   reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_split  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitand reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitor  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitxor reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitshiftleft reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitshiftright reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_and    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_or     reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_xor    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_contains reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_bitnot reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_not    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_incr   reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_decr   reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_outer  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_inner  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_reverse reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_rotate reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_apply  reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_compose reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_over   reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_map    reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_sorted_incr reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_sorted_decr reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_less_than reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_less_than_equals reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_greater_than reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_greater_than_equals reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_equals reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_not_equals reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_smallest reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_greatest reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_goodname reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_s_combinator reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_s_combinator_2 reduce using rule 195 (OPERATOR -> operator_sub .)
    operator_goodname2 reduce using rule 195 (OPERATOR -> operator_sub .)
    (               reduce using rule 195 (OPERATOR -> operator_sub .)
    VAR             reduce using rule 195 (OPERATOR -> operator_sub .)
    FLOAT           reduce using rule 195 (OPERATOR -> operator_sub .)
    NUM             reduce using rule 195 (OPERATOR -> operator_sub .)
    STRING_3SQ      reduce using rule 195 (OPERATOR -> operator_sub .)
    STRING_3DQ      reduce using rule 195 (OPERATOR -> operator_sub .)
    STRING_SQ       reduce using rule 195 (OPERATOR -> operator_sub .)
    STRING_DQ       reduce using rule 195 (OPERATOR -> operator_sub .)
    true            reduce using rule 195 (OPERATOR -> operator_sub .)
    Null            reduce using rule 195 (OPERATOR -> operator_sub .)
    false           reduce using rule 195 (OPERATOR -> operator_sub .)
    type_type       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_num        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_bool       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_any        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_u64        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_u32        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_u16        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_u8         reduce using rule 195 (OPERATOR -> operator_sub .)
    type_i64        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_i32        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_i16        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_i8         reduce using rule 195 (OPERATOR -> operator_sub .)
    type_f32        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_f64        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_str        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_list       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_tuple      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_array      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_vector     reduce using rule 195 (OPERATOR -> operator_sub .)
    type_dict       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_generator  reduce using rule 195 (OPERATOR -> operator_sub .)
    type_linked_list reduce using rule 195 (OPERATOR -> operator_sub .)
    type_doubly_linked_list reduce using rule 195 (OPERATOR -> operator_sub .)
    type_deque      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_heap       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_fibonacci_heap reduce using rule 195 (OPERATOR -> operator_sub .)
    type_tree       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_trie       reduce using rule 195 (OPERATOR -> operator_sub .)
    type_stack      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_queue      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_binary_search_tree reduce using rule 195 (OPERATOR -> operator_sub .)
    type_bitset     reduce using rule 195 (OPERATOR -> operator_sub .)
    type_set        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_map        reduce using rule 195 (OPERATOR -> operator_sub .)
    type_range      reduce using rule 195 (OPERATOR -> operator_sub .)
    type_bad_struct reduce using rule 195 (OPERATOR -> operator_sub .)
    type_bad_struct2 reduce using rule 195 (OPERATOR -> operator_sub .)
    lambda          reduce using rule 195 (OPERATOR -> operator_sub .)


state 24

    (196) OPERATOR -> operator_mul .

    operator_scan   reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_reduc  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_add    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_sub    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_mul    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_div    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_trudiv reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_pow    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_join   reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_split  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitand reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitor  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitxor reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitshiftleft reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitshiftright reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_and    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_or     reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_xor    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_contains reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_bitnot reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_not    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_incr   reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_decr   reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_outer  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_inner  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_reverse reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_rotate reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_apply  reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_compose reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_over   reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_map    reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_sorted_incr reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_sorted_decr reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_less_than reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_less_than_equals reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_greater_than reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_greater_than_equals reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_equals reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_not_equals reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_smallest reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_greatest reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_goodname reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_s_combinator reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_s_combinator_2 reduce using rule 196 (OPERATOR -> operator_mul .)
    operator_goodname2 reduce using rule 196 (OPERATOR -> operator_mul .)
    (               reduce using rule 196 (OPERATOR -> operator_mul .)
    VAR             reduce using rule 196 (OPERATOR -> operator_mul .)
    FLOAT           reduce using rule 196 (OPERATOR -> operator_mul .)
    NUM             reduce using rule 196 (OPERATOR -> operator_mul .)
    STRING_3SQ      reduce using rule 196 (OPERATOR -> operator_mul .)
    STRING_3DQ      reduce using rule 196 (OPERATOR -> operator_mul .)
    STRING_SQ       reduce using rule 196 (OPERATOR -> operator_mul .)
    STRING_DQ       reduce using rule 196 (OPERATOR -> operator_mul .)
    true            reduce using rule 196 (OPERATOR -> operator_mul .)
    Null            reduce using rule 196 (OPERATOR -> operator_mul .)
    false           reduce using rule 196 (OPERATOR -> operator_mul .)
    type_type       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_num        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_bool       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_any        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_u64        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_u32        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_u16        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_u8         reduce using rule 196 (OPERATOR -> operator_mul .)
    type_i64        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_i32        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_i16        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_i8         reduce using rule 196 (OPERATOR -> operator_mul .)
    type_f32        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_f64        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_str        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_list       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_tuple      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_array      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_vector     reduce using rule 196 (OPERATOR -> operator_mul .)
    type_dict       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_generator  reduce using rule 196 (OPERATOR -> operator_mul .)
    type_linked_list reduce using rule 196 (OPERATOR -> operator_mul .)
    type_doubly_linked_list reduce using rule 196 (OPERATOR -> operator_mul .)
    type_deque      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_heap       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_fibonacci_heap reduce using rule 196 (OPERATOR -> operator_mul .)
    type_tree       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_trie       reduce using rule 196 (OPERATOR -> operator_mul .)
    type_stack      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_queue      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_binary_search_tree reduce using rule 196 (OPERATOR -> operator_mul .)
    type_bitset     reduce using rule 196 (OPERATOR -> operator_mul .)
    type_set        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_map        reduce using rule 196 (OPERATOR -> operator_mul .)
    type_range      reduce using rule 196 (OPERATOR -> operator_mul .)
    type_bad_struct reduce using rule 196 (OPERATOR -> operator_mul .)
    type_bad_struct2 reduce using rule 196 (OPERATOR -> operator_mul .)
    lambda          reduce using rule 196 (OPERATOR -> operator_mul .)


state 25

    (197) OPERATOR -> operator_div .

    operator_scan   reduce using rule 197 (OPERATOR -> operator_div .)
    operator_reduc  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_add    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_sub    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_mul    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_div    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_trudiv reduce using rule 197 (OPERATOR -> operator_div .)
    operator_pow    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_join   reduce using rule 197 (OPERATOR -> operator_div .)
    operator_split  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitand reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitor  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitxor reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitshiftleft reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitshiftright reduce using rule 197 (OPERATOR -> operator_div .)
    operator_and    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_or     reduce using rule 197 (OPERATOR -> operator_div .)
    operator_xor    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_contains reduce using rule 197 (OPERATOR -> operator_div .)
    operator_bitnot reduce using rule 197 (OPERATOR -> operator_div .)
    operator_not    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_incr   reduce using rule 197 (OPERATOR -> operator_div .)
    operator_decr   reduce using rule 197 (OPERATOR -> operator_div .)
    operator_outer  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_inner  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_reverse reduce using rule 197 (OPERATOR -> operator_div .)
    operator_rotate reduce using rule 197 (OPERATOR -> operator_div .)
    operator_apply  reduce using rule 197 (OPERATOR -> operator_div .)
    operator_compose reduce using rule 197 (OPERATOR -> operator_div .)
    operator_over   reduce using rule 197 (OPERATOR -> operator_div .)
    operator_map    reduce using rule 197 (OPERATOR -> operator_div .)
    operator_sorted_incr reduce using rule 197 (OPERATOR -> operator_div .)
    operator_sorted_decr reduce using rule 197 (OPERATOR -> operator_div .)
    operator_less_than reduce using rule 197 (OPERATOR -> operator_div .)
    operator_less_than_equals reduce using rule 197 (OPERATOR -> operator_div .)
    operator_greater_than reduce using rule 197 (OPERATOR -> operator_div .)
    operator_greater_than_equals reduce using rule 197 (OPERATOR -> operator_div .)
    operator_equals reduce using rule 197 (OPERATOR -> operator_div .)
    operator_not_equals reduce using rule 197 (OPERATOR -> operator_div .)
    operator_smallest reduce using rule 197 (OPERATOR -> operator_div .)
    operator_greatest reduce using rule 197 (OPERATOR -> operator_div .)
    operator_goodname reduce using rule 197 (OPERATOR -> operator_div .)
    operator_s_combinator reduce using rule 197 (OPERATOR -> operator_div .)
    operator_s_combinator_2 reduce using rule 197 (OPERATOR -> operator_div .)
    operator_goodname2 reduce using rule 197 (OPERATOR -> operator_div .)
    (               reduce using rule 197 (OPERATOR -> operator_div .)
    VAR             reduce using rule 197 (OPERATOR -> operator_div .)
    FLOAT           reduce using rule 197 (OPERATOR -> operator_div .)
    NUM             reduce using rule 197 (OPERATOR -> operator_div .)
    STRING_3SQ      reduce using rule 197 (OPERATOR -> operator_div .)
    STRING_3DQ      reduce using rule 197 (OPERATOR -> operator_div .)
    STRING_SQ       reduce using rule 197 (OPERATOR -> operator_div .)
    STRING_DQ       reduce using rule 197 (OPERATOR -> operator_div .)
    true            reduce using rule 197 (OPERATOR -> operator_div .)
    Null            reduce using rule 197 (OPERATOR -> operator_div .)
    false           reduce using rule 197 (OPERATOR -> operator_div .)
    type_type       reduce using rule 197 (OPERATOR -> operator_div .)
    type_num        reduce using rule 197 (OPERATOR -> operator_div .)
    type_bool       reduce using rule 197 (OPERATOR -> operator_div .)
    type_any        reduce using rule 197 (OPERATOR -> operator_div .)
    type_u64        reduce using rule 197 (OPERATOR -> operator_div .)
    type_u32        reduce using rule 197 (OPERATOR -> operator_div .)
    type_u16        reduce using rule 197 (OPERATOR -> operator_div .)
    type_u8         reduce using rule 197 (OPERATOR -> operator_div .)
    type_i64        reduce using rule 197 (OPERATOR -> operator_div .)
    type_i32        reduce using rule 197 (OPERATOR -> operator_div .)
    type_i16        reduce using rule 197 (OPERATOR -> operator_div .)
    type_i8         reduce using rule 197 (OPERATOR -> operator_div .)
    type_f32        reduce using rule 197 (OPERATOR -> operator_div .)
    type_f64        reduce using rule 197 (OPERATOR -> operator_div .)
    type_str        reduce using rule 197 (OPERATOR -> operator_div .)
    type_list       reduce using rule 197 (OPERATOR -> operator_div .)
    type_tuple      reduce using rule 197 (OPERATOR -> operator_div .)
    type_array      reduce using rule 197 (OPERATOR -> operator_div .)
    type_vector     reduce using rule 197 (OPERATOR -> operator_div .)
    type_dict       reduce using rule 197 (OPERATOR -> operator_div .)
    type_generator  reduce using rule 197 (OPERATOR -> operator_div .)
    type_linked_list reduce using rule 197 (OPERATOR -> operator_div .)
    type_doubly_linked_list reduce using rule 197 (OPERATOR -> operator_div .)
    type_deque      reduce using rule 197 (OPERATOR -> operator_div .)
    type_heap       reduce using rule 197 (OPERATOR -> operator_div .)
    type_fibonacci_heap reduce using rule 197 (OPERATOR -> operator_div .)
    type_tree       reduce using rule 197 (OPERATOR -> operator_div .)
    type_trie       reduce using rule 197 (OPERATOR -> operator_div .)
    type_stack      reduce using rule 197 (OPERATOR -> operator_div .)
    type_queue      reduce using rule 197 (OPERATOR -> operator_div .)
    type_binary_search_tree reduce using rule 197 (OPERATOR -> operator_div .)
    type_bitset     reduce using rule 197 (OPERATOR -> operator_div .)
    type_set        reduce using rule 197 (OPERATOR -> operator_div .)
    type_map        reduce using rule 197 (OPERATOR -> operator_div .)
    type_range      reduce using rule 197 (OPERATOR -> operator_div .)
    type_bad_struct reduce using rule 197 (OPERATOR -> operator_div .)
    type_bad_struct2 reduce using rule 197 (OPERATOR -> operator_div .)
    lambda          reduce using rule 197 (OPERATOR -> operator_div .)


state 26

    (198) OPERATOR -> operator_trudiv .

    operator_scan   reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_reduc  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_add    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_sub    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_mul    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_div    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_trudiv reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_pow    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_join   reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_split  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitand reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitor  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitxor reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitshiftleft reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitshiftright reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_and    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_or     reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_xor    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_contains reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_bitnot reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_not    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_incr   reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_decr   reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_outer  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_inner  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_reverse reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_rotate reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_apply  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_compose reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_over   reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_map    reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_sorted_incr reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_sorted_decr reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_less_than reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_less_than_equals reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_greater_than reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_greater_than_equals reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_equals reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_not_equals reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_smallest reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_greatest reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_goodname reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_s_combinator reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_s_combinator_2 reduce using rule 198 (OPERATOR -> operator_trudiv .)
    operator_goodname2 reduce using rule 198 (OPERATOR -> operator_trudiv .)
    (               reduce using rule 198 (OPERATOR -> operator_trudiv .)
    VAR             reduce using rule 198 (OPERATOR -> operator_trudiv .)
    FLOAT           reduce using rule 198 (OPERATOR -> operator_trudiv .)
    NUM             reduce using rule 198 (OPERATOR -> operator_trudiv .)
    STRING_3SQ      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    STRING_3DQ      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    STRING_SQ       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    STRING_DQ       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    true            reduce using rule 198 (OPERATOR -> operator_trudiv .)
    Null            reduce using rule 198 (OPERATOR -> operator_trudiv .)
    false           reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_type       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_num        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_bool       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_any        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_u64        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_u32        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_u16        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_u8         reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_i64        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_i32        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_i16        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_i8         reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_f32        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_f64        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_str        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_list       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_tuple      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_array      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_vector     reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_dict       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_generator  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_linked_list reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_doubly_linked_list reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_deque      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_heap       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_fibonacci_heap reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_tree       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_trie       reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_stack      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_queue      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_binary_search_tree reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_bitset     reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_set        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_map        reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_range      reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_bad_struct reduce using rule 198 (OPERATOR -> operator_trudiv .)
    type_bad_struct2 reduce using rule 198 (OPERATOR -> operator_trudiv .)
    lambda          reduce using rule 198 (OPERATOR -> operator_trudiv .)


state 27

    (199) OPERATOR -> operator_pow .

    operator_scan   reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_reduc  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_add    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_sub    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_mul    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_div    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_trudiv reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_pow    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_join   reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_split  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitand reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitor  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitxor reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitshiftleft reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitshiftright reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_and    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_or     reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_xor    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_contains reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_bitnot reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_not    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_incr   reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_decr   reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_outer  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_inner  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_reverse reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_rotate reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_apply  reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_compose reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_over   reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_map    reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_sorted_incr reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_sorted_decr reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_less_than reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_less_than_equals reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_greater_than reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_greater_than_equals reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_equals reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_not_equals reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_smallest reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_greatest reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_goodname reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_s_combinator reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_s_combinator_2 reduce using rule 199 (OPERATOR -> operator_pow .)
    operator_goodname2 reduce using rule 199 (OPERATOR -> operator_pow .)
    (               reduce using rule 199 (OPERATOR -> operator_pow .)
    VAR             reduce using rule 199 (OPERATOR -> operator_pow .)
    FLOAT           reduce using rule 199 (OPERATOR -> operator_pow .)
    NUM             reduce using rule 199 (OPERATOR -> operator_pow .)
    STRING_3SQ      reduce using rule 199 (OPERATOR -> operator_pow .)
    STRING_3DQ      reduce using rule 199 (OPERATOR -> operator_pow .)
    STRING_SQ       reduce using rule 199 (OPERATOR -> operator_pow .)
    STRING_DQ       reduce using rule 199 (OPERATOR -> operator_pow .)
    true            reduce using rule 199 (OPERATOR -> operator_pow .)
    Null            reduce using rule 199 (OPERATOR -> operator_pow .)
    false           reduce using rule 199 (OPERATOR -> operator_pow .)
    type_type       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_num        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_bool       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_any        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_u64        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_u32        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_u16        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_u8         reduce using rule 199 (OPERATOR -> operator_pow .)
    type_i64        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_i32        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_i16        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_i8         reduce using rule 199 (OPERATOR -> operator_pow .)
    type_f32        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_f64        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_str        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_list       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_tuple      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_array      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_vector     reduce using rule 199 (OPERATOR -> operator_pow .)
    type_dict       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_generator  reduce using rule 199 (OPERATOR -> operator_pow .)
    type_linked_list reduce using rule 199 (OPERATOR -> operator_pow .)
    type_doubly_linked_list reduce using rule 199 (OPERATOR -> operator_pow .)
    type_deque      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_heap       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_fibonacci_heap reduce using rule 199 (OPERATOR -> operator_pow .)
    type_tree       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_trie       reduce using rule 199 (OPERATOR -> operator_pow .)
    type_stack      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_queue      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_binary_search_tree reduce using rule 199 (OPERATOR -> operator_pow .)
    type_bitset     reduce using rule 199 (OPERATOR -> operator_pow .)
    type_set        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_map        reduce using rule 199 (OPERATOR -> operator_pow .)
    type_range      reduce using rule 199 (OPERATOR -> operator_pow .)
    type_bad_struct reduce using rule 199 (OPERATOR -> operator_pow .)
    type_bad_struct2 reduce using rule 199 (OPERATOR -> operator_pow .)
    lambda          reduce using rule 199 (OPERATOR -> operator_pow .)


state 28

    (200) OPERATOR -> operator_join .

    operator_scan   reduce using rule 200 (OPERATOR -> operator_join .)
    operator_reduc  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_add    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_sub    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_mul    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_div    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_trudiv reduce using rule 200 (OPERATOR -> operator_join .)
    operator_pow    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_join   reduce using rule 200 (OPERATOR -> operator_join .)
    operator_split  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitand reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitor  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitxor reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitshiftleft reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitshiftright reduce using rule 200 (OPERATOR -> operator_join .)
    operator_and    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_or     reduce using rule 200 (OPERATOR -> operator_join .)
    operator_xor    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_contains reduce using rule 200 (OPERATOR -> operator_join .)
    operator_bitnot reduce using rule 200 (OPERATOR -> operator_join .)
    operator_not    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_incr   reduce using rule 200 (OPERATOR -> operator_join .)
    operator_decr   reduce using rule 200 (OPERATOR -> operator_join .)
    operator_outer  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_inner  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_reverse reduce using rule 200 (OPERATOR -> operator_join .)
    operator_rotate reduce using rule 200 (OPERATOR -> operator_join .)
    operator_apply  reduce using rule 200 (OPERATOR -> operator_join .)
    operator_compose reduce using rule 200 (OPERATOR -> operator_join .)
    operator_over   reduce using rule 200 (OPERATOR -> operator_join .)
    operator_map    reduce using rule 200 (OPERATOR -> operator_join .)
    operator_sorted_incr reduce using rule 200 (OPERATOR -> operator_join .)
    operator_sorted_decr reduce using rule 200 (OPERATOR -> operator_join .)
    operator_less_than reduce using rule 200 (OPERATOR -> operator_join .)
    operator_less_than_equals reduce using rule 200 (OPERATOR -> operator_join .)
    operator_greater_than reduce using rule 200 (OPERATOR -> operator_join .)
    operator_greater_than_equals reduce using rule 200 (OPERATOR -> operator_join .)
    operator_equals reduce using rule 200 (OPERATOR -> operator_join .)
    operator_not_equals reduce using rule 200 (OPERATOR -> operator_join .)
    operator_smallest reduce using rule 200 (OPERATOR -> operator_join .)
    operator_greatest reduce using rule 200 (OPERATOR -> operator_join .)
    operator_goodname reduce using rule 200 (OPERATOR -> operator_join .)
    operator_s_combinator reduce using rule 200 (OPERATOR -> operator_join .)
    operator_s_combinator_2 reduce using rule 200 (OPERATOR -> operator_join .)
    operator_goodname2 reduce using rule 200 (OPERATOR -> operator_join .)
    (               reduce using rule 200 (OPERATOR -> operator_join .)
    VAR             reduce using rule 200 (OPERATOR -> operator_join .)
    FLOAT           reduce using rule 200 (OPERATOR -> operator_join .)
    NUM             reduce using rule 200 (OPERATOR -> operator_join .)
    STRING_3SQ      reduce using rule 200 (OPERATOR -> operator_join .)
    STRING_3DQ      reduce using rule 200 (OPERATOR -> operator_join .)
    STRING_SQ       reduce using rule 200 (OPERATOR -> operator_join .)
    STRING_DQ       reduce using rule 200 (OPERATOR -> operator_join .)
    true            reduce using rule 200 (OPERATOR -> operator_join .)
    Null            reduce using rule 200 (OPERATOR -> operator_join .)
    false           reduce using rule 200 (OPERATOR -> operator_join .)
    type_type       reduce using rule 200 (OPERATOR -> operator_join .)
    type_num        reduce using rule 200 (OPERATOR -> operator_join .)
    type_bool       reduce using rule 200 (OPERATOR -> operator_join .)
    type_any        reduce using rule 200 (OPERATOR -> operator_join .)
    type_u64        reduce using rule 200 (OPERATOR -> operator_join .)
    type_u32        reduce using rule 200 (OPERATOR -> operator_join .)
    type_u16        reduce using rule 200 (OPERATOR -> operator_join .)
    type_u8         reduce using rule 200 (OPERATOR -> operator_join .)
    type_i64        reduce using rule 200 (OPERATOR -> operator_join .)
    type_i32        reduce using rule 200 (OPERATOR -> operator_join .)
    type_i16        reduce using rule 200 (OPERATOR -> operator_join .)
    type_i8         reduce using rule 200 (OPERATOR -> operator_join .)
    type_f32        reduce using rule 200 (OPERATOR -> operator_join .)
    type_f64        reduce using rule 200 (OPERATOR -> operator_join .)
    type_str        reduce using rule 200 (OPERATOR -> operator_join .)
    type_list       reduce using rule 200 (OPERATOR -> operator_join .)
    type_tuple      reduce using rule 200 (OPERATOR -> operator_join .)
    type_array      reduce using rule 200 (OPERATOR -> operator_join .)
    type_vector     reduce using rule 200 (OPERATOR -> operator_join .)
    type_dict       reduce using rule 200 (OPERATOR -> operator_join .)
    type_generator  reduce using rule 200 (OPERATOR -> operator_join .)
    type_linked_list reduce using rule 200 (OPERATOR -> operator_join .)
    type_doubly_linked_list reduce using rule 200 (OPERATOR -> operator_join .)
    type_deque      reduce using rule 200 (OPERATOR -> operator_join .)
    type_heap       reduce using rule 200 (OPERATOR -> operator_join .)
    type_fibonacci_heap reduce using rule 200 (OPERATOR -> operator_join .)
    type_tree       reduce using rule 200 (OPERATOR -> operator_join .)
    type_trie       reduce using rule 200 (OPERATOR -> operator_join .)
    type_stack      reduce using rule 200 (OPERATOR -> operator_join .)
    type_queue      reduce using rule 200 (OPERATOR -> operator_join .)
    type_binary_search_tree reduce using rule 200 (OPERATOR -> operator_join .)
    type_bitset     reduce using rule 200 (OPERATOR -> operator_join .)
    type_set        reduce using rule 200 (OPERATOR -> operator_join .)
    type_map        reduce using rule 200 (OPERATOR -> operator_join .)
    type_range      reduce using rule 200 (OPERATOR -> operator_join .)
    type_bad_struct reduce using rule 200 (OPERATOR -> operator_join .)
    type_bad_struct2 reduce using rule 200 (OPERATOR -> operator_join .)
    lambda          reduce using rule 200 (OPERATOR -> operator_join .)


state 29

    (201) OPERATOR -> operator_split .

    operator_scan   reduce using rule 201 (OPERATOR -> operator_split .)
    operator_reduc  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_add    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_sub    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_mul    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_div    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_trudiv reduce using rule 201 (OPERATOR -> operator_split .)
    operator_pow    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_join   reduce using rule 201 (OPERATOR -> operator_split .)
    operator_split  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitand reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitor  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitxor reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitshiftleft reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitshiftright reduce using rule 201 (OPERATOR -> operator_split .)
    operator_and    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_or     reduce using rule 201 (OPERATOR -> operator_split .)
    operator_xor    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_contains reduce using rule 201 (OPERATOR -> operator_split .)
    operator_bitnot reduce using rule 201 (OPERATOR -> operator_split .)
    operator_not    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_incr   reduce using rule 201 (OPERATOR -> operator_split .)
    operator_decr   reduce using rule 201 (OPERATOR -> operator_split .)
    operator_outer  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_inner  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_reverse reduce using rule 201 (OPERATOR -> operator_split .)
    operator_rotate reduce using rule 201 (OPERATOR -> operator_split .)
    operator_apply  reduce using rule 201 (OPERATOR -> operator_split .)
    operator_compose reduce using rule 201 (OPERATOR -> operator_split .)
    operator_over   reduce using rule 201 (OPERATOR -> operator_split .)
    operator_map    reduce using rule 201 (OPERATOR -> operator_split .)
    operator_sorted_incr reduce using rule 201 (OPERATOR -> operator_split .)
    operator_sorted_decr reduce using rule 201 (OPERATOR -> operator_split .)
    operator_less_than reduce using rule 201 (OPERATOR -> operator_split .)
    operator_less_than_equals reduce using rule 201 (OPERATOR -> operator_split .)
    operator_greater_than reduce using rule 201 (OPERATOR -> operator_split .)
    operator_greater_than_equals reduce using rule 201 (OPERATOR -> operator_split .)
    operator_equals reduce using rule 201 (OPERATOR -> operator_split .)
    operator_not_equals reduce using rule 201 (OPERATOR -> operator_split .)
    operator_smallest reduce using rule 201 (OPERATOR -> operator_split .)
    operator_greatest reduce using rule 201 (OPERATOR -> operator_split .)
    operator_goodname reduce using rule 201 (OPERATOR -> operator_split .)
    operator_s_combinator reduce using rule 201 (OPERATOR -> operator_split .)
    operator_s_combinator_2 reduce using rule 201 (OPERATOR -> operator_split .)
    operator_goodname2 reduce using rule 201 (OPERATOR -> operator_split .)
    (               reduce using rule 201 (OPERATOR -> operator_split .)
    VAR             reduce using rule 201 (OPERATOR -> operator_split .)
    FLOAT           reduce using rule 201 (OPERATOR -> operator_split .)
    NUM             reduce using rule 201 (OPERATOR -> operator_split .)
    STRING_3SQ      reduce using rule 201 (OPERATOR -> operator_split .)
    STRING_3DQ      reduce using rule 201 (OPERATOR -> operator_split .)
    STRING_SQ       reduce using rule 201 (OPERATOR -> operator_split .)
    STRING_DQ       reduce using rule 201 (OPERATOR -> operator_split .)
    true            reduce using rule 201 (OPERATOR -> operator_split .)
    Null            reduce using rule 201 (OPERATOR -> operator_split .)
    false           reduce using rule 201 (OPERATOR -> operator_split .)
    type_type       reduce using rule 201 (OPERATOR -> operator_split .)
    type_num        reduce using rule 201 (OPERATOR -> operator_split .)
    type_bool       reduce using rule 201 (OPERATOR -> operator_split .)
    type_any        reduce using rule 201 (OPERATOR -> operator_split .)
    type_u64        reduce using rule 201 (OPERATOR -> operator_split .)
    type_u32        reduce using rule 201 (OPERATOR -> operator_split .)
    type_u16        reduce using rule 201 (OPERATOR -> operator_split .)
    type_u8         reduce using rule 201 (OPERATOR -> operator_split .)
    type_i64        reduce using rule 201 (OPERATOR -> operator_split .)
    type_i32        reduce using rule 201 (OPERATOR -> operator_split .)
    type_i16        reduce using rule 201 (OPERATOR -> operator_split .)
    type_i8         reduce using rule 201 (OPERATOR -> operator_split .)
    type_f32        reduce using rule 201 (OPERATOR -> operator_split .)
    type_f64        reduce using rule 201 (OPERATOR -> operator_split .)
    type_str        reduce using rule 201 (OPERATOR -> operator_split .)
    type_list       reduce using rule 201 (OPERATOR -> operator_split .)
    type_tuple      reduce using rule 201 (OPERATOR -> operator_split .)
    type_array      reduce using rule 201 (OPERATOR -> operator_split .)
    type_vector     reduce using rule 201 (OPERATOR -> operator_split .)
    type_dict       reduce using rule 201 (OPERATOR -> operator_split .)
    type_generator  reduce using rule 201 (OPERATOR -> operator_split .)
    type_linked_list reduce using rule 201 (OPERATOR -> operator_split .)
    type_doubly_linked_list reduce using rule 201 (OPERATOR -> operator_split .)
    type_deque      reduce using rule 201 (OPERATOR -> operator_split .)
    type_heap       reduce using rule 201 (OPERATOR -> operator_split .)
    type_fibonacci_heap reduce using rule 201 (OPERATOR -> operator_split .)
    type_tree       reduce using rule 201 (OPERATOR -> operator_split .)
    type_trie       reduce using rule 201 (OPERATOR -> operator_split .)
    type_stack      reduce using rule 201 (OPERATOR -> operator_split .)
    type_queue      reduce using rule 201 (OPERATOR -> operator_split .)
    type_binary_search_tree reduce using rule 201 (OPERATOR -> operator_split .)
    type_bitset     reduce using rule 201 (OPERATOR -> operator_split .)
    type_set        reduce using rule 201 (OPERATOR -> operator_split .)
    type_map        reduce using rule 201 (OPERATOR -> operator_split .)
    type_range      reduce using rule 201 (OPERATOR -> operator_split .)
    type_bad_struct reduce using rule 201 (OPERATOR -> operator_split .)
    type_bad_struct2 reduce using rule 201 (OPERATOR -> operator_split .)
    lambda          reduce using rule 201 (OPERATOR -> operator_split .)


state 30

    (110) expr -> OPERATOR . operator_scan expr
    (111) expr -> OPERATOR . operator_reduc expr

    operator_scan   shift and go to state 195
    operator_reduc  shift and go to state 196


state 31

    (202) OPERATOR -> operator_scan .

    operator_scan   reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_reduc  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_inner  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_add    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_sub    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_mul    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_div    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_trudiv reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_pow    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_join   reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_split  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitand reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitor  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitxor reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitshiftleft reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitshiftright reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_and    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_or     reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_xor    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_contains reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_bitnot reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_not    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_incr   reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_decr   reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_outer  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_reverse reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_rotate reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_apply  reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_compose reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_over   reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_map    reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_sorted_incr reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_sorted_decr reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_less_than reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_less_than_equals reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_greater_than reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_greater_than_equals reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_equals reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_not_equals reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_smallest reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_greatest reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_goodname reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_s_combinator reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_s_combinator_2 reduce using rule 202 (OPERATOR -> operator_scan .)
    operator_goodname2 reduce using rule 202 (OPERATOR -> operator_scan .)
    (               reduce using rule 202 (OPERATOR -> operator_scan .)
    VAR             reduce using rule 202 (OPERATOR -> operator_scan .)
    FLOAT           reduce using rule 202 (OPERATOR -> operator_scan .)
    NUM             reduce using rule 202 (OPERATOR -> operator_scan .)
    STRING_3SQ      reduce using rule 202 (OPERATOR -> operator_scan .)
    STRING_3DQ      reduce using rule 202 (OPERATOR -> operator_scan .)
    STRING_SQ       reduce using rule 202 (OPERATOR -> operator_scan .)
    STRING_DQ       reduce using rule 202 (OPERATOR -> operator_scan .)
    true            reduce using rule 202 (OPERATOR -> operator_scan .)
    Null            reduce using rule 202 (OPERATOR -> operator_scan .)
    false           reduce using rule 202 (OPERATOR -> operator_scan .)
    type_type       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_num        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_bool       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_any        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_u64        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_u32        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_u16        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_u8         reduce using rule 202 (OPERATOR -> operator_scan .)
    type_i64        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_i32        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_i16        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_i8         reduce using rule 202 (OPERATOR -> operator_scan .)
    type_f32        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_f64        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_str        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_list       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_tuple      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_array      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_vector     reduce using rule 202 (OPERATOR -> operator_scan .)
    type_dict       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_generator  reduce using rule 202 (OPERATOR -> operator_scan .)
    type_linked_list reduce using rule 202 (OPERATOR -> operator_scan .)
    type_doubly_linked_list reduce using rule 202 (OPERATOR -> operator_scan .)
    type_deque      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_heap       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_fibonacci_heap reduce using rule 202 (OPERATOR -> operator_scan .)
    type_tree       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_trie       reduce using rule 202 (OPERATOR -> operator_scan .)
    type_stack      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_queue      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_binary_search_tree reduce using rule 202 (OPERATOR -> operator_scan .)
    type_bitset     reduce using rule 202 (OPERATOR -> operator_scan .)
    type_set        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_map        reduce using rule 202 (OPERATOR -> operator_scan .)
    type_range      reduce using rule 202 (OPERATOR -> operator_scan .)
    type_bad_struct reduce using rule 202 (OPERATOR -> operator_scan .)
    type_bad_struct2 reduce using rule 202 (OPERATOR -> operator_scan .)
    lambda          reduce using rule 202 (OPERATOR -> operator_scan .)


state 32

    (203) OPERATOR -> operator_reduc .

    operator_scan   reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_reduc  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_inner  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_add    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_sub    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_mul    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_div    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_trudiv reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_pow    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_join   reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_split  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitand reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitor  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitxor reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitshiftleft reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitshiftright reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_and    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_or     reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_xor    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_contains reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_bitnot reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_not    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_incr   reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_decr   reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_outer  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_reverse reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_rotate reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_apply  reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_compose reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_over   reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_map    reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_sorted_incr reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_sorted_decr reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_less_than reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_less_than_equals reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_greater_than reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_greater_than_equals reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_equals reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_not_equals reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_smallest reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_greatest reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_goodname reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_s_combinator reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_s_combinator_2 reduce using rule 203 (OPERATOR -> operator_reduc .)
    operator_goodname2 reduce using rule 203 (OPERATOR -> operator_reduc .)
    (               reduce using rule 203 (OPERATOR -> operator_reduc .)
    VAR             reduce using rule 203 (OPERATOR -> operator_reduc .)
    FLOAT           reduce using rule 203 (OPERATOR -> operator_reduc .)
    NUM             reduce using rule 203 (OPERATOR -> operator_reduc .)
    STRING_3SQ      reduce using rule 203 (OPERATOR -> operator_reduc .)
    STRING_3DQ      reduce using rule 203 (OPERATOR -> operator_reduc .)
    STRING_SQ       reduce using rule 203 (OPERATOR -> operator_reduc .)
    STRING_DQ       reduce using rule 203 (OPERATOR -> operator_reduc .)
    true            reduce using rule 203 (OPERATOR -> operator_reduc .)
    Null            reduce using rule 203 (OPERATOR -> operator_reduc .)
    false           reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_type       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_num        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_bool       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_any        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_u64        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_u32        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_u16        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_u8         reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_i64        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_i32        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_i16        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_i8         reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_f32        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_f64        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_str        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_list       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_tuple      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_array      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_vector     reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_dict       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_generator  reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_linked_list reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_doubly_linked_list reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_deque      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_heap       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_fibonacci_heap reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_tree       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_trie       reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_stack      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_queue      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_binary_search_tree reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_bitset     reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_set        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_map        reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_range      reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_bad_struct reduce using rule 203 (OPERATOR -> operator_reduc .)
    type_bad_struct2 reduce using rule 203 (OPERATOR -> operator_reduc .)
    lambda          reduce using rule 203 (OPERATOR -> operator_reduc .)


state 33

    (204) OPERATOR -> operator_bitand .

    operator_scan   reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_reduc  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_add    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_sub    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_mul    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_div    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_trudiv reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_pow    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_join   reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_split  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitand reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitor  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitxor reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitshiftleft reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitshiftright reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_and    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_or     reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_xor    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_contains reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_bitnot reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_not    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_incr   reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_decr   reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_outer  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_inner  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_reverse reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_rotate reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_apply  reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_compose reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_over   reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_map    reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_sorted_incr reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_sorted_decr reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_less_than reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_less_than_equals reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_greater_than reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_greater_than_equals reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_equals reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_not_equals reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_smallest reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_greatest reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_goodname reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_s_combinator reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_s_combinator_2 reduce using rule 204 (OPERATOR -> operator_bitand .)
    operator_goodname2 reduce using rule 204 (OPERATOR -> operator_bitand .)
    (               reduce using rule 204 (OPERATOR -> operator_bitand .)
    VAR             reduce using rule 204 (OPERATOR -> operator_bitand .)
    FLOAT           reduce using rule 204 (OPERATOR -> operator_bitand .)
    NUM             reduce using rule 204 (OPERATOR -> operator_bitand .)
    STRING_3SQ      reduce using rule 204 (OPERATOR -> operator_bitand .)
    STRING_3DQ      reduce using rule 204 (OPERATOR -> operator_bitand .)
    STRING_SQ       reduce using rule 204 (OPERATOR -> operator_bitand .)
    STRING_DQ       reduce using rule 204 (OPERATOR -> operator_bitand .)
    true            reduce using rule 204 (OPERATOR -> operator_bitand .)
    Null            reduce using rule 204 (OPERATOR -> operator_bitand .)
    false           reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_type       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_num        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_bool       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_any        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_u64        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_u32        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_u16        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_u8         reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_i64        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_i32        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_i16        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_i8         reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_f32        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_f64        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_str        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_list       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_tuple      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_array      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_vector     reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_dict       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_generator  reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_linked_list reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_doubly_linked_list reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_deque      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_heap       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_fibonacci_heap reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_tree       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_trie       reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_stack      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_queue      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_binary_search_tree reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_bitset     reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_set        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_map        reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_range      reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_bad_struct reduce using rule 204 (OPERATOR -> operator_bitand .)
    type_bad_struct2 reduce using rule 204 (OPERATOR -> operator_bitand .)
    lambda          reduce using rule 204 (OPERATOR -> operator_bitand .)


state 34

    (205) OPERATOR -> operator_bitor .

    operator_scan   reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_reduc  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_add    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_sub    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_mul    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_div    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_trudiv reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_pow    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_join   reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_split  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitand reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitor  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitxor reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitshiftleft reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitshiftright reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_and    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_or     reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_xor    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_contains reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_bitnot reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_not    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_incr   reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_decr   reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_outer  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_inner  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_reverse reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_rotate reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_apply  reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_compose reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_over   reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_map    reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_sorted_incr reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_sorted_decr reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_less_than reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_less_than_equals reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_greater_than reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_greater_than_equals reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_equals reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_not_equals reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_smallest reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_greatest reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_goodname reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_s_combinator reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_s_combinator_2 reduce using rule 205 (OPERATOR -> operator_bitor .)
    operator_goodname2 reduce using rule 205 (OPERATOR -> operator_bitor .)
    (               reduce using rule 205 (OPERATOR -> operator_bitor .)
    VAR             reduce using rule 205 (OPERATOR -> operator_bitor .)
    FLOAT           reduce using rule 205 (OPERATOR -> operator_bitor .)
    NUM             reduce using rule 205 (OPERATOR -> operator_bitor .)
    STRING_3SQ      reduce using rule 205 (OPERATOR -> operator_bitor .)
    STRING_3DQ      reduce using rule 205 (OPERATOR -> operator_bitor .)
    STRING_SQ       reduce using rule 205 (OPERATOR -> operator_bitor .)
    STRING_DQ       reduce using rule 205 (OPERATOR -> operator_bitor .)
    true            reduce using rule 205 (OPERATOR -> operator_bitor .)
    Null            reduce using rule 205 (OPERATOR -> operator_bitor .)
    false           reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_type       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_num        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_bool       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_any        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_u64        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_u32        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_u16        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_u8         reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_i64        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_i32        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_i16        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_i8         reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_f32        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_f64        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_str        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_list       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_tuple      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_array      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_vector     reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_dict       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_generator  reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_linked_list reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_doubly_linked_list reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_deque      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_heap       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_fibonacci_heap reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_tree       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_trie       reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_stack      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_queue      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_binary_search_tree reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_bitset     reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_set        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_map        reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_range      reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_bad_struct reduce using rule 205 (OPERATOR -> operator_bitor .)
    type_bad_struct2 reduce using rule 205 (OPERATOR -> operator_bitor .)
    lambda          reduce using rule 205 (OPERATOR -> operator_bitor .)


state 35

    (206) OPERATOR -> operator_bitxor .

    operator_scan   reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_reduc  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_add    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_sub    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_mul    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_div    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_trudiv reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_pow    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_join   reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_split  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitand reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitor  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitxor reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitshiftleft reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitshiftright reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_and    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_or     reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_xor    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_contains reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_bitnot reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_not    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_incr   reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_decr   reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_outer  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_inner  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_reverse reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_rotate reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_apply  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_compose reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_over   reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_map    reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_sorted_incr reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_sorted_decr reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_less_than reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_less_than_equals reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_greater_than reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_greater_than_equals reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_equals reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_not_equals reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_smallest reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_greatest reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_goodname reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_s_combinator reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_s_combinator_2 reduce using rule 206 (OPERATOR -> operator_bitxor .)
    operator_goodname2 reduce using rule 206 (OPERATOR -> operator_bitxor .)
    (               reduce using rule 206 (OPERATOR -> operator_bitxor .)
    VAR             reduce using rule 206 (OPERATOR -> operator_bitxor .)
    FLOAT           reduce using rule 206 (OPERATOR -> operator_bitxor .)
    NUM             reduce using rule 206 (OPERATOR -> operator_bitxor .)
    STRING_3SQ      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    STRING_3DQ      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    STRING_SQ       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    STRING_DQ       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    true            reduce using rule 206 (OPERATOR -> operator_bitxor .)
    Null            reduce using rule 206 (OPERATOR -> operator_bitxor .)
    false           reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_type       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_num        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_bool       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_any        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_u64        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_u32        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_u16        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_u8         reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_i64        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_i32        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_i16        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_i8         reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_f32        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_f64        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_str        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_list       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_tuple      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_array      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_vector     reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_dict       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_generator  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_linked_list reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_doubly_linked_list reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_deque      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_heap       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_fibonacci_heap reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_tree       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_trie       reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_stack      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_queue      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_binary_search_tree reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_bitset     reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_set        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_map        reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_range      reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_bad_struct reduce using rule 206 (OPERATOR -> operator_bitxor .)
    type_bad_struct2 reduce using rule 206 (OPERATOR -> operator_bitxor .)
    lambda          reduce using rule 206 (OPERATOR -> operator_bitxor .)


state 36

    (207) OPERATOR -> operator_bitshiftleft .

    operator_scan   reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_reduc  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_add    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_sub    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_mul    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_div    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_trudiv reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_pow    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_join   reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_split  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitand reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitor  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitxor reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitshiftleft reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitshiftright reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_and    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_or     reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_xor    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_contains reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_bitnot reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_not    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_incr   reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_decr   reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_outer  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_inner  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_reverse reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_rotate reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_apply  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_compose reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_over   reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_map    reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_sorted_incr reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_sorted_decr reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_less_than reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_less_than_equals reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_greater_than reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_greater_than_equals reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_equals reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_not_equals reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_smallest reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_greatest reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_goodname reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_s_combinator reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_s_combinator_2 reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    operator_goodname2 reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    (               reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    VAR             reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    FLOAT           reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    NUM             reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    STRING_3SQ      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    STRING_3DQ      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    STRING_SQ       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    STRING_DQ       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    true            reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    Null            reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    false           reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_type       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_num        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_bool       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_any        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_u64        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_u32        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_u16        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_u8         reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_i64        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_i32        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_i16        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_i8         reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_f32        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_f64        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_str        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_list       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_tuple      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_array      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_vector     reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_dict       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_generator  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_linked_list reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_doubly_linked_list reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_deque      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_heap       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_fibonacci_heap reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_tree       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_trie       reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_stack      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_queue      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_binary_search_tree reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_bitset     reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_set        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_map        reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_range      reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_bad_struct reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    type_bad_struct2 reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    lambda          reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)


state 37

    (208) OPERATOR -> operator_bitshiftright .

    operator_scan   reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_reduc  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_add    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_sub    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_mul    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_div    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_trudiv reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_pow    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_join   reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_split  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitand reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitor  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitxor reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitshiftleft reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitshiftright reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_and    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_or     reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_xor    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_contains reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_bitnot reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_not    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_incr   reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_decr   reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_outer  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_inner  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_reverse reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_rotate reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_apply  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_compose reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_over   reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_map    reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_sorted_incr reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_sorted_decr reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_less_than reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_less_than_equals reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_greater_than reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_greater_than_equals reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_equals reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_not_equals reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_smallest reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_greatest reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_goodname reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_s_combinator reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_s_combinator_2 reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    operator_goodname2 reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    (               reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    VAR             reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    FLOAT           reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    NUM             reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    STRING_3SQ      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    STRING_3DQ      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    STRING_SQ       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    STRING_DQ       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    true            reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    Null            reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    false           reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_type       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_num        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_bool       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_any        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_u64        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_u32        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_u16        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_u8         reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_i64        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_i32        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_i16        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_i8         reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_f32        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_f64        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_str        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_list       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_tuple      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_array      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_vector     reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_dict       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_generator  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_linked_list reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_doubly_linked_list reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_deque      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_heap       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_fibonacci_heap reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_tree       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_trie       reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_stack      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_queue      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_binary_search_tree reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_bitset     reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_set        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_map        reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_range      reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_bad_struct reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    type_bad_struct2 reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    lambda          reduce using rule 208 (OPERATOR -> operator_bitshiftright .)


state 38

    (209) OPERATOR -> operator_and .

    operator_scan   reduce using rule 209 (OPERATOR -> operator_and .)
    operator_reduc  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_add    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_sub    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_mul    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_div    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_trudiv reduce using rule 209 (OPERATOR -> operator_and .)
    operator_pow    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_join   reduce using rule 209 (OPERATOR -> operator_and .)
    operator_split  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitand reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitor  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitxor reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitshiftleft reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitshiftright reduce using rule 209 (OPERATOR -> operator_and .)
    operator_and    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_or     reduce using rule 209 (OPERATOR -> operator_and .)
    operator_xor    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_contains reduce using rule 209 (OPERATOR -> operator_and .)
    operator_bitnot reduce using rule 209 (OPERATOR -> operator_and .)
    operator_not    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_incr   reduce using rule 209 (OPERATOR -> operator_and .)
    operator_decr   reduce using rule 209 (OPERATOR -> operator_and .)
    operator_outer  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_inner  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_reverse reduce using rule 209 (OPERATOR -> operator_and .)
    operator_rotate reduce using rule 209 (OPERATOR -> operator_and .)
    operator_apply  reduce using rule 209 (OPERATOR -> operator_and .)
    operator_compose reduce using rule 209 (OPERATOR -> operator_and .)
    operator_over   reduce using rule 209 (OPERATOR -> operator_and .)
    operator_map    reduce using rule 209 (OPERATOR -> operator_and .)
    operator_sorted_incr reduce using rule 209 (OPERATOR -> operator_and .)
    operator_sorted_decr reduce using rule 209 (OPERATOR -> operator_and .)
    operator_less_than reduce using rule 209 (OPERATOR -> operator_and .)
    operator_less_than_equals reduce using rule 209 (OPERATOR -> operator_and .)
    operator_greater_than reduce using rule 209 (OPERATOR -> operator_and .)
    operator_greater_than_equals reduce using rule 209 (OPERATOR -> operator_and .)
    operator_equals reduce using rule 209 (OPERATOR -> operator_and .)
    operator_not_equals reduce using rule 209 (OPERATOR -> operator_and .)
    operator_smallest reduce using rule 209 (OPERATOR -> operator_and .)
    operator_greatest reduce using rule 209 (OPERATOR -> operator_and .)
    operator_goodname reduce using rule 209 (OPERATOR -> operator_and .)
    operator_s_combinator reduce using rule 209 (OPERATOR -> operator_and .)
    operator_s_combinator_2 reduce using rule 209 (OPERATOR -> operator_and .)
    operator_goodname2 reduce using rule 209 (OPERATOR -> operator_and .)
    (               reduce using rule 209 (OPERATOR -> operator_and .)
    VAR             reduce using rule 209 (OPERATOR -> operator_and .)
    FLOAT           reduce using rule 209 (OPERATOR -> operator_and .)
    NUM             reduce using rule 209 (OPERATOR -> operator_and .)
    STRING_3SQ      reduce using rule 209 (OPERATOR -> operator_and .)
    STRING_3DQ      reduce using rule 209 (OPERATOR -> operator_and .)
    STRING_SQ       reduce using rule 209 (OPERATOR -> operator_and .)
    STRING_DQ       reduce using rule 209 (OPERATOR -> operator_and .)
    true            reduce using rule 209 (OPERATOR -> operator_and .)
    Null            reduce using rule 209 (OPERATOR -> operator_and .)
    false           reduce using rule 209 (OPERATOR -> operator_and .)
    type_type       reduce using rule 209 (OPERATOR -> operator_and .)
    type_num        reduce using rule 209 (OPERATOR -> operator_and .)
    type_bool       reduce using rule 209 (OPERATOR -> operator_and .)
    type_any        reduce using rule 209 (OPERATOR -> operator_and .)
    type_u64        reduce using rule 209 (OPERATOR -> operator_and .)
    type_u32        reduce using rule 209 (OPERATOR -> operator_and .)
    type_u16        reduce using rule 209 (OPERATOR -> operator_and .)
    type_u8         reduce using rule 209 (OPERATOR -> operator_and .)
    type_i64        reduce using rule 209 (OPERATOR -> operator_and .)
    type_i32        reduce using rule 209 (OPERATOR -> operator_and .)
    type_i16        reduce using rule 209 (OPERATOR -> operator_and .)
    type_i8         reduce using rule 209 (OPERATOR -> operator_and .)
    type_f32        reduce using rule 209 (OPERATOR -> operator_and .)
    type_f64        reduce using rule 209 (OPERATOR -> operator_and .)
    type_str        reduce using rule 209 (OPERATOR -> operator_and .)
    type_list       reduce using rule 209 (OPERATOR -> operator_and .)
    type_tuple      reduce using rule 209 (OPERATOR -> operator_and .)
    type_array      reduce using rule 209 (OPERATOR -> operator_and .)
    type_vector     reduce using rule 209 (OPERATOR -> operator_and .)
    type_dict       reduce using rule 209 (OPERATOR -> operator_and .)
    type_generator  reduce using rule 209 (OPERATOR -> operator_and .)
    type_linked_list reduce using rule 209 (OPERATOR -> operator_and .)
    type_doubly_linked_list reduce using rule 209 (OPERATOR -> operator_and .)
    type_deque      reduce using rule 209 (OPERATOR -> operator_and .)
    type_heap       reduce using rule 209 (OPERATOR -> operator_and .)
    type_fibonacci_heap reduce using rule 209 (OPERATOR -> operator_and .)
    type_tree       reduce using rule 209 (OPERATOR -> operator_and .)
    type_trie       reduce using rule 209 (OPERATOR -> operator_and .)
    type_stack      reduce using rule 209 (OPERATOR -> operator_and .)
    type_queue      reduce using rule 209 (OPERATOR -> operator_and .)
    type_binary_search_tree reduce using rule 209 (OPERATOR -> operator_and .)
    type_bitset     reduce using rule 209 (OPERATOR -> operator_and .)
    type_set        reduce using rule 209 (OPERATOR -> operator_and .)
    type_map        reduce using rule 209 (OPERATOR -> operator_and .)
    type_range      reduce using rule 209 (OPERATOR -> operator_and .)
    type_bad_struct reduce using rule 209 (OPERATOR -> operator_and .)
    type_bad_struct2 reduce using rule 209 (OPERATOR -> operator_and .)
    lambda          reduce using rule 209 (OPERATOR -> operator_and .)


state 39

    (210) OPERATOR -> operator_or .

    operator_scan   reduce using rule 210 (OPERATOR -> operator_or .)
    operator_reduc  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_add    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_sub    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_mul    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_div    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_trudiv reduce using rule 210 (OPERATOR -> operator_or .)
    operator_pow    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_join   reduce using rule 210 (OPERATOR -> operator_or .)
    operator_split  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitand reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitor  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitxor reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitshiftleft reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitshiftright reduce using rule 210 (OPERATOR -> operator_or .)
    operator_and    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_or     reduce using rule 210 (OPERATOR -> operator_or .)
    operator_xor    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_contains reduce using rule 210 (OPERATOR -> operator_or .)
    operator_bitnot reduce using rule 210 (OPERATOR -> operator_or .)
    operator_not    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_incr   reduce using rule 210 (OPERATOR -> operator_or .)
    operator_decr   reduce using rule 210 (OPERATOR -> operator_or .)
    operator_outer  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_inner  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_reverse reduce using rule 210 (OPERATOR -> operator_or .)
    operator_rotate reduce using rule 210 (OPERATOR -> operator_or .)
    operator_apply  reduce using rule 210 (OPERATOR -> operator_or .)
    operator_compose reduce using rule 210 (OPERATOR -> operator_or .)
    operator_over   reduce using rule 210 (OPERATOR -> operator_or .)
    operator_map    reduce using rule 210 (OPERATOR -> operator_or .)
    operator_sorted_incr reduce using rule 210 (OPERATOR -> operator_or .)
    operator_sorted_decr reduce using rule 210 (OPERATOR -> operator_or .)
    operator_less_than reduce using rule 210 (OPERATOR -> operator_or .)
    operator_less_than_equals reduce using rule 210 (OPERATOR -> operator_or .)
    operator_greater_than reduce using rule 210 (OPERATOR -> operator_or .)
    operator_greater_than_equals reduce using rule 210 (OPERATOR -> operator_or .)
    operator_equals reduce using rule 210 (OPERATOR -> operator_or .)
    operator_not_equals reduce using rule 210 (OPERATOR -> operator_or .)
    operator_smallest reduce using rule 210 (OPERATOR -> operator_or .)
    operator_greatest reduce using rule 210 (OPERATOR -> operator_or .)
    operator_goodname reduce using rule 210 (OPERATOR -> operator_or .)
    operator_s_combinator reduce using rule 210 (OPERATOR -> operator_or .)
    operator_s_combinator_2 reduce using rule 210 (OPERATOR -> operator_or .)
    operator_goodname2 reduce using rule 210 (OPERATOR -> operator_or .)
    (               reduce using rule 210 (OPERATOR -> operator_or .)
    VAR             reduce using rule 210 (OPERATOR -> operator_or .)
    FLOAT           reduce using rule 210 (OPERATOR -> operator_or .)
    NUM             reduce using rule 210 (OPERATOR -> operator_or .)
    STRING_3SQ      reduce using rule 210 (OPERATOR -> operator_or .)
    STRING_3DQ      reduce using rule 210 (OPERATOR -> operator_or .)
    STRING_SQ       reduce using rule 210 (OPERATOR -> operator_or .)
    STRING_DQ       reduce using rule 210 (OPERATOR -> operator_or .)
    true            reduce using rule 210 (OPERATOR -> operator_or .)
    Null            reduce using rule 210 (OPERATOR -> operator_or .)
    false           reduce using rule 210 (OPERATOR -> operator_or .)
    type_type       reduce using rule 210 (OPERATOR -> operator_or .)
    type_num        reduce using rule 210 (OPERATOR -> operator_or .)
    type_bool       reduce using rule 210 (OPERATOR -> operator_or .)
    type_any        reduce using rule 210 (OPERATOR -> operator_or .)
    type_u64        reduce using rule 210 (OPERATOR -> operator_or .)
    type_u32        reduce using rule 210 (OPERATOR -> operator_or .)
    type_u16        reduce using rule 210 (OPERATOR -> operator_or .)
    type_u8         reduce using rule 210 (OPERATOR -> operator_or .)
    type_i64        reduce using rule 210 (OPERATOR -> operator_or .)
    type_i32        reduce using rule 210 (OPERATOR -> operator_or .)
    type_i16        reduce using rule 210 (OPERATOR -> operator_or .)
    type_i8         reduce using rule 210 (OPERATOR -> operator_or .)
    type_f32        reduce using rule 210 (OPERATOR -> operator_or .)
    type_f64        reduce using rule 210 (OPERATOR -> operator_or .)
    type_str        reduce using rule 210 (OPERATOR -> operator_or .)
    type_list       reduce using rule 210 (OPERATOR -> operator_or .)
    type_tuple      reduce using rule 210 (OPERATOR -> operator_or .)
    type_array      reduce using rule 210 (OPERATOR -> operator_or .)
    type_vector     reduce using rule 210 (OPERATOR -> operator_or .)
    type_dict       reduce using rule 210 (OPERATOR -> operator_or .)
    type_generator  reduce using rule 210 (OPERATOR -> operator_or .)
    type_linked_list reduce using rule 210 (OPERATOR -> operator_or .)
    type_doubly_linked_list reduce using rule 210 (OPERATOR -> operator_or .)
    type_deque      reduce using rule 210 (OPERATOR -> operator_or .)
    type_heap       reduce using rule 210 (OPERATOR -> operator_or .)
    type_fibonacci_heap reduce using rule 210 (OPERATOR -> operator_or .)
    type_tree       reduce using rule 210 (OPERATOR -> operator_or .)
    type_trie       reduce using rule 210 (OPERATOR -> operator_or .)
    type_stack      reduce using rule 210 (OPERATOR -> operator_or .)
    type_queue      reduce using rule 210 (OPERATOR -> operator_or .)
    type_binary_search_tree reduce using rule 210 (OPERATOR -> operator_or .)
    type_bitset     reduce using rule 210 (OPERATOR -> operator_or .)
    type_set        reduce using rule 210 (OPERATOR -> operator_or .)
    type_map        reduce using rule 210 (OPERATOR -> operator_or .)
    type_range      reduce using rule 210 (OPERATOR -> operator_or .)
    type_bad_struct reduce using rule 210 (OPERATOR -> operator_or .)
    type_bad_struct2 reduce using rule 210 (OPERATOR -> operator_or .)
    lambda          reduce using rule 210 (OPERATOR -> operator_or .)


state 40

    (211) OPERATOR -> operator_xor .

    operator_scan   reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_reduc  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_add    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_sub    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_mul    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_div    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_trudiv reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_pow    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_join   reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_split  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitand reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitor  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitxor reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitshiftleft reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitshiftright reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_and    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_or     reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_xor    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_contains reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_bitnot reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_not    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_incr   reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_decr   reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_outer  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_inner  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_reverse reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_rotate reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_apply  reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_compose reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_over   reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_map    reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_sorted_incr reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_sorted_decr reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_less_than reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_less_than_equals reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_greater_than reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_greater_than_equals reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_equals reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_not_equals reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_smallest reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_greatest reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_goodname reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_s_combinator reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_s_combinator_2 reduce using rule 211 (OPERATOR -> operator_xor .)
    operator_goodname2 reduce using rule 211 (OPERATOR -> operator_xor .)
    (               reduce using rule 211 (OPERATOR -> operator_xor .)
    VAR             reduce using rule 211 (OPERATOR -> operator_xor .)
    FLOAT           reduce using rule 211 (OPERATOR -> operator_xor .)
    NUM             reduce using rule 211 (OPERATOR -> operator_xor .)
    STRING_3SQ      reduce using rule 211 (OPERATOR -> operator_xor .)
    STRING_3DQ      reduce using rule 211 (OPERATOR -> operator_xor .)
    STRING_SQ       reduce using rule 211 (OPERATOR -> operator_xor .)
    STRING_DQ       reduce using rule 211 (OPERATOR -> operator_xor .)
    true            reduce using rule 211 (OPERATOR -> operator_xor .)
    Null            reduce using rule 211 (OPERATOR -> operator_xor .)
    false           reduce using rule 211 (OPERATOR -> operator_xor .)
    type_type       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_num        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_bool       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_any        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_u64        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_u32        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_u16        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_u8         reduce using rule 211 (OPERATOR -> operator_xor .)
    type_i64        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_i32        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_i16        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_i8         reduce using rule 211 (OPERATOR -> operator_xor .)
    type_f32        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_f64        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_str        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_list       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_tuple      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_array      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_vector     reduce using rule 211 (OPERATOR -> operator_xor .)
    type_dict       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_generator  reduce using rule 211 (OPERATOR -> operator_xor .)
    type_linked_list reduce using rule 211 (OPERATOR -> operator_xor .)
    type_doubly_linked_list reduce using rule 211 (OPERATOR -> operator_xor .)
    type_deque      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_heap       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_fibonacci_heap reduce using rule 211 (OPERATOR -> operator_xor .)
    type_tree       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_trie       reduce using rule 211 (OPERATOR -> operator_xor .)
    type_stack      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_queue      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_binary_search_tree reduce using rule 211 (OPERATOR -> operator_xor .)
    type_bitset     reduce using rule 211 (OPERATOR -> operator_xor .)
    type_set        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_map        reduce using rule 211 (OPERATOR -> operator_xor .)
    type_range      reduce using rule 211 (OPERATOR -> operator_xor .)
    type_bad_struct reduce using rule 211 (OPERATOR -> operator_xor .)
    type_bad_struct2 reduce using rule 211 (OPERATOR -> operator_xor .)
    lambda          reduce using rule 211 (OPERATOR -> operator_xor .)


state 41

    (212) OPERATOR -> operator_contains .

    operator_scan   reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_reduc  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_add    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_sub    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_mul    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_div    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_trudiv reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_pow    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_join   reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_split  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitand reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitor  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitxor reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitshiftleft reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitshiftright reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_and    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_or     reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_xor    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_contains reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_bitnot reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_not    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_incr   reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_decr   reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_outer  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_inner  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_reverse reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_rotate reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_apply  reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_compose reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_over   reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_map    reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_sorted_incr reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_sorted_decr reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_less_than reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_less_than_equals reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_greater_than reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_greater_than_equals reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_equals reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_not_equals reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_smallest reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_greatest reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_goodname reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_s_combinator reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_s_combinator_2 reduce using rule 212 (OPERATOR -> operator_contains .)
    operator_goodname2 reduce using rule 212 (OPERATOR -> operator_contains .)
    (               reduce using rule 212 (OPERATOR -> operator_contains .)
    VAR             reduce using rule 212 (OPERATOR -> operator_contains .)
    FLOAT           reduce using rule 212 (OPERATOR -> operator_contains .)
    NUM             reduce using rule 212 (OPERATOR -> operator_contains .)
    STRING_3SQ      reduce using rule 212 (OPERATOR -> operator_contains .)
    STRING_3DQ      reduce using rule 212 (OPERATOR -> operator_contains .)
    STRING_SQ       reduce using rule 212 (OPERATOR -> operator_contains .)
    STRING_DQ       reduce using rule 212 (OPERATOR -> operator_contains .)
    true            reduce using rule 212 (OPERATOR -> operator_contains .)
    Null            reduce using rule 212 (OPERATOR -> operator_contains .)
    false           reduce using rule 212 (OPERATOR -> operator_contains .)
    type_type       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_num        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_bool       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_any        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_u64        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_u32        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_u16        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_u8         reduce using rule 212 (OPERATOR -> operator_contains .)
    type_i64        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_i32        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_i16        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_i8         reduce using rule 212 (OPERATOR -> operator_contains .)
    type_f32        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_f64        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_str        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_list       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_tuple      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_array      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_vector     reduce using rule 212 (OPERATOR -> operator_contains .)
    type_dict       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_generator  reduce using rule 212 (OPERATOR -> operator_contains .)
    type_linked_list reduce using rule 212 (OPERATOR -> operator_contains .)
    type_doubly_linked_list reduce using rule 212 (OPERATOR -> operator_contains .)
    type_deque      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_heap       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_fibonacci_heap reduce using rule 212 (OPERATOR -> operator_contains .)
    type_tree       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_trie       reduce using rule 212 (OPERATOR -> operator_contains .)
    type_stack      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_queue      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_binary_search_tree reduce using rule 212 (OPERATOR -> operator_contains .)
    type_bitset     reduce using rule 212 (OPERATOR -> operator_contains .)
    type_set        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_map        reduce using rule 212 (OPERATOR -> operator_contains .)
    type_range      reduce using rule 212 (OPERATOR -> operator_contains .)
    type_bad_struct reduce using rule 212 (OPERATOR -> operator_contains .)
    type_bad_struct2 reduce using rule 212 (OPERATOR -> operator_contains .)
    lambda          reduce using rule 212 (OPERATOR -> operator_contains .)


state 42

    (121) expr -> operator_bitnot . expr
    (213) OPERATOR -> operator_bitnot .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_scan   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_reduc  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_inner  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 197
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 43

    (122) expr -> operator_not . expr
    (214) OPERATOR -> operator_not .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 214 (OPERATOR -> operator_not .) ]
  ! operator_reduc  [ reduce using rule 214 (OPERATOR -> operator_not .) ]
  ! operator_inner  [ reduce using rule 214 (OPERATOR -> operator_not .) ]

    expr                           shift and go to state 198
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 44

    (215) OPERATOR -> operator_incr .

    operator_scan   reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_reduc  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_add    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_sub    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_mul    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_div    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_trudiv reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_pow    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_join   reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_split  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitand reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitor  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitxor reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitshiftleft reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitshiftright reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_and    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_or     reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_xor    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_contains reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_bitnot reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_not    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_incr   reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_decr   reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_outer  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_inner  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_reverse reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_rotate reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_apply  reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_compose reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_over   reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_map    reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_sorted_incr reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_sorted_decr reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_less_than reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_less_than_equals reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_greater_than reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_greater_than_equals reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_equals reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_not_equals reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_smallest reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_greatest reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_goodname reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_s_combinator reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_s_combinator_2 reduce using rule 215 (OPERATOR -> operator_incr .)
    operator_goodname2 reduce using rule 215 (OPERATOR -> operator_incr .)
    (               reduce using rule 215 (OPERATOR -> operator_incr .)
    VAR             reduce using rule 215 (OPERATOR -> operator_incr .)
    FLOAT           reduce using rule 215 (OPERATOR -> operator_incr .)
    NUM             reduce using rule 215 (OPERATOR -> operator_incr .)
    STRING_3SQ      reduce using rule 215 (OPERATOR -> operator_incr .)
    STRING_3DQ      reduce using rule 215 (OPERATOR -> operator_incr .)
    STRING_SQ       reduce using rule 215 (OPERATOR -> operator_incr .)
    STRING_DQ       reduce using rule 215 (OPERATOR -> operator_incr .)
    true            reduce using rule 215 (OPERATOR -> operator_incr .)
    Null            reduce using rule 215 (OPERATOR -> operator_incr .)
    false           reduce using rule 215 (OPERATOR -> operator_incr .)
    type_type       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_num        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_bool       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_any        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_u64        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_u32        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_u16        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_u8         reduce using rule 215 (OPERATOR -> operator_incr .)
    type_i64        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_i32        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_i16        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_i8         reduce using rule 215 (OPERATOR -> operator_incr .)
    type_f32        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_f64        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_str        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_list       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_tuple      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_array      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_vector     reduce using rule 215 (OPERATOR -> operator_incr .)
    type_dict       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_generator  reduce using rule 215 (OPERATOR -> operator_incr .)
    type_linked_list reduce using rule 215 (OPERATOR -> operator_incr .)
    type_doubly_linked_list reduce using rule 215 (OPERATOR -> operator_incr .)
    type_deque      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_heap       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_fibonacci_heap reduce using rule 215 (OPERATOR -> operator_incr .)
    type_tree       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_trie       reduce using rule 215 (OPERATOR -> operator_incr .)
    type_stack      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_queue      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_binary_search_tree reduce using rule 215 (OPERATOR -> operator_incr .)
    type_bitset     reduce using rule 215 (OPERATOR -> operator_incr .)
    type_set        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_map        reduce using rule 215 (OPERATOR -> operator_incr .)
    type_range      reduce using rule 215 (OPERATOR -> operator_incr .)
    type_bad_struct reduce using rule 215 (OPERATOR -> operator_incr .)
    type_bad_struct2 reduce using rule 215 (OPERATOR -> operator_incr .)
    lambda          reduce using rule 215 (OPERATOR -> operator_incr .)


state 45

    (216) OPERATOR -> operator_decr .

    operator_scan   reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_reduc  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_add    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_sub    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_mul    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_div    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_trudiv reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_pow    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_join   reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_split  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitand reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitor  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitxor reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitshiftleft reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitshiftright reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_and    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_or     reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_xor    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_contains reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_bitnot reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_not    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_incr   reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_decr   reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_outer  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_inner  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_reverse reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_rotate reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_apply  reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_compose reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_over   reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_map    reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_sorted_incr reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_sorted_decr reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_less_than reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_less_than_equals reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_greater_than reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_greater_than_equals reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_equals reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_not_equals reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_smallest reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_greatest reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_goodname reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_s_combinator reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_s_combinator_2 reduce using rule 216 (OPERATOR -> operator_decr .)
    operator_goodname2 reduce using rule 216 (OPERATOR -> operator_decr .)
    (               reduce using rule 216 (OPERATOR -> operator_decr .)
    VAR             reduce using rule 216 (OPERATOR -> operator_decr .)
    FLOAT           reduce using rule 216 (OPERATOR -> operator_decr .)
    NUM             reduce using rule 216 (OPERATOR -> operator_decr .)
    STRING_3SQ      reduce using rule 216 (OPERATOR -> operator_decr .)
    STRING_3DQ      reduce using rule 216 (OPERATOR -> operator_decr .)
    STRING_SQ       reduce using rule 216 (OPERATOR -> operator_decr .)
    STRING_DQ       reduce using rule 216 (OPERATOR -> operator_decr .)
    true            reduce using rule 216 (OPERATOR -> operator_decr .)
    Null            reduce using rule 216 (OPERATOR -> operator_decr .)
    false           reduce using rule 216 (OPERATOR -> operator_decr .)
    type_type       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_num        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_bool       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_any        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_u64        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_u32        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_u16        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_u8         reduce using rule 216 (OPERATOR -> operator_decr .)
    type_i64        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_i32        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_i16        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_i8         reduce using rule 216 (OPERATOR -> operator_decr .)
    type_f32        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_f64        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_str        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_list       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_tuple      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_array      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_vector     reduce using rule 216 (OPERATOR -> operator_decr .)
    type_dict       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_generator  reduce using rule 216 (OPERATOR -> operator_decr .)
    type_linked_list reduce using rule 216 (OPERATOR -> operator_decr .)
    type_doubly_linked_list reduce using rule 216 (OPERATOR -> operator_decr .)
    type_deque      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_heap       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_fibonacci_heap reduce using rule 216 (OPERATOR -> operator_decr .)
    type_tree       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_trie       reduce using rule 216 (OPERATOR -> operator_decr .)
    type_stack      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_queue      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_binary_search_tree reduce using rule 216 (OPERATOR -> operator_decr .)
    type_bitset     reduce using rule 216 (OPERATOR -> operator_decr .)
    type_set        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_map        reduce using rule 216 (OPERATOR -> operator_decr .)
    type_range      reduce using rule 216 (OPERATOR -> operator_decr .)
    type_bad_struct reduce using rule 216 (OPERATOR -> operator_decr .)
    type_bad_struct2 reduce using rule 216 (OPERATOR -> operator_decr .)
    lambda          reduce using rule 216 (OPERATOR -> operator_decr .)


state 46

    (217) OPERATOR -> operator_outer .

    operator_scan   reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_reduc  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_add    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_sub    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_mul    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_div    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_trudiv reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_pow    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_join   reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_split  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitand reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitor  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitxor reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitshiftleft reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitshiftright reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_and    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_or     reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_xor    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_contains reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_bitnot reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_not    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_incr   reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_decr   reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_outer  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_inner  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_reverse reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_rotate reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_apply  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_compose reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_over   reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_map    reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_sorted_incr reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_sorted_decr reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_less_than reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_less_than_equals reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_greater_than reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_greater_than_equals reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_equals reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_not_equals reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_smallest reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_greatest reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_goodname reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_s_combinator reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_s_combinator_2 reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_goodname2 reduce using rule 217 (OPERATOR -> operator_outer .)
    (               reduce using rule 217 (OPERATOR -> operator_outer .)
    VAR             reduce using rule 217 (OPERATOR -> operator_outer .)
    FLOAT           reduce using rule 217 (OPERATOR -> operator_outer .)
    NUM             reduce using rule 217 (OPERATOR -> operator_outer .)
    STRING_3SQ      reduce using rule 217 (OPERATOR -> operator_outer .)
    STRING_3DQ      reduce using rule 217 (OPERATOR -> operator_outer .)
    STRING_SQ       reduce using rule 217 (OPERATOR -> operator_outer .)
    STRING_DQ       reduce using rule 217 (OPERATOR -> operator_outer .)
    true            reduce using rule 217 (OPERATOR -> operator_outer .)
    Null            reduce using rule 217 (OPERATOR -> operator_outer .)
    false           reduce using rule 217 (OPERATOR -> operator_outer .)
    type_type       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_num        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_bool       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_any        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_u64        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_u32        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_u16        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_u8         reduce using rule 217 (OPERATOR -> operator_outer .)
    type_i64        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_i32        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_i16        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_i8         reduce using rule 217 (OPERATOR -> operator_outer .)
    type_f32        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_f64        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_str        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_list       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_tuple      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_array      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_vector     reduce using rule 217 (OPERATOR -> operator_outer .)
    type_dict       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_generator  reduce using rule 217 (OPERATOR -> operator_outer .)
    type_linked_list reduce using rule 217 (OPERATOR -> operator_outer .)
    type_doubly_linked_list reduce using rule 217 (OPERATOR -> operator_outer .)
    type_deque      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_heap       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_fibonacci_heap reduce using rule 217 (OPERATOR -> operator_outer .)
    type_tree       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_trie       reduce using rule 217 (OPERATOR -> operator_outer .)
    type_stack      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_queue      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_binary_search_tree reduce using rule 217 (OPERATOR -> operator_outer .)
    type_bitset     reduce using rule 217 (OPERATOR -> operator_outer .)
    type_set        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_map        reduce using rule 217 (OPERATOR -> operator_outer .)
    type_range      reduce using rule 217 (OPERATOR -> operator_outer .)
    type_bad_struct reduce using rule 217 (OPERATOR -> operator_outer .)
    type_bad_struct2 reduce using rule 217 (OPERATOR -> operator_outer .)
    lambda          reduce using rule 217 (OPERATOR -> operator_outer .)


state 47

    (218) OPERATOR -> operator_inner .

    operator_scan   reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_reduc  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_inner  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_add    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_sub    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_mul    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_div    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_trudiv reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_pow    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_join   reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_split  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitand reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitor  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitxor reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitshiftleft reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitshiftright reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_and    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_or     reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_xor    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_contains reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_bitnot reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_not    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_incr   reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_decr   reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_outer  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_reverse reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_rotate reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_apply  reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_compose reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_over   reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_map    reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_sorted_incr reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_sorted_decr reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_less_than reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_less_than_equals reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_greater_than reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_greater_than_equals reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_equals reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_not_equals reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_smallest reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_greatest reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_goodname reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_s_combinator reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_s_combinator_2 reduce using rule 218 (OPERATOR -> operator_inner .)
    operator_goodname2 reduce using rule 218 (OPERATOR -> operator_inner .)
    (               reduce using rule 218 (OPERATOR -> operator_inner .)
    VAR             reduce using rule 218 (OPERATOR -> operator_inner .)
    FLOAT           reduce using rule 218 (OPERATOR -> operator_inner .)
    NUM             reduce using rule 218 (OPERATOR -> operator_inner .)
    STRING_3SQ      reduce using rule 218 (OPERATOR -> operator_inner .)
    STRING_3DQ      reduce using rule 218 (OPERATOR -> operator_inner .)
    STRING_SQ       reduce using rule 218 (OPERATOR -> operator_inner .)
    STRING_DQ       reduce using rule 218 (OPERATOR -> operator_inner .)
    true            reduce using rule 218 (OPERATOR -> operator_inner .)
    Null            reduce using rule 218 (OPERATOR -> operator_inner .)
    false           reduce using rule 218 (OPERATOR -> operator_inner .)
    type_type       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_num        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_bool       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_any        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_u64        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_u32        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_u16        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_u8         reduce using rule 218 (OPERATOR -> operator_inner .)
    type_i64        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_i32        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_i16        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_i8         reduce using rule 218 (OPERATOR -> operator_inner .)
    type_f32        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_f64        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_str        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_list       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_tuple      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_array      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_vector     reduce using rule 218 (OPERATOR -> operator_inner .)
    type_dict       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_generator  reduce using rule 218 (OPERATOR -> operator_inner .)
    type_linked_list reduce using rule 218 (OPERATOR -> operator_inner .)
    type_doubly_linked_list reduce using rule 218 (OPERATOR -> operator_inner .)
    type_deque      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_heap       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_fibonacci_heap reduce using rule 218 (OPERATOR -> operator_inner .)
    type_tree       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_trie       reduce using rule 218 (OPERATOR -> operator_inner .)
    type_stack      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_queue      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_binary_search_tree reduce using rule 218 (OPERATOR -> operator_inner .)
    type_bitset     reduce using rule 218 (OPERATOR -> operator_inner .)
    type_set        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_map        reduce using rule 218 (OPERATOR -> operator_inner .)
    type_range      reduce using rule 218 (OPERATOR -> operator_inner .)
    type_bad_struct reduce using rule 218 (OPERATOR -> operator_inner .)
    type_bad_struct2 reduce using rule 218 (OPERATOR -> operator_inner .)
    lambda          reduce using rule 218 (OPERATOR -> operator_inner .)


state 48

    (127) expr -> operator_reverse . expr
    (219) OPERATOR -> operator_reverse .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_scan   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_reduc  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_inner  reduce using rule 219 (OPERATOR -> operator_reverse .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 199
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 49

    (220) OPERATOR -> operator_rotate .

    operator_scan   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_reduc  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_add    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_sub    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_mul    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_div    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_trudiv reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_pow    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_join   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_split  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitand reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitor  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitxor reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitshiftleft reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitshiftright reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_and    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_or     reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_xor    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_contains reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_bitnot reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_not    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_incr   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_decr   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_outer  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_inner  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_reverse reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_rotate reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_apply  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_compose reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_over   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_map    reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_sorted_incr reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_sorted_decr reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_less_than reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_less_than_equals reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_greater_than reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_greater_than_equals reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_equals reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_not_equals reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_smallest reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_greatest reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_goodname reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_s_combinator reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_s_combinator_2 reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_goodname2 reduce using rule 220 (OPERATOR -> operator_rotate .)
    (               reduce using rule 220 (OPERATOR -> operator_rotate .)
    VAR             reduce using rule 220 (OPERATOR -> operator_rotate .)
    FLOAT           reduce using rule 220 (OPERATOR -> operator_rotate .)
    NUM             reduce using rule 220 (OPERATOR -> operator_rotate .)
    STRING_3SQ      reduce using rule 220 (OPERATOR -> operator_rotate .)
    STRING_3DQ      reduce using rule 220 (OPERATOR -> operator_rotate .)
    STRING_SQ       reduce using rule 220 (OPERATOR -> operator_rotate .)
    STRING_DQ       reduce using rule 220 (OPERATOR -> operator_rotate .)
    true            reduce using rule 220 (OPERATOR -> operator_rotate .)
    Null            reduce using rule 220 (OPERATOR -> operator_rotate .)
    false           reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_type       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_num        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_bool       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_any        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_u64        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_u32        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_u16        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_u8         reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_i64        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_i32        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_i16        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_i8         reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_f32        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_f64        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_str        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_list       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_tuple      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_array      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_vector     reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_dict       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_generator  reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_linked_list reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_doubly_linked_list reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_deque      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_heap       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_fibonacci_heap reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_tree       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_trie       reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_stack      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_queue      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_binary_search_tree reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_bitset     reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_set        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_map        reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_range      reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_bad_struct reduce using rule 220 (OPERATOR -> operator_rotate .)
    type_bad_struct2 reduce using rule 220 (OPERATOR -> operator_rotate .)
    lambda          reduce using rule 220 (OPERATOR -> operator_rotate .)


state 50

    (221) OPERATOR -> operator_apply .

    operator_scan   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_reduc  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_add    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_sub    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_mul    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_div    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_trudiv reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_pow    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_join   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_split  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitand reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitor  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitxor reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitshiftleft reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitshiftright reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_and    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_or     reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_xor    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_contains reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_bitnot reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_not    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_incr   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_decr   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_outer  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_inner  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_reverse reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_rotate reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_apply  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_compose reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_over   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_map    reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_sorted_incr reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_sorted_decr reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_less_than reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_less_than_equals reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_greater_than reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_greater_than_equals reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_equals reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_not_equals reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_smallest reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_greatest reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_goodname reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_s_combinator reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_s_combinator_2 reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_goodname2 reduce using rule 221 (OPERATOR -> operator_apply .)
    (               reduce using rule 221 (OPERATOR -> operator_apply .)
    VAR             reduce using rule 221 (OPERATOR -> operator_apply .)
    FLOAT           reduce using rule 221 (OPERATOR -> operator_apply .)
    NUM             reduce using rule 221 (OPERATOR -> operator_apply .)
    STRING_3SQ      reduce using rule 221 (OPERATOR -> operator_apply .)
    STRING_3DQ      reduce using rule 221 (OPERATOR -> operator_apply .)
    STRING_SQ       reduce using rule 221 (OPERATOR -> operator_apply .)
    STRING_DQ       reduce using rule 221 (OPERATOR -> operator_apply .)
    true            reduce using rule 221 (OPERATOR -> operator_apply .)
    Null            reduce using rule 221 (OPERATOR -> operator_apply .)
    false           reduce using rule 221 (OPERATOR -> operator_apply .)
    type_type       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_num        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_bool       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_any        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_u64        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_u32        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_u16        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_u8         reduce using rule 221 (OPERATOR -> operator_apply .)
    type_i64        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_i32        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_i16        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_i8         reduce using rule 221 (OPERATOR -> operator_apply .)
    type_f32        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_f64        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_str        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_list       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_tuple      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_array      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_vector     reduce using rule 221 (OPERATOR -> operator_apply .)
    type_dict       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_generator  reduce using rule 221 (OPERATOR -> operator_apply .)
    type_linked_list reduce using rule 221 (OPERATOR -> operator_apply .)
    type_doubly_linked_list reduce using rule 221 (OPERATOR -> operator_apply .)
    type_deque      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_heap       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_fibonacci_heap reduce using rule 221 (OPERATOR -> operator_apply .)
    type_tree       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_trie       reduce using rule 221 (OPERATOR -> operator_apply .)
    type_stack      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_queue      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_binary_search_tree reduce using rule 221 (OPERATOR -> operator_apply .)
    type_bitset     reduce using rule 221 (OPERATOR -> operator_apply .)
    type_set        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_map        reduce using rule 221 (OPERATOR -> operator_apply .)
    type_range      reduce using rule 221 (OPERATOR -> operator_apply .)
    type_bad_struct reduce using rule 221 (OPERATOR -> operator_apply .)
    type_bad_struct2 reduce using rule 221 (OPERATOR -> operator_apply .)
    lambda          reduce using rule 221 (OPERATOR -> operator_apply .)


state 51

    (222) OPERATOR -> operator_compose .

    operator_scan   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_reduc  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_add    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_sub    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_mul    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_div    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_trudiv reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_pow    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_join   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_split  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitand reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitor  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitxor reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitshiftleft reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitshiftright reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_and    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_or     reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_xor    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_contains reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_bitnot reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_not    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_incr   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_decr   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_outer  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_inner  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_reverse reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_rotate reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_apply  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_compose reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_over   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_map    reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_sorted_incr reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_sorted_decr reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_less_than reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_less_than_equals reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_greater_than reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_greater_than_equals reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_equals reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_not_equals reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_smallest reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_greatest reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_goodname reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_s_combinator reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_s_combinator_2 reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_goodname2 reduce using rule 222 (OPERATOR -> operator_compose .)
    (               reduce using rule 222 (OPERATOR -> operator_compose .)
    VAR             reduce using rule 222 (OPERATOR -> operator_compose .)
    FLOAT           reduce using rule 222 (OPERATOR -> operator_compose .)
    NUM             reduce using rule 222 (OPERATOR -> operator_compose .)
    STRING_3SQ      reduce using rule 222 (OPERATOR -> operator_compose .)
    STRING_3DQ      reduce using rule 222 (OPERATOR -> operator_compose .)
    STRING_SQ       reduce using rule 222 (OPERATOR -> operator_compose .)
    STRING_DQ       reduce using rule 222 (OPERATOR -> operator_compose .)
    true            reduce using rule 222 (OPERATOR -> operator_compose .)
    Null            reduce using rule 222 (OPERATOR -> operator_compose .)
    false           reduce using rule 222 (OPERATOR -> operator_compose .)
    type_type       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_num        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_bool       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_any        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_u64        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_u32        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_u16        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_u8         reduce using rule 222 (OPERATOR -> operator_compose .)
    type_i64        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_i32        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_i16        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_i8         reduce using rule 222 (OPERATOR -> operator_compose .)
    type_f32        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_f64        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_str        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_list       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_tuple      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_array      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_vector     reduce using rule 222 (OPERATOR -> operator_compose .)
    type_dict       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_generator  reduce using rule 222 (OPERATOR -> operator_compose .)
    type_linked_list reduce using rule 222 (OPERATOR -> operator_compose .)
    type_doubly_linked_list reduce using rule 222 (OPERATOR -> operator_compose .)
    type_deque      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_heap       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_fibonacci_heap reduce using rule 222 (OPERATOR -> operator_compose .)
    type_tree       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_trie       reduce using rule 222 (OPERATOR -> operator_compose .)
    type_stack      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_queue      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_binary_search_tree reduce using rule 222 (OPERATOR -> operator_compose .)
    type_bitset     reduce using rule 222 (OPERATOR -> operator_compose .)
    type_set        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_map        reduce using rule 222 (OPERATOR -> operator_compose .)
    type_range      reduce using rule 222 (OPERATOR -> operator_compose .)
    type_bad_struct reduce using rule 222 (OPERATOR -> operator_compose .)
    type_bad_struct2 reduce using rule 222 (OPERATOR -> operator_compose .)
    lambda          reduce using rule 222 (OPERATOR -> operator_compose .)


state 52

    (223) OPERATOR -> operator_over .

    operator_scan   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_reduc  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_add    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_sub    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_mul    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_div    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_trudiv reduce using rule 223 (OPERATOR -> operator_over .)
    operator_pow    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_join   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_split  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitand reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitor  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitxor reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitshiftleft reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitshiftright reduce using rule 223 (OPERATOR -> operator_over .)
    operator_and    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_or     reduce using rule 223 (OPERATOR -> operator_over .)
    operator_xor    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_contains reduce using rule 223 (OPERATOR -> operator_over .)
    operator_bitnot reduce using rule 223 (OPERATOR -> operator_over .)
    operator_not    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_incr   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_decr   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_outer  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_inner  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_reverse reduce using rule 223 (OPERATOR -> operator_over .)
    operator_rotate reduce using rule 223 (OPERATOR -> operator_over .)
    operator_apply  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_compose reduce using rule 223 (OPERATOR -> operator_over .)
    operator_over   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_map    reduce using rule 223 (OPERATOR -> operator_over .)
    operator_sorted_incr reduce using rule 223 (OPERATOR -> operator_over .)
    operator_sorted_decr reduce using rule 223 (OPERATOR -> operator_over .)
    operator_less_than reduce using rule 223 (OPERATOR -> operator_over .)
    operator_less_than_equals reduce using rule 223 (OPERATOR -> operator_over .)
    operator_greater_than reduce using rule 223 (OPERATOR -> operator_over .)
    operator_greater_than_equals reduce using rule 223 (OPERATOR -> operator_over .)
    operator_equals reduce using rule 223 (OPERATOR -> operator_over .)
    operator_not_equals reduce using rule 223 (OPERATOR -> operator_over .)
    operator_smallest reduce using rule 223 (OPERATOR -> operator_over .)
    operator_greatest reduce using rule 223 (OPERATOR -> operator_over .)
    operator_goodname reduce using rule 223 (OPERATOR -> operator_over .)
    operator_s_combinator reduce using rule 223 (OPERATOR -> operator_over .)
    operator_s_combinator_2 reduce using rule 223 (OPERATOR -> operator_over .)
    operator_goodname2 reduce using rule 223 (OPERATOR -> operator_over .)
    (               reduce using rule 223 (OPERATOR -> operator_over .)
    VAR             reduce using rule 223 (OPERATOR -> operator_over .)
    FLOAT           reduce using rule 223 (OPERATOR -> operator_over .)
    NUM             reduce using rule 223 (OPERATOR -> operator_over .)
    STRING_3SQ      reduce using rule 223 (OPERATOR -> operator_over .)
    STRING_3DQ      reduce using rule 223 (OPERATOR -> operator_over .)
    STRING_SQ       reduce using rule 223 (OPERATOR -> operator_over .)
    STRING_DQ       reduce using rule 223 (OPERATOR -> operator_over .)
    true            reduce using rule 223 (OPERATOR -> operator_over .)
    Null            reduce using rule 223 (OPERATOR -> operator_over .)
    false           reduce using rule 223 (OPERATOR -> operator_over .)
    type_type       reduce using rule 223 (OPERATOR -> operator_over .)
    type_num        reduce using rule 223 (OPERATOR -> operator_over .)
    type_bool       reduce using rule 223 (OPERATOR -> operator_over .)
    type_any        reduce using rule 223 (OPERATOR -> operator_over .)
    type_u64        reduce using rule 223 (OPERATOR -> operator_over .)
    type_u32        reduce using rule 223 (OPERATOR -> operator_over .)
    type_u16        reduce using rule 223 (OPERATOR -> operator_over .)
    type_u8         reduce using rule 223 (OPERATOR -> operator_over .)
    type_i64        reduce using rule 223 (OPERATOR -> operator_over .)
    type_i32        reduce using rule 223 (OPERATOR -> operator_over .)
    type_i16        reduce using rule 223 (OPERATOR -> operator_over .)
    type_i8         reduce using rule 223 (OPERATOR -> operator_over .)
    type_f32        reduce using rule 223 (OPERATOR -> operator_over .)
    type_f64        reduce using rule 223 (OPERATOR -> operator_over .)
    type_str        reduce using rule 223 (OPERATOR -> operator_over .)
    type_list       reduce using rule 223 (OPERATOR -> operator_over .)
    type_tuple      reduce using rule 223 (OPERATOR -> operator_over .)
    type_array      reduce using rule 223 (OPERATOR -> operator_over .)
    type_vector     reduce using rule 223 (OPERATOR -> operator_over .)
    type_dict       reduce using rule 223 (OPERATOR -> operator_over .)
    type_generator  reduce using rule 223 (OPERATOR -> operator_over .)
    type_linked_list reduce using rule 223 (OPERATOR -> operator_over .)
    type_doubly_linked_list reduce using rule 223 (OPERATOR -> operator_over .)
    type_deque      reduce using rule 223 (OPERATOR -> operator_over .)
    type_heap       reduce using rule 223 (OPERATOR -> operator_over .)
    type_fibonacci_heap reduce using rule 223 (OPERATOR -> operator_over .)
    type_tree       reduce using rule 223 (OPERATOR -> operator_over .)
    type_trie       reduce using rule 223 (OPERATOR -> operator_over .)
    type_stack      reduce using rule 223 (OPERATOR -> operator_over .)
    type_queue      reduce using rule 223 (OPERATOR -> operator_over .)
    type_binary_search_tree reduce using rule 223 (OPERATOR -> operator_over .)
    type_bitset     reduce using rule 223 (OPERATOR -> operator_over .)
    type_set        reduce using rule 223 (OPERATOR -> operator_over .)
    type_map        reduce using rule 223 (OPERATOR -> operator_over .)
    type_range      reduce using rule 223 (OPERATOR -> operator_over .)
    type_bad_struct reduce using rule 223 (OPERATOR -> operator_over .)
    type_bad_struct2 reduce using rule 223 (OPERATOR -> operator_over .)
    lambda          reduce using rule 223 (OPERATOR -> operator_over .)


state 53

    (224) OPERATOR -> operator_map .

    operator_scan   reduce using rule 224 (OPERATOR -> operator_map .)
    operator_reduc  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_add    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_sub    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_mul    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_div    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_trudiv reduce using rule 224 (OPERATOR -> operator_map .)
    operator_pow    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_join   reduce using rule 224 (OPERATOR -> operator_map .)
    operator_split  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitand reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitor  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitxor reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitshiftleft reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitshiftright reduce using rule 224 (OPERATOR -> operator_map .)
    operator_and    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_or     reduce using rule 224 (OPERATOR -> operator_map .)
    operator_xor    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_contains reduce using rule 224 (OPERATOR -> operator_map .)
    operator_bitnot reduce using rule 224 (OPERATOR -> operator_map .)
    operator_not    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_incr   reduce using rule 224 (OPERATOR -> operator_map .)
    operator_decr   reduce using rule 224 (OPERATOR -> operator_map .)
    operator_outer  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_inner  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_reverse reduce using rule 224 (OPERATOR -> operator_map .)
    operator_rotate reduce using rule 224 (OPERATOR -> operator_map .)
    operator_apply  reduce using rule 224 (OPERATOR -> operator_map .)
    operator_compose reduce using rule 224 (OPERATOR -> operator_map .)
    operator_over   reduce using rule 224 (OPERATOR -> operator_map .)
    operator_map    reduce using rule 224 (OPERATOR -> operator_map .)
    operator_sorted_incr reduce using rule 224 (OPERATOR -> operator_map .)
    operator_sorted_decr reduce using rule 224 (OPERATOR -> operator_map .)
    operator_less_than reduce using rule 224 (OPERATOR -> operator_map .)
    operator_less_than_equals reduce using rule 224 (OPERATOR -> operator_map .)
    operator_greater_than reduce using rule 224 (OPERATOR -> operator_map .)
    operator_greater_than_equals reduce using rule 224 (OPERATOR -> operator_map .)
    operator_equals reduce using rule 224 (OPERATOR -> operator_map .)
    operator_not_equals reduce using rule 224 (OPERATOR -> operator_map .)
    operator_smallest reduce using rule 224 (OPERATOR -> operator_map .)
    operator_greatest reduce using rule 224 (OPERATOR -> operator_map .)
    operator_goodname reduce using rule 224 (OPERATOR -> operator_map .)
    operator_s_combinator reduce using rule 224 (OPERATOR -> operator_map .)
    operator_s_combinator_2 reduce using rule 224 (OPERATOR -> operator_map .)
    operator_goodname2 reduce using rule 224 (OPERATOR -> operator_map .)
    (               reduce using rule 224 (OPERATOR -> operator_map .)
    VAR             reduce using rule 224 (OPERATOR -> operator_map .)
    FLOAT           reduce using rule 224 (OPERATOR -> operator_map .)
    NUM             reduce using rule 224 (OPERATOR -> operator_map .)
    STRING_3SQ      reduce using rule 224 (OPERATOR -> operator_map .)
    STRING_3DQ      reduce using rule 224 (OPERATOR -> operator_map .)
    STRING_SQ       reduce using rule 224 (OPERATOR -> operator_map .)
    STRING_DQ       reduce using rule 224 (OPERATOR -> operator_map .)
    true            reduce using rule 224 (OPERATOR -> operator_map .)
    Null            reduce using rule 224 (OPERATOR -> operator_map .)
    false           reduce using rule 224 (OPERATOR -> operator_map .)
    type_type       reduce using rule 224 (OPERATOR -> operator_map .)
    type_num        reduce using rule 224 (OPERATOR -> operator_map .)
    type_bool       reduce using rule 224 (OPERATOR -> operator_map .)
    type_any        reduce using rule 224 (OPERATOR -> operator_map .)
    type_u64        reduce using rule 224 (OPERATOR -> operator_map .)
    type_u32        reduce using rule 224 (OPERATOR -> operator_map .)
    type_u16        reduce using rule 224 (OPERATOR -> operator_map .)
    type_u8         reduce using rule 224 (OPERATOR -> operator_map .)
    type_i64        reduce using rule 224 (OPERATOR -> operator_map .)
    type_i32        reduce using rule 224 (OPERATOR -> operator_map .)
    type_i16        reduce using rule 224 (OPERATOR -> operator_map .)
    type_i8         reduce using rule 224 (OPERATOR -> operator_map .)
    type_f32        reduce using rule 224 (OPERATOR -> operator_map .)
    type_f64        reduce using rule 224 (OPERATOR -> operator_map .)
    type_str        reduce using rule 224 (OPERATOR -> operator_map .)
    type_list       reduce using rule 224 (OPERATOR -> operator_map .)
    type_tuple      reduce using rule 224 (OPERATOR -> operator_map .)
    type_array      reduce using rule 224 (OPERATOR -> operator_map .)
    type_vector     reduce using rule 224 (OPERATOR -> operator_map .)
    type_dict       reduce using rule 224 (OPERATOR -> operator_map .)
    type_generator  reduce using rule 224 (OPERATOR -> operator_map .)
    type_linked_list reduce using rule 224 (OPERATOR -> operator_map .)
    type_doubly_linked_list reduce using rule 224 (OPERATOR -> operator_map .)
    type_deque      reduce using rule 224 (OPERATOR -> operator_map .)
    type_heap       reduce using rule 224 (OPERATOR -> operator_map .)
    type_fibonacci_heap reduce using rule 224 (OPERATOR -> operator_map .)
    type_tree       reduce using rule 224 (OPERATOR -> operator_map .)
    type_trie       reduce using rule 224 (OPERATOR -> operator_map .)
    type_stack      reduce using rule 224 (OPERATOR -> operator_map .)
    type_queue      reduce using rule 224 (OPERATOR -> operator_map .)
    type_binary_search_tree reduce using rule 224 (OPERATOR -> operator_map .)
    type_bitset     reduce using rule 224 (OPERATOR -> operator_map .)
    type_set        reduce using rule 224 (OPERATOR -> operator_map .)
    type_map        reduce using rule 224 (OPERATOR -> operator_map .)
    type_range      reduce using rule 224 (OPERATOR -> operator_map .)
    type_bad_struct reduce using rule 224 (OPERATOR -> operator_map .)
    type_bad_struct2 reduce using rule 224 (OPERATOR -> operator_map .)
    lambda          reduce using rule 224 (OPERATOR -> operator_map .)


state 54

    (133) expr -> operator_sorted_incr . expr
    (225) OPERATOR -> operator_sorted_incr .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_scan   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_reduc  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_inner  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 200
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 55

    (134) expr -> operator_sorted_decr . expr
    (226) OPERATOR -> operator_sorted_decr .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_scan   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_reduc  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_inner  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 201
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 56

    (227) OPERATOR -> operator_less_than .

    operator_scan   reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_reduc  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_add    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_sub    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_mul    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_div    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_trudiv reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_pow    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_join   reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_split  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitand reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitor  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitxor reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitshiftleft reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitshiftright reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_and    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_or     reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_xor    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_contains reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_bitnot reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_not    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_incr   reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_decr   reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_outer  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_inner  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_reverse reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_rotate reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_apply  reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_compose reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_over   reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_map    reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_sorted_incr reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_sorted_decr reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_less_than reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_less_than_equals reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_greater_than reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_greater_than_equals reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_equals reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_not_equals reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_smallest reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_greatest reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_goodname reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_s_combinator reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_s_combinator_2 reduce using rule 227 (OPERATOR -> operator_less_than .)
    operator_goodname2 reduce using rule 227 (OPERATOR -> operator_less_than .)
    (               reduce using rule 227 (OPERATOR -> operator_less_than .)
    VAR             reduce using rule 227 (OPERATOR -> operator_less_than .)
    FLOAT           reduce using rule 227 (OPERATOR -> operator_less_than .)
    NUM             reduce using rule 227 (OPERATOR -> operator_less_than .)
    STRING_3SQ      reduce using rule 227 (OPERATOR -> operator_less_than .)
    STRING_3DQ      reduce using rule 227 (OPERATOR -> operator_less_than .)
    STRING_SQ       reduce using rule 227 (OPERATOR -> operator_less_than .)
    STRING_DQ       reduce using rule 227 (OPERATOR -> operator_less_than .)
    true            reduce using rule 227 (OPERATOR -> operator_less_than .)
    Null            reduce using rule 227 (OPERATOR -> operator_less_than .)
    false           reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_type       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_num        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_bool       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_any        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_u64        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_u32        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_u16        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_u8         reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_i64        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_i32        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_i16        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_i8         reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_f32        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_f64        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_str        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_list       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_tuple      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_array      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_vector     reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_dict       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_generator  reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_linked_list reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_doubly_linked_list reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_deque      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_heap       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_fibonacci_heap reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_tree       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_trie       reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_stack      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_queue      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_binary_search_tree reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_bitset     reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_set        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_map        reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_range      reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_bad_struct reduce using rule 227 (OPERATOR -> operator_less_than .)
    type_bad_struct2 reduce using rule 227 (OPERATOR -> operator_less_than .)
    lambda          reduce using rule 227 (OPERATOR -> operator_less_than .)


state 57

    (228) OPERATOR -> operator_less_than_equals .

    operator_scan   reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_reduc  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_add    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_sub    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_mul    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_div    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_trudiv reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_pow    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_join   reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_split  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitand reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitor  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitxor reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitshiftleft reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitshiftright reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_and    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_or     reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_xor    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_contains reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_bitnot reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_not    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_incr   reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_decr   reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_outer  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_inner  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_reverse reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_rotate reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_apply  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_compose reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_over   reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_map    reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_sorted_incr reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_sorted_decr reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_less_than reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_less_than_equals reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_greater_than reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_greater_than_equals reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_equals reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_not_equals reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_smallest reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_greatest reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_goodname reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_s_combinator reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_s_combinator_2 reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    operator_goodname2 reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    (               reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    VAR             reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    FLOAT           reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    NUM             reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    STRING_3SQ      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    STRING_3DQ      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    STRING_SQ       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    STRING_DQ       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    true            reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    Null            reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    false           reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_type       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_num        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_bool       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_any        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_u64        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_u32        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_u16        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_u8         reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_i64        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_i32        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_i16        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_i8         reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_f32        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_f64        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_str        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_list       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_tuple      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_array      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_vector     reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_dict       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_generator  reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_linked_list reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_doubly_linked_list reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_deque      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_heap       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_fibonacci_heap reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_tree       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_trie       reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_stack      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_queue      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_binary_search_tree reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_bitset     reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_set        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_map        reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_range      reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_bad_struct reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    type_bad_struct2 reduce using rule 228 (OPERATOR -> operator_less_than_equals .)
    lambda          reduce using rule 228 (OPERATOR -> operator_less_than_equals .)


state 58

    (229) OPERATOR -> operator_greater_than .

    operator_scan   reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_reduc  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_add    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_sub    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_mul    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_div    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_trudiv reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_pow    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_join   reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_split  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitand reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitor  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitxor reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitshiftleft reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitshiftright reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_and    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_or     reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_xor    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_contains reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_bitnot reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_not    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_incr   reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_decr   reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_outer  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_inner  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_reverse reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_rotate reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_apply  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_compose reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_over   reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_map    reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_sorted_incr reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_sorted_decr reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_less_than reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_less_than_equals reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_greater_than reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_greater_than_equals reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_equals reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_not_equals reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_smallest reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_greatest reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_goodname reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_s_combinator reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_s_combinator_2 reduce using rule 229 (OPERATOR -> operator_greater_than .)
    operator_goodname2 reduce using rule 229 (OPERATOR -> operator_greater_than .)
    (               reduce using rule 229 (OPERATOR -> operator_greater_than .)
    VAR             reduce using rule 229 (OPERATOR -> operator_greater_than .)
    FLOAT           reduce using rule 229 (OPERATOR -> operator_greater_than .)
    NUM             reduce using rule 229 (OPERATOR -> operator_greater_than .)
    STRING_3SQ      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    STRING_3DQ      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    STRING_SQ       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    STRING_DQ       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    true            reduce using rule 229 (OPERATOR -> operator_greater_than .)
    Null            reduce using rule 229 (OPERATOR -> operator_greater_than .)
    false           reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_type       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_num        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_bool       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_any        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_u64        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_u32        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_u16        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_u8         reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_i64        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_i32        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_i16        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_i8         reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_f32        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_f64        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_str        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_list       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_tuple      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_array      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_vector     reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_dict       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_generator  reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_linked_list reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_doubly_linked_list reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_deque      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_heap       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_fibonacci_heap reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_tree       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_trie       reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_stack      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_queue      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_binary_search_tree reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_bitset     reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_set        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_map        reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_range      reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_bad_struct reduce using rule 229 (OPERATOR -> operator_greater_than .)
    type_bad_struct2 reduce using rule 229 (OPERATOR -> operator_greater_than .)
    lambda          reduce using rule 229 (OPERATOR -> operator_greater_than .)


state 59

    (230) OPERATOR -> operator_greater_than_equals .

    operator_scan   reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_reduc  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_add    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_sub    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_mul    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_div    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_trudiv reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_pow    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_join   reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_split  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitand reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitor  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitxor reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitshiftleft reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitshiftright reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_and    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_or     reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_xor    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_contains reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_bitnot reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_not    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_incr   reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_decr   reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_outer  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_inner  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_reverse reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_rotate reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_apply  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_compose reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_over   reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_map    reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_sorted_incr reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_sorted_decr reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_less_than reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_less_than_equals reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_greater_than reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_greater_than_equals reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_equals reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_not_equals reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_smallest reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_greatest reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_goodname reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_s_combinator reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_s_combinator_2 reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    operator_goodname2 reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    (               reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    VAR             reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    FLOAT           reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    NUM             reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    STRING_3SQ      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    STRING_3DQ      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    STRING_SQ       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    STRING_DQ       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    true            reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    Null            reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    false           reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_type       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_num        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_bool       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_any        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_u64        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_u32        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_u16        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_u8         reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_i64        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_i32        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_i16        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_i8         reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_f32        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_f64        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_str        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_list       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_tuple      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_array      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_vector     reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_dict       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_generator  reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_linked_list reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_doubly_linked_list reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_deque      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_heap       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_fibonacci_heap reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_tree       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_trie       reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_stack      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_queue      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_binary_search_tree reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_bitset     reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_set        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_map        reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_range      reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_bad_struct reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    type_bad_struct2 reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)
    lambda          reduce using rule 230 (OPERATOR -> operator_greater_than_equals .)


state 60

    (231) OPERATOR -> operator_equals .

    operator_scan   reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_reduc  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_add    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_sub    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_mul    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_div    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_trudiv reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_pow    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_join   reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_split  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitand reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitor  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitxor reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitshiftleft reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitshiftright reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_and    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_or     reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_xor    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_contains reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_bitnot reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_not    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_incr   reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_decr   reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_outer  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_inner  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_reverse reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_rotate reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_apply  reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_compose reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_over   reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_map    reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_sorted_incr reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_sorted_decr reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_less_than reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_less_than_equals reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_greater_than reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_greater_than_equals reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_equals reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_not_equals reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_smallest reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_greatest reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_goodname reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_s_combinator reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_s_combinator_2 reduce using rule 231 (OPERATOR -> operator_equals .)
    operator_goodname2 reduce using rule 231 (OPERATOR -> operator_equals .)
    (               reduce using rule 231 (OPERATOR -> operator_equals .)
    VAR             reduce using rule 231 (OPERATOR -> operator_equals .)
    FLOAT           reduce using rule 231 (OPERATOR -> operator_equals .)
    NUM             reduce using rule 231 (OPERATOR -> operator_equals .)
    STRING_3SQ      reduce using rule 231 (OPERATOR -> operator_equals .)
    STRING_3DQ      reduce using rule 231 (OPERATOR -> operator_equals .)
    STRING_SQ       reduce using rule 231 (OPERATOR -> operator_equals .)
    STRING_DQ       reduce using rule 231 (OPERATOR -> operator_equals .)
    true            reduce using rule 231 (OPERATOR -> operator_equals .)
    Null            reduce using rule 231 (OPERATOR -> operator_equals .)
    false           reduce using rule 231 (OPERATOR -> operator_equals .)
    type_type       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_num        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_bool       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_any        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_u64        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_u32        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_u16        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_u8         reduce using rule 231 (OPERATOR -> operator_equals .)
    type_i64        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_i32        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_i16        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_i8         reduce using rule 231 (OPERATOR -> operator_equals .)
    type_f32        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_f64        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_str        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_list       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_tuple      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_array      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_vector     reduce using rule 231 (OPERATOR -> operator_equals .)
    type_dict       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_generator  reduce using rule 231 (OPERATOR -> operator_equals .)
    type_linked_list reduce using rule 231 (OPERATOR -> operator_equals .)
    type_doubly_linked_list reduce using rule 231 (OPERATOR -> operator_equals .)
    type_deque      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_heap       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_fibonacci_heap reduce using rule 231 (OPERATOR -> operator_equals .)
    type_tree       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_trie       reduce using rule 231 (OPERATOR -> operator_equals .)
    type_stack      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_queue      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_binary_search_tree reduce using rule 231 (OPERATOR -> operator_equals .)
    type_bitset     reduce using rule 231 (OPERATOR -> operator_equals .)
    type_set        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_map        reduce using rule 231 (OPERATOR -> operator_equals .)
    type_range      reduce using rule 231 (OPERATOR -> operator_equals .)
    type_bad_struct reduce using rule 231 (OPERATOR -> operator_equals .)
    type_bad_struct2 reduce using rule 231 (OPERATOR -> operator_equals .)
    lambda          reduce using rule 231 (OPERATOR -> operator_equals .)


state 61

    (232) OPERATOR -> operator_not_equals .

    operator_scan   reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_reduc  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_add    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_sub    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_mul    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_div    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_trudiv reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_pow    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_join   reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_split  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitand reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitor  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitxor reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitshiftleft reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitshiftright reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_and    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_or     reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_xor    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_contains reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_bitnot reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_not    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_incr   reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_decr   reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_outer  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_inner  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_reverse reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_rotate reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_apply  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_compose reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_over   reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_map    reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_sorted_incr reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_sorted_decr reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_less_than reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_less_than_equals reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_greater_than reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_greater_than_equals reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_equals reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_not_equals reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_smallest reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_greatest reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_goodname reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_s_combinator reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_s_combinator_2 reduce using rule 232 (OPERATOR -> operator_not_equals .)
    operator_goodname2 reduce using rule 232 (OPERATOR -> operator_not_equals .)
    (               reduce using rule 232 (OPERATOR -> operator_not_equals .)
    VAR             reduce using rule 232 (OPERATOR -> operator_not_equals .)
    FLOAT           reduce using rule 232 (OPERATOR -> operator_not_equals .)
    NUM             reduce using rule 232 (OPERATOR -> operator_not_equals .)
    STRING_3SQ      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    STRING_3DQ      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    STRING_SQ       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    STRING_DQ       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    true            reduce using rule 232 (OPERATOR -> operator_not_equals .)
    Null            reduce using rule 232 (OPERATOR -> operator_not_equals .)
    false           reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_type       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_num        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_bool       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_any        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_u64        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_u32        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_u16        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_u8         reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_i64        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_i32        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_i16        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_i8         reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_f32        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_f64        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_str        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_list       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_tuple      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_array      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_vector     reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_dict       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_generator  reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_linked_list reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_doubly_linked_list reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_deque      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_heap       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_fibonacci_heap reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_tree       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_trie       reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_stack      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_queue      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_binary_search_tree reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_bitset     reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_set        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_map        reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_range      reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_bad_struct reduce using rule 232 (OPERATOR -> operator_not_equals .)
    type_bad_struct2 reduce using rule 232 (OPERATOR -> operator_not_equals .)
    lambda          reduce using rule 232 (OPERATOR -> operator_not_equals .)


state 62

    (233) OPERATOR -> operator_smallest .

    operator_scan   reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_reduc  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_add    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_sub    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_mul    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_div    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_trudiv reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_pow    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_join   reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_split  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitand reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitor  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitxor reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitshiftleft reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitshiftright reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_and    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_or     reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_xor    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_contains reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_bitnot reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_not    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_incr   reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_decr   reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_outer  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_inner  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_reverse reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_rotate reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_apply  reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_compose reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_over   reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_map    reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_sorted_incr reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_sorted_decr reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_less_than reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_less_than_equals reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_greater_than reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_greater_than_equals reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_equals reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_not_equals reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_smallest reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_greatest reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_goodname reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_s_combinator reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_s_combinator_2 reduce using rule 233 (OPERATOR -> operator_smallest .)
    operator_goodname2 reduce using rule 233 (OPERATOR -> operator_smallest .)
    (               reduce using rule 233 (OPERATOR -> operator_smallest .)
    VAR             reduce using rule 233 (OPERATOR -> operator_smallest .)
    FLOAT           reduce using rule 233 (OPERATOR -> operator_smallest .)
    NUM             reduce using rule 233 (OPERATOR -> operator_smallest .)
    STRING_3SQ      reduce using rule 233 (OPERATOR -> operator_smallest .)
    STRING_3DQ      reduce using rule 233 (OPERATOR -> operator_smallest .)
    STRING_SQ       reduce using rule 233 (OPERATOR -> operator_smallest .)
    STRING_DQ       reduce using rule 233 (OPERATOR -> operator_smallest .)
    true            reduce using rule 233 (OPERATOR -> operator_smallest .)
    Null            reduce using rule 233 (OPERATOR -> operator_smallest .)
    false           reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_type       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_num        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_bool       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_any        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_u64        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_u32        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_u16        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_u8         reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_i64        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_i32        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_i16        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_i8         reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_f32        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_f64        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_str        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_list       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_tuple      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_array      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_vector     reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_dict       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_generator  reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_linked_list reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_doubly_linked_list reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_deque      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_heap       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_fibonacci_heap reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_tree       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_trie       reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_stack      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_queue      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_binary_search_tree reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_bitset     reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_set        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_map        reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_range      reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_bad_struct reduce using rule 233 (OPERATOR -> operator_smallest .)
    type_bad_struct2 reduce using rule 233 (OPERATOR -> operator_smallest .)
    lambda          reduce using rule 233 (OPERATOR -> operator_smallest .)


state 63

    (234) OPERATOR -> operator_greatest .

    operator_scan   reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_reduc  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_add    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_sub    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_mul    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_div    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_trudiv reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_pow    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_join   reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_split  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitand reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitor  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitxor reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitshiftleft reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitshiftright reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_and    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_or     reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_xor    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_contains reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_bitnot reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_not    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_incr   reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_decr   reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_outer  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_inner  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_reverse reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_rotate reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_apply  reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_compose reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_over   reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_map    reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_sorted_incr reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_sorted_decr reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_less_than reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_less_than_equals reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_greater_than reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_greater_than_equals reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_equals reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_not_equals reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_smallest reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_greatest reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_goodname reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_s_combinator reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_s_combinator_2 reduce using rule 234 (OPERATOR -> operator_greatest .)
    operator_goodname2 reduce using rule 234 (OPERATOR -> operator_greatest .)
    (               reduce using rule 234 (OPERATOR -> operator_greatest .)
    VAR             reduce using rule 234 (OPERATOR -> operator_greatest .)
    FLOAT           reduce using rule 234 (OPERATOR -> operator_greatest .)
    NUM             reduce using rule 234 (OPERATOR -> operator_greatest .)
    STRING_3SQ      reduce using rule 234 (OPERATOR -> operator_greatest .)
    STRING_3DQ      reduce using rule 234 (OPERATOR -> operator_greatest .)
    STRING_SQ       reduce using rule 234 (OPERATOR -> operator_greatest .)
    STRING_DQ       reduce using rule 234 (OPERATOR -> operator_greatest .)
    true            reduce using rule 234 (OPERATOR -> operator_greatest .)
    Null            reduce using rule 234 (OPERATOR -> operator_greatest .)
    false           reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_type       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_num        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_bool       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_any        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_u64        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_u32        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_u16        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_u8         reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_i64        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_i32        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_i16        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_i8         reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_f32        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_f64        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_str        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_list       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_tuple      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_array      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_vector     reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_dict       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_generator  reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_linked_list reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_doubly_linked_list reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_deque      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_heap       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_fibonacci_heap reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_tree       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_trie       reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_stack      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_queue      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_binary_search_tree reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_bitset     reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_set        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_map        reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_range      reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_bad_struct reduce using rule 234 (OPERATOR -> operator_greatest .)
    type_bad_struct2 reduce using rule 234 (OPERATOR -> operator_greatest .)
    lambda          reduce using rule 234 (OPERATOR -> operator_greatest .)


state 64

    (235) OPERATOR -> operator_goodname .

    operator_scan   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_reduc  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_add    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_sub    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_mul    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_div    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_trudiv reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_pow    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_join   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_split  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitand reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitor  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitxor reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitshiftleft reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitshiftright reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_and    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_or     reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_xor    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_contains reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_bitnot reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_not    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_incr   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_decr   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_outer  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_inner  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_reverse reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_rotate reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_apply  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_compose reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_over   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_map    reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_sorted_incr reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_sorted_decr reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_less_than reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_less_than_equals reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_greater_than reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_greater_than_equals reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_equals reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_not_equals reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_smallest reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_greatest reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_goodname reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_s_combinator reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_s_combinator_2 reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_goodname2 reduce using rule 235 (OPERATOR -> operator_goodname .)
    (               reduce using rule 235 (OPERATOR -> operator_goodname .)
    VAR             reduce using rule 235 (OPERATOR -> operator_goodname .)
    FLOAT           reduce using rule 235 (OPERATOR -> operator_goodname .)
    NUM             reduce using rule 235 (OPERATOR -> operator_goodname .)
    STRING_3SQ      reduce using rule 235 (OPERATOR -> operator_goodname .)
    STRING_3DQ      reduce using rule 235 (OPERATOR -> operator_goodname .)
    STRING_SQ       reduce using rule 235 (OPERATOR -> operator_goodname .)
    STRING_DQ       reduce using rule 235 (OPERATOR -> operator_goodname .)
    true            reduce using rule 235 (OPERATOR -> operator_goodname .)
    Null            reduce using rule 235 (OPERATOR -> operator_goodname .)
    false           reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_type       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_num        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_bool       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_any        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_u64        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_u32        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_u16        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_u8         reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_i64        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_i32        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_i16        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_i8         reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_f32        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_f64        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_str        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_list       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_tuple      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_array      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_vector     reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_dict       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_generator  reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_linked_list reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_doubly_linked_list reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_deque      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_heap       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_fibonacci_heap reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_tree       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_trie       reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_stack      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_queue      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_binary_search_tree reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_bitset     reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_set        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_map        reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_range      reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_bad_struct reduce using rule 235 (OPERATOR -> operator_goodname .)
    type_bad_struct2 reduce using rule 235 (OPERATOR -> operator_goodname .)
    lambda          reduce using rule 235 (OPERATOR -> operator_goodname .)


state 65

    (144) expr -> operator_s_combinator . expr expr expr
    (236) OPERATOR -> operator_s_combinator .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 236 (OPERATOR -> operator_s_combinator .) ]
  ! operator_reduc  [ reduce using rule 236 (OPERATOR -> operator_s_combinator .) ]
  ! operator_inner  [ reduce using rule 236 (OPERATOR -> operator_s_combinator .) ]

    expr                           shift and go to state 202
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 66

    (145) expr -> operator_s_combinator_2 . OPERATOR OPERATOR expr
    (237) OPERATOR -> operator_s_combinator_2 .
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

  ! operator_scan   [ reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .) ]
  ! operator_reduc  [ reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .) ]
  ! operator_inner  [ reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .) ]

    OPERATOR                       shift and go to state 203

state 67

    (146) expr -> operator_goodname2 . expr
    (238) OPERATOR -> operator_goodname2 .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_scan   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_reduc  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_inner  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 204
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 68

    (147) expr -> VAR .
    (185) return_val -> VAR . ( arguments )
    (69) comma_separated_names -> VAR .
    (70) comma_separated_names -> VAR . , comma_separated_names

    operator_add    reduce using rule 147 (expr -> VAR .)
    operator_sub    reduce using rule 147 (expr -> VAR .)
    operator_mul    reduce using rule 147 (expr -> VAR .)
    operator_div    reduce using rule 147 (expr -> VAR .)
    operator_trudiv reduce using rule 147 (expr -> VAR .)
    operator_pow    reduce using rule 147 (expr -> VAR .)
    operator_join   reduce using rule 147 (expr -> VAR .)
    operator_split  reduce using rule 147 (expr -> VAR .)
    operator_bitand reduce using rule 147 (expr -> VAR .)
    operator_bitor  reduce using rule 147 (expr -> VAR .)
    operator_bitxor reduce using rule 147 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 147 (expr -> VAR .)
    operator_bitshiftright reduce using rule 147 (expr -> VAR .)
    operator_and    reduce using rule 147 (expr -> VAR .)
    operator_or     reduce using rule 147 (expr -> VAR .)
    operator_xor    reduce using rule 147 (expr -> VAR .)
    operator_contains reduce using rule 147 (expr -> VAR .)
    operator_incr   reduce using rule 147 (expr -> VAR .)
    operator_decr   reduce using rule 147 (expr -> VAR .)
    operator_outer  reduce using rule 147 (expr -> VAR .)
    operator_rotate reduce using rule 147 (expr -> VAR .)
    operator_apply  reduce using rule 147 (expr -> VAR .)
    operator_compose reduce using rule 147 (expr -> VAR .)
    operator_over   reduce using rule 147 (expr -> VAR .)
    operator_map    reduce using rule 147 (expr -> VAR .)
    operator_less_than reduce using rule 147 (expr -> VAR .)
    operator_less_than_equals reduce using rule 147 (expr -> VAR .)
    operator_greater_than reduce using rule 147 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 147 (expr -> VAR .)
    operator_equals reduce using rule 147 (expr -> VAR .)
    operator_not_equals reduce using rule 147 (expr -> VAR .)
    operator_smallest reduce using rule 147 (expr -> VAR .)
    operator_greatest reduce using rule 147 (expr -> VAR .)
    operator_goodname reduce using rule 147 (expr -> VAR .)
    [               reduce using rule 147 (expr -> VAR .)
    operator_scan   reduce using rule 147 (expr -> VAR .)
    operator_reduc  reduce using rule 147 (expr -> VAR .)
    operator_bitnot reduce using rule 147 (expr -> VAR .)
    operator_not    reduce using rule 147 (expr -> VAR .)
    operator_inner  reduce using rule 147 (expr -> VAR .)
    operator_reverse reduce using rule 147 (expr -> VAR .)
    operator_sorted_incr reduce using rule 147 (expr -> VAR .)
    operator_sorted_decr reduce using rule 147 (expr -> VAR .)
    operator_s_combinator reduce using rule 147 (expr -> VAR .)
    operator_s_combinator_2 reduce using rule 147 (expr -> VAR .)
    operator_goodname2 reduce using rule 147 (expr -> VAR .)
    NEWLINE         reduce using rule 147 (expr -> VAR .)
    $end            reduce using rule 147 (expr -> VAR .)
    }               reduce using rule 147 (expr -> VAR .)
    (               shift and go to state 205
    =               reduce using rule 69 (comma_separated_names -> VAR .)
    ,               shift and go to state 206


state 69

    (186) expr -> const_val .

    operator_add    reduce using rule 186 (expr -> const_val .)
    operator_sub    reduce using rule 186 (expr -> const_val .)
    operator_mul    reduce using rule 186 (expr -> const_val .)
    operator_div    reduce using rule 186 (expr -> const_val .)
    operator_trudiv reduce using rule 186 (expr -> const_val .)
    operator_pow    reduce using rule 186 (expr -> const_val .)
    operator_join   reduce using rule 186 (expr -> const_val .)
    operator_split  reduce using rule 186 (expr -> const_val .)
    operator_bitand reduce using rule 186 (expr -> const_val .)
    operator_bitor  reduce using rule 186 (expr -> const_val .)
    operator_bitxor reduce using rule 186 (expr -> const_val .)
    operator_bitshiftleft reduce using rule 186 (expr -> const_val .)
    operator_bitshiftright reduce using rule 186 (expr -> const_val .)
    operator_and    reduce using rule 186 (expr -> const_val .)
    operator_or     reduce using rule 186 (expr -> const_val .)
    operator_xor    reduce using rule 186 (expr -> const_val .)
    operator_contains reduce using rule 186 (expr -> const_val .)
    operator_incr   reduce using rule 186 (expr -> const_val .)
    operator_decr   reduce using rule 186 (expr -> const_val .)
    operator_outer  reduce using rule 186 (expr -> const_val .)
    operator_rotate reduce using rule 186 (expr -> const_val .)
    operator_apply  reduce using rule 186 (expr -> const_val .)
    operator_compose reduce using rule 186 (expr -> const_val .)
    operator_over   reduce using rule 186 (expr -> const_val .)
    operator_map    reduce using rule 186 (expr -> const_val .)
    operator_less_than reduce using rule 186 (expr -> const_val .)
    operator_less_than_equals reduce using rule 186 (expr -> const_val .)
    operator_greater_than reduce using rule 186 (expr -> const_val .)
    operator_greater_than_equals reduce using rule 186 (expr -> const_val .)
    operator_equals reduce using rule 186 (expr -> const_val .)
    operator_not_equals reduce using rule 186 (expr -> const_val .)
    operator_smallest reduce using rule 186 (expr -> const_val .)
    operator_greatest reduce using rule 186 (expr -> const_val .)
    operator_goodname reduce using rule 186 (expr -> const_val .)
    [               reduce using rule 186 (expr -> const_val .)
    operator_scan   reduce using rule 186 (expr -> const_val .)
    operator_reduc  reduce using rule 186 (expr -> const_val .)
    operator_bitnot reduce using rule 186 (expr -> const_val .)
    operator_not    reduce using rule 186 (expr -> const_val .)
    operator_inner  reduce using rule 186 (expr -> const_val .)
    operator_reverse reduce using rule 186 (expr -> const_val .)
    operator_sorted_incr reduce using rule 186 (expr -> const_val .)
    operator_sorted_decr reduce using rule 186 (expr -> const_val .)
    operator_s_combinator reduce using rule 186 (expr -> const_val .)
    operator_s_combinator_2 reduce using rule 186 (expr -> const_val .)
    operator_goodname2 reduce using rule 186 (expr -> const_val .)
    NEWLINE         reduce using rule 186 (expr -> const_val .)
    $end            reduce using rule 186 (expr -> const_val .)
    }               reduce using rule 186 (expr -> const_val .)
    )               reduce using rule 186 (expr -> const_val .)
    (               reduce using rule 186 (expr -> const_val .)
    VAR             reduce using rule 186 (expr -> const_val .)
    FLOAT           reduce using rule 186 (expr -> const_val .)
    NUM             reduce using rule 186 (expr -> const_val .)
    STRING_3SQ      reduce using rule 186 (expr -> const_val .)
    STRING_3DQ      reduce using rule 186 (expr -> const_val .)
    STRING_SQ       reduce using rule 186 (expr -> const_val .)
    STRING_DQ       reduce using rule 186 (expr -> const_val .)
    true            reduce using rule 186 (expr -> const_val .)
    Null            reduce using rule 186 (expr -> const_val .)
    false           reduce using rule 186 (expr -> const_val .)
    type_type       reduce using rule 186 (expr -> const_val .)
    type_num        reduce using rule 186 (expr -> const_val .)
    type_bool       reduce using rule 186 (expr -> const_val .)
    type_any        reduce using rule 186 (expr -> const_val .)
    type_u64        reduce using rule 186 (expr -> const_val .)
    type_u32        reduce using rule 186 (expr -> const_val .)
    type_u16        reduce using rule 186 (expr -> const_val .)
    type_u8         reduce using rule 186 (expr -> const_val .)
    type_i64        reduce using rule 186 (expr -> const_val .)
    type_i32        reduce using rule 186 (expr -> const_val .)
    type_i16        reduce using rule 186 (expr -> const_val .)
    type_i8         reduce using rule 186 (expr -> const_val .)
    type_f32        reduce using rule 186 (expr -> const_val .)
    type_f64        reduce using rule 186 (expr -> const_val .)
    type_str        reduce using rule 186 (expr -> const_val .)
    type_list       reduce using rule 186 (expr -> const_val .)
    type_tuple      reduce using rule 186 (expr -> const_val .)
    type_array      reduce using rule 186 (expr -> const_val .)
    type_vector     reduce using rule 186 (expr -> const_val .)
    type_dict       reduce using rule 186 (expr -> const_val .)
    type_generator  reduce using rule 186 (expr -> const_val .)
    type_linked_list reduce using rule 186 (expr -> const_val .)
    type_doubly_linked_list reduce using rule 186 (expr -> const_val .)
    type_deque      reduce using rule 186 (expr -> const_val .)
    type_heap       reduce using rule 186 (expr -> const_val .)
    type_fibonacci_heap reduce using rule 186 (expr -> const_val .)
    type_tree       reduce using rule 186 (expr -> const_val .)
    type_trie       reduce using rule 186 (expr -> const_val .)
    type_stack      reduce using rule 186 (expr -> const_val .)
    type_queue      reduce using rule 186 (expr -> const_val .)
    type_binary_search_tree reduce using rule 186 (expr -> const_val .)
    type_bitset     reduce using rule 186 (expr -> const_val .)
    type_set        reduce using rule 186 (expr -> const_val .)
    type_map        reduce using rule 186 (expr -> const_val .)
    type_range      reduce using rule 186 (expr -> const_val .)
    type_bad_struct reduce using rule 186 (expr -> const_val .)
    type_bad_struct2 reduce using rule 186 (expr -> const_val .)
    lambda          reduce using rule 186 (expr -> const_val .)
    {               reduce using rule 186 (expr -> const_val .)
    ]               reduce using rule 186 (expr -> const_val .)
    :               reduce using rule 186 (expr -> const_val .)
    ,               reduce using rule 186 (expr -> const_val .)


state 70

    (187) expr -> return_val .

    operator_add    reduce using rule 187 (expr -> return_val .)
    operator_sub    reduce using rule 187 (expr -> return_val .)
    operator_mul    reduce using rule 187 (expr -> return_val .)
    operator_div    reduce using rule 187 (expr -> return_val .)
    operator_trudiv reduce using rule 187 (expr -> return_val .)
    operator_pow    reduce using rule 187 (expr -> return_val .)
    operator_join   reduce using rule 187 (expr -> return_val .)
    operator_split  reduce using rule 187 (expr -> return_val .)
    operator_bitand reduce using rule 187 (expr -> return_val .)
    operator_bitor  reduce using rule 187 (expr -> return_val .)
    operator_bitxor reduce using rule 187 (expr -> return_val .)
    operator_bitshiftleft reduce using rule 187 (expr -> return_val .)
    operator_bitshiftright reduce using rule 187 (expr -> return_val .)
    operator_and    reduce using rule 187 (expr -> return_val .)
    operator_or     reduce using rule 187 (expr -> return_val .)
    operator_xor    reduce using rule 187 (expr -> return_val .)
    operator_contains reduce using rule 187 (expr -> return_val .)
    operator_incr   reduce using rule 187 (expr -> return_val .)
    operator_decr   reduce using rule 187 (expr -> return_val .)
    operator_outer  reduce using rule 187 (expr -> return_val .)
    operator_rotate reduce using rule 187 (expr -> return_val .)
    operator_apply  reduce using rule 187 (expr -> return_val .)
    operator_compose reduce using rule 187 (expr -> return_val .)
    operator_over   reduce using rule 187 (expr -> return_val .)
    operator_map    reduce using rule 187 (expr -> return_val .)
    operator_less_than reduce using rule 187 (expr -> return_val .)
    operator_less_than_equals reduce using rule 187 (expr -> return_val .)
    operator_greater_than reduce using rule 187 (expr -> return_val .)
    operator_greater_than_equals reduce using rule 187 (expr -> return_val .)
    operator_equals reduce using rule 187 (expr -> return_val .)
    operator_not_equals reduce using rule 187 (expr -> return_val .)
    operator_smallest reduce using rule 187 (expr -> return_val .)
    operator_greatest reduce using rule 187 (expr -> return_val .)
    operator_goodname reduce using rule 187 (expr -> return_val .)
    [               reduce using rule 187 (expr -> return_val .)
    operator_scan   reduce using rule 187 (expr -> return_val .)
    operator_reduc  reduce using rule 187 (expr -> return_val .)
    operator_bitnot reduce using rule 187 (expr -> return_val .)
    operator_not    reduce using rule 187 (expr -> return_val .)
    operator_inner  reduce using rule 187 (expr -> return_val .)
    operator_reverse reduce using rule 187 (expr -> return_val .)
    operator_sorted_incr reduce using rule 187 (expr -> return_val .)
    operator_sorted_decr reduce using rule 187 (expr -> return_val .)
    operator_s_combinator reduce using rule 187 (expr -> return_val .)
    operator_s_combinator_2 reduce using rule 187 (expr -> return_val .)
    operator_goodname2 reduce using rule 187 (expr -> return_val .)
    NEWLINE         reduce using rule 187 (expr -> return_val .)
    $end            reduce using rule 187 (expr -> return_val .)
    }               reduce using rule 187 (expr -> return_val .)
    )               reduce using rule 187 (expr -> return_val .)
    (               reduce using rule 187 (expr -> return_val .)
    VAR             reduce using rule 187 (expr -> return_val .)
    FLOAT           reduce using rule 187 (expr -> return_val .)
    NUM             reduce using rule 187 (expr -> return_val .)
    STRING_3SQ      reduce using rule 187 (expr -> return_val .)
    STRING_3DQ      reduce using rule 187 (expr -> return_val .)
    STRING_SQ       reduce using rule 187 (expr -> return_val .)
    STRING_DQ       reduce using rule 187 (expr -> return_val .)
    true            reduce using rule 187 (expr -> return_val .)
    Null            reduce using rule 187 (expr -> return_val .)
    false           reduce using rule 187 (expr -> return_val .)
    type_type       reduce using rule 187 (expr -> return_val .)
    type_num        reduce using rule 187 (expr -> return_val .)
    type_bool       reduce using rule 187 (expr -> return_val .)
    type_any        reduce using rule 187 (expr -> return_val .)
    type_u64        reduce using rule 187 (expr -> return_val .)
    type_u32        reduce using rule 187 (expr -> return_val .)
    type_u16        reduce using rule 187 (expr -> return_val .)
    type_u8         reduce using rule 187 (expr -> return_val .)
    type_i64        reduce using rule 187 (expr -> return_val .)
    type_i32        reduce using rule 187 (expr -> return_val .)
    type_i16        reduce using rule 187 (expr -> return_val .)
    type_i8         reduce using rule 187 (expr -> return_val .)
    type_f32        reduce using rule 187 (expr -> return_val .)
    type_f64        reduce using rule 187 (expr -> return_val .)
    type_str        reduce using rule 187 (expr -> return_val .)
    type_list       reduce using rule 187 (expr -> return_val .)
    type_tuple      reduce using rule 187 (expr -> return_val .)
    type_array      reduce using rule 187 (expr -> return_val .)
    type_vector     reduce using rule 187 (expr -> return_val .)
    type_dict       reduce using rule 187 (expr -> return_val .)
    type_generator  reduce using rule 187 (expr -> return_val .)
    type_linked_list reduce using rule 187 (expr -> return_val .)
    type_doubly_linked_list reduce using rule 187 (expr -> return_val .)
    type_deque      reduce using rule 187 (expr -> return_val .)
    type_heap       reduce using rule 187 (expr -> return_val .)
    type_fibonacci_heap reduce using rule 187 (expr -> return_val .)
    type_tree       reduce using rule 187 (expr -> return_val .)
    type_trie       reduce using rule 187 (expr -> return_val .)
    type_stack      reduce using rule 187 (expr -> return_val .)
    type_queue      reduce using rule 187 (expr -> return_val .)
    type_binary_search_tree reduce using rule 187 (expr -> return_val .)
    type_bitset     reduce using rule 187 (expr -> return_val .)
    type_set        reduce using rule 187 (expr -> return_val .)
    type_map        reduce using rule 187 (expr -> return_val .)
    type_range      reduce using rule 187 (expr -> return_val .)
    type_bad_struct reduce using rule 187 (expr -> return_val .)
    type_bad_struct2 reduce using rule 187 (expr -> return_val .)
    lambda          reduce using rule 187 (expr -> return_val .)
    {               reduce using rule 187 (expr -> return_val .)
    ]               reduce using rule 187 (expr -> return_val .)
    :               reduce using rule 187 (expr -> return_val .)
    ,               reduce using rule 187 (expr -> return_val .)


state 71

    (188) expr -> lambda_decl .

    operator_add    reduce using rule 188 (expr -> lambda_decl .)
    operator_sub    reduce using rule 188 (expr -> lambda_decl .)
    operator_mul    reduce using rule 188 (expr -> lambda_decl .)
    operator_div    reduce using rule 188 (expr -> lambda_decl .)
    operator_trudiv reduce using rule 188 (expr -> lambda_decl .)
    operator_pow    reduce using rule 188 (expr -> lambda_decl .)
    operator_join   reduce using rule 188 (expr -> lambda_decl .)
    operator_split  reduce using rule 188 (expr -> lambda_decl .)
    operator_bitand reduce using rule 188 (expr -> lambda_decl .)
    operator_bitor  reduce using rule 188 (expr -> lambda_decl .)
    operator_bitxor reduce using rule 188 (expr -> lambda_decl .)
    operator_bitshiftleft reduce using rule 188 (expr -> lambda_decl .)
    operator_bitshiftright reduce using rule 188 (expr -> lambda_decl .)
    operator_and    reduce using rule 188 (expr -> lambda_decl .)
    operator_or     reduce using rule 188 (expr -> lambda_decl .)
    operator_xor    reduce using rule 188 (expr -> lambda_decl .)
    operator_contains reduce using rule 188 (expr -> lambda_decl .)
    operator_incr   reduce using rule 188 (expr -> lambda_decl .)
    operator_decr   reduce using rule 188 (expr -> lambda_decl .)
    operator_outer  reduce using rule 188 (expr -> lambda_decl .)
    operator_rotate reduce using rule 188 (expr -> lambda_decl .)
    operator_apply  reduce using rule 188 (expr -> lambda_decl .)
    operator_compose reduce using rule 188 (expr -> lambda_decl .)
    operator_over   reduce using rule 188 (expr -> lambda_decl .)
    operator_map    reduce using rule 188 (expr -> lambda_decl .)
    operator_less_than reduce using rule 188 (expr -> lambda_decl .)
    operator_less_than_equals reduce using rule 188 (expr -> lambda_decl .)
    operator_greater_than reduce using rule 188 (expr -> lambda_decl .)
    operator_greater_than_equals reduce using rule 188 (expr -> lambda_decl .)
    operator_equals reduce using rule 188 (expr -> lambda_decl .)
    operator_not_equals reduce using rule 188 (expr -> lambda_decl .)
    operator_smallest reduce using rule 188 (expr -> lambda_decl .)
    operator_greatest reduce using rule 188 (expr -> lambda_decl .)
    operator_goodname reduce using rule 188 (expr -> lambda_decl .)
    [               reduce using rule 188 (expr -> lambda_decl .)
    operator_scan   reduce using rule 188 (expr -> lambda_decl .)
    operator_reduc  reduce using rule 188 (expr -> lambda_decl .)
    operator_bitnot reduce using rule 188 (expr -> lambda_decl .)
    operator_not    reduce using rule 188 (expr -> lambda_decl .)
    operator_inner  reduce using rule 188 (expr -> lambda_decl .)
    operator_reverse reduce using rule 188 (expr -> lambda_decl .)
    operator_sorted_incr reduce using rule 188 (expr -> lambda_decl .)
    operator_sorted_decr reduce using rule 188 (expr -> lambda_decl .)
    operator_s_combinator reduce using rule 188 (expr -> lambda_decl .)
    operator_s_combinator_2 reduce using rule 188 (expr -> lambda_decl .)
    operator_goodname2 reduce using rule 188 (expr -> lambda_decl .)
    NEWLINE         reduce using rule 188 (expr -> lambda_decl .)
    $end            reduce using rule 188 (expr -> lambda_decl .)
    }               reduce using rule 188 (expr -> lambda_decl .)
    )               reduce using rule 188 (expr -> lambda_decl .)
    (               reduce using rule 188 (expr -> lambda_decl .)
    VAR             reduce using rule 188 (expr -> lambda_decl .)
    FLOAT           reduce using rule 188 (expr -> lambda_decl .)
    NUM             reduce using rule 188 (expr -> lambda_decl .)
    STRING_3SQ      reduce using rule 188 (expr -> lambda_decl .)
    STRING_3DQ      reduce using rule 188 (expr -> lambda_decl .)
    STRING_SQ       reduce using rule 188 (expr -> lambda_decl .)
    STRING_DQ       reduce using rule 188 (expr -> lambda_decl .)
    true            reduce using rule 188 (expr -> lambda_decl .)
    Null            reduce using rule 188 (expr -> lambda_decl .)
    false           reduce using rule 188 (expr -> lambda_decl .)
    type_type       reduce using rule 188 (expr -> lambda_decl .)
    type_num        reduce using rule 188 (expr -> lambda_decl .)
    type_bool       reduce using rule 188 (expr -> lambda_decl .)
    type_any        reduce using rule 188 (expr -> lambda_decl .)
    type_u64        reduce using rule 188 (expr -> lambda_decl .)
    type_u32        reduce using rule 188 (expr -> lambda_decl .)
    type_u16        reduce using rule 188 (expr -> lambda_decl .)
    type_u8         reduce using rule 188 (expr -> lambda_decl .)
    type_i64        reduce using rule 188 (expr -> lambda_decl .)
    type_i32        reduce using rule 188 (expr -> lambda_decl .)
    type_i16        reduce using rule 188 (expr -> lambda_decl .)
    type_i8         reduce using rule 188 (expr -> lambda_decl .)
    type_f32        reduce using rule 188 (expr -> lambda_decl .)
    type_f64        reduce using rule 188 (expr -> lambda_decl .)
    type_str        reduce using rule 188 (expr -> lambda_decl .)
    type_list       reduce using rule 188 (expr -> lambda_decl .)
    type_tuple      reduce using rule 188 (expr -> lambda_decl .)
    type_array      reduce using rule 188 (expr -> lambda_decl .)
    type_vector     reduce using rule 188 (expr -> lambda_decl .)
    type_dict       reduce using rule 188 (expr -> lambda_decl .)
    type_generator  reduce using rule 188 (expr -> lambda_decl .)
    type_linked_list reduce using rule 188 (expr -> lambda_decl .)
    type_doubly_linked_list reduce using rule 188 (expr -> lambda_decl .)
    type_deque      reduce using rule 188 (expr -> lambda_decl .)
    type_heap       reduce using rule 188 (expr -> lambda_decl .)
    type_fibonacci_heap reduce using rule 188 (expr -> lambda_decl .)
    type_tree       reduce using rule 188 (expr -> lambda_decl .)
    type_trie       reduce using rule 188 (expr -> lambda_decl .)
    type_stack      reduce using rule 188 (expr -> lambda_decl .)
    type_queue      reduce using rule 188 (expr -> lambda_decl .)
    type_binary_search_tree reduce using rule 188 (expr -> lambda_decl .)
    type_bitset     reduce using rule 188 (expr -> lambda_decl .)
    type_set        reduce using rule 188 (expr -> lambda_decl .)
    type_map        reduce using rule 188 (expr -> lambda_decl .)
    type_range      reduce using rule 188 (expr -> lambda_decl .)
    type_bad_struct reduce using rule 188 (expr -> lambda_decl .)
    type_bad_struct2 reduce using rule 188 (expr -> lambda_decl .)
    lambda          reduce using rule 188 (expr -> lambda_decl .)
    {               reduce using rule 188 (expr -> lambda_decl .)
    ]               reduce using rule 188 (expr -> lambda_decl .)
    :               reduce using rule 188 (expr -> lambda_decl .)
    ,               reduce using rule 188 (expr -> lambda_decl .)


state 72

    (189) expr -> TYPE .
    (68) declaration_stmt -> TYPE . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    operator_add    reduce using rule 189 (expr -> TYPE .)
    operator_sub    reduce using rule 189 (expr -> TYPE .)
    operator_mul    reduce using rule 189 (expr -> TYPE .)
    operator_div    reduce using rule 189 (expr -> TYPE .)
    operator_trudiv reduce using rule 189 (expr -> TYPE .)
    operator_pow    reduce using rule 189 (expr -> TYPE .)
    operator_join   reduce using rule 189 (expr -> TYPE .)
    operator_split  reduce using rule 189 (expr -> TYPE .)
    operator_bitand reduce using rule 189 (expr -> TYPE .)
    operator_bitor  reduce using rule 189 (expr -> TYPE .)
    operator_bitxor reduce using rule 189 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 189 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 189 (expr -> TYPE .)
    operator_and    reduce using rule 189 (expr -> TYPE .)
    operator_or     reduce using rule 189 (expr -> TYPE .)
    operator_xor    reduce using rule 189 (expr -> TYPE .)
    operator_contains reduce using rule 189 (expr -> TYPE .)
    operator_incr   reduce using rule 189 (expr -> TYPE .)
    operator_decr   reduce using rule 189 (expr -> TYPE .)
    operator_outer  reduce using rule 189 (expr -> TYPE .)
    operator_rotate reduce using rule 189 (expr -> TYPE .)
    operator_apply  reduce using rule 189 (expr -> TYPE .)
    operator_compose reduce using rule 189 (expr -> TYPE .)
    operator_over   reduce using rule 189 (expr -> TYPE .)
    operator_map    reduce using rule 189 (expr -> TYPE .)
    operator_less_than reduce using rule 189 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 189 (expr -> TYPE .)
    operator_greater_than reduce using rule 189 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 189 (expr -> TYPE .)
    operator_equals reduce using rule 189 (expr -> TYPE .)
    operator_not_equals reduce using rule 189 (expr -> TYPE .)
    operator_smallest reduce using rule 189 (expr -> TYPE .)
    operator_greatest reduce using rule 189 (expr -> TYPE .)
    operator_goodname reduce using rule 189 (expr -> TYPE .)
    [               reduce using rule 189 (expr -> TYPE .)
    operator_scan   reduce using rule 189 (expr -> TYPE .)
    operator_reduc  reduce using rule 189 (expr -> TYPE .)
    operator_bitnot reduce using rule 189 (expr -> TYPE .)
    operator_not    reduce using rule 189 (expr -> TYPE .)
    operator_inner  reduce using rule 189 (expr -> TYPE .)
    operator_reverse reduce using rule 189 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 189 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 189 (expr -> TYPE .)
    operator_s_combinator reduce using rule 189 (expr -> TYPE .)
    operator_s_combinator_2 reduce using rule 189 (expr -> TYPE .)
    operator_goodname2 reduce using rule 189 (expr -> TYPE .)
    NEWLINE         reduce using rule 189 (expr -> TYPE .)
    $end            reduce using rule 189 (expr -> TYPE .)
    }               reduce using rule 189 (expr -> TYPE .)
    VAR             shift and go to state 208

    comma_separated_names          shift and go to state 207

state 73

    (63) del_stmt -> del . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 209
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 74

    (64) assign_stmt -> comma_separated_names . = expr

    =               shift and go to state 210


state 75

    (74) block_decl -> for_decl .

    {               reduce using rule 74 (block_decl -> for_decl .)


state 76

    (75) block_decl -> if_decl .

    {               reduce using rule 75 (block_decl -> if_decl .)


state 77

    (76) block_decl -> else .

    {               reduce using rule 76 (block_decl -> else .)


state 78

    (77) block_decl -> elif_decl .

    {               reduce using rule 77 (block_decl -> elif_decl .)


state 79

    (78) block_decl -> operator_decl .

    {               reduce using rule 78 (block_decl -> operator_decl .)


state 80

    (79) block_decl -> struct_decl .

    {               reduce using rule 79 (block_decl -> struct_decl .)


state 81

    (80) block_decl -> while_decl .

    {               reduce using rule 80 (block_decl -> while_decl .)


state 82

    (81) block_decl -> func_decl .

    {               reduce using rule 81 (block_decl -> func_decl .)


state 83

    (92) const_val -> FLOAT .

    operator_add    reduce using rule 92 (const_val -> FLOAT .)
    operator_sub    reduce using rule 92 (const_val -> FLOAT .)
    operator_mul    reduce using rule 92 (const_val -> FLOAT .)
    operator_div    reduce using rule 92 (const_val -> FLOAT .)
    operator_trudiv reduce using rule 92 (const_val -> FLOAT .)
    operator_pow    reduce using rule 92 (const_val -> FLOAT .)
    operator_join   reduce using rule 92 (const_val -> FLOAT .)
    operator_split  reduce using rule 92 (const_val -> FLOAT .)
    operator_bitand reduce using rule 92 (const_val -> FLOAT .)
    operator_bitor  reduce using rule 92 (const_val -> FLOAT .)
    operator_bitxor reduce using rule 92 (const_val -> FLOAT .)
    operator_bitshiftleft reduce using rule 92 (const_val -> FLOAT .)
    operator_bitshiftright reduce using rule 92 (const_val -> FLOAT .)
    operator_and    reduce using rule 92 (const_val -> FLOAT .)
    operator_or     reduce using rule 92 (const_val -> FLOAT .)
    operator_xor    reduce using rule 92 (const_val -> FLOAT .)
    operator_contains reduce using rule 92 (const_val -> FLOAT .)
    operator_incr   reduce using rule 92 (const_val -> FLOAT .)
    operator_decr   reduce using rule 92 (const_val -> FLOAT .)
    operator_outer  reduce using rule 92 (const_val -> FLOAT .)
    operator_rotate reduce using rule 92 (const_val -> FLOAT .)
    operator_apply  reduce using rule 92 (const_val -> FLOAT .)
    operator_compose reduce using rule 92 (const_val -> FLOAT .)
    operator_over   reduce using rule 92 (const_val -> FLOAT .)
    operator_map    reduce using rule 92 (const_val -> FLOAT .)
    operator_less_than reduce using rule 92 (const_val -> FLOAT .)
    operator_less_than_equals reduce using rule 92 (const_val -> FLOAT .)
    operator_greater_than reduce using rule 92 (const_val -> FLOAT .)
    operator_greater_than_equals reduce using rule 92 (const_val -> FLOAT .)
    operator_equals reduce using rule 92 (const_val -> FLOAT .)
    operator_not_equals reduce using rule 92 (const_val -> FLOAT .)
    operator_smallest reduce using rule 92 (const_val -> FLOAT .)
    operator_greatest reduce using rule 92 (const_val -> FLOAT .)
    operator_goodname reduce using rule 92 (const_val -> FLOAT .)
    [               reduce using rule 92 (const_val -> FLOAT .)
    operator_scan   reduce using rule 92 (const_val -> FLOAT .)
    operator_reduc  reduce using rule 92 (const_val -> FLOAT .)
    operator_bitnot reduce using rule 92 (const_val -> FLOAT .)
    operator_not    reduce using rule 92 (const_val -> FLOAT .)
    operator_inner  reduce using rule 92 (const_val -> FLOAT .)
    operator_reverse reduce using rule 92 (const_val -> FLOAT .)
    operator_sorted_incr reduce using rule 92 (const_val -> FLOAT .)
    operator_sorted_decr reduce using rule 92 (const_val -> FLOAT .)
    operator_s_combinator reduce using rule 92 (const_val -> FLOAT .)
    operator_s_combinator_2 reduce using rule 92 (const_val -> FLOAT .)
    operator_goodname2 reduce using rule 92 (const_val -> FLOAT .)
    NEWLINE         reduce using rule 92 (const_val -> FLOAT .)
    $end            reduce using rule 92 (const_val -> FLOAT .)
    }               reduce using rule 92 (const_val -> FLOAT .)
    )               reduce using rule 92 (const_val -> FLOAT .)
    (               reduce using rule 92 (const_val -> FLOAT .)
    VAR             reduce using rule 92 (const_val -> FLOAT .)
    FLOAT           reduce using rule 92 (const_val -> FLOAT .)
    NUM             reduce using rule 92 (const_val -> FLOAT .)
    STRING_3SQ      reduce using rule 92 (const_val -> FLOAT .)
    STRING_3DQ      reduce using rule 92 (const_val -> FLOAT .)
    STRING_SQ       reduce using rule 92 (const_val -> FLOAT .)
    STRING_DQ       reduce using rule 92 (const_val -> FLOAT .)
    true            reduce using rule 92 (const_val -> FLOAT .)
    Null            reduce using rule 92 (const_val -> FLOAT .)
    false           reduce using rule 92 (const_val -> FLOAT .)
    type_type       reduce using rule 92 (const_val -> FLOAT .)
    type_num        reduce using rule 92 (const_val -> FLOAT .)
    type_bool       reduce using rule 92 (const_val -> FLOAT .)
    type_any        reduce using rule 92 (const_val -> FLOAT .)
    type_u64        reduce using rule 92 (const_val -> FLOAT .)
    type_u32        reduce using rule 92 (const_val -> FLOAT .)
    type_u16        reduce using rule 92 (const_val -> FLOAT .)
    type_u8         reduce using rule 92 (const_val -> FLOAT .)
    type_i64        reduce using rule 92 (const_val -> FLOAT .)
    type_i32        reduce using rule 92 (const_val -> FLOAT .)
    type_i16        reduce using rule 92 (const_val -> FLOAT .)
    type_i8         reduce using rule 92 (const_val -> FLOAT .)
    type_f32        reduce using rule 92 (const_val -> FLOAT .)
    type_f64        reduce using rule 92 (const_val -> FLOAT .)
    type_str        reduce using rule 92 (const_val -> FLOAT .)
    type_list       reduce using rule 92 (const_val -> FLOAT .)
    type_tuple      reduce using rule 92 (const_val -> FLOAT .)
    type_array      reduce using rule 92 (const_val -> FLOAT .)
    type_vector     reduce using rule 92 (const_val -> FLOAT .)
    type_dict       reduce using rule 92 (const_val -> FLOAT .)
    type_generator  reduce using rule 92 (const_val -> FLOAT .)
    type_linked_list reduce using rule 92 (const_val -> FLOAT .)
    type_doubly_linked_list reduce using rule 92 (const_val -> FLOAT .)
    type_deque      reduce using rule 92 (const_val -> FLOAT .)
    type_heap       reduce using rule 92 (const_val -> FLOAT .)
    type_fibonacci_heap reduce using rule 92 (const_val -> FLOAT .)
    type_tree       reduce using rule 92 (const_val -> FLOAT .)
    type_trie       reduce using rule 92 (const_val -> FLOAT .)
    type_stack      reduce using rule 92 (const_val -> FLOAT .)
    type_queue      reduce using rule 92 (const_val -> FLOAT .)
    type_binary_search_tree reduce using rule 92 (const_val -> FLOAT .)
    type_bitset     reduce using rule 92 (const_val -> FLOAT .)
    type_set        reduce using rule 92 (const_val -> FLOAT .)
    type_map        reduce using rule 92 (const_val -> FLOAT .)
    type_range      reduce using rule 92 (const_val -> FLOAT .)
    type_bad_struct reduce using rule 92 (const_val -> FLOAT .)
    type_bad_struct2 reduce using rule 92 (const_val -> FLOAT .)
    lambda          reduce using rule 92 (const_val -> FLOAT .)
    {               reduce using rule 92 (const_val -> FLOAT .)
    ]               reduce using rule 92 (const_val -> FLOAT .)
    :               reduce using rule 92 (const_val -> FLOAT .)
    ,               reduce using rule 92 (const_val -> FLOAT .)


state 84

    (93) const_val -> NUM .

    operator_add    reduce using rule 93 (const_val -> NUM .)
    operator_sub    reduce using rule 93 (const_val -> NUM .)
    operator_mul    reduce using rule 93 (const_val -> NUM .)
    operator_div    reduce using rule 93 (const_val -> NUM .)
    operator_trudiv reduce using rule 93 (const_val -> NUM .)
    operator_pow    reduce using rule 93 (const_val -> NUM .)
    operator_join   reduce using rule 93 (const_val -> NUM .)
    operator_split  reduce using rule 93 (const_val -> NUM .)
    operator_bitand reduce using rule 93 (const_val -> NUM .)
    operator_bitor  reduce using rule 93 (const_val -> NUM .)
    operator_bitxor reduce using rule 93 (const_val -> NUM .)
    operator_bitshiftleft reduce using rule 93 (const_val -> NUM .)
    operator_bitshiftright reduce using rule 93 (const_val -> NUM .)
    operator_and    reduce using rule 93 (const_val -> NUM .)
    operator_or     reduce using rule 93 (const_val -> NUM .)
    operator_xor    reduce using rule 93 (const_val -> NUM .)
    operator_contains reduce using rule 93 (const_val -> NUM .)
    operator_incr   reduce using rule 93 (const_val -> NUM .)
    operator_decr   reduce using rule 93 (const_val -> NUM .)
    operator_outer  reduce using rule 93 (const_val -> NUM .)
    operator_rotate reduce using rule 93 (const_val -> NUM .)
    operator_apply  reduce using rule 93 (const_val -> NUM .)
    operator_compose reduce using rule 93 (const_val -> NUM .)
    operator_over   reduce using rule 93 (const_val -> NUM .)
    operator_map    reduce using rule 93 (const_val -> NUM .)
    operator_less_than reduce using rule 93 (const_val -> NUM .)
    operator_less_than_equals reduce using rule 93 (const_val -> NUM .)
    operator_greater_than reduce using rule 93 (const_val -> NUM .)
    operator_greater_than_equals reduce using rule 93 (const_val -> NUM .)
    operator_equals reduce using rule 93 (const_val -> NUM .)
    operator_not_equals reduce using rule 93 (const_val -> NUM .)
    operator_smallest reduce using rule 93 (const_val -> NUM .)
    operator_greatest reduce using rule 93 (const_val -> NUM .)
    operator_goodname reduce using rule 93 (const_val -> NUM .)
    [               reduce using rule 93 (const_val -> NUM .)
    operator_scan   reduce using rule 93 (const_val -> NUM .)
    operator_reduc  reduce using rule 93 (const_val -> NUM .)
    operator_bitnot reduce using rule 93 (const_val -> NUM .)
    operator_not    reduce using rule 93 (const_val -> NUM .)
    operator_inner  reduce using rule 93 (const_val -> NUM .)
    operator_reverse reduce using rule 93 (const_val -> NUM .)
    operator_sorted_incr reduce using rule 93 (const_val -> NUM .)
    operator_sorted_decr reduce using rule 93 (const_val -> NUM .)
    operator_s_combinator reduce using rule 93 (const_val -> NUM .)
    operator_s_combinator_2 reduce using rule 93 (const_val -> NUM .)
    operator_goodname2 reduce using rule 93 (const_val -> NUM .)
    NEWLINE         reduce using rule 93 (const_val -> NUM .)
    $end            reduce using rule 93 (const_val -> NUM .)
    }               reduce using rule 93 (const_val -> NUM .)
    )               reduce using rule 93 (const_val -> NUM .)
    (               reduce using rule 93 (const_val -> NUM .)
    VAR             reduce using rule 93 (const_val -> NUM .)
    FLOAT           reduce using rule 93 (const_val -> NUM .)
    NUM             reduce using rule 93 (const_val -> NUM .)
    STRING_3SQ      reduce using rule 93 (const_val -> NUM .)
    STRING_3DQ      reduce using rule 93 (const_val -> NUM .)
    STRING_SQ       reduce using rule 93 (const_val -> NUM .)
    STRING_DQ       reduce using rule 93 (const_val -> NUM .)
    true            reduce using rule 93 (const_val -> NUM .)
    Null            reduce using rule 93 (const_val -> NUM .)
    false           reduce using rule 93 (const_val -> NUM .)
    type_type       reduce using rule 93 (const_val -> NUM .)
    type_num        reduce using rule 93 (const_val -> NUM .)
    type_bool       reduce using rule 93 (const_val -> NUM .)
    type_any        reduce using rule 93 (const_val -> NUM .)
    type_u64        reduce using rule 93 (const_val -> NUM .)
    type_u32        reduce using rule 93 (const_val -> NUM .)
    type_u16        reduce using rule 93 (const_val -> NUM .)
    type_u8         reduce using rule 93 (const_val -> NUM .)
    type_i64        reduce using rule 93 (const_val -> NUM .)
    type_i32        reduce using rule 93 (const_val -> NUM .)
    type_i16        reduce using rule 93 (const_val -> NUM .)
    type_i8         reduce using rule 93 (const_val -> NUM .)
    type_f32        reduce using rule 93 (const_val -> NUM .)
    type_f64        reduce using rule 93 (const_val -> NUM .)
    type_str        reduce using rule 93 (const_val -> NUM .)
    type_list       reduce using rule 93 (const_val -> NUM .)
    type_tuple      reduce using rule 93 (const_val -> NUM .)
    type_array      reduce using rule 93 (const_val -> NUM .)
    type_vector     reduce using rule 93 (const_val -> NUM .)
    type_dict       reduce using rule 93 (const_val -> NUM .)
    type_generator  reduce using rule 93 (const_val -> NUM .)
    type_linked_list reduce using rule 93 (const_val -> NUM .)
    type_doubly_linked_list reduce using rule 93 (const_val -> NUM .)
    type_deque      reduce using rule 93 (const_val -> NUM .)
    type_heap       reduce using rule 93 (const_val -> NUM .)
    type_fibonacci_heap reduce using rule 93 (const_val -> NUM .)
    type_tree       reduce using rule 93 (const_val -> NUM .)
    type_trie       reduce using rule 93 (const_val -> NUM .)
    type_stack      reduce using rule 93 (const_val -> NUM .)
    type_queue      reduce using rule 93 (const_val -> NUM .)
    type_binary_search_tree reduce using rule 93 (const_val -> NUM .)
    type_bitset     reduce using rule 93 (const_val -> NUM .)
    type_set        reduce using rule 93 (const_val -> NUM .)
    type_map        reduce using rule 93 (const_val -> NUM .)
    type_range      reduce using rule 93 (const_val -> NUM .)
    type_bad_struct reduce using rule 93 (const_val -> NUM .)
    type_bad_struct2 reduce using rule 93 (const_val -> NUM .)
    lambda          reduce using rule 93 (const_val -> NUM .)
    {               reduce using rule 93 (const_val -> NUM .)
    ]               reduce using rule 93 (const_val -> NUM .)
    :               reduce using rule 93 (const_val -> NUM .)
    ,               reduce using rule 93 (const_val -> NUM .)


state 85

    (94) const_val -> STRING_3SQ .

    operator_add    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_sub    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_mul    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_div    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_trudiv reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_pow    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_join   reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_split  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitand reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitor  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitxor reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitshiftleft reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitshiftright reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_and    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_or     reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_xor    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_contains reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_incr   reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_decr   reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_outer  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_rotate reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_apply  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_compose reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_over   reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_map    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_less_than reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_less_than_equals reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_greater_than reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_greater_than_equals reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_equals reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_not_equals reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_smallest reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_greatest reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_goodname reduce using rule 94 (const_val -> STRING_3SQ .)
    [               reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_scan   reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_reduc  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_bitnot reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_not    reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_inner  reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_reverse reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_sorted_incr reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_sorted_decr reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_s_combinator reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_s_combinator_2 reduce using rule 94 (const_val -> STRING_3SQ .)
    operator_goodname2 reduce using rule 94 (const_val -> STRING_3SQ .)
    NEWLINE         reduce using rule 94 (const_val -> STRING_3SQ .)
    $end            reduce using rule 94 (const_val -> STRING_3SQ .)
    }               reduce using rule 94 (const_val -> STRING_3SQ .)
    )               reduce using rule 94 (const_val -> STRING_3SQ .)
    (               reduce using rule 94 (const_val -> STRING_3SQ .)
    VAR             reduce using rule 94 (const_val -> STRING_3SQ .)
    FLOAT           reduce using rule 94 (const_val -> STRING_3SQ .)
    NUM             reduce using rule 94 (const_val -> STRING_3SQ .)
    STRING_3SQ      reduce using rule 94 (const_val -> STRING_3SQ .)
    STRING_3DQ      reduce using rule 94 (const_val -> STRING_3SQ .)
    STRING_SQ       reduce using rule 94 (const_val -> STRING_3SQ .)
    STRING_DQ       reduce using rule 94 (const_val -> STRING_3SQ .)
    true            reduce using rule 94 (const_val -> STRING_3SQ .)
    Null            reduce using rule 94 (const_val -> STRING_3SQ .)
    false           reduce using rule 94 (const_val -> STRING_3SQ .)
    type_type       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_num        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_bool       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_any        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_u64        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_u32        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_u16        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_u8         reduce using rule 94 (const_val -> STRING_3SQ .)
    type_i64        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_i32        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_i16        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_i8         reduce using rule 94 (const_val -> STRING_3SQ .)
    type_f32        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_f64        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_str        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_list       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_tuple      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_array      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_vector     reduce using rule 94 (const_val -> STRING_3SQ .)
    type_dict       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_generator  reduce using rule 94 (const_val -> STRING_3SQ .)
    type_linked_list reduce using rule 94 (const_val -> STRING_3SQ .)
    type_doubly_linked_list reduce using rule 94 (const_val -> STRING_3SQ .)
    type_deque      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_heap       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_fibonacci_heap reduce using rule 94 (const_val -> STRING_3SQ .)
    type_tree       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_trie       reduce using rule 94 (const_val -> STRING_3SQ .)
    type_stack      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_queue      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_binary_search_tree reduce using rule 94 (const_val -> STRING_3SQ .)
    type_bitset     reduce using rule 94 (const_val -> STRING_3SQ .)
    type_set        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_map        reduce using rule 94 (const_val -> STRING_3SQ .)
    type_range      reduce using rule 94 (const_val -> STRING_3SQ .)
    type_bad_struct reduce using rule 94 (const_val -> STRING_3SQ .)
    type_bad_struct2 reduce using rule 94 (const_val -> STRING_3SQ .)
    lambda          reduce using rule 94 (const_val -> STRING_3SQ .)
    {               reduce using rule 94 (const_val -> STRING_3SQ .)
    ]               reduce using rule 94 (const_val -> STRING_3SQ .)
    :               reduce using rule 94 (const_val -> STRING_3SQ .)
    ,               reduce using rule 94 (const_val -> STRING_3SQ .)


state 86

    (95) const_val -> STRING_3DQ .

    operator_add    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_sub    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_mul    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_div    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_trudiv reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_pow    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_join   reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_split  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitand reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitor  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitxor reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitshiftleft reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitshiftright reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_and    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_or     reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_xor    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_contains reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_incr   reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_decr   reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_outer  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_rotate reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_apply  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_compose reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_over   reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_map    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_less_than reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_less_than_equals reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_greater_than reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_greater_than_equals reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_equals reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_not_equals reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_smallest reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_greatest reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_goodname reduce using rule 95 (const_val -> STRING_3DQ .)
    [               reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_scan   reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_reduc  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_bitnot reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_not    reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_inner  reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_reverse reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_sorted_incr reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_sorted_decr reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_s_combinator reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_s_combinator_2 reduce using rule 95 (const_val -> STRING_3DQ .)
    operator_goodname2 reduce using rule 95 (const_val -> STRING_3DQ .)
    NEWLINE         reduce using rule 95 (const_val -> STRING_3DQ .)
    $end            reduce using rule 95 (const_val -> STRING_3DQ .)
    }               reduce using rule 95 (const_val -> STRING_3DQ .)
    )               reduce using rule 95 (const_val -> STRING_3DQ .)
    (               reduce using rule 95 (const_val -> STRING_3DQ .)
    VAR             reduce using rule 95 (const_val -> STRING_3DQ .)
    FLOAT           reduce using rule 95 (const_val -> STRING_3DQ .)
    NUM             reduce using rule 95 (const_val -> STRING_3DQ .)
    STRING_3SQ      reduce using rule 95 (const_val -> STRING_3DQ .)
    STRING_3DQ      reduce using rule 95 (const_val -> STRING_3DQ .)
    STRING_SQ       reduce using rule 95 (const_val -> STRING_3DQ .)
    STRING_DQ       reduce using rule 95 (const_val -> STRING_3DQ .)
    true            reduce using rule 95 (const_val -> STRING_3DQ .)
    Null            reduce using rule 95 (const_val -> STRING_3DQ .)
    false           reduce using rule 95 (const_val -> STRING_3DQ .)
    type_type       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_num        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_bool       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_any        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_u64        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_u32        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_u16        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_u8         reduce using rule 95 (const_val -> STRING_3DQ .)
    type_i64        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_i32        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_i16        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_i8         reduce using rule 95 (const_val -> STRING_3DQ .)
    type_f32        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_f64        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_str        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_list       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_tuple      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_array      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_vector     reduce using rule 95 (const_val -> STRING_3DQ .)
    type_dict       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_generator  reduce using rule 95 (const_val -> STRING_3DQ .)
    type_linked_list reduce using rule 95 (const_val -> STRING_3DQ .)
    type_doubly_linked_list reduce using rule 95 (const_val -> STRING_3DQ .)
    type_deque      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_heap       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_fibonacci_heap reduce using rule 95 (const_val -> STRING_3DQ .)
    type_tree       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_trie       reduce using rule 95 (const_val -> STRING_3DQ .)
    type_stack      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_queue      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_binary_search_tree reduce using rule 95 (const_val -> STRING_3DQ .)
    type_bitset     reduce using rule 95 (const_val -> STRING_3DQ .)
    type_set        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_map        reduce using rule 95 (const_val -> STRING_3DQ .)
    type_range      reduce using rule 95 (const_val -> STRING_3DQ .)
    type_bad_struct reduce using rule 95 (const_val -> STRING_3DQ .)
    type_bad_struct2 reduce using rule 95 (const_val -> STRING_3DQ .)
    lambda          reduce using rule 95 (const_val -> STRING_3DQ .)
    {               reduce using rule 95 (const_val -> STRING_3DQ .)
    ]               reduce using rule 95 (const_val -> STRING_3DQ .)
    :               reduce using rule 95 (const_val -> STRING_3DQ .)
    ,               reduce using rule 95 (const_val -> STRING_3DQ .)


state 87

    (96) const_val -> STRING_SQ .

    operator_add    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_sub    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_mul    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_div    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_trudiv reduce using rule 96 (const_val -> STRING_SQ .)
    operator_pow    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_join   reduce using rule 96 (const_val -> STRING_SQ .)
    operator_split  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitand reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitor  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitxor reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitshiftleft reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitshiftright reduce using rule 96 (const_val -> STRING_SQ .)
    operator_and    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_or     reduce using rule 96 (const_val -> STRING_SQ .)
    operator_xor    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_contains reduce using rule 96 (const_val -> STRING_SQ .)
    operator_incr   reduce using rule 96 (const_val -> STRING_SQ .)
    operator_decr   reduce using rule 96 (const_val -> STRING_SQ .)
    operator_outer  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_rotate reduce using rule 96 (const_val -> STRING_SQ .)
    operator_apply  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_compose reduce using rule 96 (const_val -> STRING_SQ .)
    operator_over   reduce using rule 96 (const_val -> STRING_SQ .)
    operator_map    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_less_than reduce using rule 96 (const_val -> STRING_SQ .)
    operator_less_than_equals reduce using rule 96 (const_val -> STRING_SQ .)
    operator_greater_than reduce using rule 96 (const_val -> STRING_SQ .)
    operator_greater_than_equals reduce using rule 96 (const_val -> STRING_SQ .)
    operator_equals reduce using rule 96 (const_val -> STRING_SQ .)
    operator_not_equals reduce using rule 96 (const_val -> STRING_SQ .)
    operator_smallest reduce using rule 96 (const_val -> STRING_SQ .)
    operator_greatest reduce using rule 96 (const_val -> STRING_SQ .)
    operator_goodname reduce using rule 96 (const_val -> STRING_SQ .)
    [               reduce using rule 96 (const_val -> STRING_SQ .)
    operator_scan   reduce using rule 96 (const_val -> STRING_SQ .)
    operator_reduc  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_bitnot reduce using rule 96 (const_val -> STRING_SQ .)
    operator_not    reduce using rule 96 (const_val -> STRING_SQ .)
    operator_inner  reduce using rule 96 (const_val -> STRING_SQ .)
    operator_reverse reduce using rule 96 (const_val -> STRING_SQ .)
    operator_sorted_incr reduce using rule 96 (const_val -> STRING_SQ .)
    operator_sorted_decr reduce using rule 96 (const_val -> STRING_SQ .)
    operator_s_combinator reduce using rule 96 (const_val -> STRING_SQ .)
    operator_s_combinator_2 reduce using rule 96 (const_val -> STRING_SQ .)
    operator_goodname2 reduce using rule 96 (const_val -> STRING_SQ .)
    NEWLINE         reduce using rule 96 (const_val -> STRING_SQ .)
    $end            reduce using rule 96 (const_val -> STRING_SQ .)
    }               reduce using rule 96 (const_val -> STRING_SQ .)
    )               reduce using rule 96 (const_val -> STRING_SQ .)
    (               reduce using rule 96 (const_val -> STRING_SQ .)
    VAR             reduce using rule 96 (const_val -> STRING_SQ .)
    FLOAT           reduce using rule 96 (const_val -> STRING_SQ .)
    NUM             reduce using rule 96 (const_val -> STRING_SQ .)
    STRING_3SQ      reduce using rule 96 (const_val -> STRING_SQ .)
    STRING_3DQ      reduce using rule 96 (const_val -> STRING_SQ .)
    STRING_SQ       reduce using rule 96 (const_val -> STRING_SQ .)
    STRING_DQ       reduce using rule 96 (const_val -> STRING_SQ .)
    true            reduce using rule 96 (const_val -> STRING_SQ .)
    Null            reduce using rule 96 (const_val -> STRING_SQ .)
    false           reduce using rule 96 (const_val -> STRING_SQ .)
    type_type       reduce using rule 96 (const_val -> STRING_SQ .)
    type_num        reduce using rule 96 (const_val -> STRING_SQ .)
    type_bool       reduce using rule 96 (const_val -> STRING_SQ .)
    type_any        reduce using rule 96 (const_val -> STRING_SQ .)
    type_u64        reduce using rule 96 (const_val -> STRING_SQ .)
    type_u32        reduce using rule 96 (const_val -> STRING_SQ .)
    type_u16        reduce using rule 96 (const_val -> STRING_SQ .)
    type_u8         reduce using rule 96 (const_val -> STRING_SQ .)
    type_i64        reduce using rule 96 (const_val -> STRING_SQ .)
    type_i32        reduce using rule 96 (const_val -> STRING_SQ .)
    type_i16        reduce using rule 96 (const_val -> STRING_SQ .)
    type_i8         reduce using rule 96 (const_val -> STRING_SQ .)
    type_f32        reduce using rule 96 (const_val -> STRING_SQ .)
    type_f64        reduce using rule 96 (const_val -> STRING_SQ .)
    type_str        reduce using rule 96 (const_val -> STRING_SQ .)
    type_list       reduce using rule 96 (const_val -> STRING_SQ .)
    type_tuple      reduce using rule 96 (const_val -> STRING_SQ .)
    type_array      reduce using rule 96 (const_val -> STRING_SQ .)
    type_vector     reduce using rule 96 (const_val -> STRING_SQ .)
    type_dict       reduce using rule 96 (const_val -> STRING_SQ .)
    type_generator  reduce using rule 96 (const_val -> STRING_SQ .)
    type_linked_list reduce using rule 96 (const_val -> STRING_SQ .)
    type_doubly_linked_list reduce using rule 96 (const_val -> STRING_SQ .)
    type_deque      reduce using rule 96 (const_val -> STRING_SQ .)
    type_heap       reduce using rule 96 (const_val -> STRING_SQ .)
    type_fibonacci_heap reduce using rule 96 (const_val -> STRING_SQ .)
    type_tree       reduce using rule 96 (const_val -> STRING_SQ .)
    type_trie       reduce using rule 96 (const_val -> STRING_SQ .)
    type_stack      reduce using rule 96 (const_val -> STRING_SQ .)
    type_queue      reduce using rule 96 (const_val -> STRING_SQ .)
    type_binary_search_tree reduce using rule 96 (const_val -> STRING_SQ .)
    type_bitset     reduce using rule 96 (const_val -> STRING_SQ .)
    type_set        reduce using rule 96 (const_val -> STRING_SQ .)
    type_map        reduce using rule 96 (const_val -> STRING_SQ .)
    type_range      reduce using rule 96 (const_val -> STRING_SQ .)
    type_bad_struct reduce using rule 96 (const_val -> STRING_SQ .)
    type_bad_struct2 reduce using rule 96 (const_val -> STRING_SQ .)
    lambda          reduce using rule 96 (const_val -> STRING_SQ .)
    {               reduce using rule 96 (const_val -> STRING_SQ .)
    ]               reduce using rule 96 (const_val -> STRING_SQ .)
    :               reduce using rule 96 (const_val -> STRING_SQ .)
    ,               reduce using rule 96 (const_val -> STRING_SQ .)


state 88

    (97) const_val -> STRING_DQ .

    operator_add    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_sub    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_mul    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_div    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_trudiv reduce using rule 97 (const_val -> STRING_DQ .)
    operator_pow    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_join   reduce using rule 97 (const_val -> STRING_DQ .)
    operator_split  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitand reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitor  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitxor reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitshiftleft reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitshiftright reduce using rule 97 (const_val -> STRING_DQ .)
    operator_and    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_or     reduce using rule 97 (const_val -> STRING_DQ .)
    operator_xor    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_contains reduce using rule 97 (const_val -> STRING_DQ .)
    operator_incr   reduce using rule 97 (const_val -> STRING_DQ .)
    operator_decr   reduce using rule 97 (const_val -> STRING_DQ .)
    operator_outer  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_rotate reduce using rule 97 (const_val -> STRING_DQ .)
    operator_apply  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_compose reduce using rule 97 (const_val -> STRING_DQ .)
    operator_over   reduce using rule 97 (const_val -> STRING_DQ .)
    operator_map    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_less_than reduce using rule 97 (const_val -> STRING_DQ .)
    operator_less_than_equals reduce using rule 97 (const_val -> STRING_DQ .)
    operator_greater_than reduce using rule 97 (const_val -> STRING_DQ .)
    operator_greater_than_equals reduce using rule 97 (const_val -> STRING_DQ .)
    operator_equals reduce using rule 97 (const_val -> STRING_DQ .)
    operator_not_equals reduce using rule 97 (const_val -> STRING_DQ .)
    operator_smallest reduce using rule 97 (const_val -> STRING_DQ .)
    operator_greatest reduce using rule 97 (const_val -> STRING_DQ .)
    operator_goodname reduce using rule 97 (const_val -> STRING_DQ .)
    [               reduce using rule 97 (const_val -> STRING_DQ .)
    operator_scan   reduce using rule 97 (const_val -> STRING_DQ .)
    operator_reduc  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_bitnot reduce using rule 97 (const_val -> STRING_DQ .)
    operator_not    reduce using rule 97 (const_val -> STRING_DQ .)
    operator_inner  reduce using rule 97 (const_val -> STRING_DQ .)
    operator_reverse reduce using rule 97 (const_val -> STRING_DQ .)
    operator_sorted_incr reduce using rule 97 (const_val -> STRING_DQ .)
    operator_sorted_decr reduce using rule 97 (const_val -> STRING_DQ .)
    operator_s_combinator reduce using rule 97 (const_val -> STRING_DQ .)
    operator_s_combinator_2 reduce using rule 97 (const_val -> STRING_DQ .)
    operator_goodname2 reduce using rule 97 (const_val -> STRING_DQ .)
    NEWLINE         reduce using rule 97 (const_val -> STRING_DQ .)
    $end            reduce using rule 97 (const_val -> STRING_DQ .)
    }               reduce using rule 97 (const_val -> STRING_DQ .)
    )               reduce using rule 97 (const_val -> STRING_DQ .)
    (               reduce using rule 97 (const_val -> STRING_DQ .)
    VAR             reduce using rule 97 (const_val -> STRING_DQ .)
    FLOAT           reduce using rule 97 (const_val -> STRING_DQ .)
    NUM             reduce using rule 97 (const_val -> STRING_DQ .)
    STRING_3SQ      reduce using rule 97 (const_val -> STRING_DQ .)
    STRING_3DQ      reduce using rule 97 (const_val -> STRING_DQ .)
    STRING_SQ       reduce using rule 97 (const_val -> STRING_DQ .)
    STRING_DQ       reduce using rule 97 (const_val -> STRING_DQ .)
    true            reduce using rule 97 (const_val -> STRING_DQ .)
    Null            reduce using rule 97 (const_val -> STRING_DQ .)
    false           reduce using rule 97 (const_val -> STRING_DQ .)
    type_type       reduce using rule 97 (const_val -> STRING_DQ .)
    type_num        reduce using rule 97 (const_val -> STRING_DQ .)
    type_bool       reduce using rule 97 (const_val -> STRING_DQ .)
    type_any        reduce using rule 97 (const_val -> STRING_DQ .)
    type_u64        reduce using rule 97 (const_val -> STRING_DQ .)
    type_u32        reduce using rule 97 (const_val -> STRING_DQ .)
    type_u16        reduce using rule 97 (const_val -> STRING_DQ .)
    type_u8         reduce using rule 97 (const_val -> STRING_DQ .)
    type_i64        reduce using rule 97 (const_val -> STRING_DQ .)
    type_i32        reduce using rule 97 (const_val -> STRING_DQ .)
    type_i16        reduce using rule 97 (const_val -> STRING_DQ .)
    type_i8         reduce using rule 97 (const_val -> STRING_DQ .)
    type_f32        reduce using rule 97 (const_val -> STRING_DQ .)
    type_f64        reduce using rule 97 (const_val -> STRING_DQ .)
    type_str        reduce using rule 97 (const_val -> STRING_DQ .)
    type_list       reduce using rule 97 (const_val -> STRING_DQ .)
    type_tuple      reduce using rule 97 (const_val -> STRING_DQ .)
    type_array      reduce using rule 97 (const_val -> STRING_DQ .)
    type_vector     reduce using rule 97 (const_val -> STRING_DQ .)
    type_dict       reduce using rule 97 (const_val -> STRING_DQ .)
    type_generator  reduce using rule 97 (const_val -> STRING_DQ .)
    type_linked_list reduce using rule 97 (const_val -> STRING_DQ .)
    type_doubly_linked_list reduce using rule 97 (const_val -> STRING_DQ .)
    type_deque      reduce using rule 97 (const_val -> STRING_DQ .)
    type_heap       reduce using rule 97 (const_val -> STRING_DQ .)
    type_fibonacci_heap reduce using rule 97 (const_val -> STRING_DQ .)
    type_tree       reduce using rule 97 (const_val -> STRING_DQ .)
    type_trie       reduce using rule 97 (const_val -> STRING_DQ .)
    type_stack      reduce using rule 97 (const_val -> STRING_DQ .)
    type_queue      reduce using rule 97 (const_val -> STRING_DQ .)
    type_binary_search_tree reduce using rule 97 (const_val -> STRING_DQ .)
    type_bitset     reduce using rule 97 (const_val -> STRING_DQ .)
    type_set        reduce using rule 97 (const_val -> STRING_DQ .)
    type_map        reduce using rule 97 (const_val -> STRING_DQ .)
    type_range      reduce using rule 97 (const_val -> STRING_DQ .)
    type_bad_struct reduce using rule 97 (const_val -> STRING_DQ .)
    type_bad_struct2 reduce using rule 97 (const_val -> STRING_DQ .)
    lambda          reduce using rule 97 (const_val -> STRING_DQ .)
    {               reduce using rule 97 (const_val -> STRING_DQ .)
    ]               reduce using rule 97 (const_val -> STRING_DQ .)
    :               reduce using rule 97 (const_val -> STRING_DQ .)
    ,               reduce using rule 97 (const_val -> STRING_DQ .)


state 89

    (98) const_val -> true .

    operator_add    reduce using rule 98 (const_val -> true .)
    operator_sub    reduce using rule 98 (const_val -> true .)
    operator_mul    reduce using rule 98 (const_val -> true .)
    operator_div    reduce using rule 98 (const_val -> true .)
    operator_trudiv reduce using rule 98 (const_val -> true .)
    operator_pow    reduce using rule 98 (const_val -> true .)
    operator_join   reduce using rule 98 (const_val -> true .)
    operator_split  reduce using rule 98 (const_val -> true .)
    operator_bitand reduce using rule 98 (const_val -> true .)
    operator_bitor  reduce using rule 98 (const_val -> true .)
    operator_bitxor reduce using rule 98 (const_val -> true .)
    operator_bitshiftleft reduce using rule 98 (const_val -> true .)
    operator_bitshiftright reduce using rule 98 (const_val -> true .)
    operator_and    reduce using rule 98 (const_val -> true .)
    operator_or     reduce using rule 98 (const_val -> true .)
    operator_xor    reduce using rule 98 (const_val -> true .)
    operator_contains reduce using rule 98 (const_val -> true .)
    operator_incr   reduce using rule 98 (const_val -> true .)
    operator_decr   reduce using rule 98 (const_val -> true .)
    operator_outer  reduce using rule 98 (const_val -> true .)
    operator_rotate reduce using rule 98 (const_val -> true .)
    operator_apply  reduce using rule 98 (const_val -> true .)
    operator_compose reduce using rule 98 (const_val -> true .)
    operator_over   reduce using rule 98 (const_val -> true .)
    operator_map    reduce using rule 98 (const_val -> true .)
    operator_less_than reduce using rule 98 (const_val -> true .)
    operator_less_than_equals reduce using rule 98 (const_val -> true .)
    operator_greater_than reduce using rule 98 (const_val -> true .)
    operator_greater_than_equals reduce using rule 98 (const_val -> true .)
    operator_equals reduce using rule 98 (const_val -> true .)
    operator_not_equals reduce using rule 98 (const_val -> true .)
    operator_smallest reduce using rule 98 (const_val -> true .)
    operator_greatest reduce using rule 98 (const_val -> true .)
    operator_goodname reduce using rule 98 (const_val -> true .)
    [               reduce using rule 98 (const_val -> true .)
    operator_scan   reduce using rule 98 (const_val -> true .)
    operator_reduc  reduce using rule 98 (const_val -> true .)
    operator_bitnot reduce using rule 98 (const_val -> true .)
    operator_not    reduce using rule 98 (const_val -> true .)
    operator_inner  reduce using rule 98 (const_val -> true .)
    operator_reverse reduce using rule 98 (const_val -> true .)
    operator_sorted_incr reduce using rule 98 (const_val -> true .)
    operator_sorted_decr reduce using rule 98 (const_val -> true .)
    operator_s_combinator reduce using rule 98 (const_val -> true .)
    operator_s_combinator_2 reduce using rule 98 (const_val -> true .)
    operator_goodname2 reduce using rule 98 (const_val -> true .)
    NEWLINE         reduce using rule 98 (const_val -> true .)
    $end            reduce using rule 98 (const_val -> true .)
    }               reduce using rule 98 (const_val -> true .)
    )               reduce using rule 98 (const_val -> true .)
    (               reduce using rule 98 (const_val -> true .)
    VAR             reduce using rule 98 (const_val -> true .)
    FLOAT           reduce using rule 98 (const_val -> true .)
    NUM             reduce using rule 98 (const_val -> true .)
    STRING_3SQ      reduce using rule 98 (const_val -> true .)
    STRING_3DQ      reduce using rule 98 (const_val -> true .)
    STRING_SQ       reduce using rule 98 (const_val -> true .)
    STRING_DQ       reduce using rule 98 (const_val -> true .)
    true            reduce using rule 98 (const_val -> true .)
    Null            reduce using rule 98 (const_val -> true .)
    false           reduce using rule 98 (const_val -> true .)
    type_type       reduce using rule 98 (const_val -> true .)
    type_num        reduce using rule 98 (const_val -> true .)
    type_bool       reduce using rule 98 (const_val -> true .)
    type_any        reduce using rule 98 (const_val -> true .)
    type_u64        reduce using rule 98 (const_val -> true .)
    type_u32        reduce using rule 98 (const_val -> true .)
    type_u16        reduce using rule 98 (const_val -> true .)
    type_u8         reduce using rule 98 (const_val -> true .)
    type_i64        reduce using rule 98 (const_val -> true .)
    type_i32        reduce using rule 98 (const_val -> true .)
    type_i16        reduce using rule 98 (const_val -> true .)
    type_i8         reduce using rule 98 (const_val -> true .)
    type_f32        reduce using rule 98 (const_val -> true .)
    type_f64        reduce using rule 98 (const_val -> true .)
    type_str        reduce using rule 98 (const_val -> true .)
    type_list       reduce using rule 98 (const_val -> true .)
    type_tuple      reduce using rule 98 (const_val -> true .)
    type_array      reduce using rule 98 (const_val -> true .)
    type_vector     reduce using rule 98 (const_val -> true .)
    type_dict       reduce using rule 98 (const_val -> true .)
    type_generator  reduce using rule 98 (const_val -> true .)
    type_linked_list reduce using rule 98 (const_val -> true .)
    type_doubly_linked_list reduce using rule 98 (const_val -> true .)
    type_deque      reduce using rule 98 (const_val -> true .)
    type_heap       reduce using rule 98 (const_val -> true .)
    type_fibonacci_heap reduce using rule 98 (const_val -> true .)
    type_tree       reduce using rule 98 (const_val -> true .)
    type_trie       reduce using rule 98 (const_val -> true .)
    type_stack      reduce using rule 98 (const_val -> true .)
    type_queue      reduce using rule 98 (const_val -> true .)
    type_binary_search_tree reduce using rule 98 (const_val -> true .)
    type_bitset     reduce using rule 98 (const_val -> true .)
    type_set        reduce using rule 98 (const_val -> true .)
    type_map        reduce using rule 98 (const_val -> true .)
    type_range      reduce using rule 98 (const_val -> true .)
    type_bad_struct reduce using rule 98 (const_val -> true .)
    type_bad_struct2 reduce using rule 98 (const_val -> true .)
    lambda          reduce using rule 98 (const_val -> true .)
    {               reduce using rule 98 (const_val -> true .)
    ]               reduce using rule 98 (const_val -> true .)
    :               reduce using rule 98 (const_val -> true .)
    ,               reduce using rule 98 (const_val -> true .)


state 90

    (99) const_val -> Null .

    operator_add    reduce using rule 99 (const_val -> Null .)
    operator_sub    reduce using rule 99 (const_val -> Null .)
    operator_mul    reduce using rule 99 (const_val -> Null .)
    operator_div    reduce using rule 99 (const_val -> Null .)
    operator_trudiv reduce using rule 99 (const_val -> Null .)
    operator_pow    reduce using rule 99 (const_val -> Null .)
    operator_join   reduce using rule 99 (const_val -> Null .)
    operator_split  reduce using rule 99 (const_val -> Null .)
    operator_bitand reduce using rule 99 (const_val -> Null .)
    operator_bitor  reduce using rule 99 (const_val -> Null .)
    operator_bitxor reduce using rule 99 (const_val -> Null .)
    operator_bitshiftleft reduce using rule 99 (const_val -> Null .)
    operator_bitshiftright reduce using rule 99 (const_val -> Null .)
    operator_and    reduce using rule 99 (const_val -> Null .)
    operator_or     reduce using rule 99 (const_val -> Null .)
    operator_xor    reduce using rule 99 (const_val -> Null .)
    operator_contains reduce using rule 99 (const_val -> Null .)
    operator_incr   reduce using rule 99 (const_val -> Null .)
    operator_decr   reduce using rule 99 (const_val -> Null .)
    operator_outer  reduce using rule 99 (const_val -> Null .)
    operator_rotate reduce using rule 99 (const_val -> Null .)
    operator_apply  reduce using rule 99 (const_val -> Null .)
    operator_compose reduce using rule 99 (const_val -> Null .)
    operator_over   reduce using rule 99 (const_val -> Null .)
    operator_map    reduce using rule 99 (const_val -> Null .)
    operator_less_than reduce using rule 99 (const_val -> Null .)
    operator_less_than_equals reduce using rule 99 (const_val -> Null .)
    operator_greater_than reduce using rule 99 (const_val -> Null .)
    operator_greater_than_equals reduce using rule 99 (const_val -> Null .)
    operator_equals reduce using rule 99 (const_val -> Null .)
    operator_not_equals reduce using rule 99 (const_val -> Null .)
    operator_smallest reduce using rule 99 (const_val -> Null .)
    operator_greatest reduce using rule 99 (const_val -> Null .)
    operator_goodname reduce using rule 99 (const_val -> Null .)
    [               reduce using rule 99 (const_val -> Null .)
    operator_scan   reduce using rule 99 (const_val -> Null .)
    operator_reduc  reduce using rule 99 (const_val -> Null .)
    operator_bitnot reduce using rule 99 (const_val -> Null .)
    operator_not    reduce using rule 99 (const_val -> Null .)
    operator_inner  reduce using rule 99 (const_val -> Null .)
    operator_reverse reduce using rule 99 (const_val -> Null .)
    operator_sorted_incr reduce using rule 99 (const_val -> Null .)
    operator_sorted_decr reduce using rule 99 (const_val -> Null .)
    operator_s_combinator reduce using rule 99 (const_val -> Null .)
    operator_s_combinator_2 reduce using rule 99 (const_val -> Null .)
    operator_goodname2 reduce using rule 99 (const_val -> Null .)
    NEWLINE         reduce using rule 99 (const_val -> Null .)
    $end            reduce using rule 99 (const_val -> Null .)
    }               reduce using rule 99 (const_val -> Null .)
    )               reduce using rule 99 (const_val -> Null .)
    (               reduce using rule 99 (const_val -> Null .)
    VAR             reduce using rule 99 (const_val -> Null .)
    FLOAT           reduce using rule 99 (const_val -> Null .)
    NUM             reduce using rule 99 (const_val -> Null .)
    STRING_3SQ      reduce using rule 99 (const_val -> Null .)
    STRING_3DQ      reduce using rule 99 (const_val -> Null .)
    STRING_SQ       reduce using rule 99 (const_val -> Null .)
    STRING_DQ       reduce using rule 99 (const_val -> Null .)
    true            reduce using rule 99 (const_val -> Null .)
    Null            reduce using rule 99 (const_val -> Null .)
    false           reduce using rule 99 (const_val -> Null .)
    type_type       reduce using rule 99 (const_val -> Null .)
    type_num        reduce using rule 99 (const_val -> Null .)
    type_bool       reduce using rule 99 (const_val -> Null .)
    type_any        reduce using rule 99 (const_val -> Null .)
    type_u64        reduce using rule 99 (const_val -> Null .)
    type_u32        reduce using rule 99 (const_val -> Null .)
    type_u16        reduce using rule 99 (const_val -> Null .)
    type_u8         reduce using rule 99 (const_val -> Null .)
    type_i64        reduce using rule 99 (const_val -> Null .)
    type_i32        reduce using rule 99 (const_val -> Null .)
    type_i16        reduce using rule 99 (const_val -> Null .)
    type_i8         reduce using rule 99 (const_val -> Null .)
    type_f32        reduce using rule 99 (const_val -> Null .)
    type_f64        reduce using rule 99 (const_val -> Null .)
    type_str        reduce using rule 99 (const_val -> Null .)
    type_list       reduce using rule 99 (const_val -> Null .)
    type_tuple      reduce using rule 99 (const_val -> Null .)
    type_array      reduce using rule 99 (const_val -> Null .)
    type_vector     reduce using rule 99 (const_val -> Null .)
    type_dict       reduce using rule 99 (const_val -> Null .)
    type_generator  reduce using rule 99 (const_val -> Null .)
    type_linked_list reduce using rule 99 (const_val -> Null .)
    type_doubly_linked_list reduce using rule 99 (const_val -> Null .)
    type_deque      reduce using rule 99 (const_val -> Null .)
    type_heap       reduce using rule 99 (const_val -> Null .)
    type_fibonacci_heap reduce using rule 99 (const_val -> Null .)
    type_tree       reduce using rule 99 (const_val -> Null .)
    type_trie       reduce using rule 99 (const_val -> Null .)
    type_stack      reduce using rule 99 (const_val -> Null .)
    type_queue      reduce using rule 99 (const_val -> Null .)
    type_binary_search_tree reduce using rule 99 (const_val -> Null .)
    type_bitset     reduce using rule 99 (const_val -> Null .)
    type_set        reduce using rule 99 (const_val -> Null .)
    type_map        reduce using rule 99 (const_val -> Null .)
    type_range      reduce using rule 99 (const_val -> Null .)
    type_bad_struct reduce using rule 99 (const_val -> Null .)
    type_bad_struct2 reduce using rule 99 (const_val -> Null .)
    lambda          reduce using rule 99 (const_val -> Null .)
    {               reduce using rule 99 (const_val -> Null .)
    ]               reduce using rule 99 (const_val -> Null .)
    :               reduce using rule 99 (const_val -> Null .)
    ,               reduce using rule 99 (const_val -> Null .)


state 91

    (100) const_val -> false .

    operator_add    reduce using rule 100 (const_val -> false .)
    operator_sub    reduce using rule 100 (const_val -> false .)
    operator_mul    reduce using rule 100 (const_val -> false .)
    operator_div    reduce using rule 100 (const_val -> false .)
    operator_trudiv reduce using rule 100 (const_val -> false .)
    operator_pow    reduce using rule 100 (const_val -> false .)
    operator_join   reduce using rule 100 (const_val -> false .)
    operator_split  reduce using rule 100 (const_val -> false .)
    operator_bitand reduce using rule 100 (const_val -> false .)
    operator_bitor  reduce using rule 100 (const_val -> false .)
    operator_bitxor reduce using rule 100 (const_val -> false .)
    operator_bitshiftleft reduce using rule 100 (const_val -> false .)
    operator_bitshiftright reduce using rule 100 (const_val -> false .)
    operator_and    reduce using rule 100 (const_val -> false .)
    operator_or     reduce using rule 100 (const_val -> false .)
    operator_xor    reduce using rule 100 (const_val -> false .)
    operator_contains reduce using rule 100 (const_val -> false .)
    operator_incr   reduce using rule 100 (const_val -> false .)
    operator_decr   reduce using rule 100 (const_val -> false .)
    operator_outer  reduce using rule 100 (const_val -> false .)
    operator_rotate reduce using rule 100 (const_val -> false .)
    operator_apply  reduce using rule 100 (const_val -> false .)
    operator_compose reduce using rule 100 (const_val -> false .)
    operator_over   reduce using rule 100 (const_val -> false .)
    operator_map    reduce using rule 100 (const_val -> false .)
    operator_less_than reduce using rule 100 (const_val -> false .)
    operator_less_than_equals reduce using rule 100 (const_val -> false .)
    operator_greater_than reduce using rule 100 (const_val -> false .)
    operator_greater_than_equals reduce using rule 100 (const_val -> false .)
    operator_equals reduce using rule 100 (const_val -> false .)
    operator_not_equals reduce using rule 100 (const_val -> false .)
    operator_smallest reduce using rule 100 (const_val -> false .)
    operator_greatest reduce using rule 100 (const_val -> false .)
    operator_goodname reduce using rule 100 (const_val -> false .)
    [               reduce using rule 100 (const_val -> false .)
    operator_scan   reduce using rule 100 (const_val -> false .)
    operator_reduc  reduce using rule 100 (const_val -> false .)
    operator_bitnot reduce using rule 100 (const_val -> false .)
    operator_not    reduce using rule 100 (const_val -> false .)
    operator_inner  reduce using rule 100 (const_val -> false .)
    operator_reverse reduce using rule 100 (const_val -> false .)
    operator_sorted_incr reduce using rule 100 (const_val -> false .)
    operator_sorted_decr reduce using rule 100 (const_val -> false .)
    operator_s_combinator reduce using rule 100 (const_val -> false .)
    operator_s_combinator_2 reduce using rule 100 (const_val -> false .)
    operator_goodname2 reduce using rule 100 (const_val -> false .)
    NEWLINE         reduce using rule 100 (const_val -> false .)
    $end            reduce using rule 100 (const_val -> false .)
    }               reduce using rule 100 (const_val -> false .)
    )               reduce using rule 100 (const_val -> false .)
    (               reduce using rule 100 (const_val -> false .)
    VAR             reduce using rule 100 (const_val -> false .)
    FLOAT           reduce using rule 100 (const_val -> false .)
    NUM             reduce using rule 100 (const_val -> false .)
    STRING_3SQ      reduce using rule 100 (const_val -> false .)
    STRING_3DQ      reduce using rule 100 (const_val -> false .)
    STRING_SQ       reduce using rule 100 (const_val -> false .)
    STRING_DQ       reduce using rule 100 (const_val -> false .)
    true            reduce using rule 100 (const_val -> false .)
    Null            reduce using rule 100 (const_val -> false .)
    false           reduce using rule 100 (const_val -> false .)
    type_type       reduce using rule 100 (const_val -> false .)
    type_num        reduce using rule 100 (const_val -> false .)
    type_bool       reduce using rule 100 (const_val -> false .)
    type_any        reduce using rule 100 (const_val -> false .)
    type_u64        reduce using rule 100 (const_val -> false .)
    type_u32        reduce using rule 100 (const_val -> false .)
    type_u16        reduce using rule 100 (const_val -> false .)
    type_u8         reduce using rule 100 (const_val -> false .)
    type_i64        reduce using rule 100 (const_val -> false .)
    type_i32        reduce using rule 100 (const_val -> false .)
    type_i16        reduce using rule 100 (const_val -> false .)
    type_i8         reduce using rule 100 (const_val -> false .)
    type_f32        reduce using rule 100 (const_val -> false .)
    type_f64        reduce using rule 100 (const_val -> false .)
    type_str        reduce using rule 100 (const_val -> false .)
    type_list       reduce using rule 100 (const_val -> false .)
    type_tuple      reduce using rule 100 (const_val -> false .)
    type_array      reduce using rule 100 (const_val -> false .)
    type_vector     reduce using rule 100 (const_val -> false .)
    type_dict       reduce using rule 100 (const_val -> false .)
    type_generator  reduce using rule 100 (const_val -> false .)
    type_linked_list reduce using rule 100 (const_val -> false .)
    type_doubly_linked_list reduce using rule 100 (const_val -> false .)
    type_deque      reduce using rule 100 (const_val -> false .)
    type_heap       reduce using rule 100 (const_val -> false .)
    type_fibonacci_heap reduce using rule 100 (const_val -> false .)
    type_tree       reduce using rule 100 (const_val -> false .)
    type_trie       reduce using rule 100 (const_val -> false .)
    type_stack      reduce using rule 100 (const_val -> false .)
    type_queue      reduce using rule 100 (const_val -> false .)
    type_binary_search_tree reduce using rule 100 (const_val -> false .)
    type_bitset     reduce using rule 100 (const_val -> false .)
    type_set        reduce using rule 100 (const_val -> false .)
    type_map        reduce using rule 100 (const_val -> false .)
    type_range      reduce using rule 100 (const_val -> false .)
    type_bad_struct reduce using rule 100 (const_val -> false .)
    type_bad_struct2 reduce using rule 100 (const_val -> false .)
    lambda          reduce using rule 100 (const_val -> false .)
    {               reduce using rule 100 (const_val -> false .)
    ]               reduce using rule 100 (const_val -> false .)
    :               reduce using rule 100 (const_val -> false .)
    ,               reduce using rule 100 (const_val -> false .)


state 92

    (148) return_val -> type_type . ( arguments )
    (10) TYPE -> type_type .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 211
    VAR             reduce using rule 10 (TYPE -> type_type .)
    operator_add    reduce using rule 10 (TYPE -> type_type .)
    operator_sub    reduce using rule 10 (TYPE -> type_type .)
    operator_mul    reduce using rule 10 (TYPE -> type_type .)
    operator_div    reduce using rule 10 (TYPE -> type_type .)
    operator_trudiv reduce using rule 10 (TYPE -> type_type .)
    operator_pow    reduce using rule 10 (TYPE -> type_type .)
    operator_join   reduce using rule 10 (TYPE -> type_type .)
    operator_split  reduce using rule 10 (TYPE -> type_type .)
    operator_bitand reduce using rule 10 (TYPE -> type_type .)
    operator_bitor  reduce using rule 10 (TYPE -> type_type .)
    operator_bitxor reduce using rule 10 (TYPE -> type_type .)
    operator_bitshiftleft reduce using rule 10 (TYPE -> type_type .)
    operator_bitshiftright reduce using rule 10 (TYPE -> type_type .)
    operator_and    reduce using rule 10 (TYPE -> type_type .)
    operator_or     reduce using rule 10 (TYPE -> type_type .)
    operator_xor    reduce using rule 10 (TYPE -> type_type .)
    operator_contains reduce using rule 10 (TYPE -> type_type .)
    operator_incr   reduce using rule 10 (TYPE -> type_type .)
    operator_decr   reduce using rule 10 (TYPE -> type_type .)
    operator_outer  reduce using rule 10 (TYPE -> type_type .)
    operator_rotate reduce using rule 10 (TYPE -> type_type .)
    operator_apply  reduce using rule 10 (TYPE -> type_type .)
    operator_compose reduce using rule 10 (TYPE -> type_type .)
    operator_over   reduce using rule 10 (TYPE -> type_type .)
    operator_map    reduce using rule 10 (TYPE -> type_type .)
    operator_less_than reduce using rule 10 (TYPE -> type_type .)
    operator_less_than_equals reduce using rule 10 (TYPE -> type_type .)
    operator_greater_than reduce using rule 10 (TYPE -> type_type .)
    operator_greater_than_equals reduce using rule 10 (TYPE -> type_type .)
    operator_equals reduce using rule 10 (TYPE -> type_type .)
    operator_not_equals reduce using rule 10 (TYPE -> type_type .)
    operator_smallest reduce using rule 10 (TYPE -> type_type .)
    operator_greatest reduce using rule 10 (TYPE -> type_type .)
    operator_goodname reduce using rule 10 (TYPE -> type_type .)
    [               reduce using rule 10 (TYPE -> type_type .)
    operator_scan   reduce using rule 10 (TYPE -> type_type .)
    operator_reduc  reduce using rule 10 (TYPE -> type_type .)
    operator_bitnot reduce using rule 10 (TYPE -> type_type .)
    operator_not    reduce using rule 10 (TYPE -> type_type .)
    operator_inner  reduce using rule 10 (TYPE -> type_type .)
    operator_reverse reduce using rule 10 (TYPE -> type_type .)
    operator_sorted_incr reduce using rule 10 (TYPE -> type_type .)
    operator_sorted_decr reduce using rule 10 (TYPE -> type_type .)
    operator_s_combinator reduce using rule 10 (TYPE -> type_type .)
    operator_s_combinator_2 reduce using rule 10 (TYPE -> type_type .)
    operator_goodname2 reduce using rule 10 (TYPE -> type_type .)
    NEWLINE         reduce using rule 10 (TYPE -> type_type .)
    $end            reduce using rule 10 (TYPE -> type_type .)
    }               reduce using rule 10 (TYPE -> type_type .)
    )               reduce using rule 10 (TYPE -> type_type .)
    FLOAT           reduce using rule 10 (TYPE -> type_type .)
    NUM             reduce using rule 10 (TYPE -> type_type .)
    STRING_3SQ      reduce using rule 10 (TYPE -> type_type .)
    STRING_3DQ      reduce using rule 10 (TYPE -> type_type .)
    STRING_SQ       reduce using rule 10 (TYPE -> type_type .)
    STRING_DQ       reduce using rule 10 (TYPE -> type_type .)
    true            reduce using rule 10 (TYPE -> type_type .)
    Null            reduce using rule 10 (TYPE -> type_type .)
    false           reduce using rule 10 (TYPE -> type_type .)
    type_type       reduce using rule 10 (TYPE -> type_type .)
    type_num        reduce using rule 10 (TYPE -> type_type .)
    type_bool       reduce using rule 10 (TYPE -> type_type .)
    type_any        reduce using rule 10 (TYPE -> type_type .)
    type_u64        reduce using rule 10 (TYPE -> type_type .)
    type_u32        reduce using rule 10 (TYPE -> type_type .)
    type_u16        reduce using rule 10 (TYPE -> type_type .)
    type_u8         reduce using rule 10 (TYPE -> type_type .)
    type_i64        reduce using rule 10 (TYPE -> type_type .)
    type_i32        reduce using rule 10 (TYPE -> type_type .)
    type_i16        reduce using rule 10 (TYPE -> type_type .)
    type_i8         reduce using rule 10 (TYPE -> type_type .)
    type_f32        reduce using rule 10 (TYPE -> type_type .)
    type_f64        reduce using rule 10 (TYPE -> type_type .)
    type_str        reduce using rule 10 (TYPE -> type_type .)
    type_list       reduce using rule 10 (TYPE -> type_type .)
    type_tuple      reduce using rule 10 (TYPE -> type_type .)
    type_array      reduce using rule 10 (TYPE -> type_type .)
    type_vector     reduce using rule 10 (TYPE -> type_type .)
    type_dict       reduce using rule 10 (TYPE -> type_type .)
    type_generator  reduce using rule 10 (TYPE -> type_type .)
    type_linked_list reduce using rule 10 (TYPE -> type_type .)
    type_doubly_linked_list reduce using rule 10 (TYPE -> type_type .)
    type_deque      reduce using rule 10 (TYPE -> type_type .)
    type_heap       reduce using rule 10 (TYPE -> type_type .)
    type_fibonacci_heap reduce using rule 10 (TYPE -> type_type .)
    type_tree       reduce using rule 10 (TYPE -> type_type .)
    type_trie       reduce using rule 10 (TYPE -> type_type .)
    type_stack      reduce using rule 10 (TYPE -> type_type .)
    type_queue      reduce using rule 10 (TYPE -> type_type .)
    type_binary_search_tree reduce using rule 10 (TYPE -> type_type .)
    type_bitset     reduce using rule 10 (TYPE -> type_type .)
    type_set        reduce using rule 10 (TYPE -> type_type .)
    type_map        reduce using rule 10 (TYPE -> type_type .)
    type_range      reduce using rule 10 (TYPE -> type_type .)
    type_bad_struct reduce using rule 10 (TYPE -> type_type .)
    type_bad_struct2 reduce using rule 10 (TYPE -> type_type .)
    lambda          reduce using rule 10 (TYPE -> type_type .)
    {               reduce using rule 10 (TYPE -> type_type .)
    ]               reduce using rule 10 (TYPE -> type_type .)
    :               reduce using rule 10 (TYPE -> type_type .)
    ,               reduce using rule 10 (TYPE -> type_type .)

  ! (               [ reduce using rule 10 (TYPE -> type_type .) ]


state 93

    (149) return_val -> type_num . ( arguments )
    (11) TYPE -> type_num .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 212
    VAR             reduce using rule 11 (TYPE -> type_num .)
    operator_add    reduce using rule 11 (TYPE -> type_num .)
    operator_sub    reduce using rule 11 (TYPE -> type_num .)
    operator_mul    reduce using rule 11 (TYPE -> type_num .)
    operator_div    reduce using rule 11 (TYPE -> type_num .)
    operator_trudiv reduce using rule 11 (TYPE -> type_num .)
    operator_pow    reduce using rule 11 (TYPE -> type_num .)
    operator_join   reduce using rule 11 (TYPE -> type_num .)
    operator_split  reduce using rule 11 (TYPE -> type_num .)
    operator_bitand reduce using rule 11 (TYPE -> type_num .)
    operator_bitor  reduce using rule 11 (TYPE -> type_num .)
    operator_bitxor reduce using rule 11 (TYPE -> type_num .)
    operator_bitshiftleft reduce using rule 11 (TYPE -> type_num .)
    operator_bitshiftright reduce using rule 11 (TYPE -> type_num .)
    operator_and    reduce using rule 11 (TYPE -> type_num .)
    operator_or     reduce using rule 11 (TYPE -> type_num .)
    operator_xor    reduce using rule 11 (TYPE -> type_num .)
    operator_contains reduce using rule 11 (TYPE -> type_num .)
    operator_incr   reduce using rule 11 (TYPE -> type_num .)
    operator_decr   reduce using rule 11 (TYPE -> type_num .)
    operator_outer  reduce using rule 11 (TYPE -> type_num .)
    operator_rotate reduce using rule 11 (TYPE -> type_num .)
    operator_apply  reduce using rule 11 (TYPE -> type_num .)
    operator_compose reduce using rule 11 (TYPE -> type_num .)
    operator_over   reduce using rule 11 (TYPE -> type_num .)
    operator_map    reduce using rule 11 (TYPE -> type_num .)
    operator_less_than reduce using rule 11 (TYPE -> type_num .)
    operator_less_than_equals reduce using rule 11 (TYPE -> type_num .)
    operator_greater_than reduce using rule 11 (TYPE -> type_num .)
    operator_greater_than_equals reduce using rule 11 (TYPE -> type_num .)
    operator_equals reduce using rule 11 (TYPE -> type_num .)
    operator_not_equals reduce using rule 11 (TYPE -> type_num .)
    operator_smallest reduce using rule 11 (TYPE -> type_num .)
    operator_greatest reduce using rule 11 (TYPE -> type_num .)
    operator_goodname reduce using rule 11 (TYPE -> type_num .)
    [               reduce using rule 11 (TYPE -> type_num .)
    operator_scan   reduce using rule 11 (TYPE -> type_num .)
    operator_reduc  reduce using rule 11 (TYPE -> type_num .)
    operator_bitnot reduce using rule 11 (TYPE -> type_num .)
    operator_not    reduce using rule 11 (TYPE -> type_num .)
    operator_inner  reduce using rule 11 (TYPE -> type_num .)
    operator_reverse reduce using rule 11 (TYPE -> type_num .)
    operator_sorted_incr reduce using rule 11 (TYPE -> type_num .)
    operator_sorted_decr reduce using rule 11 (TYPE -> type_num .)
    operator_s_combinator reduce using rule 11 (TYPE -> type_num .)
    operator_s_combinator_2 reduce using rule 11 (TYPE -> type_num .)
    operator_goodname2 reduce using rule 11 (TYPE -> type_num .)
    NEWLINE         reduce using rule 11 (TYPE -> type_num .)
    $end            reduce using rule 11 (TYPE -> type_num .)
    }               reduce using rule 11 (TYPE -> type_num .)
    )               reduce using rule 11 (TYPE -> type_num .)
    FLOAT           reduce using rule 11 (TYPE -> type_num .)
    NUM             reduce using rule 11 (TYPE -> type_num .)
    STRING_3SQ      reduce using rule 11 (TYPE -> type_num .)
    STRING_3DQ      reduce using rule 11 (TYPE -> type_num .)
    STRING_SQ       reduce using rule 11 (TYPE -> type_num .)
    STRING_DQ       reduce using rule 11 (TYPE -> type_num .)
    true            reduce using rule 11 (TYPE -> type_num .)
    Null            reduce using rule 11 (TYPE -> type_num .)
    false           reduce using rule 11 (TYPE -> type_num .)
    type_type       reduce using rule 11 (TYPE -> type_num .)
    type_num        reduce using rule 11 (TYPE -> type_num .)
    type_bool       reduce using rule 11 (TYPE -> type_num .)
    type_any        reduce using rule 11 (TYPE -> type_num .)
    type_u64        reduce using rule 11 (TYPE -> type_num .)
    type_u32        reduce using rule 11 (TYPE -> type_num .)
    type_u16        reduce using rule 11 (TYPE -> type_num .)
    type_u8         reduce using rule 11 (TYPE -> type_num .)
    type_i64        reduce using rule 11 (TYPE -> type_num .)
    type_i32        reduce using rule 11 (TYPE -> type_num .)
    type_i16        reduce using rule 11 (TYPE -> type_num .)
    type_i8         reduce using rule 11 (TYPE -> type_num .)
    type_f32        reduce using rule 11 (TYPE -> type_num .)
    type_f64        reduce using rule 11 (TYPE -> type_num .)
    type_str        reduce using rule 11 (TYPE -> type_num .)
    type_list       reduce using rule 11 (TYPE -> type_num .)
    type_tuple      reduce using rule 11 (TYPE -> type_num .)
    type_array      reduce using rule 11 (TYPE -> type_num .)
    type_vector     reduce using rule 11 (TYPE -> type_num .)
    type_dict       reduce using rule 11 (TYPE -> type_num .)
    type_generator  reduce using rule 11 (TYPE -> type_num .)
    type_linked_list reduce using rule 11 (TYPE -> type_num .)
    type_doubly_linked_list reduce using rule 11 (TYPE -> type_num .)
    type_deque      reduce using rule 11 (TYPE -> type_num .)
    type_heap       reduce using rule 11 (TYPE -> type_num .)
    type_fibonacci_heap reduce using rule 11 (TYPE -> type_num .)
    type_tree       reduce using rule 11 (TYPE -> type_num .)
    type_trie       reduce using rule 11 (TYPE -> type_num .)
    type_stack      reduce using rule 11 (TYPE -> type_num .)
    type_queue      reduce using rule 11 (TYPE -> type_num .)
    type_binary_search_tree reduce using rule 11 (TYPE -> type_num .)
    type_bitset     reduce using rule 11 (TYPE -> type_num .)
    type_set        reduce using rule 11 (TYPE -> type_num .)
    type_map        reduce using rule 11 (TYPE -> type_num .)
    type_range      reduce using rule 11 (TYPE -> type_num .)
    type_bad_struct reduce using rule 11 (TYPE -> type_num .)
    type_bad_struct2 reduce using rule 11 (TYPE -> type_num .)
    lambda          reduce using rule 11 (TYPE -> type_num .)
    {               reduce using rule 11 (TYPE -> type_num .)
    ]               reduce using rule 11 (TYPE -> type_num .)
    :               reduce using rule 11 (TYPE -> type_num .)
    ,               reduce using rule 11 (TYPE -> type_num .)

  ! (               [ reduce using rule 11 (TYPE -> type_num .) ]


state 94

    (150) return_val -> type_bool . ( arguments )
    (12) TYPE -> type_bool .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 213
    VAR             reduce using rule 12 (TYPE -> type_bool .)
    operator_add    reduce using rule 12 (TYPE -> type_bool .)
    operator_sub    reduce using rule 12 (TYPE -> type_bool .)
    operator_mul    reduce using rule 12 (TYPE -> type_bool .)
    operator_div    reduce using rule 12 (TYPE -> type_bool .)
    operator_trudiv reduce using rule 12 (TYPE -> type_bool .)
    operator_pow    reduce using rule 12 (TYPE -> type_bool .)
    operator_join   reduce using rule 12 (TYPE -> type_bool .)
    operator_split  reduce using rule 12 (TYPE -> type_bool .)
    operator_bitand reduce using rule 12 (TYPE -> type_bool .)
    operator_bitor  reduce using rule 12 (TYPE -> type_bool .)
    operator_bitxor reduce using rule 12 (TYPE -> type_bool .)
    operator_bitshiftleft reduce using rule 12 (TYPE -> type_bool .)
    operator_bitshiftright reduce using rule 12 (TYPE -> type_bool .)
    operator_and    reduce using rule 12 (TYPE -> type_bool .)
    operator_or     reduce using rule 12 (TYPE -> type_bool .)
    operator_xor    reduce using rule 12 (TYPE -> type_bool .)
    operator_contains reduce using rule 12 (TYPE -> type_bool .)
    operator_incr   reduce using rule 12 (TYPE -> type_bool .)
    operator_decr   reduce using rule 12 (TYPE -> type_bool .)
    operator_outer  reduce using rule 12 (TYPE -> type_bool .)
    operator_rotate reduce using rule 12 (TYPE -> type_bool .)
    operator_apply  reduce using rule 12 (TYPE -> type_bool .)
    operator_compose reduce using rule 12 (TYPE -> type_bool .)
    operator_over   reduce using rule 12 (TYPE -> type_bool .)
    operator_map    reduce using rule 12 (TYPE -> type_bool .)
    operator_less_than reduce using rule 12 (TYPE -> type_bool .)
    operator_less_than_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_greater_than reduce using rule 12 (TYPE -> type_bool .)
    operator_greater_than_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_not_equals reduce using rule 12 (TYPE -> type_bool .)
    operator_smallest reduce using rule 12 (TYPE -> type_bool .)
    operator_greatest reduce using rule 12 (TYPE -> type_bool .)
    operator_goodname reduce using rule 12 (TYPE -> type_bool .)
    [               reduce using rule 12 (TYPE -> type_bool .)
    operator_scan   reduce using rule 12 (TYPE -> type_bool .)
    operator_reduc  reduce using rule 12 (TYPE -> type_bool .)
    operator_bitnot reduce using rule 12 (TYPE -> type_bool .)
    operator_not    reduce using rule 12 (TYPE -> type_bool .)
    operator_inner  reduce using rule 12 (TYPE -> type_bool .)
    operator_reverse reduce using rule 12 (TYPE -> type_bool .)
    operator_sorted_incr reduce using rule 12 (TYPE -> type_bool .)
    operator_sorted_decr reduce using rule 12 (TYPE -> type_bool .)
    operator_s_combinator reduce using rule 12 (TYPE -> type_bool .)
    operator_s_combinator_2 reduce using rule 12 (TYPE -> type_bool .)
    operator_goodname2 reduce using rule 12 (TYPE -> type_bool .)
    NEWLINE         reduce using rule 12 (TYPE -> type_bool .)
    $end            reduce using rule 12 (TYPE -> type_bool .)
    }               reduce using rule 12 (TYPE -> type_bool .)
    )               reduce using rule 12 (TYPE -> type_bool .)
    FLOAT           reduce using rule 12 (TYPE -> type_bool .)
    NUM             reduce using rule 12 (TYPE -> type_bool .)
    STRING_3SQ      reduce using rule 12 (TYPE -> type_bool .)
    STRING_3DQ      reduce using rule 12 (TYPE -> type_bool .)
    STRING_SQ       reduce using rule 12 (TYPE -> type_bool .)
    STRING_DQ       reduce using rule 12 (TYPE -> type_bool .)
    true            reduce using rule 12 (TYPE -> type_bool .)
    Null            reduce using rule 12 (TYPE -> type_bool .)
    false           reduce using rule 12 (TYPE -> type_bool .)
    type_type       reduce using rule 12 (TYPE -> type_bool .)
    type_num        reduce using rule 12 (TYPE -> type_bool .)
    type_bool       reduce using rule 12 (TYPE -> type_bool .)
    type_any        reduce using rule 12 (TYPE -> type_bool .)
    type_u64        reduce using rule 12 (TYPE -> type_bool .)
    type_u32        reduce using rule 12 (TYPE -> type_bool .)
    type_u16        reduce using rule 12 (TYPE -> type_bool .)
    type_u8         reduce using rule 12 (TYPE -> type_bool .)
    type_i64        reduce using rule 12 (TYPE -> type_bool .)
    type_i32        reduce using rule 12 (TYPE -> type_bool .)
    type_i16        reduce using rule 12 (TYPE -> type_bool .)
    type_i8         reduce using rule 12 (TYPE -> type_bool .)
    type_f32        reduce using rule 12 (TYPE -> type_bool .)
    type_f64        reduce using rule 12 (TYPE -> type_bool .)
    type_str        reduce using rule 12 (TYPE -> type_bool .)
    type_list       reduce using rule 12 (TYPE -> type_bool .)
    type_tuple      reduce using rule 12 (TYPE -> type_bool .)
    type_array      reduce using rule 12 (TYPE -> type_bool .)
    type_vector     reduce using rule 12 (TYPE -> type_bool .)
    type_dict       reduce using rule 12 (TYPE -> type_bool .)
    type_generator  reduce using rule 12 (TYPE -> type_bool .)
    type_linked_list reduce using rule 12 (TYPE -> type_bool .)
    type_doubly_linked_list reduce using rule 12 (TYPE -> type_bool .)
    type_deque      reduce using rule 12 (TYPE -> type_bool .)
    type_heap       reduce using rule 12 (TYPE -> type_bool .)
    type_fibonacci_heap reduce using rule 12 (TYPE -> type_bool .)
    type_tree       reduce using rule 12 (TYPE -> type_bool .)
    type_trie       reduce using rule 12 (TYPE -> type_bool .)
    type_stack      reduce using rule 12 (TYPE -> type_bool .)
    type_queue      reduce using rule 12 (TYPE -> type_bool .)
    type_binary_search_tree reduce using rule 12 (TYPE -> type_bool .)
    type_bitset     reduce using rule 12 (TYPE -> type_bool .)
    type_set        reduce using rule 12 (TYPE -> type_bool .)
    type_map        reduce using rule 12 (TYPE -> type_bool .)
    type_range      reduce using rule 12 (TYPE -> type_bool .)
    type_bad_struct reduce using rule 12 (TYPE -> type_bool .)
    type_bad_struct2 reduce using rule 12 (TYPE -> type_bool .)
    lambda          reduce using rule 12 (TYPE -> type_bool .)
    {               reduce using rule 12 (TYPE -> type_bool .)
    ]               reduce using rule 12 (TYPE -> type_bool .)
    :               reduce using rule 12 (TYPE -> type_bool .)
    ,               reduce using rule 12 (TYPE -> type_bool .)

  ! (               [ reduce using rule 12 (TYPE -> type_bool .) ]


state 95

    (151) return_val -> type_any . ( arguments )
    (13) TYPE -> type_any .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 214
    VAR             reduce using rule 13 (TYPE -> type_any .)
    operator_add    reduce using rule 13 (TYPE -> type_any .)
    operator_sub    reduce using rule 13 (TYPE -> type_any .)
    operator_mul    reduce using rule 13 (TYPE -> type_any .)
    operator_div    reduce using rule 13 (TYPE -> type_any .)
    operator_trudiv reduce using rule 13 (TYPE -> type_any .)
    operator_pow    reduce using rule 13 (TYPE -> type_any .)
    operator_join   reduce using rule 13 (TYPE -> type_any .)
    operator_split  reduce using rule 13 (TYPE -> type_any .)
    operator_bitand reduce using rule 13 (TYPE -> type_any .)
    operator_bitor  reduce using rule 13 (TYPE -> type_any .)
    operator_bitxor reduce using rule 13 (TYPE -> type_any .)
    operator_bitshiftleft reduce using rule 13 (TYPE -> type_any .)
    operator_bitshiftright reduce using rule 13 (TYPE -> type_any .)
    operator_and    reduce using rule 13 (TYPE -> type_any .)
    operator_or     reduce using rule 13 (TYPE -> type_any .)
    operator_xor    reduce using rule 13 (TYPE -> type_any .)
    operator_contains reduce using rule 13 (TYPE -> type_any .)
    operator_incr   reduce using rule 13 (TYPE -> type_any .)
    operator_decr   reduce using rule 13 (TYPE -> type_any .)
    operator_outer  reduce using rule 13 (TYPE -> type_any .)
    operator_rotate reduce using rule 13 (TYPE -> type_any .)
    operator_apply  reduce using rule 13 (TYPE -> type_any .)
    operator_compose reduce using rule 13 (TYPE -> type_any .)
    operator_over   reduce using rule 13 (TYPE -> type_any .)
    operator_map    reduce using rule 13 (TYPE -> type_any .)
    operator_less_than reduce using rule 13 (TYPE -> type_any .)
    operator_less_than_equals reduce using rule 13 (TYPE -> type_any .)
    operator_greater_than reduce using rule 13 (TYPE -> type_any .)
    operator_greater_than_equals reduce using rule 13 (TYPE -> type_any .)
    operator_equals reduce using rule 13 (TYPE -> type_any .)
    operator_not_equals reduce using rule 13 (TYPE -> type_any .)
    operator_smallest reduce using rule 13 (TYPE -> type_any .)
    operator_greatest reduce using rule 13 (TYPE -> type_any .)
    operator_goodname reduce using rule 13 (TYPE -> type_any .)
    [               reduce using rule 13 (TYPE -> type_any .)
    operator_scan   reduce using rule 13 (TYPE -> type_any .)
    operator_reduc  reduce using rule 13 (TYPE -> type_any .)
    operator_bitnot reduce using rule 13 (TYPE -> type_any .)
    operator_not    reduce using rule 13 (TYPE -> type_any .)
    operator_inner  reduce using rule 13 (TYPE -> type_any .)
    operator_reverse reduce using rule 13 (TYPE -> type_any .)
    operator_sorted_incr reduce using rule 13 (TYPE -> type_any .)
    operator_sorted_decr reduce using rule 13 (TYPE -> type_any .)
    operator_s_combinator reduce using rule 13 (TYPE -> type_any .)
    operator_s_combinator_2 reduce using rule 13 (TYPE -> type_any .)
    operator_goodname2 reduce using rule 13 (TYPE -> type_any .)
    NEWLINE         reduce using rule 13 (TYPE -> type_any .)
    $end            reduce using rule 13 (TYPE -> type_any .)
    }               reduce using rule 13 (TYPE -> type_any .)
    )               reduce using rule 13 (TYPE -> type_any .)
    FLOAT           reduce using rule 13 (TYPE -> type_any .)
    NUM             reduce using rule 13 (TYPE -> type_any .)
    STRING_3SQ      reduce using rule 13 (TYPE -> type_any .)
    STRING_3DQ      reduce using rule 13 (TYPE -> type_any .)
    STRING_SQ       reduce using rule 13 (TYPE -> type_any .)
    STRING_DQ       reduce using rule 13 (TYPE -> type_any .)
    true            reduce using rule 13 (TYPE -> type_any .)
    Null            reduce using rule 13 (TYPE -> type_any .)
    false           reduce using rule 13 (TYPE -> type_any .)
    type_type       reduce using rule 13 (TYPE -> type_any .)
    type_num        reduce using rule 13 (TYPE -> type_any .)
    type_bool       reduce using rule 13 (TYPE -> type_any .)
    type_any        reduce using rule 13 (TYPE -> type_any .)
    type_u64        reduce using rule 13 (TYPE -> type_any .)
    type_u32        reduce using rule 13 (TYPE -> type_any .)
    type_u16        reduce using rule 13 (TYPE -> type_any .)
    type_u8         reduce using rule 13 (TYPE -> type_any .)
    type_i64        reduce using rule 13 (TYPE -> type_any .)
    type_i32        reduce using rule 13 (TYPE -> type_any .)
    type_i16        reduce using rule 13 (TYPE -> type_any .)
    type_i8         reduce using rule 13 (TYPE -> type_any .)
    type_f32        reduce using rule 13 (TYPE -> type_any .)
    type_f64        reduce using rule 13 (TYPE -> type_any .)
    type_str        reduce using rule 13 (TYPE -> type_any .)
    type_list       reduce using rule 13 (TYPE -> type_any .)
    type_tuple      reduce using rule 13 (TYPE -> type_any .)
    type_array      reduce using rule 13 (TYPE -> type_any .)
    type_vector     reduce using rule 13 (TYPE -> type_any .)
    type_dict       reduce using rule 13 (TYPE -> type_any .)
    type_generator  reduce using rule 13 (TYPE -> type_any .)
    type_linked_list reduce using rule 13 (TYPE -> type_any .)
    type_doubly_linked_list reduce using rule 13 (TYPE -> type_any .)
    type_deque      reduce using rule 13 (TYPE -> type_any .)
    type_heap       reduce using rule 13 (TYPE -> type_any .)
    type_fibonacci_heap reduce using rule 13 (TYPE -> type_any .)
    type_tree       reduce using rule 13 (TYPE -> type_any .)
    type_trie       reduce using rule 13 (TYPE -> type_any .)
    type_stack      reduce using rule 13 (TYPE -> type_any .)
    type_queue      reduce using rule 13 (TYPE -> type_any .)
    type_binary_search_tree reduce using rule 13 (TYPE -> type_any .)
    type_bitset     reduce using rule 13 (TYPE -> type_any .)
    type_set        reduce using rule 13 (TYPE -> type_any .)
    type_map        reduce using rule 13 (TYPE -> type_any .)
    type_range      reduce using rule 13 (TYPE -> type_any .)
    type_bad_struct reduce using rule 13 (TYPE -> type_any .)
    type_bad_struct2 reduce using rule 13 (TYPE -> type_any .)
    lambda          reduce using rule 13 (TYPE -> type_any .)
    {               reduce using rule 13 (TYPE -> type_any .)
    ]               reduce using rule 13 (TYPE -> type_any .)
    :               reduce using rule 13 (TYPE -> type_any .)
    ,               reduce using rule 13 (TYPE -> type_any .)

  ! (               [ reduce using rule 13 (TYPE -> type_any .) ]


state 96

    (152) return_val -> type_u64 . ( arguments )
    (14) TYPE -> type_u64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 215
    VAR             reduce using rule 14 (TYPE -> type_u64 .)
    operator_add    reduce using rule 14 (TYPE -> type_u64 .)
    operator_sub    reduce using rule 14 (TYPE -> type_u64 .)
    operator_mul    reduce using rule 14 (TYPE -> type_u64 .)
    operator_div    reduce using rule 14 (TYPE -> type_u64 .)
    operator_trudiv reduce using rule 14 (TYPE -> type_u64 .)
    operator_pow    reduce using rule 14 (TYPE -> type_u64 .)
    operator_join   reduce using rule 14 (TYPE -> type_u64 .)
    operator_split  reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitand reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitor  reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitxor reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitshiftleft reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitshiftright reduce using rule 14 (TYPE -> type_u64 .)
    operator_and    reduce using rule 14 (TYPE -> type_u64 .)
    operator_or     reduce using rule 14 (TYPE -> type_u64 .)
    operator_xor    reduce using rule 14 (TYPE -> type_u64 .)
    operator_contains reduce using rule 14 (TYPE -> type_u64 .)
    operator_incr   reduce using rule 14 (TYPE -> type_u64 .)
    operator_decr   reduce using rule 14 (TYPE -> type_u64 .)
    operator_outer  reduce using rule 14 (TYPE -> type_u64 .)
    operator_rotate reduce using rule 14 (TYPE -> type_u64 .)
    operator_apply  reduce using rule 14 (TYPE -> type_u64 .)
    operator_compose reduce using rule 14 (TYPE -> type_u64 .)
    operator_over   reduce using rule 14 (TYPE -> type_u64 .)
    operator_map    reduce using rule 14 (TYPE -> type_u64 .)
    operator_less_than reduce using rule 14 (TYPE -> type_u64 .)
    operator_less_than_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_greater_than reduce using rule 14 (TYPE -> type_u64 .)
    operator_greater_than_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_not_equals reduce using rule 14 (TYPE -> type_u64 .)
    operator_smallest reduce using rule 14 (TYPE -> type_u64 .)
    operator_greatest reduce using rule 14 (TYPE -> type_u64 .)
    operator_goodname reduce using rule 14 (TYPE -> type_u64 .)
    [               reduce using rule 14 (TYPE -> type_u64 .)
    operator_scan   reduce using rule 14 (TYPE -> type_u64 .)
    operator_reduc  reduce using rule 14 (TYPE -> type_u64 .)
    operator_bitnot reduce using rule 14 (TYPE -> type_u64 .)
    operator_not    reduce using rule 14 (TYPE -> type_u64 .)
    operator_inner  reduce using rule 14 (TYPE -> type_u64 .)
    operator_reverse reduce using rule 14 (TYPE -> type_u64 .)
    operator_sorted_incr reduce using rule 14 (TYPE -> type_u64 .)
    operator_sorted_decr reduce using rule 14 (TYPE -> type_u64 .)
    operator_s_combinator reduce using rule 14 (TYPE -> type_u64 .)
    operator_s_combinator_2 reduce using rule 14 (TYPE -> type_u64 .)
    operator_goodname2 reduce using rule 14 (TYPE -> type_u64 .)
    NEWLINE         reduce using rule 14 (TYPE -> type_u64 .)
    $end            reduce using rule 14 (TYPE -> type_u64 .)
    }               reduce using rule 14 (TYPE -> type_u64 .)
    )               reduce using rule 14 (TYPE -> type_u64 .)
    FLOAT           reduce using rule 14 (TYPE -> type_u64 .)
    NUM             reduce using rule 14 (TYPE -> type_u64 .)
    STRING_3SQ      reduce using rule 14 (TYPE -> type_u64 .)
    STRING_3DQ      reduce using rule 14 (TYPE -> type_u64 .)
    STRING_SQ       reduce using rule 14 (TYPE -> type_u64 .)
    STRING_DQ       reduce using rule 14 (TYPE -> type_u64 .)
    true            reduce using rule 14 (TYPE -> type_u64 .)
    Null            reduce using rule 14 (TYPE -> type_u64 .)
    false           reduce using rule 14 (TYPE -> type_u64 .)
    type_type       reduce using rule 14 (TYPE -> type_u64 .)
    type_num        reduce using rule 14 (TYPE -> type_u64 .)
    type_bool       reduce using rule 14 (TYPE -> type_u64 .)
    type_any        reduce using rule 14 (TYPE -> type_u64 .)
    type_u64        reduce using rule 14 (TYPE -> type_u64 .)
    type_u32        reduce using rule 14 (TYPE -> type_u64 .)
    type_u16        reduce using rule 14 (TYPE -> type_u64 .)
    type_u8         reduce using rule 14 (TYPE -> type_u64 .)
    type_i64        reduce using rule 14 (TYPE -> type_u64 .)
    type_i32        reduce using rule 14 (TYPE -> type_u64 .)
    type_i16        reduce using rule 14 (TYPE -> type_u64 .)
    type_i8         reduce using rule 14 (TYPE -> type_u64 .)
    type_f32        reduce using rule 14 (TYPE -> type_u64 .)
    type_f64        reduce using rule 14 (TYPE -> type_u64 .)
    type_str        reduce using rule 14 (TYPE -> type_u64 .)
    type_list       reduce using rule 14 (TYPE -> type_u64 .)
    type_tuple      reduce using rule 14 (TYPE -> type_u64 .)
    type_array      reduce using rule 14 (TYPE -> type_u64 .)
    type_vector     reduce using rule 14 (TYPE -> type_u64 .)
    type_dict       reduce using rule 14 (TYPE -> type_u64 .)
    type_generator  reduce using rule 14 (TYPE -> type_u64 .)
    type_linked_list reduce using rule 14 (TYPE -> type_u64 .)
    type_doubly_linked_list reduce using rule 14 (TYPE -> type_u64 .)
    type_deque      reduce using rule 14 (TYPE -> type_u64 .)
    type_heap       reduce using rule 14 (TYPE -> type_u64 .)
    type_fibonacci_heap reduce using rule 14 (TYPE -> type_u64 .)
    type_tree       reduce using rule 14 (TYPE -> type_u64 .)
    type_trie       reduce using rule 14 (TYPE -> type_u64 .)
    type_stack      reduce using rule 14 (TYPE -> type_u64 .)
    type_queue      reduce using rule 14 (TYPE -> type_u64 .)
    type_binary_search_tree reduce using rule 14 (TYPE -> type_u64 .)
    type_bitset     reduce using rule 14 (TYPE -> type_u64 .)
    type_set        reduce using rule 14 (TYPE -> type_u64 .)
    type_map        reduce using rule 14 (TYPE -> type_u64 .)
    type_range      reduce using rule 14 (TYPE -> type_u64 .)
    type_bad_struct reduce using rule 14 (TYPE -> type_u64 .)
    type_bad_struct2 reduce using rule 14 (TYPE -> type_u64 .)
    lambda          reduce using rule 14 (TYPE -> type_u64 .)
    {               reduce using rule 14 (TYPE -> type_u64 .)
    ]               reduce using rule 14 (TYPE -> type_u64 .)
    :               reduce using rule 14 (TYPE -> type_u64 .)
    ,               reduce using rule 14 (TYPE -> type_u64 .)

  ! (               [ reduce using rule 14 (TYPE -> type_u64 .) ]


state 97

    (153) return_val -> type_u32 . ( arguments )
    (15) TYPE -> type_u32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 216
    VAR             reduce using rule 15 (TYPE -> type_u32 .)
    operator_add    reduce using rule 15 (TYPE -> type_u32 .)
    operator_sub    reduce using rule 15 (TYPE -> type_u32 .)
    operator_mul    reduce using rule 15 (TYPE -> type_u32 .)
    operator_div    reduce using rule 15 (TYPE -> type_u32 .)
    operator_trudiv reduce using rule 15 (TYPE -> type_u32 .)
    operator_pow    reduce using rule 15 (TYPE -> type_u32 .)
    operator_join   reduce using rule 15 (TYPE -> type_u32 .)
    operator_split  reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitand reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitor  reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitxor reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitshiftleft reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitshiftright reduce using rule 15 (TYPE -> type_u32 .)
    operator_and    reduce using rule 15 (TYPE -> type_u32 .)
    operator_or     reduce using rule 15 (TYPE -> type_u32 .)
    operator_xor    reduce using rule 15 (TYPE -> type_u32 .)
    operator_contains reduce using rule 15 (TYPE -> type_u32 .)
    operator_incr   reduce using rule 15 (TYPE -> type_u32 .)
    operator_decr   reduce using rule 15 (TYPE -> type_u32 .)
    operator_outer  reduce using rule 15 (TYPE -> type_u32 .)
    operator_rotate reduce using rule 15 (TYPE -> type_u32 .)
    operator_apply  reduce using rule 15 (TYPE -> type_u32 .)
    operator_compose reduce using rule 15 (TYPE -> type_u32 .)
    operator_over   reduce using rule 15 (TYPE -> type_u32 .)
    operator_map    reduce using rule 15 (TYPE -> type_u32 .)
    operator_less_than reduce using rule 15 (TYPE -> type_u32 .)
    operator_less_than_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_greater_than reduce using rule 15 (TYPE -> type_u32 .)
    operator_greater_than_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_not_equals reduce using rule 15 (TYPE -> type_u32 .)
    operator_smallest reduce using rule 15 (TYPE -> type_u32 .)
    operator_greatest reduce using rule 15 (TYPE -> type_u32 .)
    operator_goodname reduce using rule 15 (TYPE -> type_u32 .)
    [               reduce using rule 15 (TYPE -> type_u32 .)
    operator_scan   reduce using rule 15 (TYPE -> type_u32 .)
    operator_reduc  reduce using rule 15 (TYPE -> type_u32 .)
    operator_bitnot reduce using rule 15 (TYPE -> type_u32 .)
    operator_not    reduce using rule 15 (TYPE -> type_u32 .)
    operator_inner  reduce using rule 15 (TYPE -> type_u32 .)
    operator_reverse reduce using rule 15 (TYPE -> type_u32 .)
    operator_sorted_incr reduce using rule 15 (TYPE -> type_u32 .)
    operator_sorted_decr reduce using rule 15 (TYPE -> type_u32 .)
    operator_s_combinator reduce using rule 15 (TYPE -> type_u32 .)
    operator_s_combinator_2 reduce using rule 15 (TYPE -> type_u32 .)
    operator_goodname2 reduce using rule 15 (TYPE -> type_u32 .)
    NEWLINE         reduce using rule 15 (TYPE -> type_u32 .)
    $end            reduce using rule 15 (TYPE -> type_u32 .)
    }               reduce using rule 15 (TYPE -> type_u32 .)
    )               reduce using rule 15 (TYPE -> type_u32 .)
    FLOAT           reduce using rule 15 (TYPE -> type_u32 .)
    NUM             reduce using rule 15 (TYPE -> type_u32 .)
    STRING_3SQ      reduce using rule 15 (TYPE -> type_u32 .)
    STRING_3DQ      reduce using rule 15 (TYPE -> type_u32 .)
    STRING_SQ       reduce using rule 15 (TYPE -> type_u32 .)
    STRING_DQ       reduce using rule 15 (TYPE -> type_u32 .)
    true            reduce using rule 15 (TYPE -> type_u32 .)
    Null            reduce using rule 15 (TYPE -> type_u32 .)
    false           reduce using rule 15 (TYPE -> type_u32 .)
    type_type       reduce using rule 15 (TYPE -> type_u32 .)
    type_num        reduce using rule 15 (TYPE -> type_u32 .)
    type_bool       reduce using rule 15 (TYPE -> type_u32 .)
    type_any        reduce using rule 15 (TYPE -> type_u32 .)
    type_u64        reduce using rule 15 (TYPE -> type_u32 .)
    type_u32        reduce using rule 15 (TYPE -> type_u32 .)
    type_u16        reduce using rule 15 (TYPE -> type_u32 .)
    type_u8         reduce using rule 15 (TYPE -> type_u32 .)
    type_i64        reduce using rule 15 (TYPE -> type_u32 .)
    type_i32        reduce using rule 15 (TYPE -> type_u32 .)
    type_i16        reduce using rule 15 (TYPE -> type_u32 .)
    type_i8         reduce using rule 15 (TYPE -> type_u32 .)
    type_f32        reduce using rule 15 (TYPE -> type_u32 .)
    type_f64        reduce using rule 15 (TYPE -> type_u32 .)
    type_str        reduce using rule 15 (TYPE -> type_u32 .)
    type_list       reduce using rule 15 (TYPE -> type_u32 .)
    type_tuple      reduce using rule 15 (TYPE -> type_u32 .)
    type_array      reduce using rule 15 (TYPE -> type_u32 .)
    type_vector     reduce using rule 15 (TYPE -> type_u32 .)
    type_dict       reduce using rule 15 (TYPE -> type_u32 .)
    type_generator  reduce using rule 15 (TYPE -> type_u32 .)
    type_linked_list reduce using rule 15 (TYPE -> type_u32 .)
    type_doubly_linked_list reduce using rule 15 (TYPE -> type_u32 .)
    type_deque      reduce using rule 15 (TYPE -> type_u32 .)
    type_heap       reduce using rule 15 (TYPE -> type_u32 .)
    type_fibonacci_heap reduce using rule 15 (TYPE -> type_u32 .)
    type_tree       reduce using rule 15 (TYPE -> type_u32 .)
    type_trie       reduce using rule 15 (TYPE -> type_u32 .)
    type_stack      reduce using rule 15 (TYPE -> type_u32 .)
    type_queue      reduce using rule 15 (TYPE -> type_u32 .)
    type_binary_search_tree reduce using rule 15 (TYPE -> type_u32 .)
    type_bitset     reduce using rule 15 (TYPE -> type_u32 .)
    type_set        reduce using rule 15 (TYPE -> type_u32 .)
    type_map        reduce using rule 15 (TYPE -> type_u32 .)
    type_range      reduce using rule 15 (TYPE -> type_u32 .)
    type_bad_struct reduce using rule 15 (TYPE -> type_u32 .)
    type_bad_struct2 reduce using rule 15 (TYPE -> type_u32 .)
    lambda          reduce using rule 15 (TYPE -> type_u32 .)
    {               reduce using rule 15 (TYPE -> type_u32 .)
    ]               reduce using rule 15 (TYPE -> type_u32 .)
    :               reduce using rule 15 (TYPE -> type_u32 .)
    ,               reduce using rule 15 (TYPE -> type_u32 .)

  ! (               [ reduce using rule 15 (TYPE -> type_u32 .) ]


state 98

    (154) return_val -> type_u16 . ( arguments )
    (16) TYPE -> type_u16 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 217
    VAR             reduce using rule 16 (TYPE -> type_u16 .)
    operator_add    reduce using rule 16 (TYPE -> type_u16 .)
    operator_sub    reduce using rule 16 (TYPE -> type_u16 .)
    operator_mul    reduce using rule 16 (TYPE -> type_u16 .)
    operator_div    reduce using rule 16 (TYPE -> type_u16 .)
    operator_trudiv reduce using rule 16 (TYPE -> type_u16 .)
    operator_pow    reduce using rule 16 (TYPE -> type_u16 .)
    operator_join   reduce using rule 16 (TYPE -> type_u16 .)
    operator_split  reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitand reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitor  reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitxor reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitshiftleft reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitshiftright reduce using rule 16 (TYPE -> type_u16 .)
    operator_and    reduce using rule 16 (TYPE -> type_u16 .)
    operator_or     reduce using rule 16 (TYPE -> type_u16 .)
    operator_xor    reduce using rule 16 (TYPE -> type_u16 .)
    operator_contains reduce using rule 16 (TYPE -> type_u16 .)
    operator_incr   reduce using rule 16 (TYPE -> type_u16 .)
    operator_decr   reduce using rule 16 (TYPE -> type_u16 .)
    operator_outer  reduce using rule 16 (TYPE -> type_u16 .)
    operator_rotate reduce using rule 16 (TYPE -> type_u16 .)
    operator_apply  reduce using rule 16 (TYPE -> type_u16 .)
    operator_compose reduce using rule 16 (TYPE -> type_u16 .)
    operator_over   reduce using rule 16 (TYPE -> type_u16 .)
    operator_map    reduce using rule 16 (TYPE -> type_u16 .)
    operator_less_than reduce using rule 16 (TYPE -> type_u16 .)
    operator_less_than_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_greater_than reduce using rule 16 (TYPE -> type_u16 .)
    operator_greater_than_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_not_equals reduce using rule 16 (TYPE -> type_u16 .)
    operator_smallest reduce using rule 16 (TYPE -> type_u16 .)
    operator_greatest reduce using rule 16 (TYPE -> type_u16 .)
    operator_goodname reduce using rule 16 (TYPE -> type_u16 .)
    [               reduce using rule 16 (TYPE -> type_u16 .)
    operator_scan   reduce using rule 16 (TYPE -> type_u16 .)
    operator_reduc  reduce using rule 16 (TYPE -> type_u16 .)
    operator_bitnot reduce using rule 16 (TYPE -> type_u16 .)
    operator_not    reduce using rule 16 (TYPE -> type_u16 .)
    operator_inner  reduce using rule 16 (TYPE -> type_u16 .)
    operator_reverse reduce using rule 16 (TYPE -> type_u16 .)
    operator_sorted_incr reduce using rule 16 (TYPE -> type_u16 .)
    operator_sorted_decr reduce using rule 16 (TYPE -> type_u16 .)
    operator_s_combinator reduce using rule 16 (TYPE -> type_u16 .)
    operator_s_combinator_2 reduce using rule 16 (TYPE -> type_u16 .)
    operator_goodname2 reduce using rule 16 (TYPE -> type_u16 .)
    NEWLINE         reduce using rule 16 (TYPE -> type_u16 .)
    $end            reduce using rule 16 (TYPE -> type_u16 .)
    }               reduce using rule 16 (TYPE -> type_u16 .)
    )               reduce using rule 16 (TYPE -> type_u16 .)
    FLOAT           reduce using rule 16 (TYPE -> type_u16 .)
    NUM             reduce using rule 16 (TYPE -> type_u16 .)
    STRING_3SQ      reduce using rule 16 (TYPE -> type_u16 .)
    STRING_3DQ      reduce using rule 16 (TYPE -> type_u16 .)
    STRING_SQ       reduce using rule 16 (TYPE -> type_u16 .)
    STRING_DQ       reduce using rule 16 (TYPE -> type_u16 .)
    true            reduce using rule 16 (TYPE -> type_u16 .)
    Null            reduce using rule 16 (TYPE -> type_u16 .)
    false           reduce using rule 16 (TYPE -> type_u16 .)
    type_type       reduce using rule 16 (TYPE -> type_u16 .)
    type_num        reduce using rule 16 (TYPE -> type_u16 .)
    type_bool       reduce using rule 16 (TYPE -> type_u16 .)
    type_any        reduce using rule 16 (TYPE -> type_u16 .)
    type_u64        reduce using rule 16 (TYPE -> type_u16 .)
    type_u32        reduce using rule 16 (TYPE -> type_u16 .)
    type_u16        reduce using rule 16 (TYPE -> type_u16 .)
    type_u8         reduce using rule 16 (TYPE -> type_u16 .)
    type_i64        reduce using rule 16 (TYPE -> type_u16 .)
    type_i32        reduce using rule 16 (TYPE -> type_u16 .)
    type_i16        reduce using rule 16 (TYPE -> type_u16 .)
    type_i8         reduce using rule 16 (TYPE -> type_u16 .)
    type_f32        reduce using rule 16 (TYPE -> type_u16 .)
    type_f64        reduce using rule 16 (TYPE -> type_u16 .)
    type_str        reduce using rule 16 (TYPE -> type_u16 .)
    type_list       reduce using rule 16 (TYPE -> type_u16 .)
    type_tuple      reduce using rule 16 (TYPE -> type_u16 .)
    type_array      reduce using rule 16 (TYPE -> type_u16 .)
    type_vector     reduce using rule 16 (TYPE -> type_u16 .)
    type_dict       reduce using rule 16 (TYPE -> type_u16 .)
    type_generator  reduce using rule 16 (TYPE -> type_u16 .)
    type_linked_list reduce using rule 16 (TYPE -> type_u16 .)
    type_doubly_linked_list reduce using rule 16 (TYPE -> type_u16 .)
    type_deque      reduce using rule 16 (TYPE -> type_u16 .)
    type_heap       reduce using rule 16 (TYPE -> type_u16 .)
    type_fibonacci_heap reduce using rule 16 (TYPE -> type_u16 .)
    type_tree       reduce using rule 16 (TYPE -> type_u16 .)
    type_trie       reduce using rule 16 (TYPE -> type_u16 .)
    type_stack      reduce using rule 16 (TYPE -> type_u16 .)
    type_queue      reduce using rule 16 (TYPE -> type_u16 .)
    type_binary_search_tree reduce using rule 16 (TYPE -> type_u16 .)
    type_bitset     reduce using rule 16 (TYPE -> type_u16 .)
    type_set        reduce using rule 16 (TYPE -> type_u16 .)
    type_map        reduce using rule 16 (TYPE -> type_u16 .)
    type_range      reduce using rule 16 (TYPE -> type_u16 .)
    type_bad_struct reduce using rule 16 (TYPE -> type_u16 .)
    type_bad_struct2 reduce using rule 16 (TYPE -> type_u16 .)
    lambda          reduce using rule 16 (TYPE -> type_u16 .)
    {               reduce using rule 16 (TYPE -> type_u16 .)
    ]               reduce using rule 16 (TYPE -> type_u16 .)
    :               reduce using rule 16 (TYPE -> type_u16 .)
    ,               reduce using rule 16 (TYPE -> type_u16 .)

  ! (               [ reduce using rule 16 (TYPE -> type_u16 .) ]


state 99

    (155) return_val -> type_u8 . ( arguments )
    (17) TYPE -> type_u8 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 218
    VAR             reduce using rule 17 (TYPE -> type_u8 .)
    operator_add    reduce using rule 17 (TYPE -> type_u8 .)
    operator_sub    reduce using rule 17 (TYPE -> type_u8 .)
    operator_mul    reduce using rule 17 (TYPE -> type_u8 .)
    operator_div    reduce using rule 17 (TYPE -> type_u8 .)
    operator_trudiv reduce using rule 17 (TYPE -> type_u8 .)
    operator_pow    reduce using rule 17 (TYPE -> type_u8 .)
    operator_join   reduce using rule 17 (TYPE -> type_u8 .)
    operator_split  reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitand reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitor  reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitxor reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitshiftleft reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitshiftright reduce using rule 17 (TYPE -> type_u8 .)
    operator_and    reduce using rule 17 (TYPE -> type_u8 .)
    operator_or     reduce using rule 17 (TYPE -> type_u8 .)
    operator_xor    reduce using rule 17 (TYPE -> type_u8 .)
    operator_contains reduce using rule 17 (TYPE -> type_u8 .)
    operator_incr   reduce using rule 17 (TYPE -> type_u8 .)
    operator_decr   reduce using rule 17 (TYPE -> type_u8 .)
    operator_outer  reduce using rule 17 (TYPE -> type_u8 .)
    operator_rotate reduce using rule 17 (TYPE -> type_u8 .)
    operator_apply  reduce using rule 17 (TYPE -> type_u8 .)
    operator_compose reduce using rule 17 (TYPE -> type_u8 .)
    operator_over   reduce using rule 17 (TYPE -> type_u8 .)
    operator_map    reduce using rule 17 (TYPE -> type_u8 .)
    operator_less_than reduce using rule 17 (TYPE -> type_u8 .)
    operator_less_than_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_greater_than reduce using rule 17 (TYPE -> type_u8 .)
    operator_greater_than_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_not_equals reduce using rule 17 (TYPE -> type_u8 .)
    operator_smallest reduce using rule 17 (TYPE -> type_u8 .)
    operator_greatest reduce using rule 17 (TYPE -> type_u8 .)
    operator_goodname reduce using rule 17 (TYPE -> type_u8 .)
    [               reduce using rule 17 (TYPE -> type_u8 .)
    operator_scan   reduce using rule 17 (TYPE -> type_u8 .)
    operator_reduc  reduce using rule 17 (TYPE -> type_u8 .)
    operator_bitnot reduce using rule 17 (TYPE -> type_u8 .)
    operator_not    reduce using rule 17 (TYPE -> type_u8 .)
    operator_inner  reduce using rule 17 (TYPE -> type_u8 .)
    operator_reverse reduce using rule 17 (TYPE -> type_u8 .)
    operator_sorted_incr reduce using rule 17 (TYPE -> type_u8 .)
    operator_sorted_decr reduce using rule 17 (TYPE -> type_u8 .)
    operator_s_combinator reduce using rule 17 (TYPE -> type_u8 .)
    operator_s_combinator_2 reduce using rule 17 (TYPE -> type_u8 .)
    operator_goodname2 reduce using rule 17 (TYPE -> type_u8 .)
    NEWLINE         reduce using rule 17 (TYPE -> type_u8 .)
    $end            reduce using rule 17 (TYPE -> type_u8 .)
    }               reduce using rule 17 (TYPE -> type_u8 .)
    )               reduce using rule 17 (TYPE -> type_u8 .)
    FLOAT           reduce using rule 17 (TYPE -> type_u8 .)
    NUM             reduce using rule 17 (TYPE -> type_u8 .)
    STRING_3SQ      reduce using rule 17 (TYPE -> type_u8 .)
    STRING_3DQ      reduce using rule 17 (TYPE -> type_u8 .)
    STRING_SQ       reduce using rule 17 (TYPE -> type_u8 .)
    STRING_DQ       reduce using rule 17 (TYPE -> type_u8 .)
    true            reduce using rule 17 (TYPE -> type_u8 .)
    Null            reduce using rule 17 (TYPE -> type_u8 .)
    false           reduce using rule 17 (TYPE -> type_u8 .)
    type_type       reduce using rule 17 (TYPE -> type_u8 .)
    type_num        reduce using rule 17 (TYPE -> type_u8 .)
    type_bool       reduce using rule 17 (TYPE -> type_u8 .)
    type_any        reduce using rule 17 (TYPE -> type_u8 .)
    type_u64        reduce using rule 17 (TYPE -> type_u8 .)
    type_u32        reduce using rule 17 (TYPE -> type_u8 .)
    type_u16        reduce using rule 17 (TYPE -> type_u8 .)
    type_u8         reduce using rule 17 (TYPE -> type_u8 .)
    type_i64        reduce using rule 17 (TYPE -> type_u8 .)
    type_i32        reduce using rule 17 (TYPE -> type_u8 .)
    type_i16        reduce using rule 17 (TYPE -> type_u8 .)
    type_i8         reduce using rule 17 (TYPE -> type_u8 .)
    type_f32        reduce using rule 17 (TYPE -> type_u8 .)
    type_f64        reduce using rule 17 (TYPE -> type_u8 .)
    type_str        reduce using rule 17 (TYPE -> type_u8 .)
    type_list       reduce using rule 17 (TYPE -> type_u8 .)
    type_tuple      reduce using rule 17 (TYPE -> type_u8 .)
    type_array      reduce using rule 17 (TYPE -> type_u8 .)
    type_vector     reduce using rule 17 (TYPE -> type_u8 .)
    type_dict       reduce using rule 17 (TYPE -> type_u8 .)
    type_generator  reduce using rule 17 (TYPE -> type_u8 .)
    type_linked_list reduce using rule 17 (TYPE -> type_u8 .)
    type_doubly_linked_list reduce using rule 17 (TYPE -> type_u8 .)
    type_deque      reduce using rule 17 (TYPE -> type_u8 .)
    type_heap       reduce using rule 17 (TYPE -> type_u8 .)
    type_fibonacci_heap reduce using rule 17 (TYPE -> type_u8 .)
    type_tree       reduce using rule 17 (TYPE -> type_u8 .)
    type_trie       reduce using rule 17 (TYPE -> type_u8 .)
    type_stack      reduce using rule 17 (TYPE -> type_u8 .)
    type_queue      reduce using rule 17 (TYPE -> type_u8 .)
    type_binary_search_tree reduce using rule 17 (TYPE -> type_u8 .)
    type_bitset     reduce using rule 17 (TYPE -> type_u8 .)
    type_set        reduce using rule 17 (TYPE -> type_u8 .)
    type_map        reduce using rule 17 (TYPE -> type_u8 .)
    type_range      reduce using rule 17 (TYPE -> type_u8 .)
    type_bad_struct reduce using rule 17 (TYPE -> type_u8 .)
    type_bad_struct2 reduce using rule 17 (TYPE -> type_u8 .)
    lambda          reduce using rule 17 (TYPE -> type_u8 .)
    {               reduce using rule 17 (TYPE -> type_u8 .)
    ]               reduce using rule 17 (TYPE -> type_u8 .)
    :               reduce using rule 17 (TYPE -> type_u8 .)
    ,               reduce using rule 17 (TYPE -> type_u8 .)

  ! (               [ reduce using rule 17 (TYPE -> type_u8 .) ]


state 100

    (156) return_val -> type_i64 . ( arguments )
    (18) TYPE -> type_i64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 219
    VAR             reduce using rule 18 (TYPE -> type_i64 .)
    operator_add    reduce using rule 18 (TYPE -> type_i64 .)
    operator_sub    reduce using rule 18 (TYPE -> type_i64 .)
    operator_mul    reduce using rule 18 (TYPE -> type_i64 .)
    operator_div    reduce using rule 18 (TYPE -> type_i64 .)
    operator_trudiv reduce using rule 18 (TYPE -> type_i64 .)
    operator_pow    reduce using rule 18 (TYPE -> type_i64 .)
    operator_join   reduce using rule 18 (TYPE -> type_i64 .)
    operator_split  reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitand reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitor  reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitxor reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitshiftleft reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitshiftright reduce using rule 18 (TYPE -> type_i64 .)
    operator_and    reduce using rule 18 (TYPE -> type_i64 .)
    operator_or     reduce using rule 18 (TYPE -> type_i64 .)
    operator_xor    reduce using rule 18 (TYPE -> type_i64 .)
    operator_contains reduce using rule 18 (TYPE -> type_i64 .)
    operator_incr   reduce using rule 18 (TYPE -> type_i64 .)
    operator_decr   reduce using rule 18 (TYPE -> type_i64 .)
    operator_outer  reduce using rule 18 (TYPE -> type_i64 .)
    operator_rotate reduce using rule 18 (TYPE -> type_i64 .)
    operator_apply  reduce using rule 18 (TYPE -> type_i64 .)
    operator_compose reduce using rule 18 (TYPE -> type_i64 .)
    operator_over   reduce using rule 18 (TYPE -> type_i64 .)
    operator_map    reduce using rule 18 (TYPE -> type_i64 .)
    operator_less_than reduce using rule 18 (TYPE -> type_i64 .)
    operator_less_than_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_greater_than reduce using rule 18 (TYPE -> type_i64 .)
    operator_greater_than_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_not_equals reduce using rule 18 (TYPE -> type_i64 .)
    operator_smallest reduce using rule 18 (TYPE -> type_i64 .)
    operator_greatest reduce using rule 18 (TYPE -> type_i64 .)
    operator_goodname reduce using rule 18 (TYPE -> type_i64 .)
    [               reduce using rule 18 (TYPE -> type_i64 .)
    operator_scan   reduce using rule 18 (TYPE -> type_i64 .)
    operator_reduc  reduce using rule 18 (TYPE -> type_i64 .)
    operator_bitnot reduce using rule 18 (TYPE -> type_i64 .)
    operator_not    reduce using rule 18 (TYPE -> type_i64 .)
    operator_inner  reduce using rule 18 (TYPE -> type_i64 .)
    operator_reverse reduce using rule 18 (TYPE -> type_i64 .)
    operator_sorted_incr reduce using rule 18 (TYPE -> type_i64 .)
    operator_sorted_decr reduce using rule 18 (TYPE -> type_i64 .)
    operator_s_combinator reduce using rule 18 (TYPE -> type_i64 .)
    operator_s_combinator_2 reduce using rule 18 (TYPE -> type_i64 .)
    operator_goodname2 reduce using rule 18 (TYPE -> type_i64 .)
    NEWLINE         reduce using rule 18 (TYPE -> type_i64 .)
    $end            reduce using rule 18 (TYPE -> type_i64 .)
    }               reduce using rule 18 (TYPE -> type_i64 .)
    )               reduce using rule 18 (TYPE -> type_i64 .)
    FLOAT           reduce using rule 18 (TYPE -> type_i64 .)
    NUM             reduce using rule 18 (TYPE -> type_i64 .)
    STRING_3SQ      reduce using rule 18 (TYPE -> type_i64 .)
    STRING_3DQ      reduce using rule 18 (TYPE -> type_i64 .)
    STRING_SQ       reduce using rule 18 (TYPE -> type_i64 .)
    STRING_DQ       reduce using rule 18 (TYPE -> type_i64 .)
    true            reduce using rule 18 (TYPE -> type_i64 .)
    Null            reduce using rule 18 (TYPE -> type_i64 .)
    false           reduce using rule 18 (TYPE -> type_i64 .)
    type_type       reduce using rule 18 (TYPE -> type_i64 .)
    type_num        reduce using rule 18 (TYPE -> type_i64 .)
    type_bool       reduce using rule 18 (TYPE -> type_i64 .)
    type_any        reduce using rule 18 (TYPE -> type_i64 .)
    type_u64        reduce using rule 18 (TYPE -> type_i64 .)
    type_u32        reduce using rule 18 (TYPE -> type_i64 .)
    type_u16        reduce using rule 18 (TYPE -> type_i64 .)
    type_u8         reduce using rule 18 (TYPE -> type_i64 .)
    type_i64        reduce using rule 18 (TYPE -> type_i64 .)
    type_i32        reduce using rule 18 (TYPE -> type_i64 .)
    type_i16        reduce using rule 18 (TYPE -> type_i64 .)
    type_i8         reduce using rule 18 (TYPE -> type_i64 .)
    type_f32        reduce using rule 18 (TYPE -> type_i64 .)
    type_f64        reduce using rule 18 (TYPE -> type_i64 .)
    type_str        reduce using rule 18 (TYPE -> type_i64 .)
    type_list       reduce using rule 18 (TYPE -> type_i64 .)
    type_tuple      reduce using rule 18 (TYPE -> type_i64 .)
    type_array      reduce using rule 18 (TYPE -> type_i64 .)
    type_vector     reduce using rule 18 (TYPE -> type_i64 .)
    type_dict       reduce using rule 18 (TYPE -> type_i64 .)
    type_generator  reduce using rule 18 (TYPE -> type_i64 .)
    type_linked_list reduce using rule 18 (TYPE -> type_i64 .)
    type_doubly_linked_list reduce using rule 18 (TYPE -> type_i64 .)
    type_deque      reduce using rule 18 (TYPE -> type_i64 .)
    type_heap       reduce using rule 18 (TYPE -> type_i64 .)
    type_fibonacci_heap reduce using rule 18 (TYPE -> type_i64 .)
    type_tree       reduce using rule 18 (TYPE -> type_i64 .)
    type_trie       reduce using rule 18 (TYPE -> type_i64 .)
    type_stack      reduce using rule 18 (TYPE -> type_i64 .)
    type_queue      reduce using rule 18 (TYPE -> type_i64 .)
    type_binary_search_tree reduce using rule 18 (TYPE -> type_i64 .)
    type_bitset     reduce using rule 18 (TYPE -> type_i64 .)
    type_set        reduce using rule 18 (TYPE -> type_i64 .)
    type_map        reduce using rule 18 (TYPE -> type_i64 .)
    type_range      reduce using rule 18 (TYPE -> type_i64 .)
    type_bad_struct reduce using rule 18 (TYPE -> type_i64 .)
    type_bad_struct2 reduce using rule 18 (TYPE -> type_i64 .)
    lambda          reduce using rule 18 (TYPE -> type_i64 .)
    {               reduce using rule 18 (TYPE -> type_i64 .)
    ]               reduce using rule 18 (TYPE -> type_i64 .)
    :               reduce using rule 18 (TYPE -> type_i64 .)
    ,               reduce using rule 18 (TYPE -> type_i64 .)

  ! (               [ reduce using rule 18 (TYPE -> type_i64 .) ]


state 101

    (157) return_val -> type_i32 . ( arguments )
    (19) TYPE -> type_i32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 220
    VAR             reduce using rule 19 (TYPE -> type_i32 .)
    operator_add    reduce using rule 19 (TYPE -> type_i32 .)
    operator_sub    reduce using rule 19 (TYPE -> type_i32 .)
    operator_mul    reduce using rule 19 (TYPE -> type_i32 .)
    operator_div    reduce using rule 19 (TYPE -> type_i32 .)
    operator_trudiv reduce using rule 19 (TYPE -> type_i32 .)
    operator_pow    reduce using rule 19 (TYPE -> type_i32 .)
    operator_join   reduce using rule 19 (TYPE -> type_i32 .)
    operator_split  reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitand reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitor  reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitxor reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitshiftleft reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitshiftright reduce using rule 19 (TYPE -> type_i32 .)
    operator_and    reduce using rule 19 (TYPE -> type_i32 .)
    operator_or     reduce using rule 19 (TYPE -> type_i32 .)
    operator_xor    reduce using rule 19 (TYPE -> type_i32 .)
    operator_contains reduce using rule 19 (TYPE -> type_i32 .)
    operator_incr   reduce using rule 19 (TYPE -> type_i32 .)
    operator_decr   reduce using rule 19 (TYPE -> type_i32 .)
    operator_outer  reduce using rule 19 (TYPE -> type_i32 .)
    operator_rotate reduce using rule 19 (TYPE -> type_i32 .)
    operator_apply  reduce using rule 19 (TYPE -> type_i32 .)
    operator_compose reduce using rule 19 (TYPE -> type_i32 .)
    operator_over   reduce using rule 19 (TYPE -> type_i32 .)
    operator_map    reduce using rule 19 (TYPE -> type_i32 .)
    operator_less_than reduce using rule 19 (TYPE -> type_i32 .)
    operator_less_than_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_greater_than reduce using rule 19 (TYPE -> type_i32 .)
    operator_greater_than_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_not_equals reduce using rule 19 (TYPE -> type_i32 .)
    operator_smallest reduce using rule 19 (TYPE -> type_i32 .)
    operator_greatest reduce using rule 19 (TYPE -> type_i32 .)
    operator_goodname reduce using rule 19 (TYPE -> type_i32 .)
    [               reduce using rule 19 (TYPE -> type_i32 .)
    operator_scan   reduce using rule 19 (TYPE -> type_i32 .)
    operator_reduc  reduce using rule 19 (TYPE -> type_i32 .)
    operator_bitnot reduce using rule 19 (TYPE -> type_i32 .)
    operator_not    reduce using rule 19 (TYPE -> type_i32 .)
    operator_inner  reduce using rule 19 (TYPE -> type_i32 .)
    operator_reverse reduce using rule 19 (TYPE -> type_i32 .)
    operator_sorted_incr reduce using rule 19 (TYPE -> type_i32 .)
    operator_sorted_decr reduce using rule 19 (TYPE -> type_i32 .)
    operator_s_combinator reduce using rule 19 (TYPE -> type_i32 .)
    operator_s_combinator_2 reduce using rule 19 (TYPE -> type_i32 .)
    operator_goodname2 reduce using rule 19 (TYPE -> type_i32 .)
    NEWLINE         reduce using rule 19 (TYPE -> type_i32 .)
    $end            reduce using rule 19 (TYPE -> type_i32 .)
    }               reduce using rule 19 (TYPE -> type_i32 .)
    )               reduce using rule 19 (TYPE -> type_i32 .)
    FLOAT           reduce using rule 19 (TYPE -> type_i32 .)
    NUM             reduce using rule 19 (TYPE -> type_i32 .)
    STRING_3SQ      reduce using rule 19 (TYPE -> type_i32 .)
    STRING_3DQ      reduce using rule 19 (TYPE -> type_i32 .)
    STRING_SQ       reduce using rule 19 (TYPE -> type_i32 .)
    STRING_DQ       reduce using rule 19 (TYPE -> type_i32 .)
    true            reduce using rule 19 (TYPE -> type_i32 .)
    Null            reduce using rule 19 (TYPE -> type_i32 .)
    false           reduce using rule 19 (TYPE -> type_i32 .)
    type_type       reduce using rule 19 (TYPE -> type_i32 .)
    type_num        reduce using rule 19 (TYPE -> type_i32 .)
    type_bool       reduce using rule 19 (TYPE -> type_i32 .)
    type_any        reduce using rule 19 (TYPE -> type_i32 .)
    type_u64        reduce using rule 19 (TYPE -> type_i32 .)
    type_u32        reduce using rule 19 (TYPE -> type_i32 .)
    type_u16        reduce using rule 19 (TYPE -> type_i32 .)
    type_u8         reduce using rule 19 (TYPE -> type_i32 .)
    type_i64        reduce using rule 19 (TYPE -> type_i32 .)
    type_i32        reduce using rule 19 (TYPE -> type_i32 .)
    type_i16        reduce using rule 19 (TYPE -> type_i32 .)
    type_i8         reduce using rule 19 (TYPE -> type_i32 .)
    type_f32        reduce using rule 19 (TYPE -> type_i32 .)
    type_f64        reduce using rule 19 (TYPE -> type_i32 .)
    type_str        reduce using rule 19 (TYPE -> type_i32 .)
    type_list       reduce using rule 19 (TYPE -> type_i32 .)
    type_tuple      reduce using rule 19 (TYPE -> type_i32 .)
    type_array      reduce using rule 19 (TYPE -> type_i32 .)
    type_vector     reduce using rule 19 (TYPE -> type_i32 .)
    type_dict       reduce using rule 19 (TYPE -> type_i32 .)
    type_generator  reduce using rule 19 (TYPE -> type_i32 .)
    type_linked_list reduce using rule 19 (TYPE -> type_i32 .)
    type_doubly_linked_list reduce using rule 19 (TYPE -> type_i32 .)
    type_deque      reduce using rule 19 (TYPE -> type_i32 .)
    type_heap       reduce using rule 19 (TYPE -> type_i32 .)
    type_fibonacci_heap reduce using rule 19 (TYPE -> type_i32 .)
    type_tree       reduce using rule 19 (TYPE -> type_i32 .)
    type_trie       reduce using rule 19 (TYPE -> type_i32 .)
    type_stack      reduce using rule 19 (TYPE -> type_i32 .)
    type_queue      reduce using rule 19 (TYPE -> type_i32 .)
    type_binary_search_tree reduce using rule 19 (TYPE -> type_i32 .)
    type_bitset     reduce using rule 19 (TYPE -> type_i32 .)
    type_set        reduce using rule 19 (TYPE -> type_i32 .)
    type_map        reduce using rule 19 (TYPE -> type_i32 .)
    type_range      reduce using rule 19 (TYPE -> type_i32 .)
    type_bad_struct reduce using rule 19 (TYPE -> type_i32 .)
    type_bad_struct2 reduce using rule 19 (TYPE -> type_i32 .)
    lambda          reduce using rule 19 (TYPE -> type_i32 .)
    {               reduce using rule 19 (TYPE -> type_i32 .)
    ]               reduce using rule 19 (TYPE -> type_i32 .)
    :               reduce using rule 19 (TYPE -> type_i32 .)
    ,               reduce using rule 19 (TYPE -> type_i32 .)

  ! (               [ reduce using rule 19 (TYPE -> type_i32 .) ]


state 102

    (158) return_val -> type_i16 . ( arguments )
    (20) TYPE -> type_i16 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 221
    VAR             reduce using rule 20 (TYPE -> type_i16 .)
    operator_add    reduce using rule 20 (TYPE -> type_i16 .)
    operator_sub    reduce using rule 20 (TYPE -> type_i16 .)
    operator_mul    reduce using rule 20 (TYPE -> type_i16 .)
    operator_div    reduce using rule 20 (TYPE -> type_i16 .)
    operator_trudiv reduce using rule 20 (TYPE -> type_i16 .)
    operator_pow    reduce using rule 20 (TYPE -> type_i16 .)
    operator_join   reduce using rule 20 (TYPE -> type_i16 .)
    operator_split  reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitand reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitor  reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitxor reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitshiftleft reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitshiftright reduce using rule 20 (TYPE -> type_i16 .)
    operator_and    reduce using rule 20 (TYPE -> type_i16 .)
    operator_or     reduce using rule 20 (TYPE -> type_i16 .)
    operator_xor    reduce using rule 20 (TYPE -> type_i16 .)
    operator_contains reduce using rule 20 (TYPE -> type_i16 .)
    operator_incr   reduce using rule 20 (TYPE -> type_i16 .)
    operator_decr   reduce using rule 20 (TYPE -> type_i16 .)
    operator_outer  reduce using rule 20 (TYPE -> type_i16 .)
    operator_rotate reduce using rule 20 (TYPE -> type_i16 .)
    operator_apply  reduce using rule 20 (TYPE -> type_i16 .)
    operator_compose reduce using rule 20 (TYPE -> type_i16 .)
    operator_over   reduce using rule 20 (TYPE -> type_i16 .)
    operator_map    reduce using rule 20 (TYPE -> type_i16 .)
    operator_less_than reduce using rule 20 (TYPE -> type_i16 .)
    operator_less_than_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_greater_than reduce using rule 20 (TYPE -> type_i16 .)
    operator_greater_than_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_not_equals reduce using rule 20 (TYPE -> type_i16 .)
    operator_smallest reduce using rule 20 (TYPE -> type_i16 .)
    operator_greatest reduce using rule 20 (TYPE -> type_i16 .)
    operator_goodname reduce using rule 20 (TYPE -> type_i16 .)
    [               reduce using rule 20 (TYPE -> type_i16 .)
    operator_scan   reduce using rule 20 (TYPE -> type_i16 .)
    operator_reduc  reduce using rule 20 (TYPE -> type_i16 .)
    operator_bitnot reduce using rule 20 (TYPE -> type_i16 .)
    operator_not    reduce using rule 20 (TYPE -> type_i16 .)
    operator_inner  reduce using rule 20 (TYPE -> type_i16 .)
    operator_reverse reduce using rule 20 (TYPE -> type_i16 .)
    operator_sorted_incr reduce using rule 20 (TYPE -> type_i16 .)
    operator_sorted_decr reduce using rule 20 (TYPE -> type_i16 .)
    operator_s_combinator reduce using rule 20 (TYPE -> type_i16 .)
    operator_s_combinator_2 reduce using rule 20 (TYPE -> type_i16 .)
    operator_goodname2 reduce using rule 20 (TYPE -> type_i16 .)
    NEWLINE         reduce using rule 20 (TYPE -> type_i16 .)
    $end            reduce using rule 20 (TYPE -> type_i16 .)
    }               reduce using rule 20 (TYPE -> type_i16 .)
    )               reduce using rule 20 (TYPE -> type_i16 .)
    FLOAT           reduce using rule 20 (TYPE -> type_i16 .)
    NUM             reduce using rule 20 (TYPE -> type_i16 .)
    STRING_3SQ      reduce using rule 20 (TYPE -> type_i16 .)
    STRING_3DQ      reduce using rule 20 (TYPE -> type_i16 .)
    STRING_SQ       reduce using rule 20 (TYPE -> type_i16 .)
    STRING_DQ       reduce using rule 20 (TYPE -> type_i16 .)
    true            reduce using rule 20 (TYPE -> type_i16 .)
    Null            reduce using rule 20 (TYPE -> type_i16 .)
    false           reduce using rule 20 (TYPE -> type_i16 .)
    type_type       reduce using rule 20 (TYPE -> type_i16 .)
    type_num        reduce using rule 20 (TYPE -> type_i16 .)
    type_bool       reduce using rule 20 (TYPE -> type_i16 .)
    type_any        reduce using rule 20 (TYPE -> type_i16 .)
    type_u64        reduce using rule 20 (TYPE -> type_i16 .)
    type_u32        reduce using rule 20 (TYPE -> type_i16 .)
    type_u16        reduce using rule 20 (TYPE -> type_i16 .)
    type_u8         reduce using rule 20 (TYPE -> type_i16 .)
    type_i64        reduce using rule 20 (TYPE -> type_i16 .)
    type_i32        reduce using rule 20 (TYPE -> type_i16 .)
    type_i16        reduce using rule 20 (TYPE -> type_i16 .)
    type_i8         reduce using rule 20 (TYPE -> type_i16 .)
    type_f32        reduce using rule 20 (TYPE -> type_i16 .)
    type_f64        reduce using rule 20 (TYPE -> type_i16 .)
    type_str        reduce using rule 20 (TYPE -> type_i16 .)
    type_list       reduce using rule 20 (TYPE -> type_i16 .)
    type_tuple      reduce using rule 20 (TYPE -> type_i16 .)
    type_array      reduce using rule 20 (TYPE -> type_i16 .)
    type_vector     reduce using rule 20 (TYPE -> type_i16 .)
    type_dict       reduce using rule 20 (TYPE -> type_i16 .)
    type_generator  reduce using rule 20 (TYPE -> type_i16 .)
    type_linked_list reduce using rule 20 (TYPE -> type_i16 .)
    type_doubly_linked_list reduce using rule 20 (TYPE -> type_i16 .)
    type_deque      reduce using rule 20 (TYPE -> type_i16 .)
    type_heap       reduce using rule 20 (TYPE -> type_i16 .)
    type_fibonacci_heap reduce using rule 20 (TYPE -> type_i16 .)
    type_tree       reduce using rule 20 (TYPE -> type_i16 .)
    type_trie       reduce using rule 20 (TYPE -> type_i16 .)
    type_stack      reduce using rule 20 (TYPE -> type_i16 .)
    type_queue      reduce using rule 20 (TYPE -> type_i16 .)
    type_binary_search_tree reduce using rule 20 (TYPE -> type_i16 .)
    type_bitset     reduce using rule 20 (TYPE -> type_i16 .)
    type_set        reduce using rule 20 (TYPE -> type_i16 .)
    type_map        reduce using rule 20 (TYPE -> type_i16 .)
    type_range      reduce using rule 20 (TYPE -> type_i16 .)
    type_bad_struct reduce using rule 20 (TYPE -> type_i16 .)
    type_bad_struct2 reduce using rule 20 (TYPE -> type_i16 .)
    lambda          reduce using rule 20 (TYPE -> type_i16 .)
    {               reduce using rule 20 (TYPE -> type_i16 .)
    ]               reduce using rule 20 (TYPE -> type_i16 .)
    :               reduce using rule 20 (TYPE -> type_i16 .)
    ,               reduce using rule 20 (TYPE -> type_i16 .)

  ! (               [ reduce using rule 20 (TYPE -> type_i16 .) ]


state 103

    (159) return_val -> type_i8 . ( arguments )
    (21) TYPE -> type_i8 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 222
    VAR             reduce using rule 21 (TYPE -> type_i8 .)
    operator_add    reduce using rule 21 (TYPE -> type_i8 .)
    operator_sub    reduce using rule 21 (TYPE -> type_i8 .)
    operator_mul    reduce using rule 21 (TYPE -> type_i8 .)
    operator_div    reduce using rule 21 (TYPE -> type_i8 .)
    operator_trudiv reduce using rule 21 (TYPE -> type_i8 .)
    operator_pow    reduce using rule 21 (TYPE -> type_i8 .)
    operator_join   reduce using rule 21 (TYPE -> type_i8 .)
    operator_split  reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitand reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitor  reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitxor reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitshiftleft reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitshiftright reduce using rule 21 (TYPE -> type_i8 .)
    operator_and    reduce using rule 21 (TYPE -> type_i8 .)
    operator_or     reduce using rule 21 (TYPE -> type_i8 .)
    operator_xor    reduce using rule 21 (TYPE -> type_i8 .)
    operator_contains reduce using rule 21 (TYPE -> type_i8 .)
    operator_incr   reduce using rule 21 (TYPE -> type_i8 .)
    operator_decr   reduce using rule 21 (TYPE -> type_i8 .)
    operator_outer  reduce using rule 21 (TYPE -> type_i8 .)
    operator_rotate reduce using rule 21 (TYPE -> type_i8 .)
    operator_apply  reduce using rule 21 (TYPE -> type_i8 .)
    operator_compose reduce using rule 21 (TYPE -> type_i8 .)
    operator_over   reduce using rule 21 (TYPE -> type_i8 .)
    operator_map    reduce using rule 21 (TYPE -> type_i8 .)
    operator_less_than reduce using rule 21 (TYPE -> type_i8 .)
    operator_less_than_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_greater_than reduce using rule 21 (TYPE -> type_i8 .)
    operator_greater_than_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_not_equals reduce using rule 21 (TYPE -> type_i8 .)
    operator_smallest reduce using rule 21 (TYPE -> type_i8 .)
    operator_greatest reduce using rule 21 (TYPE -> type_i8 .)
    operator_goodname reduce using rule 21 (TYPE -> type_i8 .)
    [               reduce using rule 21 (TYPE -> type_i8 .)
    operator_scan   reduce using rule 21 (TYPE -> type_i8 .)
    operator_reduc  reduce using rule 21 (TYPE -> type_i8 .)
    operator_bitnot reduce using rule 21 (TYPE -> type_i8 .)
    operator_not    reduce using rule 21 (TYPE -> type_i8 .)
    operator_inner  reduce using rule 21 (TYPE -> type_i8 .)
    operator_reverse reduce using rule 21 (TYPE -> type_i8 .)
    operator_sorted_incr reduce using rule 21 (TYPE -> type_i8 .)
    operator_sorted_decr reduce using rule 21 (TYPE -> type_i8 .)
    operator_s_combinator reduce using rule 21 (TYPE -> type_i8 .)
    operator_s_combinator_2 reduce using rule 21 (TYPE -> type_i8 .)
    operator_goodname2 reduce using rule 21 (TYPE -> type_i8 .)
    NEWLINE         reduce using rule 21 (TYPE -> type_i8 .)
    $end            reduce using rule 21 (TYPE -> type_i8 .)
    }               reduce using rule 21 (TYPE -> type_i8 .)
    )               reduce using rule 21 (TYPE -> type_i8 .)
    FLOAT           reduce using rule 21 (TYPE -> type_i8 .)
    NUM             reduce using rule 21 (TYPE -> type_i8 .)
    STRING_3SQ      reduce using rule 21 (TYPE -> type_i8 .)
    STRING_3DQ      reduce using rule 21 (TYPE -> type_i8 .)
    STRING_SQ       reduce using rule 21 (TYPE -> type_i8 .)
    STRING_DQ       reduce using rule 21 (TYPE -> type_i8 .)
    true            reduce using rule 21 (TYPE -> type_i8 .)
    Null            reduce using rule 21 (TYPE -> type_i8 .)
    false           reduce using rule 21 (TYPE -> type_i8 .)
    type_type       reduce using rule 21 (TYPE -> type_i8 .)
    type_num        reduce using rule 21 (TYPE -> type_i8 .)
    type_bool       reduce using rule 21 (TYPE -> type_i8 .)
    type_any        reduce using rule 21 (TYPE -> type_i8 .)
    type_u64        reduce using rule 21 (TYPE -> type_i8 .)
    type_u32        reduce using rule 21 (TYPE -> type_i8 .)
    type_u16        reduce using rule 21 (TYPE -> type_i8 .)
    type_u8         reduce using rule 21 (TYPE -> type_i8 .)
    type_i64        reduce using rule 21 (TYPE -> type_i8 .)
    type_i32        reduce using rule 21 (TYPE -> type_i8 .)
    type_i16        reduce using rule 21 (TYPE -> type_i8 .)
    type_i8         reduce using rule 21 (TYPE -> type_i8 .)
    type_f32        reduce using rule 21 (TYPE -> type_i8 .)
    type_f64        reduce using rule 21 (TYPE -> type_i8 .)
    type_str        reduce using rule 21 (TYPE -> type_i8 .)
    type_list       reduce using rule 21 (TYPE -> type_i8 .)
    type_tuple      reduce using rule 21 (TYPE -> type_i8 .)
    type_array      reduce using rule 21 (TYPE -> type_i8 .)
    type_vector     reduce using rule 21 (TYPE -> type_i8 .)
    type_dict       reduce using rule 21 (TYPE -> type_i8 .)
    type_generator  reduce using rule 21 (TYPE -> type_i8 .)
    type_linked_list reduce using rule 21 (TYPE -> type_i8 .)
    type_doubly_linked_list reduce using rule 21 (TYPE -> type_i8 .)
    type_deque      reduce using rule 21 (TYPE -> type_i8 .)
    type_heap       reduce using rule 21 (TYPE -> type_i8 .)
    type_fibonacci_heap reduce using rule 21 (TYPE -> type_i8 .)
    type_tree       reduce using rule 21 (TYPE -> type_i8 .)
    type_trie       reduce using rule 21 (TYPE -> type_i8 .)
    type_stack      reduce using rule 21 (TYPE -> type_i8 .)
    type_queue      reduce using rule 21 (TYPE -> type_i8 .)
    type_binary_search_tree reduce using rule 21 (TYPE -> type_i8 .)
    type_bitset     reduce using rule 21 (TYPE -> type_i8 .)
    type_set        reduce using rule 21 (TYPE -> type_i8 .)
    type_map        reduce using rule 21 (TYPE -> type_i8 .)
    type_range      reduce using rule 21 (TYPE -> type_i8 .)
    type_bad_struct reduce using rule 21 (TYPE -> type_i8 .)
    type_bad_struct2 reduce using rule 21 (TYPE -> type_i8 .)
    lambda          reduce using rule 21 (TYPE -> type_i8 .)
    {               reduce using rule 21 (TYPE -> type_i8 .)
    ]               reduce using rule 21 (TYPE -> type_i8 .)
    :               reduce using rule 21 (TYPE -> type_i8 .)
    ,               reduce using rule 21 (TYPE -> type_i8 .)

  ! (               [ reduce using rule 21 (TYPE -> type_i8 .) ]


state 104

    (160) return_val -> type_f32 . ( arguments )
    (22) TYPE -> type_f32 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 223
    VAR             reduce using rule 22 (TYPE -> type_f32 .)
    operator_add    reduce using rule 22 (TYPE -> type_f32 .)
    operator_sub    reduce using rule 22 (TYPE -> type_f32 .)
    operator_mul    reduce using rule 22 (TYPE -> type_f32 .)
    operator_div    reduce using rule 22 (TYPE -> type_f32 .)
    operator_trudiv reduce using rule 22 (TYPE -> type_f32 .)
    operator_pow    reduce using rule 22 (TYPE -> type_f32 .)
    operator_join   reduce using rule 22 (TYPE -> type_f32 .)
    operator_split  reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitand reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitor  reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitxor reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitshiftleft reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitshiftright reduce using rule 22 (TYPE -> type_f32 .)
    operator_and    reduce using rule 22 (TYPE -> type_f32 .)
    operator_or     reduce using rule 22 (TYPE -> type_f32 .)
    operator_xor    reduce using rule 22 (TYPE -> type_f32 .)
    operator_contains reduce using rule 22 (TYPE -> type_f32 .)
    operator_incr   reduce using rule 22 (TYPE -> type_f32 .)
    operator_decr   reduce using rule 22 (TYPE -> type_f32 .)
    operator_outer  reduce using rule 22 (TYPE -> type_f32 .)
    operator_rotate reduce using rule 22 (TYPE -> type_f32 .)
    operator_apply  reduce using rule 22 (TYPE -> type_f32 .)
    operator_compose reduce using rule 22 (TYPE -> type_f32 .)
    operator_over   reduce using rule 22 (TYPE -> type_f32 .)
    operator_map    reduce using rule 22 (TYPE -> type_f32 .)
    operator_less_than reduce using rule 22 (TYPE -> type_f32 .)
    operator_less_than_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_greater_than reduce using rule 22 (TYPE -> type_f32 .)
    operator_greater_than_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_not_equals reduce using rule 22 (TYPE -> type_f32 .)
    operator_smallest reduce using rule 22 (TYPE -> type_f32 .)
    operator_greatest reduce using rule 22 (TYPE -> type_f32 .)
    operator_goodname reduce using rule 22 (TYPE -> type_f32 .)
    [               reduce using rule 22 (TYPE -> type_f32 .)
    operator_scan   reduce using rule 22 (TYPE -> type_f32 .)
    operator_reduc  reduce using rule 22 (TYPE -> type_f32 .)
    operator_bitnot reduce using rule 22 (TYPE -> type_f32 .)
    operator_not    reduce using rule 22 (TYPE -> type_f32 .)
    operator_inner  reduce using rule 22 (TYPE -> type_f32 .)
    operator_reverse reduce using rule 22 (TYPE -> type_f32 .)
    operator_sorted_incr reduce using rule 22 (TYPE -> type_f32 .)
    operator_sorted_decr reduce using rule 22 (TYPE -> type_f32 .)
    operator_s_combinator reduce using rule 22 (TYPE -> type_f32 .)
    operator_s_combinator_2 reduce using rule 22 (TYPE -> type_f32 .)
    operator_goodname2 reduce using rule 22 (TYPE -> type_f32 .)
    NEWLINE         reduce using rule 22 (TYPE -> type_f32 .)
    $end            reduce using rule 22 (TYPE -> type_f32 .)
    }               reduce using rule 22 (TYPE -> type_f32 .)
    )               reduce using rule 22 (TYPE -> type_f32 .)
    FLOAT           reduce using rule 22 (TYPE -> type_f32 .)
    NUM             reduce using rule 22 (TYPE -> type_f32 .)
    STRING_3SQ      reduce using rule 22 (TYPE -> type_f32 .)
    STRING_3DQ      reduce using rule 22 (TYPE -> type_f32 .)
    STRING_SQ       reduce using rule 22 (TYPE -> type_f32 .)
    STRING_DQ       reduce using rule 22 (TYPE -> type_f32 .)
    true            reduce using rule 22 (TYPE -> type_f32 .)
    Null            reduce using rule 22 (TYPE -> type_f32 .)
    false           reduce using rule 22 (TYPE -> type_f32 .)
    type_type       reduce using rule 22 (TYPE -> type_f32 .)
    type_num        reduce using rule 22 (TYPE -> type_f32 .)
    type_bool       reduce using rule 22 (TYPE -> type_f32 .)
    type_any        reduce using rule 22 (TYPE -> type_f32 .)
    type_u64        reduce using rule 22 (TYPE -> type_f32 .)
    type_u32        reduce using rule 22 (TYPE -> type_f32 .)
    type_u16        reduce using rule 22 (TYPE -> type_f32 .)
    type_u8         reduce using rule 22 (TYPE -> type_f32 .)
    type_i64        reduce using rule 22 (TYPE -> type_f32 .)
    type_i32        reduce using rule 22 (TYPE -> type_f32 .)
    type_i16        reduce using rule 22 (TYPE -> type_f32 .)
    type_i8         reduce using rule 22 (TYPE -> type_f32 .)
    type_f32        reduce using rule 22 (TYPE -> type_f32 .)
    type_f64        reduce using rule 22 (TYPE -> type_f32 .)
    type_str        reduce using rule 22 (TYPE -> type_f32 .)
    type_list       reduce using rule 22 (TYPE -> type_f32 .)
    type_tuple      reduce using rule 22 (TYPE -> type_f32 .)
    type_array      reduce using rule 22 (TYPE -> type_f32 .)
    type_vector     reduce using rule 22 (TYPE -> type_f32 .)
    type_dict       reduce using rule 22 (TYPE -> type_f32 .)
    type_generator  reduce using rule 22 (TYPE -> type_f32 .)
    type_linked_list reduce using rule 22 (TYPE -> type_f32 .)
    type_doubly_linked_list reduce using rule 22 (TYPE -> type_f32 .)
    type_deque      reduce using rule 22 (TYPE -> type_f32 .)
    type_heap       reduce using rule 22 (TYPE -> type_f32 .)
    type_fibonacci_heap reduce using rule 22 (TYPE -> type_f32 .)
    type_tree       reduce using rule 22 (TYPE -> type_f32 .)
    type_trie       reduce using rule 22 (TYPE -> type_f32 .)
    type_stack      reduce using rule 22 (TYPE -> type_f32 .)
    type_queue      reduce using rule 22 (TYPE -> type_f32 .)
    type_binary_search_tree reduce using rule 22 (TYPE -> type_f32 .)
    type_bitset     reduce using rule 22 (TYPE -> type_f32 .)
    type_set        reduce using rule 22 (TYPE -> type_f32 .)
    type_map        reduce using rule 22 (TYPE -> type_f32 .)
    type_range      reduce using rule 22 (TYPE -> type_f32 .)
    type_bad_struct reduce using rule 22 (TYPE -> type_f32 .)
    type_bad_struct2 reduce using rule 22 (TYPE -> type_f32 .)
    lambda          reduce using rule 22 (TYPE -> type_f32 .)
    {               reduce using rule 22 (TYPE -> type_f32 .)
    ]               reduce using rule 22 (TYPE -> type_f32 .)
    :               reduce using rule 22 (TYPE -> type_f32 .)
    ,               reduce using rule 22 (TYPE -> type_f32 .)

  ! (               [ reduce using rule 22 (TYPE -> type_f32 .) ]


state 105

    (161) return_val -> type_f64 . ( arguments )
    (23) TYPE -> type_f64 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 224
    VAR             reduce using rule 23 (TYPE -> type_f64 .)
    operator_add    reduce using rule 23 (TYPE -> type_f64 .)
    operator_sub    reduce using rule 23 (TYPE -> type_f64 .)
    operator_mul    reduce using rule 23 (TYPE -> type_f64 .)
    operator_div    reduce using rule 23 (TYPE -> type_f64 .)
    operator_trudiv reduce using rule 23 (TYPE -> type_f64 .)
    operator_pow    reduce using rule 23 (TYPE -> type_f64 .)
    operator_join   reduce using rule 23 (TYPE -> type_f64 .)
    operator_split  reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitand reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitor  reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitxor reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitshiftleft reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitshiftright reduce using rule 23 (TYPE -> type_f64 .)
    operator_and    reduce using rule 23 (TYPE -> type_f64 .)
    operator_or     reduce using rule 23 (TYPE -> type_f64 .)
    operator_xor    reduce using rule 23 (TYPE -> type_f64 .)
    operator_contains reduce using rule 23 (TYPE -> type_f64 .)
    operator_incr   reduce using rule 23 (TYPE -> type_f64 .)
    operator_decr   reduce using rule 23 (TYPE -> type_f64 .)
    operator_outer  reduce using rule 23 (TYPE -> type_f64 .)
    operator_rotate reduce using rule 23 (TYPE -> type_f64 .)
    operator_apply  reduce using rule 23 (TYPE -> type_f64 .)
    operator_compose reduce using rule 23 (TYPE -> type_f64 .)
    operator_over   reduce using rule 23 (TYPE -> type_f64 .)
    operator_map    reduce using rule 23 (TYPE -> type_f64 .)
    operator_less_than reduce using rule 23 (TYPE -> type_f64 .)
    operator_less_than_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_greater_than reduce using rule 23 (TYPE -> type_f64 .)
    operator_greater_than_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_not_equals reduce using rule 23 (TYPE -> type_f64 .)
    operator_smallest reduce using rule 23 (TYPE -> type_f64 .)
    operator_greatest reduce using rule 23 (TYPE -> type_f64 .)
    operator_goodname reduce using rule 23 (TYPE -> type_f64 .)
    [               reduce using rule 23 (TYPE -> type_f64 .)
    operator_scan   reduce using rule 23 (TYPE -> type_f64 .)
    operator_reduc  reduce using rule 23 (TYPE -> type_f64 .)
    operator_bitnot reduce using rule 23 (TYPE -> type_f64 .)
    operator_not    reduce using rule 23 (TYPE -> type_f64 .)
    operator_inner  reduce using rule 23 (TYPE -> type_f64 .)
    operator_reverse reduce using rule 23 (TYPE -> type_f64 .)
    operator_sorted_incr reduce using rule 23 (TYPE -> type_f64 .)
    operator_sorted_decr reduce using rule 23 (TYPE -> type_f64 .)
    operator_s_combinator reduce using rule 23 (TYPE -> type_f64 .)
    operator_s_combinator_2 reduce using rule 23 (TYPE -> type_f64 .)
    operator_goodname2 reduce using rule 23 (TYPE -> type_f64 .)
    NEWLINE         reduce using rule 23 (TYPE -> type_f64 .)
    $end            reduce using rule 23 (TYPE -> type_f64 .)
    }               reduce using rule 23 (TYPE -> type_f64 .)
    )               reduce using rule 23 (TYPE -> type_f64 .)
    FLOAT           reduce using rule 23 (TYPE -> type_f64 .)
    NUM             reduce using rule 23 (TYPE -> type_f64 .)
    STRING_3SQ      reduce using rule 23 (TYPE -> type_f64 .)
    STRING_3DQ      reduce using rule 23 (TYPE -> type_f64 .)
    STRING_SQ       reduce using rule 23 (TYPE -> type_f64 .)
    STRING_DQ       reduce using rule 23 (TYPE -> type_f64 .)
    true            reduce using rule 23 (TYPE -> type_f64 .)
    Null            reduce using rule 23 (TYPE -> type_f64 .)
    false           reduce using rule 23 (TYPE -> type_f64 .)
    type_type       reduce using rule 23 (TYPE -> type_f64 .)
    type_num        reduce using rule 23 (TYPE -> type_f64 .)
    type_bool       reduce using rule 23 (TYPE -> type_f64 .)
    type_any        reduce using rule 23 (TYPE -> type_f64 .)
    type_u64        reduce using rule 23 (TYPE -> type_f64 .)
    type_u32        reduce using rule 23 (TYPE -> type_f64 .)
    type_u16        reduce using rule 23 (TYPE -> type_f64 .)
    type_u8         reduce using rule 23 (TYPE -> type_f64 .)
    type_i64        reduce using rule 23 (TYPE -> type_f64 .)
    type_i32        reduce using rule 23 (TYPE -> type_f64 .)
    type_i16        reduce using rule 23 (TYPE -> type_f64 .)
    type_i8         reduce using rule 23 (TYPE -> type_f64 .)
    type_f32        reduce using rule 23 (TYPE -> type_f64 .)
    type_f64        reduce using rule 23 (TYPE -> type_f64 .)
    type_str        reduce using rule 23 (TYPE -> type_f64 .)
    type_list       reduce using rule 23 (TYPE -> type_f64 .)
    type_tuple      reduce using rule 23 (TYPE -> type_f64 .)
    type_array      reduce using rule 23 (TYPE -> type_f64 .)
    type_vector     reduce using rule 23 (TYPE -> type_f64 .)
    type_dict       reduce using rule 23 (TYPE -> type_f64 .)
    type_generator  reduce using rule 23 (TYPE -> type_f64 .)
    type_linked_list reduce using rule 23 (TYPE -> type_f64 .)
    type_doubly_linked_list reduce using rule 23 (TYPE -> type_f64 .)
    type_deque      reduce using rule 23 (TYPE -> type_f64 .)
    type_heap       reduce using rule 23 (TYPE -> type_f64 .)
    type_fibonacci_heap reduce using rule 23 (TYPE -> type_f64 .)
    type_tree       reduce using rule 23 (TYPE -> type_f64 .)
    type_trie       reduce using rule 23 (TYPE -> type_f64 .)
    type_stack      reduce using rule 23 (TYPE -> type_f64 .)
    type_queue      reduce using rule 23 (TYPE -> type_f64 .)
    type_binary_search_tree reduce using rule 23 (TYPE -> type_f64 .)
    type_bitset     reduce using rule 23 (TYPE -> type_f64 .)
    type_set        reduce using rule 23 (TYPE -> type_f64 .)
    type_map        reduce using rule 23 (TYPE -> type_f64 .)
    type_range      reduce using rule 23 (TYPE -> type_f64 .)
    type_bad_struct reduce using rule 23 (TYPE -> type_f64 .)
    type_bad_struct2 reduce using rule 23 (TYPE -> type_f64 .)
    lambda          reduce using rule 23 (TYPE -> type_f64 .)
    {               reduce using rule 23 (TYPE -> type_f64 .)
    ]               reduce using rule 23 (TYPE -> type_f64 .)
    :               reduce using rule 23 (TYPE -> type_f64 .)
    ,               reduce using rule 23 (TYPE -> type_f64 .)

  ! (               [ reduce using rule 23 (TYPE -> type_f64 .) ]


state 106

    (162) return_val -> type_str . ( arguments )
    (24) TYPE -> type_str .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 225
    VAR             reduce using rule 24 (TYPE -> type_str .)
    operator_add    reduce using rule 24 (TYPE -> type_str .)
    operator_sub    reduce using rule 24 (TYPE -> type_str .)
    operator_mul    reduce using rule 24 (TYPE -> type_str .)
    operator_div    reduce using rule 24 (TYPE -> type_str .)
    operator_trudiv reduce using rule 24 (TYPE -> type_str .)
    operator_pow    reduce using rule 24 (TYPE -> type_str .)
    operator_join   reduce using rule 24 (TYPE -> type_str .)
    operator_split  reduce using rule 24 (TYPE -> type_str .)
    operator_bitand reduce using rule 24 (TYPE -> type_str .)
    operator_bitor  reduce using rule 24 (TYPE -> type_str .)
    operator_bitxor reduce using rule 24 (TYPE -> type_str .)
    operator_bitshiftleft reduce using rule 24 (TYPE -> type_str .)
    operator_bitshiftright reduce using rule 24 (TYPE -> type_str .)
    operator_and    reduce using rule 24 (TYPE -> type_str .)
    operator_or     reduce using rule 24 (TYPE -> type_str .)
    operator_xor    reduce using rule 24 (TYPE -> type_str .)
    operator_contains reduce using rule 24 (TYPE -> type_str .)
    operator_incr   reduce using rule 24 (TYPE -> type_str .)
    operator_decr   reduce using rule 24 (TYPE -> type_str .)
    operator_outer  reduce using rule 24 (TYPE -> type_str .)
    operator_rotate reduce using rule 24 (TYPE -> type_str .)
    operator_apply  reduce using rule 24 (TYPE -> type_str .)
    operator_compose reduce using rule 24 (TYPE -> type_str .)
    operator_over   reduce using rule 24 (TYPE -> type_str .)
    operator_map    reduce using rule 24 (TYPE -> type_str .)
    operator_less_than reduce using rule 24 (TYPE -> type_str .)
    operator_less_than_equals reduce using rule 24 (TYPE -> type_str .)
    operator_greater_than reduce using rule 24 (TYPE -> type_str .)
    operator_greater_than_equals reduce using rule 24 (TYPE -> type_str .)
    operator_equals reduce using rule 24 (TYPE -> type_str .)
    operator_not_equals reduce using rule 24 (TYPE -> type_str .)
    operator_smallest reduce using rule 24 (TYPE -> type_str .)
    operator_greatest reduce using rule 24 (TYPE -> type_str .)
    operator_goodname reduce using rule 24 (TYPE -> type_str .)
    [               reduce using rule 24 (TYPE -> type_str .)
    operator_scan   reduce using rule 24 (TYPE -> type_str .)
    operator_reduc  reduce using rule 24 (TYPE -> type_str .)
    operator_bitnot reduce using rule 24 (TYPE -> type_str .)
    operator_not    reduce using rule 24 (TYPE -> type_str .)
    operator_inner  reduce using rule 24 (TYPE -> type_str .)
    operator_reverse reduce using rule 24 (TYPE -> type_str .)
    operator_sorted_incr reduce using rule 24 (TYPE -> type_str .)
    operator_sorted_decr reduce using rule 24 (TYPE -> type_str .)
    operator_s_combinator reduce using rule 24 (TYPE -> type_str .)
    operator_s_combinator_2 reduce using rule 24 (TYPE -> type_str .)
    operator_goodname2 reduce using rule 24 (TYPE -> type_str .)
    NEWLINE         reduce using rule 24 (TYPE -> type_str .)
    $end            reduce using rule 24 (TYPE -> type_str .)
    }               reduce using rule 24 (TYPE -> type_str .)
    )               reduce using rule 24 (TYPE -> type_str .)
    FLOAT           reduce using rule 24 (TYPE -> type_str .)
    NUM             reduce using rule 24 (TYPE -> type_str .)
    STRING_3SQ      reduce using rule 24 (TYPE -> type_str .)
    STRING_3DQ      reduce using rule 24 (TYPE -> type_str .)
    STRING_SQ       reduce using rule 24 (TYPE -> type_str .)
    STRING_DQ       reduce using rule 24 (TYPE -> type_str .)
    true            reduce using rule 24 (TYPE -> type_str .)
    Null            reduce using rule 24 (TYPE -> type_str .)
    false           reduce using rule 24 (TYPE -> type_str .)
    type_type       reduce using rule 24 (TYPE -> type_str .)
    type_num        reduce using rule 24 (TYPE -> type_str .)
    type_bool       reduce using rule 24 (TYPE -> type_str .)
    type_any        reduce using rule 24 (TYPE -> type_str .)
    type_u64        reduce using rule 24 (TYPE -> type_str .)
    type_u32        reduce using rule 24 (TYPE -> type_str .)
    type_u16        reduce using rule 24 (TYPE -> type_str .)
    type_u8         reduce using rule 24 (TYPE -> type_str .)
    type_i64        reduce using rule 24 (TYPE -> type_str .)
    type_i32        reduce using rule 24 (TYPE -> type_str .)
    type_i16        reduce using rule 24 (TYPE -> type_str .)
    type_i8         reduce using rule 24 (TYPE -> type_str .)
    type_f32        reduce using rule 24 (TYPE -> type_str .)
    type_f64        reduce using rule 24 (TYPE -> type_str .)
    type_str        reduce using rule 24 (TYPE -> type_str .)
    type_list       reduce using rule 24 (TYPE -> type_str .)
    type_tuple      reduce using rule 24 (TYPE -> type_str .)
    type_array      reduce using rule 24 (TYPE -> type_str .)
    type_vector     reduce using rule 24 (TYPE -> type_str .)
    type_dict       reduce using rule 24 (TYPE -> type_str .)
    type_generator  reduce using rule 24 (TYPE -> type_str .)
    type_linked_list reduce using rule 24 (TYPE -> type_str .)
    type_doubly_linked_list reduce using rule 24 (TYPE -> type_str .)
    type_deque      reduce using rule 24 (TYPE -> type_str .)
    type_heap       reduce using rule 24 (TYPE -> type_str .)
    type_fibonacci_heap reduce using rule 24 (TYPE -> type_str .)
    type_tree       reduce using rule 24 (TYPE -> type_str .)
    type_trie       reduce using rule 24 (TYPE -> type_str .)
    type_stack      reduce using rule 24 (TYPE -> type_str .)
    type_queue      reduce using rule 24 (TYPE -> type_str .)
    type_binary_search_tree reduce using rule 24 (TYPE -> type_str .)
    type_bitset     reduce using rule 24 (TYPE -> type_str .)
    type_set        reduce using rule 24 (TYPE -> type_str .)
    type_map        reduce using rule 24 (TYPE -> type_str .)
    type_range      reduce using rule 24 (TYPE -> type_str .)
    type_bad_struct reduce using rule 24 (TYPE -> type_str .)
    type_bad_struct2 reduce using rule 24 (TYPE -> type_str .)
    lambda          reduce using rule 24 (TYPE -> type_str .)
    {               reduce using rule 24 (TYPE -> type_str .)
    ]               reduce using rule 24 (TYPE -> type_str .)
    :               reduce using rule 24 (TYPE -> type_str .)
    ,               reduce using rule 24 (TYPE -> type_str .)

  ! (               [ reduce using rule 24 (TYPE -> type_str .) ]


state 107

    (163) return_val -> type_list . ( arguments )
    (25) TYPE -> type_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 226
    VAR             reduce using rule 25 (TYPE -> type_list .)
    operator_add    reduce using rule 25 (TYPE -> type_list .)
    operator_sub    reduce using rule 25 (TYPE -> type_list .)
    operator_mul    reduce using rule 25 (TYPE -> type_list .)
    operator_div    reduce using rule 25 (TYPE -> type_list .)
    operator_trudiv reduce using rule 25 (TYPE -> type_list .)
    operator_pow    reduce using rule 25 (TYPE -> type_list .)
    operator_join   reduce using rule 25 (TYPE -> type_list .)
    operator_split  reduce using rule 25 (TYPE -> type_list .)
    operator_bitand reduce using rule 25 (TYPE -> type_list .)
    operator_bitor  reduce using rule 25 (TYPE -> type_list .)
    operator_bitxor reduce using rule 25 (TYPE -> type_list .)
    operator_bitshiftleft reduce using rule 25 (TYPE -> type_list .)
    operator_bitshiftright reduce using rule 25 (TYPE -> type_list .)
    operator_and    reduce using rule 25 (TYPE -> type_list .)
    operator_or     reduce using rule 25 (TYPE -> type_list .)
    operator_xor    reduce using rule 25 (TYPE -> type_list .)
    operator_contains reduce using rule 25 (TYPE -> type_list .)
    operator_incr   reduce using rule 25 (TYPE -> type_list .)
    operator_decr   reduce using rule 25 (TYPE -> type_list .)
    operator_outer  reduce using rule 25 (TYPE -> type_list .)
    operator_rotate reduce using rule 25 (TYPE -> type_list .)
    operator_apply  reduce using rule 25 (TYPE -> type_list .)
    operator_compose reduce using rule 25 (TYPE -> type_list .)
    operator_over   reduce using rule 25 (TYPE -> type_list .)
    operator_map    reduce using rule 25 (TYPE -> type_list .)
    operator_less_than reduce using rule 25 (TYPE -> type_list .)
    operator_less_than_equals reduce using rule 25 (TYPE -> type_list .)
    operator_greater_than reduce using rule 25 (TYPE -> type_list .)
    operator_greater_than_equals reduce using rule 25 (TYPE -> type_list .)
    operator_equals reduce using rule 25 (TYPE -> type_list .)
    operator_not_equals reduce using rule 25 (TYPE -> type_list .)
    operator_smallest reduce using rule 25 (TYPE -> type_list .)
    operator_greatest reduce using rule 25 (TYPE -> type_list .)
    operator_goodname reduce using rule 25 (TYPE -> type_list .)
    [               reduce using rule 25 (TYPE -> type_list .)
    operator_scan   reduce using rule 25 (TYPE -> type_list .)
    operator_reduc  reduce using rule 25 (TYPE -> type_list .)
    operator_bitnot reduce using rule 25 (TYPE -> type_list .)
    operator_not    reduce using rule 25 (TYPE -> type_list .)
    operator_inner  reduce using rule 25 (TYPE -> type_list .)
    operator_reverse reduce using rule 25 (TYPE -> type_list .)
    operator_sorted_incr reduce using rule 25 (TYPE -> type_list .)
    operator_sorted_decr reduce using rule 25 (TYPE -> type_list .)
    operator_s_combinator reduce using rule 25 (TYPE -> type_list .)
    operator_s_combinator_2 reduce using rule 25 (TYPE -> type_list .)
    operator_goodname2 reduce using rule 25 (TYPE -> type_list .)
    NEWLINE         reduce using rule 25 (TYPE -> type_list .)
    $end            reduce using rule 25 (TYPE -> type_list .)
    }               reduce using rule 25 (TYPE -> type_list .)
    )               reduce using rule 25 (TYPE -> type_list .)
    FLOAT           reduce using rule 25 (TYPE -> type_list .)
    NUM             reduce using rule 25 (TYPE -> type_list .)
    STRING_3SQ      reduce using rule 25 (TYPE -> type_list .)
    STRING_3DQ      reduce using rule 25 (TYPE -> type_list .)
    STRING_SQ       reduce using rule 25 (TYPE -> type_list .)
    STRING_DQ       reduce using rule 25 (TYPE -> type_list .)
    true            reduce using rule 25 (TYPE -> type_list .)
    Null            reduce using rule 25 (TYPE -> type_list .)
    false           reduce using rule 25 (TYPE -> type_list .)
    type_type       reduce using rule 25 (TYPE -> type_list .)
    type_num        reduce using rule 25 (TYPE -> type_list .)
    type_bool       reduce using rule 25 (TYPE -> type_list .)
    type_any        reduce using rule 25 (TYPE -> type_list .)
    type_u64        reduce using rule 25 (TYPE -> type_list .)
    type_u32        reduce using rule 25 (TYPE -> type_list .)
    type_u16        reduce using rule 25 (TYPE -> type_list .)
    type_u8         reduce using rule 25 (TYPE -> type_list .)
    type_i64        reduce using rule 25 (TYPE -> type_list .)
    type_i32        reduce using rule 25 (TYPE -> type_list .)
    type_i16        reduce using rule 25 (TYPE -> type_list .)
    type_i8         reduce using rule 25 (TYPE -> type_list .)
    type_f32        reduce using rule 25 (TYPE -> type_list .)
    type_f64        reduce using rule 25 (TYPE -> type_list .)
    type_str        reduce using rule 25 (TYPE -> type_list .)
    type_list       reduce using rule 25 (TYPE -> type_list .)
    type_tuple      reduce using rule 25 (TYPE -> type_list .)
    type_array      reduce using rule 25 (TYPE -> type_list .)
    type_vector     reduce using rule 25 (TYPE -> type_list .)
    type_dict       reduce using rule 25 (TYPE -> type_list .)
    type_generator  reduce using rule 25 (TYPE -> type_list .)
    type_linked_list reduce using rule 25 (TYPE -> type_list .)
    type_doubly_linked_list reduce using rule 25 (TYPE -> type_list .)
    type_deque      reduce using rule 25 (TYPE -> type_list .)
    type_heap       reduce using rule 25 (TYPE -> type_list .)
    type_fibonacci_heap reduce using rule 25 (TYPE -> type_list .)
    type_tree       reduce using rule 25 (TYPE -> type_list .)
    type_trie       reduce using rule 25 (TYPE -> type_list .)
    type_stack      reduce using rule 25 (TYPE -> type_list .)
    type_queue      reduce using rule 25 (TYPE -> type_list .)
    type_binary_search_tree reduce using rule 25 (TYPE -> type_list .)
    type_bitset     reduce using rule 25 (TYPE -> type_list .)
    type_set        reduce using rule 25 (TYPE -> type_list .)
    type_map        reduce using rule 25 (TYPE -> type_list .)
    type_range      reduce using rule 25 (TYPE -> type_list .)
    type_bad_struct reduce using rule 25 (TYPE -> type_list .)
    type_bad_struct2 reduce using rule 25 (TYPE -> type_list .)
    lambda          reduce using rule 25 (TYPE -> type_list .)
    {               reduce using rule 25 (TYPE -> type_list .)
    ]               reduce using rule 25 (TYPE -> type_list .)
    :               reduce using rule 25 (TYPE -> type_list .)
    ,               reduce using rule 25 (TYPE -> type_list .)

  ! (               [ reduce using rule 25 (TYPE -> type_list .) ]


state 108

    (164) return_val -> type_tuple . ( arguments )
    (26) TYPE -> type_tuple .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 227
    VAR             reduce using rule 26 (TYPE -> type_tuple .)
    operator_add    reduce using rule 26 (TYPE -> type_tuple .)
    operator_sub    reduce using rule 26 (TYPE -> type_tuple .)
    operator_mul    reduce using rule 26 (TYPE -> type_tuple .)
    operator_div    reduce using rule 26 (TYPE -> type_tuple .)
    operator_trudiv reduce using rule 26 (TYPE -> type_tuple .)
    operator_pow    reduce using rule 26 (TYPE -> type_tuple .)
    operator_join   reduce using rule 26 (TYPE -> type_tuple .)
    operator_split  reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitand reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitor  reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitxor reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitshiftleft reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitshiftright reduce using rule 26 (TYPE -> type_tuple .)
    operator_and    reduce using rule 26 (TYPE -> type_tuple .)
    operator_or     reduce using rule 26 (TYPE -> type_tuple .)
    operator_xor    reduce using rule 26 (TYPE -> type_tuple .)
    operator_contains reduce using rule 26 (TYPE -> type_tuple .)
    operator_incr   reduce using rule 26 (TYPE -> type_tuple .)
    operator_decr   reduce using rule 26 (TYPE -> type_tuple .)
    operator_outer  reduce using rule 26 (TYPE -> type_tuple .)
    operator_rotate reduce using rule 26 (TYPE -> type_tuple .)
    operator_apply  reduce using rule 26 (TYPE -> type_tuple .)
    operator_compose reduce using rule 26 (TYPE -> type_tuple .)
    operator_over   reduce using rule 26 (TYPE -> type_tuple .)
    operator_map    reduce using rule 26 (TYPE -> type_tuple .)
    operator_less_than reduce using rule 26 (TYPE -> type_tuple .)
    operator_less_than_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_greater_than reduce using rule 26 (TYPE -> type_tuple .)
    operator_greater_than_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_not_equals reduce using rule 26 (TYPE -> type_tuple .)
    operator_smallest reduce using rule 26 (TYPE -> type_tuple .)
    operator_greatest reduce using rule 26 (TYPE -> type_tuple .)
    operator_goodname reduce using rule 26 (TYPE -> type_tuple .)
    [               reduce using rule 26 (TYPE -> type_tuple .)
    operator_scan   reduce using rule 26 (TYPE -> type_tuple .)
    operator_reduc  reduce using rule 26 (TYPE -> type_tuple .)
    operator_bitnot reduce using rule 26 (TYPE -> type_tuple .)
    operator_not    reduce using rule 26 (TYPE -> type_tuple .)
    operator_inner  reduce using rule 26 (TYPE -> type_tuple .)
    operator_reverse reduce using rule 26 (TYPE -> type_tuple .)
    operator_sorted_incr reduce using rule 26 (TYPE -> type_tuple .)
    operator_sorted_decr reduce using rule 26 (TYPE -> type_tuple .)
    operator_s_combinator reduce using rule 26 (TYPE -> type_tuple .)
    operator_s_combinator_2 reduce using rule 26 (TYPE -> type_tuple .)
    operator_goodname2 reduce using rule 26 (TYPE -> type_tuple .)
    NEWLINE         reduce using rule 26 (TYPE -> type_tuple .)
    $end            reduce using rule 26 (TYPE -> type_tuple .)
    }               reduce using rule 26 (TYPE -> type_tuple .)
    )               reduce using rule 26 (TYPE -> type_tuple .)
    FLOAT           reduce using rule 26 (TYPE -> type_tuple .)
    NUM             reduce using rule 26 (TYPE -> type_tuple .)
    STRING_3SQ      reduce using rule 26 (TYPE -> type_tuple .)
    STRING_3DQ      reduce using rule 26 (TYPE -> type_tuple .)
    STRING_SQ       reduce using rule 26 (TYPE -> type_tuple .)
    STRING_DQ       reduce using rule 26 (TYPE -> type_tuple .)
    true            reduce using rule 26 (TYPE -> type_tuple .)
    Null            reduce using rule 26 (TYPE -> type_tuple .)
    false           reduce using rule 26 (TYPE -> type_tuple .)
    type_type       reduce using rule 26 (TYPE -> type_tuple .)
    type_num        reduce using rule 26 (TYPE -> type_tuple .)
    type_bool       reduce using rule 26 (TYPE -> type_tuple .)
    type_any        reduce using rule 26 (TYPE -> type_tuple .)
    type_u64        reduce using rule 26 (TYPE -> type_tuple .)
    type_u32        reduce using rule 26 (TYPE -> type_tuple .)
    type_u16        reduce using rule 26 (TYPE -> type_tuple .)
    type_u8         reduce using rule 26 (TYPE -> type_tuple .)
    type_i64        reduce using rule 26 (TYPE -> type_tuple .)
    type_i32        reduce using rule 26 (TYPE -> type_tuple .)
    type_i16        reduce using rule 26 (TYPE -> type_tuple .)
    type_i8         reduce using rule 26 (TYPE -> type_tuple .)
    type_f32        reduce using rule 26 (TYPE -> type_tuple .)
    type_f64        reduce using rule 26 (TYPE -> type_tuple .)
    type_str        reduce using rule 26 (TYPE -> type_tuple .)
    type_list       reduce using rule 26 (TYPE -> type_tuple .)
    type_tuple      reduce using rule 26 (TYPE -> type_tuple .)
    type_array      reduce using rule 26 (TYPE -> type_tuple .)
    type_vector     reduce using rule 26 (TYPE -> type_tuple .)
    type_dict       reduce using rule 26 (TYPE -> type_tuple .)
    type_generator  reduce using rule 26 (TYPE -> type_tuple .)
    type_linked_list reduce using rule 26 (TYPE -> type_tuple .)
    type_doubly_linked_list reduce using rule 26 (TYPE -> type_tuple .)
    type_deque      reduce using rule 26 (TYPE -> type_tuple .)
    type_heap       reduce using rule 26 (TYPE -> type_tuple .)
    type_fibonacci_heap reduce using rule 26 (TYPE -> type_tuple .)
    type_tree       reduce using rule 26 (TYPE -> type_tuple .)
    type_trie       reduce using rule 26 (TYPE -> type_tuple .)
    type_stack      reduce using rule 26 (TYPE -> type_tuple .)
    type_queue      reduce using rule 26 (TYPE -> type_tuple .)
    type_binary_search_tree reduce using rule 26 (TYPE -> type_tuple .)
    type_bitset     reduce using rule 26 (TYPE -> type_tuple .)
    type_set        reduce using rule 26 (TYPE -> type_tuple .)
    type_map        reduce using rule 26 (TYPE -> type_tuple .)
    type_range      reduce using rule 26 (TYPE -> type_tuple .)
    type_bad_struct reduce using rule 26 (TYPE -> type_tuple .)
    type_bad_struct2 reduce using rule 26 (TYPE -> type_tuple .)
    lambda          reduce using rule 26 (TYPE -> type_tuple .)
    {               reduce using rule 26 (TYPE -> type_tuple .)
    ]               reduce using rule 26 (TYPE -> type_tuple .)
    :               reduce using rule 26 (TYPE -> type_tuple .)
    ,               reduce using rule 26 (TYPE -> type_tuple .)

  ! (               [ reduce using rule 26 (TYPE -> type_tuple .) ]


state 109

    (165) return_val -> type_array . ( arguments )
    (27) TYPE -> type_array .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 228
    VAR             reduce using rule 27 (TYPE -> type_array .)
    operator_add    reduce using rule 27 (TYPE -> type_array .)
    operator_sub    reduce using rule 27 (TYPE -> type_array .)
    operator_mul    reduce using rule 27 (TYPE -> type_array .)
    operator_div    reduce using rule 27 (TYPE -> type_array .)
    operator_trudiv reduce using rule 27 (TYPE -> type_array .)
    operator_pow    reduce using rule 27 (TYPE -> type_array .)
    operator_join   reduce using rule 27 (TYPE -> type_array .)
    operator_split  reduce using rule 27 (TYPE -> type_array .)
    operator_bitand reduce using rule 27 (TYPE -> type_array .)
    operator_bitor  reduce using rule 27 (TYPE -> type_array .)
    operator_bitxor reduce using rule 27 (TYPE -> type_array .)
    operator_bitshiftleft reduce using rule 27 (TYPE -> type_array .)
    operator_bitshiftright reduce using rule 27 (TYPE -> type_array .)
    operator_and    reduce using rule 27 (TYPE -> type_array .)
    operator_or     reduce using rule 27 (TYPE -> type_array .)
    operator_xor    reduce using rule 27 (TYPE -> type_array .)
    operator_contains reduce using rule 27 (TYPE -> type_array .)
    operator_incr   reduce using rule 27 (TYPE -> type_array .)
    operator_decr   reduce using rule 27 (TYPE -> type_array .)
    operator_outer  reduce using rule 27 (TYPE -> type_array .)
    operator_rotate reduce using rule 27 (TYPE -> type_array .)
    operator_apply  reduce using rule 27 (TYPE -> type_array .)
    operator_compose reduce using rule 27 (TYPE -> type_array .)
    operator_over   reduce using rule 27 (TYPE -> type_array .)
    operator_map    reduce using rule 27 (TYPE -> type_array .)
    operator_less_than reduce using rule 27 (TYPE -> type_array .)
    operator_less_than_equals reduce using rule 27 (TYPE -> type_array .)
    operator_greater_than reduce using rule 27 (TYPE -> type_array .)
    operator_greater_than_equals reduce using rule 27 (TYPE -> type_array .)
    operator_equals reduce using rule 27 (TYPE -> type_array .)
    operator_not_equals reduce using rule 27 (TYPE -> type_array .)
    operator_smallest reduce using rule 27 (TYPE -> type_array .)
    operator_greatest reduce using rule 27 (TYPE -> type_array .)
    operator_goodname reduce using rule 27 (TYPE -> type_array .)
    [               reduce using rule 27 (TYPE -> type_array .)
    operator_scan   reduce using rule 27 (TYPE -> type_array .)
    operator_reduc  reduce using rule 27 (TYPE -> type_array .)
    operator_bitnot reduce using rule 27 (TYPE -> type_array .)
    operator_not    reduce using rule 27 (TYPE -> type_array .)
    operator_inner  reduce using rule 27 (TYPE -> type_array .)
    operator_reverse reduce using rule 27 (TYPE -> type_array .)
    operator_sorted_incr reduce using rule 27 (TYPE -> type_array .)
    operator_sorted_decr reduce using rule 27 (TYPE -> type_array .)
    operator_s_combinator reduce using rule 27 (TYPE -> type_array .)
    operator_s_combinator_2 reduce using rule 27 (TYPE -> type_array .)
    operator_goodname2 reduce using rule 27 (TYPE -> type_array .)
    NEWLINE         reduce using rule 27 (TYPE -> type_array .)
    $end            reduce using rule 27 (TYPE -> type_array .)
    }               reduce using rule 27 (TYPE -> type_array .)
    )               reduce using rule 27 (TYPE -> type_array .)
    FLOAT           reduce using rule 27 (TYPE -> type_array .)
    NUM             reduce using rule 27 (TYPE -> type_array .)
    STRING_3SQ      reduce using rule 27 (TYPE -> type_array .)
    STRING_3DQ      reduce using rule 27 (TYPE -> type_array .)
    STRING_SQ       reduce using rule 27 (TYPE -> type_array .)
    STRING_DQ       reduce using rule 27 (TYPE -> type_array .)
    true            reduce using rule 27 (TYPE -> type_array .)
    Null            reduce using rule 27 (TYPE -> type_array .)
    false           reduce using rule 27 (TYPE -> type_array .)
    type_type       reduce using rule 27 (TYPE -> type_array .)
    type_num        reduce using rule 27 (TYPE -> type_array .)
    type_bool       reduce using rule 27 (TYPE -> type_array .)
    type_any        reduce using rule 27 (TYPE -> type_array .)
    type_u64        reduce using rule 27 (TYPE -> type_array .)
    type_u32        reduce using rule 27 (TYPE -> type_array .)
    type_u16        reduce using rule 27 (TYPE -> type_array .)
    type_u8         reduce using rule 27 (TYPE -> type_array .)
    type_i64        reduce using rule 27 (TYPE -> type_array .)
    type_i32        reduce using rule 27 (TYPE -> type_array .)
    type_i16        reduce using rule 27 (TYPE -> type_array .)
    type_i8         reduce using rule 27 (TYPE -> type_array .)
    type_f32        reduce using rule 27 (TYPE -> type_array .)
    type_f64        reduce using rule 27 (TYPE -> type_array .)
    type_str        reduce using rule 27 (TYPE -> type_array .)
    type_list       reduce using rule 27 (TYPE -> type_array .)
    type_tuple      reduce using rule 27 (TYPE -> type_array .)
    type_array      reduce using rule 27 (TYPE -> type_array .)
    type_vector     reduce using rule 27 (TYPE -> type_array .)
    type_dict       reduce using rule 27 (TYPE -> type_array .)
    type_generator  reduce using rule 27 (TYPE -> type_array .)
    type_linked_list reduce using rule 27 (TYPE -> type_array .)
    type_doubly_linked_list reduce using rule 27 (TYPE -> type_array .)
    type_deque      reduce using rule 27 (TYPE -> type_array .)
    type_heap       reduce using rule 27 (TYPE -> type_array .)
    type_fibonacci_heap reduce using rule 27 (TYPE -> type_array .)
    type_tree       reduce using rule 27 (TYPE -> type_array .)
    type_trie       reduce using rule 27 (TYPE -> type_array .)
    type_stack      reduce using rule 27 (TYPE -> type_array .)
    type_queue      reduce using rule 27 (TYPE -> type_array .)
    type_binary_search_tree reduce using rule 27 (TYPE -> type_array .)
    type_bitset     reduce using rule 27 (TYPE -> type_array .)
    type_set        reduce using rule 27 (TYPE -> type_array .)
    type_map        reduce using rule 27 (TYPE -> type_array .)
    type_range      reduce using rule 27 (TYPE -> type_array .)
    type_bad_struct reduce using rule 27 (TYPE -> type_array .)
    type_bad_struct2 reduce using rule 27 (TYPE -> type_array .)
    lambda          reduce using rule 27 (TYPE -> type_array .)
    {               reduce using rule 27 (TYPE -> type_array .)
    ]               reduce using rule 27 (TYPE -> type_array .)
    :               reduce using rule 27 (TYPE -> type_array .)
    ,               reduce using rule 27 (TYPE -> type_array .)

  ! (               [ reduce using rule 27 (TYPE -> type_array .) ]


state 110

    (166) return_val -> type_vector . ( arguments )
    (28) TYPE -> type_vector .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 229
    VAR             reduce using rule 28 (TYPE -> type_vector .)
    operator_add    reduce using rule 28 (TYPE -> type_vector .)
    operator_sub    reduce using rule 28 (TYPE -> type_vector .)
    operator_mul    reduce using rule 28 (TYPE -> type_vector .)
    operator_div    reduce using rule 28 (TYPE -> type_vector .)
    operator_trudiv reduce using rule 28 (TYPE -> type_vector .)
    operator_pow    reduce using rule 28 (TYPE -> type_vector .)
    operator_join   reduce using rule 28 (TYPE -> type_vector .)
    operator_split  reduce using rule 28 (TYPE -> type_vector .)
    operator_bitand reduce using rule 28 (TYPE -> type_vector .)
    operator_bitor  reduce using rule 28 (TYPE -> type_vector .)
    operator_bitxor reduce using rule 28 (TYPE -> type_vector .)
    operator_bitshiftleft reduce using rule 28 (TYPE -> type_vector .)
    operator_bitshiftright reduce using rule 28 (TYPE -> type_vector .)
    operator_and    reduce using rule 28 (TYPE -> type_vector .)
    operator_or     reduce using rule 28 (TYPE -> type_vector .)
    operator_xor    reduce using rule 28 (TYPE -> type_vector .)
    operator_contains reduce using rule 28 (TYPE -> type_vector .)
    operator_incr   reduce using rule 28 (TYPE -> type_vector .)
    operator_decr   reduce using rule 28 (TYPE -> type_vector .)
    operator_outer  reduce using rule 28 (TYPE -> type_vector .)
    operator_rotate reduce using rule 28 (TYPE -> type_vector .)
    operator_apply  reduce using rule 28 (TYPE -> type_vector .)
    operator_compose reduce using rule 28 (TYPE -> type_vector .)
    operator_over   reduce using rule 28 (TYPE -> type_vector .)
    operator_map    reduce using rule 28 (TYPE -> type_vector .)
    operator_less_than reduce using rule 28 (TYPE -> type_vector .)
    operator_less_than_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_greater_than reduce using rule 28 (TYPE -> type_vector .)
    operator_greater_than_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_not_equals reduce using rule 28 (TYPE -> type_vector .)
    operator_smallest reduce using rule 28 (TYPE -> type_vector .)
    operator_greatest reduce using rule 28 (TYPE -> type_vector .)
    operator_goodname reduce using rule 28 (TYPE -> type_vector .)
    [               reduce using rule 28 (TYPE -> type_vector .)
    operator_scan   reduce using rule 28 (TYPE -> type_vector .)
    operator_reduc  reduce using rule 28 (TYPE -> type_vector .)
    operator_bitnot reduce using rule 28 (TYPE -> type_vector .)
    operator_not    reduce using rule 28 (TYPE -> type_vector .)
    operator_inner  reduce using rule 28 (TYPE -> type_vector .)
    operator_reverse reduce using rule 28 (TYPE -> type_vector .)
    operator_sorted_incr reduce using rule 28 (TYPE -> type_vector .)
    operator_sorted_decr reduce using rule 28 (TYPE -> type_vector .)
    operator_s_combinator reduce using rule 28 (TYPE -> type_vector .)
    operator_s_combinator_2 reduce using rule 28 (TYPE -> type_vector .)
    operator_goodname2 reduce using rule 28 (TYPE -> type_vector .)
    NEWLINE         reduce using rule 28 (TYPE -> type_vector .)
    $end            reduce using rule 28 (TYPE -> type_vector .)
    }               reduce using rule 28 (TYPE -> type_vector .)
    )               reduce using rule 28 (TYPE -> type_vector .)
    FLOAT           reduce using rule 28 (TYPE -> type_vector .)
    NUM             reduce using rule 28 (TYPE -> type_vector .)
    STRING_3SQ      reduce using rule 28 (TYPE -> type_vector .)
    STRING_3DQ      reduce using rule 28 (TYPE -> type_vector .)
    STRING_SQ       reduce using rule 28 (TYPE -> type_vector .)
    STRING_DQ       reduce using rule 28 (TYPE -> type_vector .)
    true            reduce using rule 28 (TYPE -> type_vector .)
    Null            reduce using rule 28 (TYPE -> type_vector .)
    false           reduce using rule 28 (TYPE -> type_vector .)
    type_type       reduce using rule 28 (TYPE -> type_vector .)
    type_num        reduce using rule 28 (TYPE -> type_vector .)
    type_bool       reduce using rule 28 (TYPE -> type_vector .)
    type_any        reduce using rule 28 (TYPE -> type_vector .)
    type_u64        reduce using rule 28 (TYPE -> type_vector .)
    type_u32        reduce using rule 28 (TYPE -> type_vector .)
    type_u16        reduce using rule 28 (TYPE -> type_vector .)
    type_u8         reduce using rule 28 (TYPE -> type_vector .)
    type_i64        reduce using rule 28 (TYPE -> type_vector .)
    type_i32        reduce using rule 28 (TYPE -> type_vector .)
    type_i16        reduce using rule 28 (TYPE -> type_vector .)
    type_i8         reduce using rule 28 (TYPE -> type_vector .)
    type_f32        reduce using rule 28 (TYPE -> type_vector .)
    type_f64        reduce using rule 28 (TYPE -> type_vector .)
    type_str        reduce using rule 28 (TYPE -> type_vector .)
    type_list       reduce using rule 28 (TYPE -> type_vector .)
    type_tuple      reduce using rule 28 (TYPE -> type_vector .)
    type_array      reduce using rule 28 (TYPE -> type_vector .)
    type_vector     reduce using rule 28 (TYPE -> type_vector .)
    type_dict       reduce using rule 28 (TYPE -> type_vector .)
    type_generator  reduce using rule 28 (TYPE -> type_vector .)
    type_linked_list reduce using rule 28 (TYPE -> type_vector .)
    type_doubly_linked_list reduce using rule 28 (TYPE -> type_vector .)
    type_deque      reduce using rule 28 (TYPE -> type_vector .)
    type_heap       reduce using rule 28 (TYPE -> type_vector .)
    type_fibonacci_heap reduce using rule 28 (TYPE -> type_vector .)
    type_tree       reduce using rule 28 (TYPE -> type_vector .)
    type_trie       reduce using rule 28 (TYPE -> type_vector .)
    type_stack      reduce using rule 28 (TYPE -> type_vector .)
    type_queue      reduce using rule 28 (TYPE -> type_vector .)
    type_binary_search_tree reduce using rule 28 (TYPE -> type_vector .)
    type_bitset     reduce using rule 28 (TYPE -> type_vector .)
    type_set        reduce using rule 28 (TYPE -> type_vector .)
    type_map        reduce using rule 28 (TYPE -> type_vector .)
    type_range      reduce using rule 28 (TYPE -> type_vector .)
    type_bad_struct reduce using rule 28 (TYPE -> type_vector .)
    type_bad_struct2 reduce using rule 28 (TYPE -> type_vector .)
    lambda          reduce using rule 28 (TYPE -> type_vector .)
    {               reduce using rule 28 (TYPE -> type_vector .)
    ]               reduce using rule 28 (TYPE -> type_vector .)
    :               reduce using rule 28 (TYPE -> type_vector .)
    ,               reduce using rule 28 (TYPE -> type_vector .)

  ! (               [ reduce using rule 28 (TYPE -> type_vector .) ]


state 111

    (167) return_val -> type_dict . ( arguments )
    (29) TYPE -> type_dict .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 230
    VAR             reduce using rule 29 (TYPE -> type_dict .)
    operator_add    reduce using rule 29 (TYPE -> type_dict .)
    operator_sub    reduce using rule 29 (TYPE -> type_dict .)
    operator_mul    reduce using rule 29 (TYPE -> type_dict .)
    operator_div    reduce using rule 29 (TYPE -> type_dict .)
    operator_trudiv reduce using rule 29 (TYPE -> type_dict .)
    operator_pow    reduce using rule 29 (TYPE -> type_dict .)
    operator_join   reduce using rule 29 (TYPE -> type_dict .)
    operator_split  reduce using rule 29 (TYPE -> type_dict .)
    operator_bitand reduce using rule 29 (TYPE -> type_dict .)
    operator_bitor  reduce using rule 29 (TYPE -> type_dict .)
    operator_bitxor reduce using rule 29 (TYPE -> type_dict .)
    operator_bitshiftleft reduce using rule 29 (TYPE -> type_dict .)
    operator_bitshiftright reduce using rule 29 (TYPE -> type_dict .)
    operator_and    reduce using rule 29 (TYPE -> type_dict .)
    operator_or     reduce using rule 29 (TYPE -> type_dict .)
    operator_xor    reduce using rule 29 (TYPE -> type_dict .)
    operator_contains reduce using rule 29 (TYPE -> type_dict .)
    operator_incr   reduce using rule 29 (TYPE -> type_dict .)
    operator_decr   reduce using rule 29 (TYPE -> type_dict .)
    operator_outer  reduce using rule 29 (TYPE -> type_dict .)
    operator_rotate reduce using rule 29 (TYPE -> type_dict .)
    operator_apply  reduce using rule 29 (TYPE -> type_dict .)
    operator_compose reduce using rule 29 (TYPE -> type_dict .)
    operator_over   reduce using rule 29 (TYPE -> type_dict .)
    operator_map    reduce using rule 29 (TYPE -> type_dict .)
    operator_less_than reduce using rule 29 (TYPE -> type_dict .)
    operator_less_than_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_greater_than reduce using rule 29 (TYPE -> type_dict .)
    operator_greater_than_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_not_equals reduce using rule 29 (TYPE -> type_dict .)
    operator_smallest reduce using rule 29 (TYPE -> type_dict .)
    operator_greatest reduce using rule 29 (TYPE -> type_dict .)
    operator_goodname reduce using rule 29 (TYPE -> type_dict .)
    [               reduce using rule 29 (TYPE -> type_dict .)
    operator_scan   reduce using rule 29 (TYPE -> type_dict .)
    operator_reduc  reduce using rule 29 (TYPE -> type_dict .)
    operator_bitnot reduce using rule 29 (TYPE -> type_dict .)
    operator_not    reduce using rule 29 (TYPE -> type_dict .)
    operator_inner  reduce using rule 29 (TYPE -> type_dict .)
    operator_reverse reduce using rule 29 (TYPE -> type_dict .)
    operator_sorted_incr reduce using rule 29 (TYPE -> type_dict .)
    operator_sorted_decr reduce using rule 29 (TYPE -> type_dict .)
    operator_s_combinator reduce using rule 29 (TYPE -> type_dict .)
    operator_s_combinator_2 reduce using rule 29 (TYPE -> type_dict .)
    operator_goodname2 reduce using rule 29 (TYPE -> type_dict .)
    NEWLINE         reduce using rule 29 (TYPE -> type_dict .)
    $end            reduce using rule 29 (TYPE -> type_dict .)
    }               reduce using rule 29 (TYPE -> type_dict .)
    )               reduce using rule 29 (TYPE -> type_dict .)
    FLOAT           reduce using rule 29 (TYPE -> type_dict .)
    NUM             reduce using rule 29 (TYPE -> type_dict .)
    STRING_3SQ      reduce using rule 29 (TYPE -> type_dict .)
    STRING_3DQ      reduce using rule 29 (TYPE -> type_dict .)
    STRING_SQ       reduce using rule 29 (TYPE -> type_dict .)
    STRING_DQ       reduce using rule 29 (TYPE -> type_dict .)
    true            reduce using rule 29 (TYPE -> type_dict .)
    Null            reduce using rule 29 (TYPE -> type_dict .)
    false           reduce using rule 29 (TYPE -> type_dict .)
    type_type       reduce using rule 29 (TYPE -> type_dict .)
    type_num        reduce using rule 29 (TYPE -> type_dict .)
    type_bool       reduce using rule 29 (TYPE -> type_dict .)
    type_any        reduce using rule 29 (TYPE -> type_dict .)
    type_u64        reduce using rule 29 (TYPE -> type_dict .)
    type_u32        reduce using rule 29 (TYPE -> type_dict .)
    type_u16        reduce using rule 29 (TYPE -> type_dict .)
    type_u8         reduce using rule 29 (TYPE -> type_dict .)
    type_i64        reduce using rule 29 (TYPE -> type_dict .)
    type_i32        reduce using rule 29 (TYPE -> type_dict .)
    type_i16        reduce using rule 29 (TYPE -> type_dict .)
    type_i8         reduce using rule 29 (TYPE -> type_dict .)
    type_f32        reduce using rule 29 (TYPE -> type_dict .)
    type_f64        reduce using rule 29 (TYPE -> type_dict .)
    type_str        reduce using rule 29 (TYPE -> type_dict .)
    type_list       reduce using rule 29 (TYPE -> type_dict .)
    type_tuple      reduce using rule 29 (TYPE -> type_dict .)
    type_array      reduce using rule 29 (TYPE -> type_dict .)
    type_vector     reduce using rule 29 (TYPE -> type_dict .)
    type_dict       reduce using rule 29 (TYPE -> type_dict .)
    type_generator  reduce using rule 29 (TYPE -> type_dict .)
    type_linked_list reduce using rule 29 (TYPE -> type_dict .)
    type_doubly_linked_list reduce using rule 29 (TYPE -> type_dict .)
    type_deque      reduce using rule 29 (TYPE -> type_dict .)
    type_heap       reduce using rule 29 (TYPE -> type_dict .)
    type_fibonacci_heap reduce using rule 29 (TYPE -> type_dict .)
    type_tree       reduce using rule 29 (TYPE -> type_dict .)
    type_trie       reduce using rule 29 (TYPE -> type_dict .)
    type_stack      reduce using rule 29 (TYPE -> type_dict .)
    type_queue      reduce using rule 29 (TYPE -> type_dict .)
    type_binary_search_tree reduce using rule 29 (TYPE -> type_dict .)
    type_bitset     reduce using rule 29 (TYPE -> type_dict .)
    type_set        reduce using rule 29 (TYPE -> type_dict .)
    type_map        reduce using rule 29 (TYPE -> type_dict .)
    type_range      reduce using rule 29 (TYPE -> type_dict .)
    type_bad_struct reduce using rule 29 (TYPE -> type_dict .)
    type_bad_struct2 reduce using rule 29 (TYPE -> type_dict .)
    lambda          reduce using rule 29 (TYPE -> type_dict .)
    {               reduce using rule 29 (TYPE -> type_dict .)
    ]               reduce using rule 29 (TYPE -> type_dict .)
    :               reduce using rule 29 (TYPE -> type_dict .)
    ,               reduce using rule 29 (TYPE -> type_dict .)

  ! (               [ reduce using rule 29 (TYPE -> type_dict .) ]


state 112

    (168) return_val -> type_generator . ( arguments )
    (30) TYPE -> type_generator .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 231
    VAR             reduce using rule 30 (TYPE -> type_generator .)
    operator_add    reduce using rule 30 (TYPE -> type_generator .)
    operator_sub    reduce using rule 30 (TYPE -> type_generator .)
    operator_mul    reduce using rule 30 (TYPE -> type_generator .)
    operator_div    reduce using rule 30 (TYPE -> type_generator .)
    operator_trudiv reduce using rule 30 (TYPE -> type_generator .)
    operator_pow    reduce using rule 30 (TYPE -> type_generator .)
    operator_join   reduce using rule 30 (TYPE -> type_generator .)
    operator_split  reduce using rule 30 (TYPE -> type_generator .)
    operator_bitand reduce using rule 30 (TYPE -> type_generator .)
    operator_bitor  reduce using rule 30 (TYPE -> type_generator .)
    operator_bitxor reduce using rule 30 (TYPE -> type_generator .)
    operator_bitshiftleft reduce using rule 30 (TYPE -> type_generator .)
    operator_bitshiftright reduce using rule 30 (TYPE -> type_generator .)
    operator_and    reduce using rule 30 (TYPE -> type_generator .)
    operator_or     reduce using rule 30 (TYPE -> type_generator .)
    operator_xor    reduce using rule 30 (TYPE -> type_generator .)
    operator_contains reduce using rule 30 (TYPE -> type_generator .)
    operator_incr   reduce using rule 30 (TYPE -> type_generator .)
    operator_decr   reduce using rule 30 (TYPE -> type_generator .)
    operator_outer  reduce using rule 30 (TYPE -> type_generator .)
    operator_rotate reduce using rule 30 (TYPE -> type_generator .)
    operator_apply  reduce using rule 30 (TYPE -> type_generator .)
    operator_compose reduce using rule 30 (TYPE -> type_generator .)
    operator_over   reduce using rule 30 (TYPE -> type_generator .)
    operator_map    reduce using rule 30 (TYPE -> type_generator .)
    operator_less_than reduce using rule 30 (TYPE -> type_generator .)
    operator_less_than_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_greater_than reduce using rule 30 (TYPE -> type_generator .)
    operator_greater_than_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_not_equals reduce using rule 30 (TYPE -> type_generator .)
    operator_smallest reduce using rule 30 (TYPE -> type_generator .)
    operator_greatest reduce using rule 30 (TYPE -> type_generator .)
    operator_goodname reduce using rule 30 (TYPE -> type_generator .)
    [               reduce using rule 30 (TYPE -> type_generator .)
    operator_scan   reduce using rule 30 (TYPE -> type_generator .)
    operator_reduc  reduce using rule 30 (TYPE -> type_generator .)
    operator_bitnot reduce using rule 30 (TYPE -> type_generator .)
    operator_not    reduce using rule 30 (TYPE -> type_generator .)
    operator_inner  reduce using rule 30 (TYPE -> type_generator .)
    operator_reverse reduce using rule 30 (TYPE -> type_generator .)
    operator_sorted_incr reduce using rule 30 (TYPE -> type_generator .)
    operator_sorted_decr reduce using rule 30 (TYPE -> type_generator .)
    operator_s_combinator reduce using rule 30 (TYPE -> type_generator .)
    operator_s_combinator_2 reduce using rule 30 (TYPE -> type_generator .)
    operator_goodname2 reduce using rule 30 (TYPE -> type_generator .)
    NEWLINE         reduce using rule 30 (TYPE -> type_generator .)
    $end            reduce using rule 30 (TYPE -> type_generator .)
    }               reduce using rule 30 (TYPE -> type_generator .)
    )               reduce using rule 30 (TYPE -> type_generator .)
    FLOAT           reduce using rule 30 (TYPE -> type_generator .)
    NUM             reduce using rule 30 (TYPE -> type_generator .)
    STRING_3SQ      reduce using rule 30 (TYPE -> type_generator .)
    STRING_3DQ      reduce using rule 30 (TYPE -> type_generator .)
    STRING_SQ       reduce using rule 30 (TYPE -> type_generator .)
    STRING_DQ       reduce using rule 30 (TYPE -> type_generator .)
    true            reduce using rule 30 (TYPE -> type_generator .)
    Null            reduce using rule 30 (TYPE -> type_generator .)
    false           reduce using rule 30 (TYPE -> type_generator .)
    type_type       reduce using rule 30 (TYPE -> type_generator .)
    type_num        reduce using rule 30 (TYPE -> type_generator .)
    type_bool       reduce using rule 30 (TYPE -> type_generator .)
    type_any        reduce using rule 30 (TYPE -> type_generator .)
    type_u64        reduce using rule 30 (TYPE -> type_generator .)
    type_u32        reduce using rule 30 (TYPE -> type_generator .)
    type_u16        reduce using rule 30 (TYPE -> type_generator .)
    type_u8         reduce using rule 30 (TYPE -> type_generator .)
    type_i64        reduce using rule 30 (TYPE -> type_generator .)
    type_i32        reduce using rule 30 (TYPE -> type_generator .)
    type_i16        reduce using rule 30 (TYPE -> type_generator .)
    type_i8         reduce using rule 30 (TYPE -> type_generator .)
    type_f32        reduce using rule 30 (TYPE -> type_generator .)
    type_f64        reduce using rule 30 (TYPE -> type_generator .)
    type_str        reduce using rule 30 (TYPE -> type_generator .)
    type_list       reduce using rule 30 (TYPE -> type_generator .)
    type_tuple      reduce using rule 30 (TYPE -> type_generator .)
    type_array      reduce using rule 30 (TYPE -> type_generator .)
    type_vector     reduce using rule 30 (TYPE -> type_generator .)
    type_dict       reduce using rule 30 (TYPE -> type_generator .)
    type_generator  reduce using rule 30 (TYPE -> type_generator .)
    type_linked_list reduce using rule 30 (TYPE -> type_generator .)
    type_doubly_linked_list reduce using rule 30 (TYPE -> type_generator .)
    type_deque      reduce using rule 30 (TYPE -> type_generator .)
    type_heap       reduce using rule 30 (TYPE -> type_generator .)
    type_fibonacci_heap reduce using rule 30 (TYPE -> type_generator .)
    type_tree       reduce using rule 30 (TYPE -> type_generator .)
    type_trie       reduce using rule 30 (TYPE -> type_generator .)
    type_stack      reduce using rule 30 (TYPE -> type_generator .)
    type_queue      reduce using rule 30 (TYPE -> type_generator .)
    type_binary_search_tree reduce using rule 30 (TYPE -> type_generator .)
    type_bitset     reduce using rule 30 (TYPE -> type_generator .)
    type_set        reduce using rule 30 (TYPE -> type_generator .)
    type_map        reduce using rule 30 (TYPE -> type_generator .)
    type_range      reduce using rule 30 (TYPE -> type_generator .)
    type_bad_struct reduce using rule 30 (TYPE -> type_generator .)
    type_bad_struct2 reduce using rule 30 (TYPE -> type_generator .)
    lambda          reduce using rule 30 (TYPE -> type_generator .)
    {               reduce using rule 30 (TYPE -> type_generator .)
    ]               reduce using rule 30 (TYPE -> type_generator .)
    :               reduce using rule 30 (TYPE -> type_generator .)
    ,               reduce using rule 30 (TYPE -> type_generator .)

  ! (               [ reduce using rule 30 (TYPE -> type_generator .) ]


state 113

    (169) return_val -> type_linked_list . ( arguments )
    (31) TYPE -> type_linked_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 232
    VAR             reduce using rule 31 (TYPE -> type_linked_list .)
    operator_add    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sub    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_mul    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_div    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_trudiv reduce using rule 31 (TYPE -> type_linked_list .)
    operator_pow    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_join   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_split  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitand reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitor  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitxor reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitshiftleft reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitshiftright reduce using rule 31 (TYPE -> type_linked_list .)
    operator_and    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_or     reduce using rule 31 (TYPE -> type_linked_list .)
    operator_xor    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_contains reduce using rule 31 (TYPE -> type_linked_list .)
    operator_incr   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_decr   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_outer  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_rotate reduce using rule 31 (TYPE -> type_linked_list .)
    operator_apply  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_compose reduce using rule 31 (TYPE -> type_linked_list .)
    operator_over   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_map    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_less_than reduce using rule 31 (TYPE -> type_linked_list .)
    operator_less_than_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greater_than reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greater_than_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_not_equals reduce using rule 31 (TYPE -> type_linked_list .)
    operator_smallest reduce using rule 31 (TYPE -> type_linked_list .)
    operator_greatest reduce using rule 31 (TYPE -> type_linked_list .)
    operator_goodname reduce using rule 31 (TYPE -> type_linked_list .)
    [               reduce using rule 31 (TYPE -> type_linked_list .)
    operator_scan   reduce using rule 31 (TYPE -> type_linked_list .)
    operator_reduc  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_bitnot reduce using rule 31 (TYPE -> type_linked_list .)
    operator_not    reduce using rule 31 (TYPE -> type_linked_list .)
    operator_inner  reduce using rule 31 (TYPE -> type_linked_list .)
    operator_reverse reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sorted_incr reduce using rule 31 (TYPE -> type_linked_list .)
    operator_sorted_decr reduce using rule 31 (TYPE -> type_linked_list .)
    operator_s_combinator reduce using rule 31 (TYPE -> type_linked_list .)
    operator_s_combinator_2 reduce using rule 31 (TYPE -> type_linked_list .)
    operator_goodname2 reduce using rule 31 (TYPE -> type_linked_list .)
    NEWLINE         reduce using rule 31 (TYPE -> type_linked_list .)
    $end            reduce using rule 31 (TYPE -> type_linked_list .)
    }               reduce using rule 31 (TYPE -> type_linked_list .)
    )               reduce using rule 31 (TYPE -> type_linked_list .)
    FLOAT           reduce using rule 31 (TYPE -> type_linked_list .)
    NUM             reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_3SQ      reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_3DQ      reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_SQ       reduce using rule 31 (TYPE -> type_linked_list .)
    STRING_DQ       reduce using rule 31 (TYPE -> type_linked_list .)
    true            reduce using rule 31 (TYPE -> type_linked_list .)
    Null            reduce using rule 31 (TYPE -> type_linked_list .)
    false           reduce using rule 31 (TYPE -> type_linked_list .)
    type_type       reduce using rule 31 (TYPE -> type_linked_list .)
    type_num        reduce using rule 31 (TYPE -> type_linked_list .)
    type_bool       reduce using rule 31 (TYPE -> type_linked_list .)
    type_any        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u16        reduce using rule 31 (TYPE -> type_linked_list .)
    type_u8         reduce using rule 31 (TYPE -> type_linked_list .)
    type_i64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i16        reduce using rule 31 (TYPE -> type_linked_list .)
    type_i8         reduce using rule 31 (TYPE -> type_linked_list .)
    type_f32        reduce using rule 31 (TYPE -> type_linked_list .)
    type_f64        reduce using rule 31 (TYPE -> type_linked_list .)
    type_str        reduce using rule 31 (TYPE -> type_linked_list .)
    type_list       reduce using rule 31 (TYPE -> type_linked_list .)
    type_tuple      reduce using rule 31 (TYPE -> type_linked_list .)
    type_array      reduce using rule 31 (TYPE -> type_linked_list .)
    type_vector     reduce using rule 31 (TYPE -> type_linked_list .)
    type_dict       reduce using rule 31 (TYPE -> type_linked_list .)
    type_generator  reduce using rule 31 (TYPE -> type_linked_list .)
    type_linked_list reduce using rule 31 (TYPE -> type_linked_list .)
    type_doubly_linked_list reduce using rule 31 (TYPE -> type_linked_list .)
    type_deque      reduce using rule 31 (TYPE -> type_linked_list .)
    type_heap       reduce using rule 31 (TYPE -> type_linked_list .)
    type_fibonacci_heap reduce using rule 31 (TYPE -> type_linked_list .)
    type_tree       reduce using rule 31 (TYPE -> type_linked_list .)
    type_trie       reduce using rule 31 (TYPE -> type_linked_list .)
    type_stack      reduce using rule 31 (TYPE -> type_linked_list .)
    type_queue      reduce using rule 31 (TYPE -> type_linked_list .)
    type_binary_search_tree reduce using rule 31 (TYPE -> type_linked_list .)
    type_bitset     reduce using rule 31 (TYPE -> type_linked_list .)
    type_set        reduce using rule 31 (TYPE -> type_linked_list .)
    type_map        reduce using rule 31 (TYPE -> type_linked_list .)
    type_range      reduce using rule 31 (TYPE -> type_linked_list .)
    type_bad_struct reduce using rule 31 (TYPE -> type_linked_list .)
    type_bad_struct2 reduce using rule 31 (TYPE -> type_linked_list .)
    lambda          reduce using rule 31 (TYPE -> type_linked_list .)
    {               reduce using rule 31 (TYPE -> type_linked_list .)
    ]               reduce using rule 31 (TYPE -> type_linked_list .)
    :               reduce using rule 31 (TYPE -> type_linked_list .)
    ,               reduce using rule 31 (TYPE -> type_linked_list .)

  ! (               [ reduce using rule 31 (TYPE -> type_linked_list .) ]


state 114

    (170) return_val -> type_doubly_linked_list . ( arguments )
    (32) TYPE -> type_doubly_linked_list .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 233
    VAR             reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_add    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sub    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_mul    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_div    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_trudiv reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_pow    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_join   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_split  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitand reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitor  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitxor reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftleft reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitshiftright reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_and    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_or     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_xor    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_contains reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_incr   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_decr   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_outer  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_rotate reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_apply  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_compose reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_over   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_map    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_less_than reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_less_than_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greater_than reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greater_than_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_not_equals reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_smallest reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_greatest reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_goodname reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    [               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_scan   reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_reduc  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_bitnot reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_not    reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_inner  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_reverse reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sorted_incr reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_sorted_decr reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_s_combinator reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_s_combinator_2 reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    operator_goodname2 reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    NEWLINE         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    $end            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    }               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    )               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    FLOAT           reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    NUM             reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_3SQ      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_3DQ      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_SQ       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    STRING_DQ       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    true            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    Null            reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    false           reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_type       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_num        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bool       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_any        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u16        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_u8         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i16        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_i8         reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_f32        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_f64        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_str        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_list       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_tuple      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_array      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_vector     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_dict       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_generator  reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_linked_list reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_doubly_linked_list reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_deque      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_heap       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_fibonacci_heap reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_tree       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_trie       reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_stack      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_queue      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_binary_search_tree reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bitset     reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_set        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_map        reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_range      reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bad_struct reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    type_bad_struct2 reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    lambda          reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    {               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    ]               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    :               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    ,               reduce using rule 32 (TYPE -> type_doubly_linked_list .)

  ! (               [ reduce using rule 32 (TYPE -> type_doubly_linked_list .) ]


state 115

    (171) return_val -> type_deque . ( arguments )
    (33) TYPE -> type_deque .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 234
    VAR             reduce using rule 33 (TYPE -> type_deque .)
    operator_add    reduce using rule 33 (TYPE -> type_deque .)
    operator_sub    reduce using rule 33 (TYPE -> type_deque .)
    operator_mul    reduce using rule 33 (TYPE -> type_deque .)
    operator_div    reduce using rule 33 (TYPE -> type_deque .)
    operator_trudiv reduce using rule 33 (TYPE -> type_deque .)
    operator_pow    reduce using rule 33 (TYPE -> type_deque .)
    operator_join   reduce using rule 33 (TYPE -> type_deque .)
    operator_split  reduce using rule 33 (TYPE -> type_deque .)
    operator_bitand reduce using rule 33 (TYPE -> type_deque .)
    operator_bitor  reduce using rule 33 (TYPE -> type_deque .)
    operator_bitxor reduce using rule 33 (TYPE -> type_deque .)
    operator_bitshiftleft reduce using rule 33 (TYPE -> type_deque .)
    operator_bitshiftright reduce using rule 33 (TYPE -> type_deque .)
    operator_and    reduce using rule 33 (TYPE -> type_deque .)
    operator_or     reduce using rule 33 (TYPE -> type_deque .)
    operator_xor    reduce using rule 33 (TYPE -> type_deque .)
    operator_contains reduce using rule 33 (TYPE -> type_deque .)
    operator_incr   reduce using rule 33 (TYPE -> type_deque .)
    operator_decr   reduce using rule 33 (TYPE -> type_deque .)
    operator_outer  reduce using rule 33 (TYPE -> type_deque .)
    operator_rotate reduce using rule 33 (TYPE -> type_deque .)
    operator_apply  reduce using rule 33 (TYPE -> type_deque .)
    operator_compose reduce using rule 33 (TYPE -> type_deque .)
    operator_over   reduce using rule 33 (TYPE -> type_deque .)
    operator_map    reduce using rule 33 (TYPE -> type_deque .)
    operator_less_than reduce using rule 33 (TYPE -> type_deque .)
    operator_less_than_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_greater_than reduce using rule 33 (TYPE -> type_deque .)
    operator_greater_than_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_not_equals reduce using rule 33 (TYPE -> type_deque .)
    operator_smallest reduce using rule 33 (TYPE -> type_deque .)
    operator_greatest reduce using rule 33 (TYPE -> type_deque .)
    operator_goodname reduce using rule 33 (TYPE -> type_deque .)
    [               reduce using rule 33 (TYPE -> type_deque .)
    operator_scan   reduce using rule 33 (TYPE -> type_deque .)
    operator_reduc  reduce using rule 33 (TYPE -> type_deque .)
    operator_bitnot reduce using rule 33 (TYPE -> type_deque .)
    operator_not    reduce using rule 33 (TYPE -> type_deque .)
    operator_inner  reduce using rule 33 (TYPE -> type_deque .)
    operator_reverse reduce using rule 33 (TYPE -> type_deque .)
    operator_sorted_incr reduce using rule 33 (TYPE -> type_deque .)
    operator_sorted_decr reduce using rule 33 (TYPE -> type_deque .)
    operator_s_combinator reduce using rule 33 (TYPE -> type_deque .)
    operator_s_combinator_2 reduce using rule 33 (TYPE -> type_deque .)
    operator_goodname2 reduce using rule 33 (TYPE -> type_deque .)
    NEWLINE         reduce using rule 33 (TYPE -> type_deque .)
    $end            reduce using rule 33 (TYPE -> type_deque .)
    }               reduce using rule 33 (TYPE -> type_deque .)
    )               reduce using rule 33 (TYPE -> type_deque .)
    FLOAT           reduce using rule 33 (TYPE -> type_deque .)
    NUM             reduce using rule 33 (TYPE -> type_deque .)
    STRING_3SQ      reduce using rule 33 (TYPE -> type_deque .)
    STRING_3DQ      reduce using rule 33 (TYPE -> type_deque .)
    STRING_SQ       reduce using rule 33 (TYPE -> type_deque .)
    STRING_DQ       reduce using rule 33 (TYPE -> type_deque .)
    true            reduce using rule 33 (TYPE -> type_deque .)
    Null            reduce using rule 33 (TYPE -> type_deque .)
    false           reduce using rule 33 (TYPE -> type_deque .)
    type_type       reduce using rule 33 (TYPE -> type_deque .)
    type_num        reduce using rule 33 (TYPE -> type_deque .)
    type_bool       reduce using rule 33 (TYPE -> type_deque .)
    type_any        reduce using rule 33 (TYPE -> type_deque .)
    type_u64        reduce using rule 33 (TYPE -> type_deque .)
    type_u32        reduce using rule 33 (TYPE -> type_deque .)
    type_u16        reduce using rule 33 (TYPE -> type_deque .)
    type_u8         reduce using rule 33 (TYPE -> type_deque .)
    type_i64        reduce using rule 33 (TYPE -> type_deque .)
    type_i32        reduce using rule 33 (TYPE -> type_deque .)
    type_i16        reduce using rule 33 (TYPE -> type_deque .)
    type_i8         reduce using rule 33 (TYPE -> type_deque .)
    type_f32        reduce using rule 33 (TYPE -> type_deque .)
    type_f64        reduce using rule 33 (TYPE -> type_deque .)
    type_str        reduce using rule 33 (TYPE -> type_deque .)
    type_list       reduce using rule 33 (TYPE -> type_deque .)
    type_tuple      reduce using rule 33 (TYPE -> type_deque .)
    type_array      reduce using rule 33 (TYPE -> type_deque .)
    type_vector     reduce using rule 33 (TYPE -> type_deque .)
    type_dict       reduce using rule 33 (TYPE -> type_deque .)
    type_generator  reduce using rule 33 (TYPE -> type_deque .)
    type_linked_list reduce using rule 33 (TYPE -> type_deque .)
    type_doubly_linked_list reduce using rule 33 (TYPE -> type_deque .)
    type_deque      reduce using rule 33 (TYPE -> type_deque .)
    type_heap       reduce using rule 33 (TYPE -> type_deque .)
    type_fibonacci_heap reduce using rule 33 (TYPE -> type_deque .)
    type_tree       reduce using rule 33 (TYPE -> type_deque .)
    type_trie       reduce using rule 33 (TYPE -> type_deque .)
    type_stack      reduce using rule 33 (TYPE -> type_deque .)
    type_queue      reduce using rule 33 (TYPE -> type_deque .)
    type_binary_search_tree reduce using rule 33 (TYPE -> type_deque .)
    type_bitset     reduce using rule 33 (TYPE -> type_deque .)
    type_set        reduce using rule 33 (TYPE -> type_deque .)
    type_map        reduce using rule 33 (TYPE -> type_deque .)
    type_range      reduce using rule 33 (TYPE -> type_deque .)
    type_bad_struct reduce using rule 33 (TYPE -> type_deque .)
    type_bad_struct2 reduce using rule 33 (TYPE -> type_deque .)
    lambda          reduce using rule 33 (TYPE -> type_deque .)
    {               reduce using rule 33 (TYPE -> type_deque .)
    ]               reduce using rule 33 (TYPE -> type_deque .)
    :               reduce using rule 33 (TYPE -> type_deque .)
    ,               reduce using rule 33 (TYPE -> type_deque .)

  ! (               [ reduce using rule 33 (TYPE -> type_deque .) ]


state 116

    (172) return_val -> type_heap . ( arguments )
    (34) TYPE -> type_heap .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 235
    VAR             reduce using rule 34 (TYPE -> type_heap .)
    operator_add    reduce using rule 34 (TYPE -> type_heap .)
    operator_sub    reduce using rule 34 (TYPE -> type_heap .)
    operator_mul    reduce using rule 34 (TYPE -> type_heap .)
    operator_div    reduce using rule 34 (TYPE -> type_heap .)
    operator_trudiv reduce using rule 34 (TYPE -> type_heap .)
    operator_pow    reduce using rule 34 (TYPE -> type_heap .)
    operator_join   reduce using rule 34 (TYPE -> type_heap .)
    operator_split  reduce using rule 34 (TYPE -> type_heap .)
    operator_bitand reduce using rule 34 (TYPE -> type_heap .)
    operator_bitor  reduce using rule 34 (TYPE -> type_heap .)
    operator_bitxor reduce using rule 34 (TYPE -> type_heap .)
    operator_bitshiftleft reduce using rule 34 (TYPE -> type_heap .)
    operator_bitshiftright reduce using rule 34 (TYPE -> type_heap .)
    operator_and    reduce using rule 34 (TYPE -> type_heap .)
    operator_or     reduce using rule 34 (TYPE -> type_heap .)
    operator_xor    reduce using rule 34 (TYPE -> type_heap .)
    operator_contains reduce using rule 34 (TYPE -> type_heap .)
    operator_incr   reduce using rule 34 (TYPE -> type_heap .)
    operator_decr   reduce using rule 34 (TYPE -> type_heap .)
    operator_outer  reduce using rule 34 (TYPE -> type_heap .)
    operator_rotate reduce using rule 34 (TYPE -> type_heap .)
    operator_apply  reduce using rule 34 (TYPE -> type_heap .)
    operator_compose reduce using rule 34 (TYPE -> type_heap .)
    operator_over   reduce using rule 34 (TYPE -> type_heap .)
    operator_map    reduce using rule 34 (TYPE -> type_heap .)
    operator_less_than reduce using rule 34 (TYPE -> type_heap .)
    operator_less_than_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_greater_than reduce using rule 34 (TYPE -> type_heap .)
    operator_greater_than_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_not_equals reduce using rule 34 (TYPE -> type_heap .)
    operator_smallest reduce using rule 34 (TYPE -> type_heap .)
    operator_greatest reduce using rule 34 (TYPE -> type_heap .)
    operator_goodname reduce using rule 34 (TYPE -> type_heap .)
    [               reduce using rule 34 (TYPE -> type_heap .)
    operator_scan   reduce using rule 34 (TYPE -> type_heap .)
    operator_reduc  reduce using rule 34 (TYPE -> type_heap .)
    operator_bitnot reduce using rule 34 (TYPE -> type_heap .)
    operator_not    reduce using rule 34 (TYPE -> type_heap .)
    operator_inner  reduce using rule 34 (TYPE -> type_heap .)
    operator_reverse reduce using rule 34 (TYPE -> type_heap .)
    operator_sorted_incr reduce using rule 34 (TYPE -> type_heap .)
    operator_sorted_decr reduce using rule 34 (TYPE -> type_heap .)
    operator_s_combinator reduce using rule 34 (TYPE -> type_heap .)
    operator_s_combinator_2 reduce using rule 34 (TYPE -> type_heap .)
    operator_goodname2 reduce using rule 34 (TYPE -> type_heap .)
    NEWLINE         reduce using rule 34 (TYPE -> type_heap .)
    $end            reduce using rule 34 (TYPE -> type_heap .)
    }               reduce using rule 34 (TYPE -> type_heap .)
    )               reduce using rule 34 (TYPE -> type_heap .)
    FLOAT           reduce using rule 34 (TYPE -> type_heap .)
    NUM             reduce using rule 34 (TYPE -> type_heap .)
    STRING_3SQ      reduce using rule 34 (TYPE -> type_heap .)
    STRING_3DQ      reduce using rule 34 (TYPE -> type_heap .)
    STRING_SQ       reduce using rule 34 (TYPE -> type_heap .)
    STRING_DQ       reduce using rule 34 (TYPE -> type_heap .)
    true            reduce using rule 34 (TYPE -> type_heap .)
    Null            reduce using rule 34 (TYPE -> type_heap .)
    false           reduce using rule 34 (TYPE -> type_heap .)
    type_type       reduce using rule 34 (TYPE -> type_heap .)
    type_num        reduce using rule 34 (TYPE -> type_heap .)
    type_bool       reduce using rule 34 (TYPE -> type_heap .)
    type_any        reduce using rule 34 (TYPE -> type_heap .)
    type_u64        reduce using rule 34 (TYPE -> type_heap .)
    type_u32        reduce using rule 34 (TYPE -> type_heap .)
    type_u16        reduce using rule 34 (TYPE -> type_heap .)
    type_u8         reduce using rule 34 (TYPE -> type_heap .)
    type_i64        reduce using rule 34 (TYPE -> type_heap .)
    type_i32        reduce using rule 34 (TYPE -> type_heap .)
    type_i16        reduce using rule 34 (TYPE -> type_heap .)
    type_i8         reduce using rule 34 (TYPE -> type_heap .)
    type_f32        reduce using rule 34 (TYPE -> type_heap .)
    type_f64        reduce using rule 34 (TYPE -> type_heap .)
    type_str        reduce using rule 34 (TYPE -> type_heap .)
    type_list       reduce using rule 34 (TYPE -> type_heap .)
    type_tuple      reduce using rule 34 (TYPE -> type_heap .)
    type_array      reduce using rule 34 (TYPE -> type_heap .)
    type_vector     reduce using rule 34 (TYPE -> type_heap .)
    type_dict       reduce using rule 34 (TYPE -> type_heap .)
    type_generator  reduce using rule 34 (TYPE -> type_heap .)
    type_linked_list reduce using rule 34 (TYPE -> type_heap .)
    type_doubly_linked_list reduce using rule 34 (TYPE -> type_heap .)
    type_deque      reduce using rule 34 (TYPE -> type_heap .)
    type_heap       reduce using rule 34 (TYPE -> type_heap .)
    type_fibonacci_heap reduce using rule 34 (TYPE -> type_heap .)
    type_tree       reduce using rule 34 (TYPE -> type_heap .)
    type_trie       reduce using rule 34 (TYPE -> type_heap .)
    type_stack      reduce using rule 34 (TYPE -> type_heap .)
    type_queue      reduce using rule 34 (TYPE -> type_heap .)
    type_binary_search_tree reduce using rule 34 (TYPE -> type_heap .)
    type_bitset     reduce using rule 34 (TYPE -> type_heap .)
    type_set        reduce using rule 34 (TYPE -> type_heap .)
    type_map        reduce using rule 34 (TYPE -> type_heap .)
    type_range      reduce using rule 34 (TYPE -> type_heap .)
    type_bad_struct reduce using rule 34 (TYPE -> type_heap .)
    type_bad_struct2 reduce using rule 34 (TYPE -> type_heap .)
    lambda          reduce using rule 34 (TYPE -> type_heap .)
    {               reduce using rule 34 (TYPE -> type_heap .)
    ]               reduce using rule 34 (TYPE -> type_heap .)
    :               reduce using rule 34 (TYPE -> type_heap .)
    ,               reduce using rule 34 (TYPE -> type_heap .)

  ! (               [ reduce using rule 34 (TYPE -> type_heap .) ]


state 117

    (173) return_val -> type_fibonacci_heap . ( arguments )
    (35) TYPE -> type_fibonacci_heap .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 236
    VAR             reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_add    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sub    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_mul    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_div    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_trudiv reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_pow    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_join   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_split  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitand reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitor  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitxor reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftleft reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitshiftright reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_and    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_or     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_xor    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_contains reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_incr   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_decr   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_outer  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_rotate reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_apply  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_compose reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_over   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_map    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_less_than reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_less_than_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greater_than reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greater_than_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_not_equals reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_smallest reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_greatest reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_goodname reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    [               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_scan   reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_reduc  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_bitnot reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_not    reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_inner  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_reverse reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sorted_incr reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_sorted_decr reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_s_combinator reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_s_combinator_2 reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    operator_goodname2 reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    NEWLINE         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    $end            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    }               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    )               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    FLOAT           reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    NUM             reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_3SQ      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_3DQ      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_SQ       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    STRING_DQ       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    true            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    Null            reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    false           reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_type       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_num        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bool       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_any        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u16        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_u8         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i16        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_i8         reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_f32        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_f64        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_str        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_list       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_tuple      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_array      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_vector     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_dict       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_generator  reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_linked_list reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_doubly_linked_list reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_deque      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_heap       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_fibonacci_heap reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_tree       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_trie       reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_stack      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_queue      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_binary_search_tree reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bitset     reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_set        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_map        reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_range      reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bad_struct reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    type_bad_struct2 reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    lambda          reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    {               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    ]               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    :               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    ,               reduce using rule 35 (TYPE -> type_fibonacci_heap .)

  ! (               [ reduce using rule 35 (TYPE -> type_fibonacci_heap .) ]


state 118

    (174) return_val -> type_tree . ( arguments )
    (36) TYPE -> type_tree .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 237
    VAR             reduce using rule 36 (TYPE -> type_tree .)
    operator_add    reduce using rule 36 (TYPE -> type_tree .)
    operator_sub    reduce using rule 36 (TYPE -> type_tree .)
    operator_mul    reduce using rule 36 (TYPE -> type_tree .)
    operator_div    reduce using rule 36 (TYPE -> type_tree .)
    operator_trudiv reduce using rule 36 (TYPE -> type_tree .)
    operator_pow    reduce using rule 36 (TYPE -> type_tree .)
    operator_join   reduce using rule 36 (TYPE -> type_tree .)
    operator_split  reduce using rule 36 (TYPE -> type_tree .)
    operator_bitand reduce using rule 36 (TYPE -> type_tree .)
    operator_bitor  reduce using rule 36 (TYPE -> type_tree .)
    operator_bitxor reduce using rule 36 (TYPE -> type_tree .)
    operator_bitshiftleft reduce using rule 36 (TYPE -> type_tree .)
    operator_bitshiftright reduce using rule 36 (TYPE -> type_tree .)
    operator_and    reduce using rule 36 (TYPE -> type_tree .)
    operator_or     reduce using rule 36 (TYPE -> type_tree .)
    operator_xor    reduce using rule 36 (TYPE -> type_tree .)
    operator_contains reduce using rule 36 (TYPE -> type_tree .)
    operator_incr   reduce using rule 36 (TYPE -> type_tree .)
    operator_decr   reduce using rule 36 (TYPE -> type_tree .)
    operator_outer  reduce using rule 36 (TYPE -> type_tree .)
    operator_rotate reduce using rule 36 (TYPE -> type_tree .)
    operator_apply  reduce using rule 36 (TYPE -> type_tree .)
    operator_compose reduce using rule 36 (TYPE -> type_tree .)
    operator_over   reduce using rule 36 (TYPE -> type_tree .)
    operator_map    reduce using rule 36 (TYPE -> type_tree .)
    operator_less_than reduce using rule 36 (TYPE -> type_tree .)
    operator_less_than_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_greater_than reduce using rule 36 (TYPE -> type_tree .)
    operator_greater_than_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_not_equals reduce using rule 36 (TYPE -> type_tree .)
    operator_smallest reduce using rule 36 (TYPE -> type_tree .)
    operator_greatest reduce using rule 36 (TYPE -> type_tree .)
    operator_goodname reduce using rule 36 (TYPE -> type_tree .)
    [               reduce using rule 36 (TYPE -> type_tree .)
    operator_scan   reduce using rule 36 (TYPE -> type_tree .)
    operator_reduc  reduce using rule 36 (TYPE -> type_tree .)
    operator_bitnot reduce using rule 36 (TYPE -> type_tree .)
    operator_not    reduce using rule 36 (TYPE -> type_tree .)
    operator_inner  reduce using rule 36 (TYPE -> type_tree .)
    operator_reverse reduce using rule 36 (TYPE -> type_tree .)
    operator_sorted_incr reduce using rule 36 (TYPE -> type_tree .)
    operator_sorted_decr reduce using rule 36 (TYPE -> type_tree .)
    operator_s_combinator reduce using rule 36 (TYPE -> type_tree .)
    operator_s_combinator_2 reduce using rule 36 (TYPE -> type_tree .)
    operator_goodname2 reduce using rule 36 (TYPE -> type_tree .)
    NEWLINE         reduce using rule 36 (TYPE -> type_tree .)
    $end            reduce using rule 36 (TYPE -> type_tree .)
    }               reduce using rule 36 (TYPE -> type_tree .)
    )               reduce using rule 36 (TYPE -> type_tree .)
    FLOAT           reduce using rule 36 (TYPE -> type_tree .)
    NUM             reduce using rule 36 (TYPE -> type_tree .)
    STRING_3SQ      reduce using rule 36 (TYPE -> type_tree .)
    STRING_3DQ      reduce using rule 36 (TYPE -> type_tree .)
    STRING_SQ       reduce using rule 36 (TYPE -> type_tree .)
    STRING_DQ       reduce using rule 36 (TYPE -> type_tree .)
    true            reduce using rule 36 (TYPE -> type_tree .)
    Null            reduce using rule 36 (TYPE -> type_tree .)
    false           reduce using rule 36 (TYPE -> type_tree .)
    type_type       reduce using rule 36 (TYPE -> type_tree .)
    type_num        reduce using rule 36 (TYPE -> type_tree .)
    type_bool       reduce using rule 36 (TYPE -> type_tree .)
    type_any        reduce using rule 36 (TYPE -> type_tree .)
    type_u64        reduce using rule 36 (TYPE -> type_tree .)
    type_u32        reduce using rule 36 (TYPE -> type_tree .)
    type_u16        reduce using rule 36 (TYPE -> type_tree .)
    type_u8         reduce using rule 36 (TYPE -> type_tree .)
    type_i64        reduce using rule 36 (TYPE -> type_tree .)
    type_i32        reduce using rule 36 (TYPE -> type_tree .)
    type_i16        reduce using rule 36 (TYPE -> type_tree .)
    type_i8         reduce using rule 36 (TYPE -> type_tree .)
    type_f32        reduce using rule 36 (TYPE -> type_tree .)
    type_f64        reduce using rule 36 (TYPE -> type_tree .)
    type_str        reduce using rule 36 (TYPE -> type_tree .)
    type_list       reduce using rule 36 (TYPE -> type_tree .)
    type_tuple      reduce using rule 36 (TYPE -> type_tree .)
    type_array      reduce using rule 36 (TYPE -> type_tree .)
    type_vector     reduce using rule 36 (TYPE -> type_tree .)
    type_dict       reduce using rule 36 (TYPE -> type_tree .)
    type_generator  reduce using rule 36 (TYPE -> type_tree .)
    type_linked_list reduce using rule 36 (TYPE -> type_tree .)
    type_doubly_linked_list reduce using rule 36 (TYPE -> type_tree .)
    type_deque      reduce using rule 36 (TYPE -> type_tree .)
    type_heap       reduce using rule 36 (TYPE -> type_tree .)
    type_fibonacci_heap reduce using rule 36 (TYPE -> type_tree .)
    type_tree       reduce using rule 36 (TYPE -> type_tree .)
    type_trie       reduce using rule 36 (TYPE -> type_tree .)
    type_stack      reduce using rule 36 (TYPE -> type_tree .)
    type_queue      reduce using rule 36 (TYPE -> type_tree .)
    type_binary_search_tree reduce using rule 36 (TYPE -> type_tree .)
    type_bitset     reduce using rule 36 (TYPE -> type_tree .)
    type_set        reduce using rule 36 (TYPE -> type_tree .)
    type_map        reduce using rule 36 (TYPE -> type_tree .)
    type_range      reduce using rule 36 (TYPE -> type_tree .)
    type_bad_struct reduce using rule 36 (TYPE -> type_tree .)
    type_bad_struct2 reduce using rule 36 (TYPE -> type_tree .)
    lambda          reduce using rule 36 (TYPE -> type_tree .)
    {               reduce using rule 36 (TYPE -> type_tree .)
    ]               reduce using rule 36 (TYPE -> type_tree .)
    :               reduce using rule 36 (TYPE -> type_tree .)
    ,               reduce using rule 36 (TYPE -> type_tree .)

  ! (               [ reduce using rule 36 (TYPE -> type_tree .) ]


state 119

    (175) return_val -> type_trie . ( arguments )
    (37) TYPE -> type_trie .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 238
    VAR             reduce using rule 37 (TYPE -> type_trie .)
    operator_add    reduce using rule 37 (TYPE -> type_trie .)
    operator_sub    reduce using rule 37 (TYPE -> type_trie .)
    operator_mul    reduce using rule 37 (TYPE -> type_trie .)
    operator_div    reduce using rule 37 (TYPE -> type_trie .)
    operator_trudiv reduce using rule 37 (TYPE -> type_trie .)
    operator_pow    reduce using rule 37 (TYPE -> type_trie .)
    operator_join   reduce using rule 37 (TYPE -> type_trie .)
    operator_split  reduce using rule 37 (TYPE -> type_trie .)
    operator_bitand reduce using rule 37 (TYPE -> type_trie .)
    operator_bitor  reduce using rule 37 (TYPE -> type_trie .)
    operator_bitxor reduce using rule 37 (TYPE -> type_trie .)
    operator_bitshiftleft reduce using rule 37 (TYPE -> type_trie .)
    operator_bitshiftright reduce using rule 37 (TYPE -> type_trie .)
    operator_and    reduce using rule 37 (TYPE -> type_trie .)
    operator_or     reduce using rule 37 (TYPE -> type_trie .)
    operator_xor    reduce using rule 37 (TYPE -> type_trie .)
    operator_contains reduce using rule 37 (TYPE -> type_trie .)
    operator_incr   reduce using rule 37 (TYPE -> type_trie .)
    operator_decr   reduce using rule 37 (TYPE -> type_trie .)
    operator_outer  reduce using rule 37 (TYPE -> type_trie .)
    operator_rotate reduce using rule 37 (TYPE -> type_trie .)
    operator_apply  reduce using rule 37 (TYPE -> type_trie .)
    operator_compose reduce using rule 37 (TYPE -> type_trie .)
    operator_over   reduce using rule 37 (TYPE -> type_trie .)
    operator_map    reduce using rule 37 (TYPE -> type_trie .)
    operator_less_than reduce using rule 37 (TYPE -> type_trie .)
    operator_less_than_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_greater_than reduce using rule 37 (TYPE -> type_trie .)
    operator_greater_than_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_not_equals reduce using rule 37 (TYPE -> type_trie .)
    operator_smallest reduce using rule 37 (TYPE -> type_trie .)
    operator_greatest reduce using rule 37 (TYPE -> type_trie .)
    operator_goodname reduce using rule 37 (TYPE -> type_trie .)
    [               reduce using rule 37 (TYPE -> type_trie .)
    operator_scan   reduce using rule 37 (TYPE -> type_trie .)
    operator_reduc  reduce using rule 37 (TYPE -> type_trie .)
    operator_bitnot reduce using rule 37 (TYPE -> type_trie .)
    operator_not    reduce using rule 37 (TYPE -> type_trie .)
    operator_inner  reduce using rule 37 (TYPE -> type_trie .)
    operator_reverse reduce using rule 37 (TYPE -> type_trie .)
    operator_sorted_incr reduce using rule 37 (TYPE -> type_trie .)
    operator_sorted_decr reduce using rule 37 (TYPE -> type_trie .)
    operator_s_combinator reduce using rule 37 (TYPE -> type_trie .)
    operator_s_combinator_2 reduce using rule 37 (TYPE -> type_trie .)
    operator_goodname2 reduce using rule 37 (TYPE -> type_trie .)
    NEWLINE         reduce using rule 37 (TYPE -> type_trie .)
    $end            reduce using rule 37 (TYPE -> type_trie .)
    }               reduce using rule 37 (TYPE -> type_trie .)
    )               reduce using rule 37 (TYPE -> type_trie .)
    FLOAT           reduce using rule 37 (TYPE -> type_trie .)
    NUM             reduce using rule 37 (TYPE -> type_trie .)
    STRING_3SQ      reduce using rule 37 (TYPE -> type_trie .)
    STRING_3DQ      reduce using rule 37 (TYPE -> type_trie .)
    STRING_SQ       reduce using rule 37 (TYPE -> type_trie .)
    STRING_DQ       reduce using rule 37 (TYPE -> type_trie .)
    true            reduce using rule 37 (TYPE -> type_trie .)
    Null            reduce using rule 37 (TYPE -> type_trie .)
    false           reduce using rule 37 (TYPE -> type_trie .)
    type_type       reduce using rule 37 (TYPE -> type_trie .)
    type_num        reduce using rule 37 (TYPE -> type_trie .)
    type_bool       reduce using rule 37 (TYPE -> type_trie .)
    type_any        reduce using rule 37 (TYPE -> type_trie .)
    type_u64        reduce using rule 37 (TYPE -> type_trie .)
    type_u32        reduce using rule 37 (TYPE -> type_trie .)
    type_u16        reduce using rule 37 (TYPE -> type_trie .)
    type_u8         reduce using rule 37 (TYPE -> type_trie .)
    type_i64        reduce using rule 37 (TYPE -> type_trie .)
    type_i32        reduce using rule 37 (TYPE -> type_trie .)
    type_i16        reduce using rule 37 (TYPE -> type_trie .)
    type_i8         reduce using rule 37 (TYPE -> type_trie .)
    type_f32        reduce using rule 37 (TYPE -> type_trie .)
    type_f64        reduce using rule 37 (TYPE -> type_trie .)
    type_str        reduce using rule 37 (TYPE -> type_trie .)
    type_list       reduce using rule 37 (TYPE -> type_trie .)
    type_tuple      reduce using rule 37 (TYPE -> type_trie .)
    type_array      reduce using rule 37 (TYPE -> type_trie .)
    type_vector     reduce using rule 37 (TYPE -> type_trie .)
    type_dict       reduce using rule 37 (TYPE -> type_trie .)
    type_generator  reduce using rule 37 (TYPE -> type_trie .)
    type_linked_list reduce using rule 37 (TYPE -> type_trie .)
    type_doubly_linked_list reduce using rule 37 (TYPE -> type_trie .)
    type_deque      reduce using rule 37 (TYPE -> type_trie .)
    type_heap       reduce using rule 37 (TYPE -> type_trie .)
    type_fibonacci_heap reduce using rule 37 (TYPE -> type_trie .)
    type_tree       reduce using rule 37 (TYPE -> type_trie .)
    type_trie       reduce using rule 37 (TYPE -> type_trie .)
    type_stack      reduce using rule 37 (TYPE -> type_trie .)
    type_queue      reduce using rule 37 (TYPE -> type_trie .)
    type_binary_search_tree reduce using rule 37 (TYPE -> type_trie .)
    type_bitset     reduce using rule 37 (TYPE -> type_trie .)
    type_set        reduce using rule 37 (TYPE -> type_trie .)
    type_map        reduce using rule 37 (TYPE -> type_trie .)
    type_range      reduce using rule 37 (TYPE -> type_trie .)
    type_bad_struct reduce using rule 37 (TYPE -> type_trie .)
    type_bad_struct2 reduce using rule 37 (TYPE -> type_trie .)
    lambda          reduce using rule 37 (TYPE -> type_trie .)
    {               reduce using rule 37 (TYPE -> type_trie .)
    ]               reduce using rule 37 (TYPE -> type_trie .)
    :               reduce using rule 37 (TYPE -> type_trie .)
    ,               reduce using rule 37 (TYPE -> type_trie .)

  ! (               [ reduce using rule 37 (TYPE -> type_trie .) ]


state 120

    (176) return_val -> type_stack . ( arguments )
    (38) TYPE -> type_stack .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 239
    VAR             reduce using rule 38 (TYPE -> type_stack .)
    operator_add    reduce using rule 38 (TYPE -> type_stack .)
    operator_sub    reduce using rule 38 (TYPE -> type_stack .)
    operator_mul    reduce using rule 38 (TYPE -> type_stack .)
    operator_div    reduce using rule 38 (TYPE -> type_stack .)
    operator_trudiv reduce using rule 38 (TYPE -> type_stack .)
    operator_pow    reduce using rule 38 (TYPE -> type_stack .)
    operator_join   reduce using rule 38 (TYPE -> type_stack .)
    operator_split  reduce using rule 38 (TYPE -> type_stack .)
    operator_bitand reduce using rule 38 (TYPE -> type_stack .)
    operator_bitor  reduce using rule 38 (TYPE -> type_stack .)
    operator_bitxor reduce using rule 38 (TYPE -> type_stack .)
    operator_bitshiftleft reduce using rule 38 (TYPE -> type_stack .)
    operator_bitshiftright reduce using rule 38 (TYPE -> type_stack .)
    operator_and    reduce using rule 38 (TYPE -> type_stack .)
    operator_or     reduce using rule 38 (TYPE -> type_stack .)
    operator_xor    reduce using rule 38 (TYPE -> type_stack .)
    operator_contains reduce using rule 38 (TYPE -> type_stack .)
    operator_incr   reduce using rule 38 (TYPE -> type_stack .)
    operator_decr   reduce using rule 38 (TYPE -> type_stack .)
    operator_outer  reduce using rule 38 (TYPE -> type_stack .)
    operator_rotate reduce using rule 38 (TYPE -> type_stack .)
    operator_apply  reduce using rule 38 (TYPE -> type_stack .)
    operator_compose reduce using rule 38 (TYPE -> type_stack .)
    operator_over   reduce using rule 38 (TYPE -> type_stack .)
    operator_map    reduce using rule 38 (TYPE -> type_stack .)
    operator_less_than reduce using rule 38 (TYPE -> type_stack .)
    operator_less_than_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_greater_than reduce using rule 38 (TYPE -> type_stack .)
    operator_greater_than_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_not_equals reduce using rule 38 (TYPE -> type_stack .)
    operator_smallest reduce using rule 38 (TYPE -> type_stack .)
    operator_greatest reduce using rule 38 (TYPE -> type_stack .)
    operator_goodname reduce using rule 38 (TYPE -> type_stack .)
    [               reduce using rule 38 (TYPE -> type_stack .)
    operator_scan   reduce using rule 38 (TYPE -> type_stack .)
    operator_reduc  reduce using rule 38 (TYPE -> type_stack .)
    operator_bitnot reduce using rule 38 (TYPE -> type_stack .)
    operator_not    reduce using rule 38 (TYPE -> type_stack .)
    operator_inner  reduce using rule 38 (TYPE -> type_stack .)
    operator_reverse reduce using rule 38 (TYPE -> type_stack .)
    operator_sorted_incr reduce using rule 38 (TYPE -> type_stack .)
    operator_sorted_decr reduce using rule 38 (TYPE -> type_stack .)
    operator_s_combinator reduce using rule 38 (TYPE -> type_stack .)
    operator_s_combinator_2 reduce using rule 38 (TYPE -> type_stack .)
    operator_goodname2 reduce using rule 38 (TYPE -> type_stack .)
    NEWLINE         reduce using rule 38 (TYPE -> type_stack .)
    $end            reduce using rule 38 (TYPE -> type_stack .)
    }               reduce using rule 38 (TYPE -> type_stack .)
    )               reduce using rule 38 (TYPE -> type_stack .)
    FLOAT           reduce using rule 38 (TYPE -> type_stack .)
    NUM             reduce using rule 38 (TYPE -> type_stack .)
    STRING_3SQ      reduce using rule 38 (TYPE -> type_stack .)
    STRING_3DQ      reduce using rule 38 (TYPE -> type_stack .)
    STRING_SQ       reduce using rule 38 (TYPE -> type_stack .)
    STRING_DQ       reduce using rule 38 (TYPE -> type_stack .)
    true            reduce using rule 38 (TYPE -> type_stack .)
    Null            reduce using rule 38 (TYPE -> type_stack .)
    false           reduce using rule 38 (TYPE -> type_stack .)
    type_type       reduce using rule 38 (TYPE -> type_stack .)
    type_num        reduce using rule 38 (TYPE -> type_stack .)
    type_bool       reduce using rule 38 (TYPE -> type_stack .)
    type_any        reduce using rule 38 (TYPE -> type_stack .)
    type_u64        reduce using rule 38 (TYPE -> type_stack .)
    type_u32        reduce using rule 38 (TYPE -> type_stack .)
    type_u16        reduce using rule 38 (TYPE -> type_stack .)
    type_u8         reduce using rule 38 (TYPE -> type_stack .)
    type_i64        reduce using rule 38 (TYPE -> type_stack .)
    type_i32        reduce using rule 38 (TYPE -> type_stack .)
    type_i16        reduce using rule 38 (TYPE -> type_stack .)
    type_i8         reduce using rule 38 (TYPE -> type_stack .)
    type_f32        reduce using rule 38 (TYPE -> type_stack .)
    type_f64        reduce using rule 38 (TYPE -> type_stack .)
    type_str        reduce using rule 38 (TYPE -> type_stack .)
    type_list       reduce using rule 38 (TYPE -> type_stack .)
    type_tuple      reduce using rule 38 (TYPE -> type_stack .)
    type_array      reduce using rule 38 (TYPE -> type_stack .)
    type_vector     reduce using rule 38 (TYPE -> type_stack .)
    type_dict       reduce using rule 38 (TYPE -> type_stack .)
    type_generator  reduce using rule 38 (TYPE -> type_stack .)
    type_linked_list reduce using rule 38 (TYPE -> type_stack .)
    type_doubly_linked_list reduce using rule 38 (TYPE -> type_stack .)
    type_deque      reduce using rule 38 (TYPE -> type_stack .)
    type_heap       reduce using rule 38 (TYPE -> type_stack .)
    type_fibonacci_heap reduce using rule 38 (TYPE -> type_stack .)
    type_tree       reduce using rule 38 (TYPE -> type_stack .)
    type_trie       reduce using rule 38 (TYPE -> type_stack .)
    type_stack      reduce using rule 38 (TYPE -> type_stack .)
    type_queue      reduce using rule 38 (TYPE -> type_stack .)
    type_binary_search_tree reduce using rule 38 (TYPE -> type_stack .)
    type_bitset     reduce using rule 38 (TYPE -> type_stack .)
    type_set        reduce using rule 38 (TYPE -> type_stack .)
    type_map        reduce using rule 38 (TYPE -> type_stack .)
    type_range      reduce using rule 38 (TYPE -> type_stack .)
    type_bad_struct reduce using rule 38 (TYPE -> type_stack .)
    type_bad_struct2 reduce using rule 38 (TYPE -> type_stack .)
    lambda          reduce using rule 38 (TYPE -> type_stack .)
    {               reduce using rule 38 (TYPE -> type_stack .)
    ]               reduce using rule 38 (TYPE -> type_stack .)
    :               reduce using rule 38 (TYPE -> type_stack .)
    ,               reduce using rule 38 (TYPE -> type_stack .)

  ! (               [ reduce using rule 38 (TYPE -> type_stack .) ]


state 121

    (177) return_val -> type_queue . ( arguments )
    (39) TYPE -> type_queue .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 240
    VAR             reduce using rule 39 (TYPE -> type_queue .)
    operator_add    reduce using rule 39 (TYPE -> type_queue .)
    operator_sub    reduce using rule 39 (TYPE -> type_queue .)
    operator_mul    reduce using rule 39 (TYPE -> type_queue .)
    operator_div    reduce using rule 39 (TYPE -> type_queue .)
    operator_trudiv reduce using rule 39 (TYPE -> type_queue .)
    operator_pow    reduce using rule 39 (TYPE -> type_queue .)
    operator_join   reduce using rule 39 (TYPE -> type_queue .)
    operator_split  reduce using rule 39 (TYPE -> type_queue .)
    operator_bitand reduce using rule 39 (TYPE -> type_queue .)
    operator_bitor  reduce using rule 39 (TYPE -> type_queue .)
    operator_bitxor reduce using rule 39 (TYPE -> type_queue .)
    operator_bitshiftleft reduce using rule 39 (TYPE -> type_queue .)
    operator_bitshiftright reduce using rule 39 (TYPE -> type_queue .)
    operator_and    reduce using rule 39 (TYPE -> type_queue .)
    operator_or     reduce using rule 39 (TYPE -> type_queue .)
    operator_xor    reduce using rule 39 (TYPE -> type_queue .)
    operator_contains reduce using rule 39 (TYPE -> type_queue .)
    operator_incr   reduce using rule 39 (TYPE -> type_queue .)
    operator_decr   reduce using rule 39 (TYPE -> type_queue .)
    operator_outer  reduce using rule 39 (TYPE -> type_queue .)
    operator_rotate reduce using rule 39 (TYPE -> type_queue .)
    operator_apply  reduce using rule 39 (TYPE -> type_queue .)
    operator_compose reduce using rule 39 (TYPE -> type_queue .)
    operator_over   reduce using rule 39 (TYPE -> type_queue .)
    operator_map    reduce using rule 39 (TYPE -> type_queue .)
    operator_less_than reduce using rule 39 (TYPE -> type_queue .)
    operator_less_than_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_greater_than reduce using rule 39 (TYPE -> type_queue .)
    operator_greater_than_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_not_equals reduce using rule 39 (TYPE -> type_queue .)
    operator_smallest reduce using rule 39 (TYPE -> type_queue .)
    operator_greatest reduce using rule 39 (TYPE -> type_queue .)
    operator_goodname reduce using rule 39 (TYPE -> type_queue .)
    [               reduce using rule 39 (TYPE -> type_queue .)
    operator_scan   reduce using rule 39 (TYPE -> type_queue .)
    operator_reduc  reduce using rule 39 (TYPE -> type_queue .)
    operator_bitnot reduce using rule 39 (TYPE -> type_queue .)
    operator_not    reduce using rule 39 (TYPE -> type_queue .)
    operator_inner  reduce using rule 39 (TYPE -> type_queue .)
    operator_reverse reduce using rule 39 (TYPE -> type_queue .)
    operator_sorted_incr reduce using rule 39 (TYPE -> type_queue .)
    operator_sorted_decr reduce using rule 39 (TYPE -> type_queue .)
    operator_s_combinator reduce using rule 39 (TYPE -> type_queue .)
    operator_s_combinator_2 reduce using rule 39 (TYPE -> type_queue .)
    operator_goodname2 reduce using rule 39 (TYPE -> type_queue .)
    NEWLINE         reduce using rule 39 (TYPE -> type_queue .)
    $end            reduce using rule 39 (TYPE -> type_queue .)
    }               reduce using rule 39 (TYPE -> type_queue .)
    )               reduce using rule 39 (TYPE -> type_queue .)
    FLOAT           reduce using rule 39 (TYPE -> type_queue .)
    NUM             reduce using rule 39 (TYPE -> type_queue .)
    STRING_3SQ      reduce using rule 39 (TYPE -> type_queue .)
    STRING_3DQ      reduce using rule 39 (TYPE -> type_queue .)
    STRING_SQ       reduce using rule 39 (TYPE -> type_queue .)
    STRING_DQ       reduce using rule 39 (TYPE -> type_queue .)
    true            reduce using rule 39 (TYPE -> type_queue .)
    Null            reduce using rule 39 (TYPE -> type_queue .)
    false           reduce using rule 39 (TYPE -> type_queue .)
    type_type       reduce using rule 39 (TYPE -> type_queue .)
    type_num        reduce using rule 39 (TYPE -> type_queue .)
    type_bool       reduce using rule 39 (TYPE -> type_queue .)
    type_any        reduce using rule 39 (TYPE -> type_queue .)
    type_u64        reduce using rule 39 (TYPE -> type_queue .)
    type_u32        reduce using rule 39 (TYPE -> type_queue .)
    type_u16        reduce using rule 39 (TYPE -> type_queue .)
    type_u8         reduce using rule 39 (TYPE -> type_queue .)
    type_i64        reduce using rule 39 (TYPE -> type_queue .)
    type_i32        reduce using rule 39 (TYPE -> type_queue .)
    type_i16        reduce using rule 39 (TYPE -> type_queue .)
    type_i8         reduce using rule 39 (TYPE -> type_queue .)
    type_f32        reduce using rule 39 (TYPE -> type_queue .)
    type_f64        reduce using rule 39 (TYPE -> type_queue .)
    type_str        reduce using rule 39 (TYPE -> type_queue .)
    type_list       reduce using rule 39 (TYPE -> type_queue .)
    type_tuple      reduce using rule 39 (TYPE -> type_queue .)
    type_array      reduce using rule 39 (TYPE -> type_queue .)
    type_vector     reduce using rule 39 (TYPE -> type_queue .)
    type_dict       reduce using rule 39 (TYPE -> type_queue .)
    type_generator  reduce using rule 39 (TYPE -> type_queue .)
    type_linked_list reduce using rule 39 (TYPE -> type_queue .)
    type_doubly_linked_list reduce using rule 39 (TYPE -> type_queue .)
    type_deque      reduce using rule 39 (TYPE -> type_queue .)
    type_heap       reduce using rule 39 (TYPE -> type_queue .)
    type_fibonacci_heap reduce using rule 39 (TYPE -> type_queue .)
    type_tree       reduce using rule 39 (TYPE -> type_queue .)
    type_trie       reduce using rule 39 (TYPE -> type_queue .)
    type_stack      reduce using rule 39 (TYPE -> type_queue .)
    type_queue      reduce using rule 39 (TYPE -> type_queue .)
    type_binary_search_tree reduce using rule 39 (TYPE -> type_queue .)
    type_bitset     reduce using rule 39 (TYPE -> type_queue .)
    type_set        reduce using rule 39 (TYPE -> type_queue .)
    type_map        reduce using rule 39 (TYPE -> type_queue .)
    type_range      reduce using rule 39 (TYPE -> type_queue .)
    type_bad_struct reduce using rule 39 (TYPE -> type_queue .)
    type_bad_struct2 reduce using rule 39 (TYPE -> type_queue .)
    lambda          reduce using rule 39 (TYPE -> type_queue .)
    {               reduce using rule 39 (TYPE -> type_queue .)
    ]               reduce using rule 39 (TYPE -> type_queue .)
    :               reduce using rule 39 (TYPE -> type_queue .)
    ,               reduce using rule 39 (TYPE -> type_queue .)

  ! (               [ reduce using rule 39 (TYPE -> type_queue .) ]


state 122

    (178) return_val -> type_binary_search_tree . ( arguments )
    (40) TYPE -> type_binary_search_tree .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 241
    VAR             reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_add    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sub    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_mul    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_div    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_trudiv reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_pow    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_join   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_split  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitand reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitor  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitxor reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitshiftleft reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitshiftright reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_and    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_or     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_xor    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_contains reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_incr   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_decr   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_outer  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_rotate reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_apply  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_compose reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_over   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_map    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_less_than reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_less_than_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greater_than reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greater_than_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_not_equals reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_smallest reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_greatest reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_goodname reduce using rule 40 (TYPE -> type_binary_search_tree .)
    [               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_scan   reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_reduc  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_bitnot reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_not    reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_inner  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_reverse reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sorted_incr reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_sorted_decr reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_s_combinator reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_s_combinator_2 reduce using rule 40 (TYPE -> type_binary_search_tree .)
    operator_goodname2 reduce using rule 40 (TYPE -> type_binary_search_tree .)
    NEWLINE         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    $end            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    }               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    )               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    FLOAT           reduce using rule 40 (TYPE -> type_binary_search_tree .)
    NUM             reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_3SQ      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_3DQ      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_SQ       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    STRING_DQ       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    true            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    Null            reduce using rule 40 (TYPE -> type_binary_search_tree .)
    false           reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_type       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_num        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bool       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_any        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u16        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_u8         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i16        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_i8         reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_f32        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_f64        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_str        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_list       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_tuple      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_array      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_vector     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_dict       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_generator  reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_linked_list reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_doubly_linked_list reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_deque      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_heap       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_fibonacci_heap reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_tree       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_trie       reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_stack      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_queue      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_binary_search_tree reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bitset     reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_set        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_map        reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_range      reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bad_struct reduce using rule 40 (TYPE -> type_binary_search_tree .)
    type_bad_struct2 reduce using rule 40 (TYPE -> type_binary_search_tree .)
    lambda          reduce using rule 40 (TYPE -> type_binary_search_tree .)
    {               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    ]               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    :               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    ,               reduce using rule 40 (TYPE -> type_binary_search_tree .)

  ! (               [ reduce using rule 40 (TYPE -> type_binary_search_tree .) ]


state 123

    (179) return_val -> type_bitset . ( arguments )
    (41) TYPE -> type_bitset .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 242
    VAR             reduce using rule 41 (TYPE -> type_bitset .)
    operator_add    reduce using rule 41 (TYPE -> type_bitset .)
    operator_sub    reduce using rule 41 (TYPE -> type_bitset .)
    operator_mul    reduce using rule 41 (TYPE -> type_bitset .)
    operator_div    reduce using rule 41 (TYPE -> type_bitset .)
    operator_trudiv reduce using rule 41 (TYPE -> type_bitset .)
    operator_pow    reduce using rule 41 (TYPE -> type_bitset .)
    operator_join   reduce using rule 41 (TYPE -> type_bitset .)
    operator_split  reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitand reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitor  reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitxor reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitshiftleft reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitshiftright reduce using rule 41 (TYPE -> type_bitset .)
    operator_and    reduce using rule 41 (TYPE -> type_bitset .)
    operator_or     reduce using rule 41 (TYPE -> type_bitset .)
    operator_xor    reduce using rule 41 (TYPE -> type_bitset .)
    operator_contains reduce using rule 41 (TYPE -> type_bitset .)
    operator_incr   reduce using rule 41 (TYPE -> type_bitset .)
    operator_decr   reduce using rule 41 (TYPE -> type_bitset .)
    operator_outer  reduce using rule 41 (TYPE -> type_bitset .)
    operator_rotate reduce using rule 41 (TYPE -> type_bitset .)
    operator_apply  reduce using rule 41 (TYPE -> type_bitset .)
    operator_compose reduce using rule 41 (TYPE -> type_bitset .)
    operator_over   reduce using rule 41 (TYPE -> type_bitset .)
    operator_map    reduce using rule 41 (TYPE -> type_bitset .)
    operator_less_than reduce using rule 41 (TYPE -> type_bitset .)
    operator_less_than_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_greater_than reduce using rule 41 (TYPE -> type_bitset .)
    operator_greater_than_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_not_equals reduce using rule 41 (TYPE -> type_bitset .)
    operator_smallest reduce using rule 41 (TYPE -> type_bitset .)
    operator_greatest reduce using rule 41 (TYPE -> type_bitset .)
    operator_goodname reduce using rule 41 (TYPE -> type_bitset .)
    [               reduce using rule 41 (TYPE -> type_bitset .)
    operator_scan   reduce using rule 41 (TYPE -> type_bitset .)
    operator_reduc  reduce using rule 41 (TYPE -> type_bitset .)
    operator_bitnot reduce using rule 41 (TYPE -> type_bitset .)
    operator_not    reduce using rule 41 (TYPE -> type_bitset .)
    operator_inner  reduce using rule 41 (TYPE -> type_bitset .)
    operator_reverse reduce using rule 41 (TYPE -> type_bitset .)
    operator_sorted_incr reduce using rule 41 (TYPE -> type_bitset .)
    operator_sorted_decr reduce using rule 41 (TYPE -> type_bitset .)
    operator_s_combinator reduce using rule 41 (TYPE -> type_bitset .)
    operator_s_combinator_2 reduce using rule 41 (TYPE -> type_bitset .)
    operator_goodname2 reduce using rule 41 (TYPE -> type_bitset .)
    NEWLINE         reduce using rule 41 (TYPE -> type_bitset .)
    $end            reduce using rule 41 (TYPE -> type_bitset .)
    }               reduce using rule 41 (TYPE -> type_bitset .)
    )               reduce using rule 41 (TYPE -> type_bitset .)
    FLOAT           reduce using rule 41 (TYPE -> type_bitset .)
    NUM             reduce using rule 41 (TYPE -> type_bitset .)
    STRING_3SQ      reduce using rule 41 (TYPE -> type_bitset .)
    STRING_3DQ      reduce using rule 41 (TYPE -> type_bitset .)
    STRING_SQ       reduce using rule 41 (TYPE -> type_bitset .)
    STRING_DQ       reduce using rule 41 (TYPE -> type_bitset .)
    true            reduce using rule 41 (TYPE -> type_bitset .)
    Null            reduce using rule 41 (TYPE -> type_bitset .)
    false           reduce using rule 41 (TYPE -> type_bitset .)
    type_type       reduce using rule 41 (TYPE -> type_bitset .)
    type_num        reduce using rule 41 (TYPE -> type_bitset .)
    type_bool       reduce using rule 41 (TYPE -> type_bitset .)
    type_any        reduce using rule 41 (TYPE -> type_bitset .)
    type_u64        reduce using rule 41 (TYPE -> type_bitset .)
    type_u32        reduce using rule 41 (TYPE -> type_bitset .)
    type_u16        reduce using rule 41 (TYPE -> type_bitset .)
    type_u8         reduce using rule 41 (TYPE -> type_bitset .)
    type_i64        reduce using rule 41 (TYPE -> type_bitset .)
    type_i32        reduce using rule 41 (TYPE -> type_bitset .)
    type_i16        reduce using rule 41 (TYPE -> type_bitset .)
    type_i8         reduce using rule 41 (TYPE -> type_bitset .)
    type_f32        reduce using rule 41 (TYPE -> type_bitset .)
    type_f64        reduce using rule 41 (TYPE -> type_bitset .)
    type_str        reduce using rule 41 (TYPE -> type_bitset .)
    type_list       reduce using rule 41 (TYPE -> type_bitset .)
    type_tuple      reduce using rule 41 (TYPE -> type_bitset .)
    type_array      reduce using rule 41 (TYPE -> type_bitset .)
    type_vector     reduce using rule 41 (TYPE -> type_bitset .)
    type_dict       reduce using rule 41 (TYPE -> type_bitset .)
    type_generator  reduce using rule 41 (TYPE -> type_bitset .)
    type_linked_list reduce using rule 41 (TYPE -> type_bitset .)
    type_doubly_linked_list reduce using rule 41 (TYPE -> type_bitset .)
    type_deque      reduce using rule 41 (TYPE -> type_bitset .)
    type_heap       reduce using rule 41 (TYPE -> type_bitset .)
    type_fibonacci_heap reduce using rule 41 (TYPE -> type_bitset .)
    type_tree       reduce using rule 41 (TYPE -> type_bitset .)
    type_trie       reduce using rule 41 (TYPE -> type_bitset .)
    type_stack      reduce using rule 41 (TYPE -> type_bitset .)
    type_queue      reduce using rule 41 (TYPE -> type_bitset .)
    type_binary_search_tree reduce using rule 41 (TYPE -> type_bitset .)
    type_bitset     reduce using rule 41 (TYPE -> type_bitset .)
    type_set        reduce using rule 41 (TYPE -> type_bitset .)
    type_map        reduce using rule 41 (TYPE -> type_bitset .)
    type_range      reduce using rule 41 (TYPE -> type_bitset .)
    type_bad_struct reduce using rule 41 (TYPE -> type_bitset .)
    type_bad_struct2 reduce using rule 41 (TYPE -> type_bitset .)
    lambda          reduce using rule 41 (TYPE -> type_bitset .)
    {               reduce using rule 41 (TYPE -> type_bitset .)
    ]               reduce using rule 41 (TYPE -> type_bitset .)
    :               reduce using rule 41 (TYPE -> type_bitset .)
    ,               reduce using rule 41 (TYPE -> type_bitset .)

  ! (               [ reduce using rule 41 (TYPE -> type_bitset .) ]


state 124

    (180) return_val -> type_set . ( arguments )
    (42) TYPE -> type_set .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 243
    VAR             reduce using rule 42 (TYPE -> type_set .)
    operator_add    reduce using rule 42 (TYPE -> type_set .)
    operator_sub    reduce using rule 42 (TYPE -> type_set .)
    operator_mul    reduce using rule 42 (TYPE -> type_set .)
    operator_div    reduce using rule 42 (TYPE -> type_set .)
    operator_trudiv reduce using rule 42 (TYPE -> type_set .)
    operator_pow    reduce using rule 42 (TYPE -> type_set .)
    operator_join   reduce using rule 42 (TYPE -> type_set .)
    operator_split  reduce using rule 42 (TYPE -> type_set .)
    operator_bitand reduce using rule 42 (TYPE -> type_set .)
    operator_bitor  reduce using rule 42 (TYPE -> type_set .)
    operator_bitxor reduce using rule 42 (TYPE -> type_set .)
    operator_bitshiftleft reduce using rule 42 (TYPE -> type_set .)
    operator_bitshiftright reduce using rule 42 (TYPE -> type_set .)
    operator_and    reduce using rule 42 (TYPE -> type_set .)
    operator_or     reduce using rule 42 (TYPE -> type_set .)
    operator_xor    reduce using rule 42 (TYPE -> type_set .)
    operator_contains reduce using rule 42 (TYPE -> type_set .)
    operator_incr   reduce using rule 42 (TYPE -> type_set .)
    operator_decr   reduce using rule 42 (TYPE -> type_set .)
    operator_outer  reduce using rule 42 (TYPE -> type_set .)
    operator_rotate reduce using rule 42 (TYPE -> type_set .)
    operator_apply  reduce using rule 42 (TYPE -> type_set .)
    operator_compose reduce using rule 42 (TYPE -> type_set .)
    operator_over   reduce using rule 42 (TYPE -> type_set .)
    operator_map    reduce using rule 42 (TYPE -> type_set .)
    operator_less_than reduce using rule 42 (TYPE -> type_set .)
    operator_less_than_equals reduce using rule 42 (TYPE -> type_set .)
    operator_greater_than reduce using rule 42 (TYPE -> type_set .)
    operator_greater_than_equals reduce using rule 42 (TYPE -> type_set .)
    operator_equals reduce using rule 42 (TYPE -> type_set .)
    operator_not_equals reduce using rule 42 (TYPE -> type_set .)
    operator_smallest reduce using rule 42 (TYPE -> type_set .)
    operator_greatest reduce using rule 42 (TYPE -> type_set .)
    operator_goodname reduce using rule 42 (TYPE -> type_set .)
    [               reduce using rule 42 (TYPE -> type_set .)
    operator_scan   reduce using rule 42 (TYPE -> type_set .)
    operator_reduc  reduce using rule 42 (TYPE -> type_set .)
    operator_bitnot reduce using rule 42 (TYPE -> type_set .)
    operator_not    reduce using rule 42 (TYPE -> type_set .)
    operator_inner  reduce using rule 42 (TYPE -> type_set .)
    operator_reverse reduce using rule 42 (TYPE -> type_set .)
    operator_sorted_incr reduce using rule 42 (TYPE -> type_set .)
    operator_sorted_decr reduce using rule 42 (TYPE -> type_set .)
    operator_s_combinator reduce using rule 42 (TYPE -> type_set .)
    operator_s_combinator_2 reduce using rule 42 (TYPE -> type_set .)
    operator_goodname2 reduce using rule 42 (TYPE -> type_set .)
    NEWLINE         reduce using rule 42 (TYPE -> type_set .)
    $end            reduce using rule 42 (TYPE -> type_set .)
    }               reduce using rule 42 (TYPE -> type_set .)
    )               reduce using rule 42 (TYPE -> type_set .)
    FLOAT           reduce using rule 42 (TYPE -> type_set .)
    NUM             reduce using rule 42 (TYPE -> type_set .)
    STRING_3SQ      reduce using rule 42 (TYPE -> type_set .)
    STRING_3DQ      reduce using rule 42 (TYPE -> type_set .)
    STRING_SQ       reduce using rule 42 (TYPE -> type_set .)
    STRING_DQ       reduce using rule 42 (TYPE -> type_set .)
    true            reduce using rule 42 (TYPE -> type_set .)
    Null            reduce using rule 42 (TYPE -> type_set .)
    false           reduce using rule 42 (TYPE -> type_set .)
    type_type       reduce using rule 42 (TYPE -> type_set .)
    type_num        reduce using rule 42 (TYPE -> type_set .)
    type_bool       reduce using rule 42 (TYPE -> type_set .)
    type_any        reduce using rule 42 (TYPE -> type_set .)
    type_u64        reduce using rule 42 (TYPE -> type_set .)
    type_u32        reduce using rule 42 (TYPE -> type_set .)
    type_u16        reduce using rule 42 (TYPE -> type_set .)
    type_u8         reduce using rule 42 (TYPE -> type_set .)
    type_i64        reduce using rule 42 (TYPE -> type_set .)
    type_i32        reduce using rule 42 (TYPE -> type_set .)
    type_i16        reduce using rule 42 (TYPE -> type_set .)
    type_i8         reduce using rule 42 (TYPE -> type_set .)
    type_f32        reduce using rule 42 (TYPE -> type_set .)
    type_f64        reduce using rule 42 (TYPE -> type_set .)
    type_str        reduce using rule 42 (TYPE -> type_set .)
    type_list       reduce using rule 42 (TYPE -> type_set .)
    type_tuple      reduce using rule 42 (TYPE -> type_set .)
    type_array      reduce using rule 42 (TYPE -> type_set .)
    type_vector     reduce using rule 42 (TYPE -> type_set .)
    type_dict       reduce using rule 42 (TYPE -> type_set .)
    type_generator  reduce using rule 42 (TYPE -> type_set .)
    type_linked_list reduce using rule 42 (TYPE -> type_set .)
    type_doubly_linked_list reduce using rule 42 (TYPE -> type_set .)
    type_deque      reduce using rule 42 (TYPE -> type_set .)
    type_heap       reduce using rule 42 (TYPE -> type_set .)
    type_fibonacci_heap reduce using rule 42 (TYPE -> type_set .)
    type_tree       reduce using rule 42 (TYPE -> type_set .)
    type_trie       reduce using rule 42 (TYPE -> type_set .)
    type_stack      reduce using rule 42 (TYPE -> type_set .)
    type_queue      reduce using rule 42 (TYPE -> type_set .)
    type_binary_search_tree reduce using rule 42 (TYPE -> type_set .)
    type_bitset     reduce using rule 42 (TYPE -> type_set .)
    type_set        reduce using rule 42 (TYPE -> type_set .)
    type_map        reduce using rule 42 (TYPE -> type_set .)
    type_range      reduce using rule 42 (TYPE -> type_set .)
    type_bad_struct reduce using rule 42 (TYPE -> type_set .)
    type_bad_struct2 reduce using rule 42 (TYPE -> type_set .)
    lambda          reduce using rule 42 (TYPE -> type_set .)
    {               reduce using rule 42 (TYPE -> type_set .)
    ]               reduce using rule 42 (TYPE -> type_set .)
    :               reduce using rule 42 (TYPE -> type_set .)
    ,               reduce using rule 42 (TYPE -> type_set .)

  ! (               [ reduce using rule 42 (TYPE -> type_set .) ]


state 125

    (181) return_val -> type_map . ( arguments )
    (43) TYPE -> type_map .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 244
    VAR             reduce using rule 43 (TYPE -> type_map .)
    operator_add    reduce using rule 43 (TYPE -> type_map .)
    operator_sub    reduce using rule 43 (TYPE -> type_map .)
    operator_mul    reduce using rule 43 (TYPE -> type_map .)
    operator_div    reduce using rule 43 (TYPE -> type_map .)
    operator_trudiv reduce using rule 43 (TYPE -> type_map .)
    operator_pow    reduce using rule 43 (TYPE -> type_map .)
    operator_join   reduce using rule 43 (TYPE -> type_map .)
    operator_split  reduce using rule 43 (TYPE -> type_map .)
    operator_bitand reduce using rule 43 (TYPE -> type_map .)
    operator_bitor  reduce using rule 43 (TYPE -> type_map .)
    operator_bitxor reduce using rule 43 (TYPE -> type_map .)
    operator_bitshiftleft reduce using rule 43 (TYPE -> type_map .)
    operator_bitshiftright reduce using rule 43 (TYPE -> type_map .)
    operator_and    reduce using rule 43 (TYPE -> type_map .)
    operator_or     reduce using rule 43 (TYPE -> type_map .)
    operator_xor    reduce using rule 43 (TYPE -> type_map .)
    operator_contains reduce using rule 43 (TYPE -> type_map .)
    operator_incr   reduce using rule 43 (TYPE -> type_map .)
    operator_decr   reduce using rule 43 (TYPE -> type_map .)
    operator_outer  reduce using rule 43 (TYPE -> type_map .)
    operator_rotate reduce using rule 43 (TYPE -> type_map .)
    operator_apply  reduce using rule 43 (TYPE -> type_map .)
    operator_compose reduce using rule 43 (TYPE -> type_map .)
    operator_over   reduce using rule 43 (TYPE -> type_map .)
    operator_map    reduce using rule 43 (TYPE -> type_map .)
    operator_less_than reduce using rule 43 (TYPE -> type_map .)
    operator_less_than_equals reduce using rule 43 (TYPE -> type_map .)
    operator_greater_than reduce using rule 43 (TYPE -> type_map .)
    operator_greater_than_equals reduce using rule 43 (TYPE -> type_map .)
    operator_equals reduce using rule 43 (TYPE -> type_map .)
    operator_not_equals reduce using rule 43 (TYPE -> type_map .)
    operator_smallest reduce using rule 43 (TYPE -> type_map .)
    operator_greatest reduce using rule 43 (TYPE -> type_map .)
    operator_goodname reduce using rule 43 (TYPE -> type_map .)
    [               reduce using rule 43 (TYPE -> type_map .)
    operator_scan   reduce using rule 43 (TYPE -> type_map .)
    operator_reduc  reduce using rule 43 (TYPE -> type_map .)
    operator_bitnot reduce using rule 43 (TYPE -> type_map .)
    operator_not    reduce using rule 43 (TYPE -> type_map .)
    operator_inner  reduce using rule 43 (TYPE -> type_map .)
    operator_reverse reduce using rule 43 (TYPE -> type_map .)
    operator_sorted_incr reduce using rule 43 (TYPE -> type_map .)
    operator_sorted_decr reduce using rule 43 (TYPE -> type_map .)
    operator_s_combinator reduce using rule 43 (TYPE -> type_map .)
    operator_s_combinator_2 reduce using rule 43 (TYPE -> type_map .)
    operator_goodname2 reduce using rule 43 (TYPE -> type_map .)
    NEWLINE         reduce using rule 43 (TYPE -> type_map .)
    $end            reduce using rule 43 (TYPE -> type_map .)
    }               reduce using rule 43 (TYPE -> type_map .)
    )               reduce using rule 43 (TYPE -> type_map .)
    FLOAT           reduce using rule 43 (TYPE -> type_map .)
    NUM             reduce using rule 43 (TYPE -> type_map .)
    STRING_3SQ      reduce using rule 43 (TYPE -> type_map .)
    STRING_3DQ      reduce using rule 43 (TYPE -> type_map .)
    STRING_SQ       reduce using rule 43 (TYPE -> type_map .)
    STRING_DQ       reduce using rule 43 (TYPE -> type_map .)
    true            reduce using rule 43 (TYPE -> type_map .)
    Null            reduce using rule 43 (TYPE -> type_map .)
    false           reduce using rule 43 (TYPE -> type_map .)
    type_type       reduce using rule 43 (TYPE -> type_map .)
    type_num        reduce using rule 43 (TYPE -> type_map .)
    type_bool       reduce using rule 43 (TYPE -> type_map .)
    type_any        reduce using rule 43 (TYPE -> type_map .)
    type_u64        reduce using rule 43 (TYPE -> type_map .)
    type_u32        reduce using rule 43 (TYPE -> type_map .)
    type_u16        reduce using rule 43 (TYPE -> type_map .)
    type_u8         reduce using rule 43 (TYPE -> type_map .)
    type_i64        reduce using rule 43 (TYPE -> type_map .)
    type_i32        reduce using rule 43 (TYPE -> type_map .)
    type_i16        reduce using rule 43 (TYPE -> type_map .)
    type_i8         reduce using rule 43 (TYPE -> type_map .)
    type_f32        reduce using rule 43 (TYPE -> type_map .)
    type_f64        reduce using rule 43 (TYPE -> type_map .)
    type_str        reduce using rule 43 (TYPE -> type_map .)
    type_list       reduce using rule 43 (TYPE -> type_map .)
    type_tuple      reduce using rule 43 (TYPE -> type_map .)
    type_array      reduce using rule 43 (TYPE -> type_map .)
    type_vector     reduce using rule 43 (TYPE -> type_map .)
    type_dict       reduce using rule 43 (TYPE -> type_map .)
    type_generator  reduce using rule 43 (TYPE -> type_map .)
    type_linked_list reduce using rule 43 (TYPE -> type_map .)
    type_doubly_linked_list reduce using rule 43 (TYPE -> type_map .)
    type_deque      reduce using rule 43 (TYPE -> type_map .)
    type_heap       reduce using rule 43 (TYPE -> type_map .)
    type_fibonacci_heap reduce using rule 43 (TYPE -> type_map .)
    type_tree       reduce using rule 43 (TYPE -> type_map .)
    type_trie       reduce using rule 43 (TYPE -> type_map .)
    type_stack      reduce using rule 43 (TYPE -> type_map .)
    type_queue      reduce using rule 43 (TYPE -> type_map .)
    type_binary_search_tree reduce using rule 43 (TYPE -> type_map .)
    type_bitset     reduce using rule 43 (TYPE -> type_map .)
    type_set        reduce using rule 43 (TYPE -> type_map .)
    type_map        reduce using rule 43 (TYPE -> type_map .)
    type_range      reduce using rule 43 (TYPE -> type_map .)
    type_bad_struct reduce using rule 43 (TYPE -> type_map .)
    type_bad_struct2 reduce using rule 43 (TYPE -> type_map .)
    lambda          reduce using rule 43 (TYPE -> type_map .)
    {               reduce using rule 43 (TYPE -> type_map .)
    ]               reduce using rule 43 (TYPE -> type_map .)
    :               reduce using rule 43 (TYPE -> type_map .)
    ,               reduce using rule 43 (TYPE -> type_map .)

  ! (               [ reduce using rule 43 (TYPE -> type_map .) ]


state 126

    (182) return_val -> type_range . ( arguments )
    (44) TYPE -> type_range .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 245
    VAR             reduce using rule 44 (TYPE -> type_range .)
    operator_add    reduce using rule 44 (TYPE -> type_range .)
    operator_sub    reduce using rule 44 (TYPE -> type_range .)
    operator_mul    reduce using rule 44 (TYPE -> type_range .)
    operator_div    reduce using rule 44 (TYPE -> type_range .)
    operator_trudiv reduce using rule 44 (TYPE -> type_range .)
    operator_pow    reduce using rule 44 (TYPE -> type_range .)
    operator_join   reduce using rule 44 (TYPE -> type_range .)
    operator_split  reduce using rule 44 (TYPE -> type_range .)
    operator_bitand reduce using rule 44 (TYPE -> type_range .)
    operator_bitor  reduce using rule 44 (TYPE -> type_range .)
    operator_bitxor reduce using rule 44 (TYPE -> type_range .)
    operator_bitshiftleft reduce using rule 44 (TYPE -> type_range .)
    operator_bitshiftright reduce using rule 44 (TYPE -> type_range .)
    operator_and    reduce using rule 44 (TYPE -> type_range .)
    operator_or     reduce using rule 44 (TYPE -> type_range .)
    operator_xor    reduce using rule 44 (TYPE -> type_range .)
    operator_contains reduce using rule 44 (TYPE -> type_range .)
    operator_incr   reduce using rule 44 (TYPE -> type_range .)
    operator_decr   reduce using rule 44 (TYPE -> type_range .)
    operator_outer  reduce using rule 44 (TYPE -> type_range .)
    operator_rotate reduce using rule 44 (TYPE -> type_range .)
    operator_apply  reduce using rule 44 (TYPE -> type_range .)
    operator_compose reduce using rule 44 (TYPE -> type_range .)
    operator_over   reduce using rule 44 (TYPE -> type_range .)
    operator_map    reduce using rule 44 (TYPE -> type_range .)
    operator_less_than reduce using rule 44 (TYPE -> type_range .)
    operator_less_than_equals reduce using rule 44 (TYPE -> type_range .)
    operator_greater_than reduce using rule 44 (TYPE -> type_range .)
    operator_greater_than_equals reduce using rule 44 (TYPE -> type_range .)
    operator_equals reduce using rule 44 (TYPE -> type_range .)
    operator_not_equals reduce using rule 44 (TYPE -> type_range .)
    operator_smallest reduce using rule 44 (TYPE -> type_range .)
    operator_greatest reduce using rule 44 (TYPE -> type_range .)
    operator_goodname reduce using rule 44 (TYPE -> type_range .)
    [               reduce using rule 44 (TYPE -> type_range .)
    operator_scan   reduce using rule 44 (TYPE -> type_range .)
    operator_reduc  reduce using rule 44 (TYPE -> type_range .)
    operator_bitnot reduce using rule 44 (TYPE -> type_range .)
    operator_not    reduce using rule 44 (TYPE -> type_range .)
    operator_inner  reduce using rule 44 (TYPE -> type_range .)
    operator_reverse reduce using rule 44 (TYPE -> type_range .)
    operator_sorted_incr reduce using rule 44 (TYPE -> type_range .)
    operator_sorted_decr reduce using rule 44 (TYPE -> type_range .)
    operator_s_combinator reduce using rule 44 (TYPE -> type_range .)
    operator_s_combinator_2 reduce using rule 44 (TYPE -> type_range .)
    operator_goodname2 reduce using rule 44 (TYPE -> type_range .)
    NEWLINE         reduce using rule 44 (TYPE -> type_range .)
    $end            reduce using rule 44 (TYPE -> type_range .)
    }               reduce using rule 44 (TYPE -> type_range .)
    )               reduce using rule 44 (TYPE -> type_range .)
    FLOAT           reduce using rule 44 (TYPE -> type_range .)
    NUM             reduce using rule 44 (TYPE -> type_range .)
    STRING_3SQ      reduce using rule 44 (TYPE -> type_range .)
    STRING_3DQ      reduce using rule 44 (TYPE -> type_range .)
    STRING_SQ       reduce using rule 44 (TYPE -> type_range .)
    STRING_DQ       reduce using rule 44 (TYPE -> type_range .)
    true            reduce using rule 44 (TYPE -> type_range .)
    Null            reduce using rule 44 (TYPE -> type_range .)
    false           reduce using rule 44 (TYPE -> type_range .)
    type_type       reduce using rule 44 (TYPE -> type_range .)
    type_num        reduce using rule 44 (TYPE -> type_range .)
    type_bool       reduce using rule 44 (TYPE -> type_range .)
    type_any        reduce using rule 44 (TYPE -> type_range .)
    type_u64        reduce using rule 44 (TYPE -> type_range .)
    type_u32        reduce using rule 44 (TYPE -> type_range .)
    type_u16        reduce using rule 44 (TYPE -> type_range .)
    type_u8         reduce using rule 44 (TYPE -> type_range .)
    type_i64        reduce using rule 44 (TYPE -> type_range .)
    type_i32        reduce using rule 44 (TYPE -> type_range .)
    type_i16        reduce using rule 44 (TYPE -> type_range .)
    type_i8         reduce using rule 44 (TYPE -> type_range .)
    type_f32        reduce using rule 44 (TYPE -> type_range .)
    type_f64        reduce using rule 44 (TYPE -> type_range .)
    type_str        reduce using rule 44 (TYPE -> type_range .)
    type_list       reduce using rule 44 (TYPE -> type_range .)
    type_tuple      reduce using rule 44 (TYPE -> type_range .)
    type_array      reduce using rule 44 (TYPE -> type_range .)
    type_vector     reduce using rule 44 (TYPE -> type_range .)
    type_dict       reduce using rule 44 (TYPE -> type_range .)
    type_generator  reduce using rule 44 (TYPE -> type_range .)
    type_linked_list reduce using rule 44 (TYPE -> type_range .)
    type_doubly_linked_list reduce using rule 44 (TYPE -> type_range .)
    type_deque      reduce using rule 44 (TYPE -> type_range .)
    type_heap       reduce using rule 44 (TYPE -> type_range .)
    type_fibonacci_heap reduce using rule 44 (TYPE -> type_range .)
    type_tree       reduce using rule 44 (TYPE -> type_range .)
    type_trie       reduce using rule 44 (TYPE -> type_range .)
    type_stack      reduce using rule 44 (TYPE -> type_range .)
    type_queue      reduce using rule 44 (TYPE -> type_range .)
    type_binary_search_tree reduce using rule 44 (TYPE -> type_range .)
    type_bitset     reduce using rule 44 (TYPE -> type_range .)
    type_set        reduce using rule 44 (TYPE -> type_range .)
    type_map        reduce using rule 44 (TYPE -> type_range .)
    type_range      reduce using rule 44 (TYPE -> type_range .)
    type_bad_struct reduce using rule 44 (TYPE -> type_range .)
    type_bad_struct2 reduce using rule 44 (TYPE -> type_range .)
    lambda          reduce using rule 44 (TYPE -> type_range .)
    {               reduce using rule 44 (TYPE -> type_range .)
    ]               reduce using rule 44 (TYPE -> type_range .)
    :               reduce using rule 44 (TYPE -> type_range .)
    ,               reduce using rule 44 (TYPE -> type_range .)

  ! (               [ reduce using rule 44 (TYPE -> type_range .) ]


state 127

    (183) return_val -> type_bad_struct . ( arguments )
    (45) TYPE -> type_bad_struct .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 246
    VAR             reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_add    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sub    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_mul    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_div    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_trudiv reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_pow    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_join   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_split  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitand reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitor  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitxor reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitshiftleft reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitshiftright reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_and    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_or     reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_xor    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_contains reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_incr   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_decr   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_outer  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_rotate reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_apply  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_compose reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_over   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_map    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_less_than reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_less_than_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greater_than reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greater_than_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_not_equals reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_smallest reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_greatest reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_goodname reduce using rule 45 (TYPE -> type_bad_struct .)
    [               reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_scan   reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_reduc  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_bitnot reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_not    reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_inner  reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_reverse reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sorted_incr reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_sorted_decr reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_s_combinator reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_s_combinator_2 reduce using rule 45 (TYPE -> type_bad_struct .)
    operator_goodname2 reduce using rule 45 (TYPE -> type_bad_struct .)
    NEWLINE         reduce using rule 45 (TYPE -> type_bad_struct .)
    $end            reduce using rule 45 (TYPE -> type_bad_struct .)
    }               reduce using rule 45 (TYPE -> type_bad_struct .)
    )               reduce using rule 45 (TYPE -> type_bad_struct .)
    FLOAT           reduce using rule 45 (TYPE -> type_bad_struct .)
    NUM             reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_3SQ      reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_3DQ      reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_SQ       reduce using rule 45 (TYPE -> type_bad_struct .)
    STRING_DQ       reduce using rule 45 (TYPE -> type_bad_struct .)
    true            reduce using rule 45 (TYPE -> type_bad_struct .)
    Null            reduce using rule 45 (TYPE -> type_bad_struct .)
    false           reduce using rule 45 (TYPE -> type_bad_struct .)
    type_type       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_num        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bool       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_any        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u16        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_u8         reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i16        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_i8         reduce using rule 45 (TYPE -> type_bad_struct .)
    type_f32        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_f64        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_str        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_list       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_tuple      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_array      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_vector     reduce using rule 45 (TYPE -> type_bad_struct .)
    type_dict       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_generator  reduce using rule 45 (TYPE -> type_bad_struct .)
    type_linked_list reduce using rule 45 (TYPE -> type_bad_struct .)
    type_doubly_linked_list reduce using rule 45 (TYPE -> type_bad_struct .)
    type_deque      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_heap       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_fibonacci_heap reduce using rule 45 (TYPE -> type_bad_struct .)
    type_tree       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_trie       reduce using rule 45 (TYPE -> type_bad_struct .)
    type_stack      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_queue      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_binary_search_tree reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bitset     reduce using rule 45 (TYPE -> type_bad_struct .)
    type_set        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_map        reduce using rule 45 (TYPE -> type_bad_struct .)
    type_range      reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bad_struct reduce using rule 45 (TYPE -> type_bad_struct .)
    type_bad_struct2 reduce using rule 45 (TYPE -> type_bad_struct .)
    lambda          reduce using rule 45 (TYPE -> type_bad_struct .)
    {               reduce using rule 45 (TYPE -> type_bad_struct .)
    ]               reduce using rule 45 (TYPE -> type_bad_struct .)
    :               reduce using rule 45 (TYPE -> type_bad_struct .)
    ,               reduce using rule 45 (TYPE -> type_bad_struct .)

  ! (               [ reduce using rule 45 (TYPE -> type_bad_struct .) ]


state 128

    (184) return_val -> type_bad_struct2 . ( arguments )
    (46) TYPE -> type_bad_struct2 .

  ! shift/reduce conflict for ( resolved as shift
    (               shift and go to state 247
    VAR             reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_add    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sub    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_mul    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_div    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_trudiv reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_pow    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_join   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_split  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitand reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitor  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitxor reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitshiftleft reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitshiftright reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_and    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_or     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_xor    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_contains reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_incr   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_decr   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_outer  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_rotate reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_apply  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_compose reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_over   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_map    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_less_than reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_less_than_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greater_than reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greater_than_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_not_equals reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_smallest reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_greatest reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_goodname reduce using rule 46 (TYPE -> type_bad_struct2 .)
    [               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_scan   reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_reduc  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_bitnot reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_not    reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_inner  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_reverse reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sorted_incr reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_sorted_decr reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_s_combinator reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_s_combinator_2 reduce using rule 46 (TYPE -> type_bad_struct2 .)
    operator_goodname2 reduce using rule 46 (TYPE -> type_bad_struct2 .)
    NEWLINE         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    $end            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    }               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    )               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    FLOAT           reduce using rule 46 (TYPE -> type_bad_struct2 .)
    NUM             reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_3SQ      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_3DQ      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_SQ       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    STRING_DQ       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    true            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    Null            reduce using rule 46 (TYPE -> type_bad_struct2 .)
    false           reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_type       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_num        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bool       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_any        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u16        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_u8         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i16        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_i8         reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_f32        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_f64        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_str        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_list       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_tuple      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_array      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_vector     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_dict       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_generator  reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_linked_list reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_doubly_linked_list reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_deque      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_heap       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_fibonacci_heap reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_tree       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_trie       reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_stack      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_queue      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_binary_search_tree reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bitset     reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_set        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_map        reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_range      reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bad_struct reduce using rule 46 (TYPE -> type_bad_struct2 .)
    type_bad_struct2 reduce using rule 46 (TYPE -> type_bad_struct2 .)
    lambda          reduce using rule 46 (TYPE -> type_bad_struct2 .)
    {               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    ]               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    :               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    ,               reduce using rule 46 (TYPE -> type_bad_struct2 .)

  ! (               [ reduce using rule 46 (TYPE -> type_bad_struct2 .) ]


state 129

    (61) lambda_decl -> lambda . comma_separated_names : expr
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 208

    comma_separated_names          shift and go to state 248

state 130

    (82) for_decl -> for . comma_separated_names operator_contains expr
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 208

    comma_separated_names          shift and go to state 249

state 131

    (83) if_decl -> if . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 250
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 132

    (84) elif_decl -> elif . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 251
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 133

    (85) operator_decl -> operator . ( arguments )

    (               shift and go to state 252


state 134

    (86) struct_decl -> struct . TYPE
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    type_type       shift and go to state 254
    type_num        shift and go to state 255
    type_bool       shift and go to state 256
    type_any        shift and go to state 257
    type_u64        shift and go to state 258
    type_u32        shift and go to state 259
    type_u16        shift and go to state 260
    type_u8         shift and go to state 261
    type_i64        shift and go to state 262
    type_i32        shift and go to state 263
    type_i16        shift and go to state 264
    type_i8         shift and go to state 265
    type_f32        shift and go to state 266
    type_f64        shift and go to state 267
    type_str        shift and go to state 268
    type_list       shift and go to state 269
    type_tuple      shift and go to state 270
    type_array      shift and go to state 271
    type_vector     shift and go to state 272
    type_dict       shift and go to state 273
    type_generator  shift and go to state 274
    type_linked_list shift and go to state 275
    type_doubly_linked_list shift and go to state 276
    type_deque      shift and go to state 277
    type_heap       shift and go to state 278
    type_fibonacci_heap shift and go to state 279
    type_tree       shift and go to state 280
    type_trie       shift and go to state 281
    type_stack      shift and go to state 282
    type_queue      shift and go to state 283
    type_binary_search_tree shift and go to state 284
    type_bitset     shift and go to state 285
    type_set        shift and go to state 286
    type_map        shift and go to state 287
    type_range      shift and go to state 288
    type_bad_struct shift and go to state 289
    type_bad_struct2 shift and go to state 290

    TYPE                           shift and go to state 253

state 135

    (87) while_decl -> while . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 291
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 136

    (88) func_decl -> func . VAR ( def_arguments )

    VAR             shift and go to state 292


state 137

    (7) stmts -> stmts newline . stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (72) block_stmt -> . block_decl { }
    (73) block_stmt -> . block_decl { newline }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (74) block_decl -> . for_decl
    (75) block_decl -> . if_decl
    (76) block_decl -> . else
    (77) block_decl -> . elif_decl
    (78) block_decl -> . operator_decl
    (79) block_decl -> . struct_decl
    (80) block_decl -> . while_decl
    (81) block_decl -> . func_decl
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (82) for_decl -> . for comma_separated_names operator_contains expr
    (83) if_decl -> . if expr
    (84) elif_decl -> . elif expr
    (85) operator_decl -> . operator ( arguments )
    (86) struct_decl -> . struct TYPE
    (87) while_decl -> . while expr
    (88) func_decl -> . func VAR ( def_arguments )

    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 68
    del             shift and go to state 73
    else            shift and go to state 77
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129
    for             shift and go to state 130
    if              shift and go to state 131
    elif            shift and go to state 132
    operator        shift and go to state 133
    struct          shift and go to state 134
    while           shift and go to state 135
    func            shift and go to state 136

    stmt                           shift and go to state 293
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 72
    comma_separated_names          shift and go to state 74
    for_decl                       shift and go to state 75
    if_decl                        shift and go to state 76
    elif_decl                      shift and go to state 78
    operator_decl                  shift and go to state 79
    struct_decl                    shift and go to state 80
    while_decl                     shift and go to state 81
    func_decl                      shift and go to state 82

state 138

    (2) program -> newline stmts .
    (3) program -> newline stmts . newline
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    $end            reduce using rule 2 (program -> newline stmts .)
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 294

state 139

    (5) newline -> NEWLINE newline .

    pass            reduce using rule 5 (newline -> NEWLINE newline .)
    continue        reduce using rule 5 (newline -> NEWLINE newline .)
    break           reduce using rule 5 (newline -> NEWLINE newline .)
    return          reduce using rule 5 (newline -> NEWLINE newline .)
    (               reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitnot reduce using rule 5 (newline -> NEWLINE newline .)
    operator_not    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_reverse reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_incr reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sorted_decr reduce using rule 5 (newline -> NEWLINE newline .)
    operator_s_combinator reduce using rule 5 (newline -> NEWLINE newline .)
    operator_s_combinator_2 reduce using rule 5 (newline -> NEWLINE newline .)
    operator_goodname2 reduce using rule 5 (newline -> NEWLINE newline .)
    VAR             reduce using rule 5 (newline -> NEWLINE newline .)
    del             reduce using rule 5 (newline -> NEWLINE newline .)
    else            reduce using rule 5 (newline -> NEWLINE newline .)
    operator_add    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_sub    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_mul    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_div    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_trudiv reduce using rule 5 (newline -> NEWLINE newline .)
    operator_pow    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_join   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_split  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_scan   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_reduc  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitand reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitor  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitxor reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitshiftleft reduce using rule 5 (newline -> NEWLINE newline .)
    operator_bitshiftright reduce using rule 5 (newline -> NEWLINE newline .)
    operator_and    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_or     reduce using rule 5 (newline -> NEWLINE newline .)
    operator_xor    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_contains reduce using rule 5 (newline -> NEWLINE newline .)
    operator_incr   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_decr   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_outer  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_inner  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_rotate reduce using rule 5 (newline -> NEWLINE newline .)
    operator_apply  reduce using rule 5 (newline -> NEWLINE newline .)
    operator_compose reduce using rule 5 (newline -> NEWLINE newline .)
    operator_over   reduce using rule 5 (newline -> NEWLINE newline .)
    operator_map    reduce using rule 5 (newline -> NEWLINE newline .)
    operator_less_than reduce using rule 5 (newline -> NEWLINE newline .)
    operator_less_than_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greater_than reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greater_than_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_not_equals reduce using rule 5 (newline -> NEWLINE newline .)
    operator_smallest reduce using rule 5 (newline -> NEWLINE newline .)
    operator_greatest reduce using rule 5 (newline -> NEWLINE newline .)
    operator_goodname reduce using rule 5 (newline -> NEWLINE newline .)
    FLOAT           reduce using rule 5 (newline -> NEWLINE newline .)
    NUM             reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3SQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_3DQ      reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_SQ       reduce using rule 5 (newline -> NEWLINE newline .)
    STRING_DQ       reduce using rule 5 (newline -> NEWLINE newline .)
    true            reduce using rule 5 (newline -> NEWLINE newline .)
    Null            reduce using rule 5 (newline -> NEWLINE newline .)
    false           reduce using rule 5 (newline -> NEWLINE newline .)
    type_type       reduce using rule 5 (newline -> NEWLINE newline .)
    type_num        reduce using rule 5 (newline -> NEWLINE newline .)
    type_bool       reduce using rule 5 (newline -> NEWLINE newline .)
    type_any        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_u8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_i64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i16        reduce using rule 5 (newline -> NEWLINE newline .)
    type_i8         reduce using rule 5 (newline -> NEWLINE newline .)
    type_f32        reduce using rule 5 (newline -> NEWLINE newline .)
    type_f64        reduce using rule 5 (newline -> NEWLINE newline .)
    type_str        reduce using rule 5 (newline -> NEWLINE newline .)
    type_list       reduce using rule 5 (newline -> NEWLINE newline .)
    type_tuple      reduce using rule 5 (newline -> NEWLINE newline .)
    type_array      reduce using rule 5 (newline -> NEWLINE newline .)
    type_vector     reduce using rule 5 (newline -> NEWLINE newline .)
    type_dict       reduce using rule 5 (newline -> NEWLINE newline .)
    type_generator  reduce using rule 5 (newline -> NEWLINE newline .)
    type_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_doubly_linked_list reduce using rule 5 (newline -> NEWLINE newline .)
    type_deque      reduce using rule 5 (newline -> NEWLINE newline .)
    type_heap       reduce using rule 5 (newline -> NEWLINE newline .)
    type_fibonacci_heap reduce using rule 5 (newline -> NEWLINE newline .)
    type_tree       reduce using rule 5 (newline -> NEWLINE newline .)
    type_trie       reduce using rule 5 (newline -> NEWLINE newline .)
    type_stack      reduce using rule 5 (newline -> NEWLINE newline .)
    type_queue      reduce using rule 5 (newline -> NEWLINE newline .)
    type_binary_search_tree reduce using rule 5 (newline -> NEWLINE newline .)
    type_bitset     reduce using rule 5 (newline -> NEWLINE newline .)
    type_set        reduce using rule 5 (newline -> NEWLINE newline .)
    type_map        reduce using rule 5 (newline -> NEWLINE newline .)
    type_range      reduce using rule 5 (newline -> NEWLINE newline .)
    type_bad_struct reduce using rule 5 (newline -> NEWLINE newline .)
    type_bad_struct2 reduce using rule 5 (newline -> NEWLINE newline .)
    lambda          reduce using rule 5 (newline -> NEWLINE newline .)
    for             reduce using rule 5 (newline -> NEWLINE newline .)
    if              reduce using rule 5 (newline -> NEWLINE newline .)
    elif            reduce using rule 5 (newline -> NEWLINE newline .)
    operator        reduce using rule 5 (newline -> NEWLINE newline .)
    struct          reduce using rule 5 (newline -> NEWLINE newline .)
    while           reduce using rule 5 (newline -> NEWLINE newline .)
    func            reduce using rule 5 (newline -> NEWLINE newline .)
    $end            reduce using rule 5 (newline -> NEWLINE newline .)
    }               reduce using rule 5 (newline -> NEWLINE newline .)


state 140

    (102) expr -> expr operator_add . expr
    (194) OPERATOR -> operator_add .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 194 (OPERATOR -> operator_add .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 194 (OPERATOR -> operator_add .) ]
  ! operator_reduc  [ reduce using rule 194 (OPERATOR -> operator_add .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 295
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 141

    (103) expr -> expr operator_sub . expr
    (195) OPERATOR -> operator_sub .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 195 (OPERATOR -> operator_sub .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 195 (OPERATOR -> operator_sub .) ]
  ! operator_reduc  [ reduce using rule 195 (OPERATOR -> operator_sub .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 296
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 142

    (104) expr -> expr operator_mul . expr
    (196) OPERATOR -> operator_mul .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 196 (OPERATOR -> operator_mul .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 196 (OPERATOR -> operator_mul .) ]
  ! operator_reduc  [ reduce using rule 196 (OPERATOR -> operator_mul .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 297
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 143

    (105) expr -> expr operator_div . expr
    (197) OPERATOR -> operator_div .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 197 (OPERATOR -> operator_div .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 197 (OPERATOR -> operator_div .) ]
  ! operator_reduc  [ reduce using rule 197 (OPERATOR -> operator_div .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 298
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 144

    (106) expr -> expr operator_trudiv . expr
    (198) OPERATOR -> operator_trudiv .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 198 (OPERATOR -> operator_trudiv .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 198 (OPERATOR -> operator_trudiv .) ]
  ! operator_reduc  [ reduce using rule 198 (OPERATOR -> operator_trudiv .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 299
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 145

    (107) expr -> expr operator_pow . expr
    (199) OPERATOR -> operator_pow .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 199 (OPERATOR -> operator_pow .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 199 (OPERATOR -> operator_pow .) ]
  ! operator_reduc  [ reduce using rule 199 (OPERATOR -> operator_pow .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 300
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 146

    (108) expr -> expr operator_join . expr
    (200) OPERATOR -> operator_join .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 200 (OPERATOR -> operator_join .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 200 (OPERATOR -> operator_join .) ]
  ! operator_reduc  [ reduce using rule 200 (OPERATOR -> operator_join .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 301
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 147

    (109) expr -> expr operator_split . expr
    (201) OPERATOR -> operator_split .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 201 (OPERATOR -> operator_split .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 201 (OPERATOR -> operator_split .) ]
  ! operator_reduc  [ reduce using rule 201 (OPERATOR -> operator_split .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 302
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 148

    (112) expr -> expr operator_bitand . expr
    (204) OPERATOR -> operator_bitand .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 204 (OPERATOR -> operator_bitand .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 204 (OPERATOR -> operator_bitand .) ]
  ! operator_reduc  [ reduce using rule 204 (OPERATOR -> operator_bitand .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 303
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 149

    (113) expr -> expr operator_bitor . expr
    (205) OPERATOR -> operator_bitor .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 205 (OPERATOR -> operator_bitor .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 205 (OPERATOR -> operator_bitor .) ]
  ! operator_reduc  [ reduce using rule 205 (OPERATOR -> operator_bitor .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 304
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 150

    (114) expr -> expr operator_bitxor . expr
    (206) OPERATOR -> operator_bitxor .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 206 (OPERATOR -> operator_bitxor .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 206 (OPERATOR -> operator_bitxor .) ]
  ! operator_reduc  [ reduce using rule 206 (OPERATOR -> operator_bitxor .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 305
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 151

    (115) expr -> expr operator_bitshiftleft . expr
    (207) OPERATOR -> operator_bitshiftleft .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 207 (OPERATOR -> operator_bitshiftleft .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 207 (OPERATOR -> operator_bitshiftleft .) ]
  ! operator_reduc  [ reduce using rule 207 (OPERATOR -> operator_bitshiftleft .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 306
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 152

    (116) expr -> expr operator_bitshiftright . expr
    (208) OPERATOR -> operator_bitshiftright .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 208 (OPERATOR -> operator_bitshiftright .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ reduce using rule 208 (OPERATOR -> operator_bitshiftright .) ]
  ! operator_reduc  [ reduce using rule 208 (OPERATOR -> operator_bitshiftright .) ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 307
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 153

    (117) expr -> expr operator_and . expr
    (209) OPERATOR -> operator_and .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 209 (OPERATOR -> operator_and .) ]
  ! operator_scan   [ reduce using rule 209 (OPERATOR -> operator_and .) ]
  ! operator_reduc  [ reduce using rule 209 (OPERATOR -> operator_and .) ]

    expr                           shift and go to state 308
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 154

    (118) expr -> expr operator_or . expr
    (210) OPERATOR -> operator_or .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 210 (OPERATOR -> operator_or .) ]
  ! operator_scan   [ reduce using rule 210 (OPERATOR -> operator_or .) ]
  ! operator_reduc  [ reduce using rule 210 (OPERATOR -> operator_or .) ]

    expr                           shift and go to state 309
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 155

    (119) expr -> expr operator_xor . expr
    (211) OPERATOR -> operator_xor .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 211 (OPERATOR -> operator_xor .) ]
  ! operator_scan   [ reduce using rule 211 (OPERATOR -> operator_xor .) ]
  ! operator_reduc  [ reduce using rule 211 (OPERATOR -> operator_xor .) ]

    expr                           shift and go to state 310
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 156

    (120) expr -> expr operator_contains . expr
    (212) OPERATOR -> operator_contains .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 212 (OPERATOR -> operator_contains .) ]
  ! operator_scan   [ reduce using rule 212 (OPERATOR -> operator_contains .) ]
  ! operator_reduc  [ reduce using rule 212 (OPERATOR -> operator_contains .) ]

    expr                           shift and go to state 311
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 157

    (123) expr -> expr operator_incr .
    (215) OPERATOR -> operator_incr .

  ! reduce/reduce conflict for operator_inner resolved using rule 123 (expr -> expr operator_incr .)
  ! reduce/reduce conflict for operator_scan resolved using rule 123 (expr -> expr operator_incr .)
  ! reduce/reduce conflict for operator_reduc resolved using rule 123 (expr -> expr operator_incr .)
    operator_add    reduce using rule 123 (expr -> expr operator_incr .)
    operator_sub    reduce using rule 123 (expr -> expr operator_incr .)
    operator_mul    reduce using rule 123 (expr -> expr operator_incr .)
    operator_div    reduce using rule 123 (expr -> expr operator_incr .)
    operator_trudiv reduce using rule 123 (expr -> expr operator_incr .)
    operator_pow    reduce using rule 123 (expr -> expr operator_incr .)
    operator_join   reduce using rule 123 (expr -> expr operator_incr .)
    operator_split  reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitand reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitor  reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitxor reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitshiftleft reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitshiftright reduce using rule 123 (expr -> expr operator_incr .)
    operator_and    reduce using rule 123 (expr -> expr operator_incr .)
    operator_or     reduce using rule 123 (expr -> expr operator_incr .)
    operator_xor    reduce using rule 123 (expr -> expr operator_incr .)
    operator_contains reduce using rule 123 (expr -> expr operator_incr .)
    operator_incr   reduce using rule 123 (expr -> expr operator_incr .)
    operator_decr   reduce using rule 123 (expr -> expr operator_incr .)
    operator_outer  reduce using rule 123 (expr -> expr operator_incr .)
    operator_rotate reduce using rule 123 (expr -> expr operator_incr .)
    operator_apply  reduce using rule 123 (expr -> expr operator_incr .)
    operator_compose reduce using rule 123 (expr -> expr operator_incr .)
    operator_over   reduce using rule 123 (expr -> expr operator_incr .)
    operator_map    reduce using rule 123 (expr -> expr operator_incr .)
    operator_less_than reduce using rule 123 (expr -> expr operator_incr .)
    operator_less_than_equals reduce using rule 123 (expr -> expr operator_incr .)
    operator_greater_than reduce using rule 123 (expr -> expr operator_incr .)
    operator_greater_than_equals reduce using rule 123 (expr -> expr operator_incr .)
    operator_equals reduce using rule 123 (expr -> expr operator_incr .)
    operator_not_equals reduce using rule 123 (expr -> expr operator_incr .)
    operator_smallest reduce using rule 123 (expr -> expr operator_incr .)
    operator_greatest reduce using rule 123 (expr -> expr operator_incr .)
    operator_goodname reduce using rule 123 (expr -> expr operator_incr .)
    [               reduce using rule 123 (expr -> expr operator_incr .)
    operator_scan   reduce using rule 123 (expr -> expr operator_incr .)
    operator_reduc  reduce using rule 123 (expr -> expr operator_incr .)
    operator_bitnot reduce using rule 123 (expr -> expr operator_incr .)
    operator_not    reduce using rule 123 (expr -> expr operator_incr .)
    operator_inner  reduce using rule 123 (expr -> expr operator_incr .)
    operator_reverse reduce using rule 123 (expr -> expr operator_incr .)
    operator_sorted_incr reduce using rule 123 (expr -> expr operator_incr .)
    operator_sorted_decr reduce using rule 123 (expr -> expr operator_incr .)
    operator_s_combinator reduce using rule 123 (expr -> expr operator_incr .)
    operator_s_combinator_2 reduce using rule 123 (expr -> expr operator_incr .)
    operator_goodname2 reduce using rule 123 (expr -> expr operator_incr .)
    NEWLINE         reduce using rule 123 (expr -> expr operator_incr .)
    $end            reduce using rule 123 (expr -> expr operator_incr .)
    }               reduce using rule 123 (expr -> expr operator_incr .)
    )               reduce using rule 123 (expr -> expr operator_incr .)
    (               reduce using rule 123 (expr -> expr operator_incr .)
    VAR             reduce using rule 123 (expr -> expr operator_incr .)
    FLOAT           reduce using rule 123 (expr -> expr operator_incr .)
    NUM             reduce using rule 123 (expr -> expr operator_incr .)
    STRING_3SQ      reduce using rule 123 (expr -> expr operator_incr .)
    STRING_3DQ      reduce using rule 123 (expr -> expr operator_incr .)
    STRING_SQ       reduce using rule 123 (expr -> expr operator_incr .)
    STRING_DQ       reduce using rule 123 (expr -> expr operator_incr .)
    true            reduce using rule 123 (expr -> expr operator_incr .)
    Null            reduce using rule 123 (expr -> expr operator_incr .)
    false           reduce using rule 123 (expr -> expr operator_incr .)
    type_type       reduce using rule 123 (expr -> expr operator_incr .)
    type_num        reduce using rule 123 (expr -> expr operator_incr .)
    type_bool       reduce using rule 123 (expr -> expr operator_incr .)
    type_any        reduce using rule 123 (expr -> expr operator_incr .)
    type_u64        reduce using rule 123 (expr -> expr operator_incr .)
    type_u32        reduce using rule 123 (expr -> expr operator_incr .)
    type_u16        reduce using rule 123 (expr -> expr operator_incr .)
    type_u8         reduce using rule 123 (expr -> expr operator_incr .)
    type_i64        reduce using rule 123 (expr -> expr operator_incr .)
    type_i32        reduce using rule 123 (expr -> expr operator_incr .)
    type_i16        reduce using rule 123 (expr -> expr operator_incr .)
    type_i8         reduce using rule 123 (expr -> expr operator_incr .)
    type_f32        reduce using rule 123 (expr -> expr operator_incr .)
    type_f64        reduce using rule 123 (expr -> expr operator_incr .)
    type_str        reduce using rule 123 (expr -> expr operator_incr .)
    type_list       reduce using rule 123 (expr -> expr operator_incr .)
    type_tuple      reduce using rule 123 (expr -> expr operator_incr .)
    type_array      reduce using rule 123 (expr -> expr operator_incr .)
    type_vector     reduce using rule 123 (expr -> expr operator_incr .)
    type_dict       reduce using rule 123 (expr -> expr operator_incr .)
    type_generator  reduce using rule 123 (expr -> expr operator_incr .)
    type_linked_list reduce using rule 123 (expr -> expr operator_incr .)
    type_doubly_linked_list reduce using rule 123 (expr -> expr operator_incr .)
    type_deque      reduce using rule 123 (expr -> expr operator_incr .)
    type_heap       reduce using rule 123 (expr -> expr operator_incr .)
    type_fibonacci_heap reduce using rule 123 (expr -> expr operator_incr .)
    type_tree       reduce using rule 123 (expr -> expr operator_incr .)
    type_trie       reduce using rule 123 (expr -> expr operator_incr .)
    type_stack      reduce using rule 123 (expr -> expr operator_incr .)
    type_queue      reduce using rule 123 (expr -> expr operator_incr .)
    type_binary_search_tree reduce using rule 123 (expr -> expr operator_incr .)
    type_bitset     reduce using rule 123 (expr -> expr operator_incr .)
    type_set        reduce using rule 123 (expr -> expr operator_incr .)
    type_map        reduce using rule 123 (expr -> expr operator_incr .)
    type_range      reduce using rule 123 (expr -> expr operator_incr .)
    type_bad_struct reduce using rule 123 (expr -> expr operator_incr .)
    type_bad_struct2 reduce using rule 123 (expr -> expr operator_incr .)
    lambda          reduce using rule 123 (expr -> expr operator_incr .)
    {               reduce using rule 123 (expr -> expr operator_incr .)
    ]               reduce using rule 123 (expr -> expr operator_incr .)
    :               reduce using rule 123 (expr -> expr operator_incr .)
    ,               reduce using rule 123 (expr -> expr operator_incr .)

  ! operator_inner  [ reduce using rule 215 (OPERATOR -> operator_incr .) ]
  ! operator_scan   [ reduce using rule 215 (OPERATOR -> operator_incr .) ]
  ! operator_reduc  [ reduce using rule 215 (OPERATOR -> operator_incr .) ]


state 158

    (124) expr -> expr operator_decr .
    (216) OPERATOR -> operator_decr .

  ! reduce/reduce conflict for operator_inner resolved using rule 124 (expr -> expr operator_decr .)
  ! reduce/reduce conflict for operator_scan resolved using rule 124 (expr -> expr operator_decr .)
  ! reduce/reduce conflict for operator_reduc resolved using rule 124 (expr -> expr operator_decr .)
    operator_add    reduce using rule 124 (expr -> expr operator_decr .)
    operator_sub    reduce using rule 124 (expr -> expr operator_decr .)
    operator_mul    reduce using rule 124 (expr -> expr operator_decr .)
    operator_div    reduce using rule 124 (expr -> expr operator_decr .)
    operator_trudiv reduce using rule 124 (expr -> expr operator_decr .)
    operator_pow    reduce using rule 124 (expr -> expr operator_decr .)
    operator_join   reduce using rule 124 (expr -> expr operator_decr .)
    operator_split  reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitand reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitor  reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitxor reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitshiftleft reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitshiftright reduce using rule 124 (expr -> expr operator_decr .)
    operator_and    reduce using rule 124 (expr -> expr operator_decr .)
    operator_or     reduce using rule 124 (expr -> expr operator_decr .)
    operator_xor    reduce using rule 124 (expr -> expr operator_decr .)
    operator_contains reduce using rule 124 (expr -> expr operator_decr .)
    operator_incr   reduce using rule 124 (expr -> expr operator_decr .)
    operator_decr   reduce using rule 124 (expr -> expr operator_decr .)
    operator_outer  reduce using rule 124 (expr -> expr operator_decr .)
    operator_rotate reduce using rule 124 (expr -> expr operator_decr .)
    operator_apply  reduce using rule 124 (expr -> expr operator_decr .)
    operator_compose reduce using rule 124 (expr -> expr operator_decr .)
    operator_over   reduce using rule 124 (expr -> expr operator_decr .)
    operator_map    reduce using rule 124 (expr -> expr operator_decr .)
    operator_less_than reduce using rule 124 (expr -> expr operator_decr .)
    operator_less_than_equals reduce using rule 124 (expr -> expr operator_decr .)
    operator_greater_than reduce using rule 124 (expr -> expr operator_decr .)
    operator_greater_than_equals reduce using rule 124 (expr -> expr operator_decr .)
    operator_equals reduce using rule 124 (expr -> expr operator_decr .)
    operator_not_equals reduce using rule 124 (expr -> expr operator_decr .)
    operator_smallest reduce using rule 124 (expr -> expr operator_decr .)
    operator_greatest reduce using rule 124 (expr -> expr operator_decr .)
    operator_goodname reduce using rule 124 (expr -> expr operator_decr .)
    [               reduce using rule 124 (expr -> expr operator_decr .)
    operator_scan   reduce using rule 124 (expr -> expr operator_decr .)
    operator_reduc  reduce using rule 124 (expr -> expr operator_decr .)
    operator_bitnot reduce using rule 124 (expr -> expr operator_decr .)
    operator_not    reduce using rule 124 (expr -> expr operator_decr .)
    operator_inner  reduce using rule 124 (expr -> expr operator_decr .)
    operator_reverse reduce using rule 124 (expr -> expr operator_decr .)
    operator_sorted_incr reduce using rule 124 (expr -> expr operator_decr .)
    operator_sorted_decr reduce using rule 124 (expr -> expr operator_decr .)
    operator_s_combinator reduce using rule 124 (expr -> expr operator_decr .)
    operator_s_combinator_2 reduce using rule 124 (expr -> expr operator_decr .)
    operator_goodname2 reduce using rule 124 (expr -> expr operator_decr .)
    NEWLINE         reduce using rule 124 (expr -> expr operator_decr .)
    $end            reduce using rule 124 (expr -> expr operator_decr .)
    }               reduce using rule 124 (expr -> expr operator_decr .)
    )               reduce using rule 124 (expr -> expr operator_decr .)
    (               reduce using rule 124 (expr -> expr operator_decr .)
    VAR             reduce using rule 124 (expr -> expr operator_decr .)
    FLOAT           reduce using rule 124 (expr -> expr operator_decr .)
    NUM             reduce using rule 124 (expr -> expr operator_decr .)
    STRING_3SQ      reduce using rule 124 (expr -> expr operator_decr .)
    STRING_3DQ      reduce using rule 124 (expr -> expr operator_decr .)
    STRING_SQ       reduce using rule 124 (expr -> expr operator_decr .)
    STRING_DQ       reduce using rule 124 (expr -> expr operator_decr .)
    true            reduce using rule 124 (expr -> expr operator_decr .)
    Null            reduce using rule 124 (expr -> expr operator_decr .)
    false           reduce using rule 124 (expr -> expr operator_decr .)
    type_type       reduce using rule 124 (expr -> expr operator_decr .)
    type_num        reduce using rule 124 (expr -> expr operator_decr .)
    type_bool       reduce using rule 124 (expr -> expr operator_decr .)
    type_any        reduce using rule 124 (expr -> expr operator_decr .)
    type_u64        reduce using rule 124 (expr -> expr operator_decr .)
    type_u32        reduce using rule 124 (expr -> expr operator_decr .)
    type_u16        reduce using rule 124 (expr -> expr operator_decr .)
    type_u8         reduce using rule 124 (expr -> expr operator_decr .)
    type_i64        reduce using rule 124 (expr -> expr operator_decr .)
    type_i32        reduce using rule 124 (expr -> expr operator_decr .)
    type_i16        reduce using rule 124 (expr -> expr operator_decr .)
    type_i8         reduce using rule 124 (expr -> expr operator_decr .)
    type_f32        reduce using rule 124 (expr -> expr operator_decr .)
    type_f64        reduce using rule 124 (expr -> expr operator_decr .)
    type_str        reduce using rule 124 (expr -> expr operator_decr .)
    type_list       reduce using rule 124 (expr -> expr operator_decr .)
    type_tuple      reduce using rule 124 (expr -> expr operator_decr .)
    type_array      reduce using rule 124 (expr -> expr operator_decr .)
    type_vector     reduce using rule 124 (expr -> expr operator_decr .)
    type_dict       reduce using rule 124 (expr -> expr operator_decr .)
    type_generator  reduce using rule 124 (expr -> expr operator_decr .)
    type_linked_list reduce using rule 124 (expr -> expr operator_decr .)
    type_doubly_linked_list reduce using rule 124 (expr -> expr operator_decr .)
    type_deque      reduce using rule 124 (expr -> expr operator_decr .)
    type_heap       reduce using rule 124 (expr -> expr operator_decr .)
    type_fibonacci_heap reduce using rule 124 (expr -> expr operator_decr .)
    type_tree       reduce using rule 124 (expr -> expr operator_decr .)
    type_trie       reduce using rule 124 (expr -> expr operator_decr .)
    type_stack      reduce using rule 124 (expr -> expr operator_decr .)
    type_queue      reduce using rule 124 (expr -> expr operator_decr .)
    type_binary_search_tree reduce using rule 124 (expr -> expr operator_decr .)
    type_bitset     reduce using rule 124 (expr -> expr operator_decr .)
    type_set        reduce using rule 124 (expr -> expr operator_decr .)
    type_map        reduce using rule 124 (expr -> expr operator_decr .)
    type_range      reduce using rule 124 (expr -> expr operator_decr .)
    type_bad_struct reduce using rule 124 (expr -> expr operator_decr .)
    type_bad_struct2 reduce using rule 124 (expr -> expr operator_decr .)
    lambda          reduce using rule 124 (expr -> expr operator_decr .)
    {               reduce using rule 124 (expr -> expr operator_decr .)
    ]               reduce using rule 124 (expr -> expr operator_decr .)
    :               reduce using rule 124 (expr -> expr operator_decr .)
    ,               reduce using rule 124 (expr -> expr operator_decr .)

  ! operator_inner  [ reduce using rule 216 (OPERATOR -> operator_decr .) ]
  ! operator_scan   [ reduce using rule 216 (OPERATOR -> operator_decr .) ]
  ! operator_reduc  [ reduce using rule 216 (OPERATOR -> operator_decr .) ]


state 159

    (125) expr -> expr operator_outer . OPERATOR expr
    (217) OPERATOR -> operator_outer .
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_inner  reduce using rule 217 (OPERATOR -> operator_outer .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_reverse shift and go to state 178
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

  ! operator_scan   [ reduce using rule 217 (OPERATOR -> operator_outer .) ]
  ! operator_reduc  [ reduce using rule 217 (OPERATOR -> operator_outer .) ]
  ! operator_inner  [ shift and go to state 47 ]

    OPERATOR                       shift and go to state 312

state 160

    (126) expr -> expr OPERATOR . operator_inner OPERATOR expr

    operator_inner  shift and go to state 313


state 161

    (128) expr -> expr operator_rotate . expr
    (220) OPERATOR -> operator_rotate .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_scan   reduce using rule 220 (OPERATOR -> operator_rotate .)
    operator_reduc  reduce using rule 220 (OPERATOR -> operator_rotate .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 314
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 162

    (129) expr -> expr operator_apply . expr
    (221) OPERATOR -> operator_apply .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_scan   reduce using rule 221 (OPERATOR -> operator_apply .)
    operator_reduc  reduce using rule 221 (OPERATOR -> operator_apply .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 315
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 163

    (130) expr -> expr operator_compose . expr
    (222) OPERATOR -> operator_compose .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_scan   reduce using rule 222 (OPERATOR -> operator_compose .)
    operator_reduc  reduce using rule 222 (OPERATOR -> operator_compose .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 316
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 164

    (131) expr -> expr operator_over . expr
    (223) OPERATOR -> operator_over .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 223 (OPERATOR -> operator_over .)
    operator_scan   reduce using rule 223 (OPERATOR -> operator_over .)
    operator_reduc  reduce using rule 223 (OPERATOR -> operator_over .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 317
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 165

    (132) expr -> expr operator_map .
    (224) OPERATOR -> operator_map .

  ! reduce/reduce conflict for operator_inner resolved using rule 132 (expr -> expr operator_map .)
  ! reduce/reduce conflict for operator_scan resolved using rule 132 (expr -> expr operator_map .)
  ! reduce/reduce conflict for operator_reduc resolved using rule 132 (expr -> expr operator_map .)
    operator_add    reduce using rule 132 (expr -> expr operator_map .)
    operator_sub    reduce using rule 132 (expr -> expr operator_map .)
    operator_mul    reduce using rule 132 (expr -> expr operator_map .)
    operator_div    reduce using rule 132 (expr -> expr operator_map .)
    operator_trudiv reduce using rule 132 (expr -> expr operator_map .)
    operator_pow    reduce using rule 132 (expr -> expr operator_map .)
    operator_join   reduce using rule 132 (expr -> expr operator_map .)
    operator_split  reduce using rule 132 (expr -> expr operator_map .)
    operator_bitand reduce using rule 132 (expr -> expr operator_map .)
    operator_bitor  reduce using rule 132 (expr -> expr operator_map .)
    operator_bitxor reduce using rule 132 (expr -> expr operator_map .)
    operator_bitshiftleft reduce using rule 132 (expr -> expr operator_map .)
    operator_bitshiftright reduce using rule 132 (expr -> expr operator_map .)
    operator_and    reduce using rule 132 (expr -> expr operator_map .)
    operator_or     reduce using rule 132 (expr -> expr operator_map .)
    operator_xor    reduce using rule 132 (expr -> expr operator_map .)
    operator_contains reduce using rule 132 (expr -> expr operator_map .)
    operator_incr   reduce using rule 132 (expr -> expr operator_map .)
    operator_decr   reduce using rule 132 (expr -> expr operator_map .)
    operator_outer  reduce using rule 132 (expr -> expr operator_map .)
    operator_rotate reduce using rule 132 (expr -> expr operator_map .)
    operator_apply  reduce using rule 132 (expr -> expr operator_map .)
    operator_compose reduce using rule 132 (expr -> expr operator_map .)
    operator_over   reduce using rule 132 (expr -> expr operator_map .)
    operator_map    reduce using rule 132 (expr -> expr operator_map .)
    operator_less_than reduce using rule 132 (expr -> expr operator_map .)
    operator_less_than_equals reduce using rule 132 (expr -> expr operator_map .)
    operator_greater_than reduce using rule 132 (expr -> expr operator_map .)
    operator_greater_than_equals reduce using rule 132 (expr -> expr operator_map .)
    operator_equals reduce using rule 132 (expr -> expr operator_map .)
    operator_not_equals reduce using rule 132 (expr -> expr operator_map .)
    operator_smallest reduce using rule 132 (expr -> expr operator_map .)
    operator_greatest reduce using rule 132 (expr -> expr operator_map .)
    operator_goodname reduce using rule 132 (expr -> expr operator_map .)
    [               reduce using rule 132 (expr -> expr operator_map .)
    operator_scan   reduce using rule 132 (expr -> expr operator_map .)
    operator_reduc  reduce using rule 132 (expr -> expr operator_map .)
    operator_bitnot reduce using rule 132 (expr -> expr operator_map .)
    operator_not    reduce using rule 132 (expr -> expr operator_map .)
    operator_inner  reduce using rule 132 (expr -> expr operator_map .)
    operator_reverse reduce using rule 132 (expr -> expr operator_map .)
    operator_sorted_incr reduce using rule 132 (expr -> expr operator_map .)
    operator_sorted_decr reduce using rule 132 (expr -> expr operator_map .)
    operator_s_combinator reduce using rule 132 (expr -> expr operator_map .)
    operator_s_combinator_2 reduce using rule 132 (expr -> expr operator_map .)
    operator_goodname2 reduce using rule 132 (expr -> expr operator_map .)
    NEWLINE         reduce using rule 132 (expr -> expr operator_map .)
    $end            reduce using rule 132 (expr -> expr operator_map .)
    }               reduce using rule 132 (expr -> expr operator_map .)
    )               reduce using rule 132 (expr -> expr operator_map .)
    (               reduce using rule 132 (expr -> expr operator_map .)
    VAR             reduce using rule 132 (expr -> expr operator_map .)
    FLOAT           reduce using rule 132 (expr -> expr operator_map .)
    NUM             reduce using rule 132 (expr -> expr operator_map .)
    STRING_3SQ      reduce using rule 132 (expr -> expr operator_map .)
    STRING_3DQ      reduce using rule 132 (expr -> expr operator_map .)
    STRING_SQ       reduce using rule 132 (expr -> expr operator_map .)
    STRING_DQ       reduce using rule 132 (expr -> expr operator_map .)
    true            reduce using rule 132 (expr -> expr operator_map .)
    Null            reduce using rule 132 (expr -> expr operator_map .)
    false           reduce using rule 132 (expr -> expr operator_map .)
    type_type       reduce using rule 132 (expr -> expr operator_map .)
    type_num        reduce using rule 132 (expr -> expr operator_map .)
    type_bool       reduce using rule 132 (expr -> expr operator_map .)
    type_any        reduce using rule 132 (expr -> expr operator_map .)
    type_u64        reduce using rule 132 (expr -> expr operator_map .)
    type_u32        reduce using rule 132 (expr -> expr operator_map .)
    type_u16        reduce using rule 132 (expr -> expr operator_map .)
    type_u8         reduce using rule 132 (expr -> expr operator_map .)
    type_i64        reduce using rule 132 (expr -> expr operator_map .)
    type_i32        reduce using rule 132 (expr -> expr operator_map .)
    type_i16        reduce using rule 132 (expr -> expr operator_map .)
    type_i8         reduce using rule 132 (expr -> expr operator_map .)
    type_f32        reduce using rule 132 (expr -> expr operator_map .)
    type_f64        reduce using rule 132 (expr -> expr operator_map .)
    type_str        reduce using rule 132 (expr -> expr operator_map .)
    type_list       reduce using rule 132 (expr -> expr operator_map .)
    type_tuple      reduce using rule 132 (expr -> expr operator_map .)
    type_array      reduce using rule 132 (expr -> expr operator_map .)
    type_vector     reduce using rule 132 (expr -> expr operator_map .)
    type_dict       reduce using rule 132 (expr -> expr operator_map .)
    type_generator  reduce using rule 132 (expr -> expr operator_map .)
    type_linked_list reduce using rule 132 (expr -> expr operator_map .)
    type_doubly_linked_list reduce using rule 132 (expr -> expr operator_map .)
    type_deque      reduce using rule 132 (expr -> expr operator_map .)
    type_heap       reduce using rule 132 (expr -> expr operator_map .)
    type_fibonacci_heap reduce using rule 132 (expr -> expr operator_map .)
    type_tree       reduce using rule 132 (expr -> expr operator_map .)
    type_trie       reduce using rule 132 (expr -> expr operator_map .)
    type_stack      reduce using rule 132 (expr -> expr operator_map .)
    type_queue      reduce using rule 132 (expr -> expr operator_map .)
    type_binary_search_tree reduce using rule 132 (expr -> expr operator_map .)
    type_bitset     reduce using rule 132 (expr -> expr operator_map .)
    type_set        reduce using rule 132 (expr -> expr operator_map .)
    type_map        reduce using rule 132 (expr -> expr operator_map .)
    type_range      reduce using rule 132 (expr -> expr operator_map .)
    type_bad_struct reduce using rule 132 (expr -> expr operator_map .)
    type_bad_struct2 reduce using rule 132 (expr -> expr operator_map .)
    lambda          reduce using rule 132 (expr -> expr operator_map .)
    {               reduce using rule 132 (expr -> expr operator_map .)
    ]               reduce using rule 132 (expr -> expr operator_map .)
    :               reduce using rule 132 (expr -> expr operator_map .)
    ,               reduce using rule 132 (expr -> expr operator_map .)

  ! operator_inner  [ reduce using rule 224 (OPERATOR -> operator_map .) ]
  ! operator_scan   [ reduce using rule 224 (OPERATOR -> operator_map .) ]
  ! operator_reduc  [ reduce using rule 224 (OPERATOR -> operator_map .) ]


state 166

    (135) expr -> expr operator_less_than . expr
    (227) OPERATOR -> operator_less_than .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 227 (OPERATOR -> operator_less_than .) ]
  ! operator_scan   [ reduce using rule 227 (OPERATOR -> operator_less_than .) ]
  ! operator_reduc  [ reduce using rule 227 (OPERATOR -> operator_less_than .) ]

    expr                           shift and go to state 318
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 167

    (136) expr -> expr operator_less_than_equals . expr
    (228) OPERATOR -> operator_less_than_equals .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 228 (OPERATOR -> operator_less_than_equals .) ]
  ! operator_scan   [ reduce using rule 228 (OPERATOR -> operator_less_than_equals .) ]
  ! operator_reduc  [ reduce using rule 228 (OPERATOR -> operator_less_than_equals .) ]

    expr                           shift and go to state 319
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 168

    (137) expr -> expr operator_greater_than . expr
    (229) OPERATOR -> operator_greater_than .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 229 (OPERATOR -> operator_greater_than .) ]
  ! operator_scan   [ reduce using rule 229 (OPERATOR -> operator_greater_than .) ]
  ! operator_reduc  [ reduce using rule 229 (OPERATOR -> operator_greater_than .) ]

    expr                           shift and go to state 320
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 169

    (138) expr -> expr operator_greater_than_equals . expr
    (230) OPERATOR -> operator_greater_than_equals .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 230 (OPERATOR -> operator_greater_than_equals .) ]
  ! operator_scan   [ reduce using rule 230 (OPERATOR -> operator_greater_than_equals .) ]
  ! operator_reduc  [ reduce using rule 230 (OPERATOR -> operator_greater_than_equals .) ]

    expr                           shift and go to state 321
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 170

    (139) expr -> expr operator_equals . expr
    (231) OPERATOR -> operator_equals .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 231 (OPERATOR -> operator_equals .) ]
  ! operator_scan   [ reduce using rule 231 (OPERATOR -> operator_equals .) ]
  ! operator_reduc  [ reduce using rule 231 (OPERATOR -> operator_equals .) ]

    expr                           shift and go to state 322
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 171

    (140) expr -> expr operator_not_equals . expr
    (232) OPERATOR -> operator_not_equals .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 232 (OPERATOR -> operator_not_equals .) ]
  ! operator_scan   [ reduce using rule 232 (OPERATOR -> operator_not_equals .) ]
  ! operator_reduc  [ reduce using rule 232 (OPERATOR -> operator_not_equals .) ]

    expr                           shift and go to state 323
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 172

    (141) expr -> expr operator_smallest . expr
    (233) OPERATOR -> operator_smallest .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 233 (OPERATOR -> operator_smallest .) ]
  ! operator_scan   [ reduce using rule 233 (OPERATOR -> operator_smallest .) ]
  ! operator_reduc  [ reduce using rule 233 (OPERATOR -> operator_smallest .) ]

    expr                           shift and go to state 324
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 173

    (142) expr -> expr operator_greatest . expr
    (234) OPERATOR -> operator_greatest .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_inner  [ reduce using rule 234 (OPERATOR -> operator_greatest .) ]
  ! operator_scan   [ reduce using rule 234 (OPERATOR -> operator_greatest .) ]
  ! operator_reduc  [ reduce using rule 234 (OPERATOR -> operator_greatest .) ]

    expr                           shift and go to state 325
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 174

    (143) expr -> expr operator_goodname . expr
    (235) OPERATOR -> operator_goodname .
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_inner  reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_scan   reduce using rule 235 (OPERATOR -> operator_goodname .)
    operator_reduc  reduce using rule 235 (OPERATOR -> operator_goodname .)
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_inner  [ shift and go to state 47 ]

    expr                           shift and go to state 326
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 175

    (55) item -> expr [ . expr ]
    (56) simple_slice -> expr [ . expr : expr ]
    (57) full_slice -> expr [ . expr : expr : expr ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 327
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 176

    (213) OPERATOR -> operator_bitnot .

    operator_inner  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_add    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_sub    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_mul    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_div    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_trudiv reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_pow    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_join   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_split  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_scan   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_reduc  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitand reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitor  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitxor reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitshiftleft reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitshiftright reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_and    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_or     reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_xor    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_contains reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_bitnot reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_not    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_incr   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_decr   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_outer  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_reverse reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_rotate reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_apply  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_compose reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_over   reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_map    reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_sorted_incr reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_sorted_decr reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_less_than reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_less_than_equals reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_greater_than reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_greater_than_equals reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_equals reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_not_equals reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_smallest reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_greatest reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_goodname reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_s_combinator reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_s_combinator_2 reduce using rule 213 (OPERATOR -> operator_bitnot .)
    operator_goodname2 reduce using rule 213 (OPERATOR -> operator_bitnot .)
    (               reduce using rule 213 (OPERATOR -> operator_bitnot .)
    VAR             reduce using rule 213 (OPERATOR -> operator_bitnot .)
    FLOAT           reduce using rule 213 (OPERATOR -> operator_bitnot .)
    NUM             reduce using rule 213 (OPERATOR -> operator_bitnot .)
    STRING_3SQ      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    STRING_3DQ      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    STRING_SQ       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    STRING_DQ       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    true            reduce using rule 213 (OPERATOR -> operator_bitnot .)
    Null            reduce using rule 213 (OPERATOR -> operator_bitnot .)
    false           reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_type       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_num        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_bool       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_any        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_u64        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_u32        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_u16        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_u8         reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_i64        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_i32        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_i16        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_i8         reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_f32        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_f64        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_str        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_list       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_tuple      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_array      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_vector     reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_dict       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_generator  reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_linked_list reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_doubly_linked_list reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_deque      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_heap       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_fibonacci_heap reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_tree       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_trie       reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_stack      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_queue      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_binary_search_tree reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_bitset     reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_set        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_map        reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_range      reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_bad_struct reduce using rule 213 (OPERATOR -> operator_bitnot .)
    type_bad_struct2 reduce using rule 213 (OPERATOR -> operator_bitnot .)
    lambda          reduce using rule 213 (OPERATOR -> operator_bitnot .)


state 177

    (214) OPERATOR -> operator_not .

    operator_inner  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_add    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_sub    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_mul    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_div    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_trudiv reduce using rule 214 (OPERATOR -> operator_not .)
    operator_pow    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_join   reduce using rule 214 (OPERATOR -> operator_not .)
    operator_split  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_scan   reduce using rule 214 (OPERATOR -> operator_not .)
    operator_reduc  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitand reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitor  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitxor reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitshiftleft reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitshiftright reduce using rule 214 (OPERATOR -> operator_not .)
    operator_and    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_or     reduce using rule 214 (OPERATOR -> operator_not .)
    operator_xor    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_contains reduce using rule 214 (OPERATOR -> operator_not .)
    operator_bitnot reduce using rule 214 (OPERATOR -> operator_not .)
    operator_not    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_incr   reduce using rule 214 (OPERATOR -> operator_not .)
    operator_decr   reduce using rule 214 (OPERATOR -> operator_not .)
    operator_outer  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_reverse reduce using rule 214 (OPERATOR -> operator_not .)
    operator_rotate reduce using rule 214 (OPERATOR -> operator_not .)
    operator_apply  reduce using rule 214 (OPERATOR -> operator_not .)
    operator_compose reduce using rule 214 (OPERATOR -> operator_not .)
    operator_over   reduce using rule 214 (OPERATOR -> operator_not .)
    operator_map    reduce using rule 214 (OPERATOR -> operator_not .)
    operator_sorted_incr reduce using rule 214 (OPERATOR -> operator_not .)
    operator_sorted_decr reduce using rule 214 (OPERATOR -> operator_not .)
    operator_less_than reduce using rule 214 (OPERATOR -> operator_not .)
    operator_less_than_equals reduce using rule 214 (OPERATOR -> operator_not .)
    operator_greater_than reduce using rule 214 (OPERATOR -> operator_not .)
    operator_greater_than_equals reduce using rule 214 (OPERATOR -> operator_not .)
    operator_equals reduce using rule 214 (OPERATOR -> operator_not .)
    operator_not_equals reduce using rule 214 (OPERATOR -> operator_not .)
    operator_smallest reduce using rule 214 (OPERATOR -> operator_not .)
    operator_greatest reduce using rule 214 (OPERATOR -> operator_not .)
    operator_goodname reduce using rule 214 (OPERATOR -> operator_not .)
    operator_s_combinator reduce using rule 214 (OPERATOR -> operator_not .)
    operator_s_combinator_2 reduce using rule 214 (OPERATOR -> operator_not .)
    operator_goodname2 reduce using rule 214 (OPERATOR -> operator_not .)
    (               reduce using rule 214 (OPERATOR -> operator_not .)
    VAR             reduce using rule 214 (OPERATOR -> operator_not .)
    FLOAT           reduce using rule 214 (OPERATOR -> operator_not .)
    NUM             reduce using rule 214 (OPERATOR -> operator_not .)
    STRING_3SQ      reduce using rule 214 (OPERATOR -> operator_not .)
    STRING_3DQ      reduce using rule 214 (OPERATOR -> operator_not .)
    STRING_SQ       reduce using rule 214 (OPERATOR -> operator_not .)
    STRING_DQ       reduce using rule 214 (OPERATOR -> operator_not .)
    true            reduce using rule 214 (OPERATOR -> operator_not .)
    Null            reduce using rule 214 (OPERATOR -> operator_not .)
    false           reduce using rule 214 (OPERATOR -> operator_not .)
    type_type       reduce using rule 214 (OPERATOR -> operator_not .)
    type_num        reduce using rule 214 (OPERATOR -> operator_not .)
    type_bool       reduce using rule 214 (OPERATOR -> operator_not .)
    type_any        reduce using rule 214 (OPERATOR -> operator_not .)
    type_u64        reduce using rule 214 (OPERATOR -> operator_not .)
    type_u32        reduce using rule 214 (OPERATOR -> operator_not .)
    type_u16        reduce using rule 214 (OPERATOR -> operator_not .)
    type_u8         reduce using rule 214 (OPERATOR -> operator_not .)
    type_i64        reduce using rule 214 (OPERATOR -> operator_not .)
    type_i32        reduce using rule 214 (OPERATOR -> operator_not .)
    type_i16        reduce using rule 214 (OPERATOR -> operator_not .)
    type_i8         reduce using rule 214 (OPERATOR -> operator_not .)
    type_f32        reduce using rule 214 (OPERATOR -> operator_not .)
    type_f64        reduce using rule 214 (OPERATOR -> operator_not .)
    type_str        reduce using rule 214 (OPERATOR -> operator_not .)
    type_list       reduce using rule 214 (OPERATOR -> operator_not .)
    type_tuple      reduce using rule 214 (OPERATOR -> operator_not .)
    type_array      reduce using rule 214 (OPERATOR -> operator_not .)
    type_vector     reduce using rule 214 (OPERATOR -> operator_not .)
    type_dict       reduce using rule 214 (OPERATOR -> operator_not .)
    type_generator  reduce using rule 214 (OPERATOR -> operator_not .)
    type_linked_list reduce using rule 214 (OPERATOR -> operator_not .)
    type_doubly_linked_list reduce using rule 214 (OPERATOR -> operator_not .)
    type_deque      reduce using rule 214 (OPERATOR -> operator_not .)
    type_heap       reduce using rule 214 (OPERATOR -> operator_not .)
    type_fibonacci_heap reduce using rule 214 (OPERATOR -> operator_not .)
    type_tree       reduce using rule 214 (OPERATOR -> operator_not .)
    type_trie       reduce using rule 214 (OPERATOR -> operator_not .)
    type_stack      reduce using rule 214 (OPERATOR -> operator_not .)
    type_queue      reduce using rule 214 (OPERATOR -> operator_not .)
    type_binary_search_tree reduce using rule 214 (OPERATOR -> operator_not .)
    type_bitset     reduce using rule 214 (OPERATOR -> operator_not .)
    type_set        reduce using rule 214 (OPERATOR -> operator_not .)
    type_map        reduce using rule 214 (OPERATOR -> operator_not .)
    type_range      reduce using rule 214 (OPERATOR -> operator_not .)
    type_bad_struct reduce using rule 214 (OPERATOR -> operator_not .)
    type_bad_struct2 reduce using rule 214 (OPERATOR -> operator_not .)
    lambda          reduce using rule 214 (OPERATOR -> operator_not .)


state 178

    (219) OPERATOR -> operator_reverse .

    operator_inner  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_add    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_sub    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_mul    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_div    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_trudiv reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_pow    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_join   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_split  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_scan   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_reduc  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitand reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitor  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitxor reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitshiftleft reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitshiftright reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_and    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_or     reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_xor    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_contains reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_bitnot reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_not    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_incr   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_decr   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_outer  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_reverse reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_rotate reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_apply  reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_compose reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_over   reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_map    reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_sorted_incr reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_sorted_decr reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_less_than reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_less_than_equals reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_greater_than reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_greater_than_equals reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_equals reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_not_equals reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_smallest reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_greatest reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_goodname reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_s_combinator reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_s_combinator_2 reduce using rule 219 (OPERATOR -> operator_reverse .)
    operator_goodname2 reduce using rule 219 (OPERATOR -> operator_reverse .)
    (               reduce using rule 219 (OPERATOR -> operator_reverse .)
    VAR             reduce using rule 219 (OPERATOR -> operator_reverse .)
    FLOAT           reduce using rule 219 (OPERATOR -> operator_reverse .)
    NUM             reduce using rule 219 (OPERATOR -> operator_reverse .)
    STRING_3SQ      reduce using rule 219 (OPERATOR -> operator_reverse .)
    STRING_3DQ      reduce using rule 219 (OPERATOR -> operator_reverse .)
    STRING_SQ       reduce using rule 219 (OPERATOR -> operator_reverse .)
    STRING_DQ       reduce using rule 219 (OPERATOR -> operator_reverse .)
    true            reduce using rule 219 (OPERATOR -> operator_reverse .)
    Null            reduce using rule 219 (OPERATOR -> operator_reverse .)
    false           reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_type       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_num        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_bool       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_any        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_u64        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_u32        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_u16        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_u8         reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_i64        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_i32        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_i16        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_i8         reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_f32        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_f64        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_str        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_list       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_tuple      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_array      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_vector     reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_dict       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_generator  reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_linked_list reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_doubly_linked_list reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_deque      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_heap       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_fibonacci_heap reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_tree       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_trie       reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_stack      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_queue      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_binary_search_tree reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_bitset     reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_set        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_map        reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_range      reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_bad_struct reduce using rule 219 (OPERATOR -> operator_reverse .)
    type_bad_struct2 reduce using rule 219 (OPERATOR -> operator_reverse .)
    lambda          reduce using rule 219 (OPERATOR -> operator_reverse .)


state 179

    (225) OPERATOR -> operator_sorted_incr .

    operator_inner  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_add    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_sub    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_mul    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_div    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_trudiv reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_pow    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_join   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_split  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_scan   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_reduc  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitand reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitor  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitxor reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitshiftleft reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitshiftright reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_and    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_or     reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_xor    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_contains reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_bitnot reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_not    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_incr   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_decr   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_outer  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_reverse reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_rotate reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_apply  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_compose reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_over   reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_map    reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_sorted_incr reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_sorted_decr reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_less_than reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_less_than_equals reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_greater_than reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_greater_than_equals reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_equals reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_not_equals reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_smallest reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_greatest reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_goodname reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_s_combinator reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_s_combinator_2 reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    operator_goodname2 reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    (               reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    VAR             reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    FLOAT           reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    NUM             reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    STRING_3SQ      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    STRING_3DQ      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    STRING_SQ       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    STRING_DQ       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    true            reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    Null            reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    false           reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_type       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_num        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_bool       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_any        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_u64        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_u32        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_u16        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_u8         reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_i64        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_i32        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_i16        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_i8         reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_f32        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_f64        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_str        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_list       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_tuple      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_array      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_vector     reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_dict       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_generator  reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_linked_list reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_doubly_linked_list reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_deque      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_heap       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_fibonacci_heap reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_tree       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_trie       reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_stack      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_queue      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_binary_search_tree reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_bitset     reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_set        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_map        reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_range      reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_bad_struct reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    type_bad_struct2 reduce using rule 225 (OPERATOR -> operator_sorted_incr .)
    lambda          reduce using rule 225 (OPERATOR -> operator_sorted_incr .)


state 180

    (226) OPERATOR -> operator_sorted_decr .

    operator_inner  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_add    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_sub    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_mul    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_div    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_trudiv reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_pow    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_join   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_split  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_scan   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_reduc  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitand reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitor  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitxor reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitshiftleft reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitshiftright reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_and    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_or     reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_xor    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_contains reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_bitnot reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_not    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_incr   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_decr   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_outer  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_reverse reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_rotate reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_apply  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_compose reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_over   reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_map    reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_sorted_incr reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_sorted_decr reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_less_than reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_less_than_equals reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_greater_than reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_greater_than_equals reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_equals reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_not_equals reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_smallest reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_greatest reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_goodname reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_s_combinator reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_s_combinator_2 reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    operator_goodname2 reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    (               reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    VAR             reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    FLOAT           reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    NUM             reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    STRING_3SQ      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    STRING_3DQ      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    STRING_SQ       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    STRING_DQ       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    true            reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    Null            reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    false           reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_type       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_num        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_bool       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_any        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_u64        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_u32        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_u16        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_u8         reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_i64        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_i32        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_i16        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_i8         reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_f32        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_f64        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_str        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_list       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_tuple      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_array      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_vector     reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_dict       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_generator  reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_linked_list reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_doubly_linked_list reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_deque      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_heap       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_fibonacci_heap reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_tree       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_trie       reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_stack      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_queue      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_binary_search_tree reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_bitset     reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_set        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_map        reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_range      reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_bad_struct reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    type_bad_struct2 reduce using rule 226 (OPERATOR -> operator_sorted_decr .)
    lambda          reduce using rule 226 (OPERATOR -> operator_sorted_decr .)


state 181

    (236) OPERATOR -> operator_s_combinator .

    operator_inner  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_add    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_sub    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_mul    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_div    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_trudiv reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_pow    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_join   reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_split  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_scan   reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_reduc  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitand reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitor  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitxor reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitshiftleft reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitshiftright reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_and    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_or     reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_xor    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_contains reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_bitnot reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_not    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_incr   reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_decr   reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_outer  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_reverse reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_rotate reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_apply  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_compose reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_over   reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_map    reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_sorted_incr reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_sorted_decr reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_less_than reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_less_than_equals reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_greater_than reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_greater_than_equals reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_equals reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_not_equals reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_smallest reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_greatest reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_goodname reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_s_combinator reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_s_combinator_2 reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    operator_goodname2 reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    (               reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    VAR             reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    FLOAT           reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    NUM             reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    STRING_3SQ      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    STRING_3DQ      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    STRING_SQ       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    STRING_DQ       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    true            reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    Null            reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    false           reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_type       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_num        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_bool       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_any        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_u64        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_u32        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_u16        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_u8         reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_i64        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_i32        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_i16        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_i8         reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_f32        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_f64        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_str        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_list       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_tuple      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_array      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_vector     reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_dict       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_generator  reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_linked_list reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_doubly_linked_list reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_deque      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_heap       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_fibonacci_heap reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_tree       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_trie       reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_stack      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_queue      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_binary_search_tree reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_bitset     reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_set        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_map        reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_range      reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_bad_struct reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    type_bad_struct2 reduce using rule 236 (OPERATOR -> operator_s_combinator .)
    lambda          reduce using rule 236 (OPERATOR -> operator_s_combinator .)


state 182

    (237) OPERATOR -> operator_s_combinator_2 .

    operator_inner  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_add    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_sub    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_mul    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_div    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_trudiv reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_pow    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_join   reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_split  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_scan   reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_reduc  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitand reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitor  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitxor reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitshiftleft reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitshiftright reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_and    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_or     reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_xor    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_contains reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_bitnot reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_not    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_incr   reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_decr   reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_outer  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_reverse reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_rotate reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_apply  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_compose reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_over   reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_map    reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_sorted_incr reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_sorted_decr reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_less_than reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_less_than_equals reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_greater_than reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_greater_than_equals reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_equals reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_not_equals reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_smallest reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_greatest reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_goodname reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_s_combinator reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_s_combinator_2 reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    operator_goodname2 reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    (               reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    VAR             reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    FLOAT           reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    NUM             reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    STRING_3SQ      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    STRING_3DQ      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    STRING_SQ       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    STRING_DQ       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    true            reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    Null            reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    false           reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_type       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_num        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_bool       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_any        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_u64        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_u32        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_u16        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_u8         reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_i64        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_i32        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_i16        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_i8         reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_f32        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_f64        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_str        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_list       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_tuple      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_array      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_vector     reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_dict       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_generator  reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_linked_list reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_doubly_linked_list reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_deque      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_heap       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_fibonacci_heap reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_tree       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_trie       reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_stack      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_queue      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_binary_search_tree reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_bitset     reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_set        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_map        reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_range      reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_bad_struct reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    type_bad_struct2 reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)
    lambda          reduce using rule 237 (OPERATOR -> operator_s_combinator_2 .)


state 183

    (238) OPERATOR -> operator_goodname2 .

    operator_inner  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_add    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_sub    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_mul    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_div    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_trudiv reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_pow    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_join   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_split  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_scan   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_reduc  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitand reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitor  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitxor reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitshiftleft reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitshiftright reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_and    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_or     reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_xor    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_contains reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_bitnot reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_not    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_incr   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_decr   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_outer  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_reverse reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_rotate reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_apply  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_compose reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_over   reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_map    reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_sorted_incr reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_sorted_decr reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_less_than reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_less_than_equals reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_greater_than reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_greater_than_equals reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_equals reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_not_equals reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_smallest reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_greatest reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_goodname reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_s_combinator reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_s_combinator_2 reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    operator_goodname2 reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    (               reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    VAR             reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    FLOAT           reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    NUM             reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    STRING_3SQ      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    STRING_3DQ      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    STRING_SQ       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    STRING_DQ       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    true            reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    Null            reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    false           reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_type       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_num        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_bool       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_any        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_u64        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_u32        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_u16        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_u8         reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_i64        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_i32        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_i16        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_i8         reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_f32        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_f64        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_str        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_list       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_tuple      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_array      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_vector     reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_dict       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_generator  reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_linked_list reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_doubly_linked_list reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_deque      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_heap       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_fibonacci_heap reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_tree       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_trie       reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_stack      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_queue      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_binary_search_tree reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_bitset     reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_set        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_map        reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_range      reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_bad_struct reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    type_bad_struct2 reduce using rule 238 (OPERATOR -> operator_goodname2 .)
    lambda          reduce using rule 238 (OPERATOR -> operator_goodname2 .)


state 184

    (71) block_stmt -> block_decl { . stmts }
    (72) block_stmt -> block_decl { . }
    (73) block_stmt -> block_decl { . newline }
    (6) stmts -> . stmt
    (7) stmts -> . stmts newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (72) block_stmt -> . block_decl { }
    (73) block_stmt -> . block_decl { newline }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (74) block_decl -> . for_decl
    (75) block_decl -> . if_decl
    (76) block_decl -> . else
    (77) block_decl -> . elif_decl
    (78) block_decl -> . operator_decl
    (79) block_decl -> . struct_decl
    (80) block_decl -> . while_decl
    (81) block_decl -> . func_decl
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (82) for_decl -> . for comma_separated_names operator_contains expr
    (83) if_decl -> . if expr
    (84) elif_decl -> . elif expr
    (85) operator_decl -> . operator ( arguments )
    (86) struct_decl -> . struct TYPE
    (87) while_decl -> . while expr
    (88) func_decl -> . func VAR ( def_arguments )

    }               shift and go to state 329
    NEWLINE         shift and go to state 5
    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 68
    del             shift and go to state 73
    else            shift and go to state 77
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129
    for             shift and go to state 130
    if              shift and go to state 131
    elif            shift and go to state 132
    operator        shift and go to state 133
    struct          shift and go to state 134
    while           shift and go to state 135
    func            shift and go to state 136

    block_decl                     shift and go to state 16
    stmts                          shift and go to state 328
    newline                        shift and go to state 330
    stmt                           shift and go to state 4
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 72
    comma_separated_names          shift and go to state 74
    for_decl                       shift and go to state 75
    if_decl                        shift and go to state 76
    elif_decl                      shift and go to state 78
    operator_decl                  shift and go to state 79
    struct_decl                    shift and go to state 80
    while_decl                     shift and go to state 81
    func_decl                      shift and go to state 82

state 185

    (62) return_stmt -> return expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 62 (return_stmt -> return expr .)
    $end            reduce using rule 62 (return_stmt -> return expr .)
    }               reduce using rule 62 (return_stmt -> return expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 186

    (58) expr -> item .

    operator_add    reduce using rule 58 (expr -> item .)
    operator_sub    reduce using rule 58 (expr -> item .)
    operator_mul    reduce using rule 58 (expr -> item .)
    operator_div    reduce using rule 58 (expr -> item .)
    operator_trudiv reduce using rule 58 (expr -> item .)
    operator_pow    reduce using rule 58 (expr -> item .)
    operator_join   reduce using rule 58 (expr -> item .)
    operator_split  reduce using rule 58 (expr -> item .)
    operator_bitand reduce using rule 58 (expr -> item .)
    operator_bitor  reduce using rule 58 (expr -> item .)
    operator_bitxor reduce using rule 58 (expr -> item .)
    operator_bitshiftleft reduce using rule 58 (expr -> item .)
    operator_bitshiftright reduce using rule 58 (expr -> item .)
    operator_and    reduce using rule 58 (expr -> item .)
    operator_or     reduce using rule 58 (expr -> item .)
    operator_xor    reduce using rule 58 (expr -> item .)
    operator_contains reduce using rule 58 (expr -> item .)
    operator_incr   reduce using rule 58 (expr -> item .)
    operator_decr   reduce using rule 58 (expr -> item .)
    operator_outer  reduce using rule 58 (expr -> item .)
    operator_rotate reduce using rule 58 (expr -> item .)
    operator_apply  reduce using rule 58 (expr -> item .)
    operator_compose reduce using rule 58 (expr -> item .)
    operator_over   reduce using rule 58 (expr -> item .)
    operator_map    reduce using rule 58 (expr -> item .)
    operator_less_than reduce using rule 58 (expr -> item .)
    operator_less_than_equals reduce using rule 58 (expr -> item .)
    operator_greater_than reduce using rule 58 (expr -> item .)
    operator_greater_than_equals reduce using rule 58 (expr -> item .)
    operator_equals reduce using rule 58 (expr -> item .)
    operator_not_equals reduce using rule 58 (expr -> item .)
    operator_smallest reduce using rule 58 (expr -> item .)
    operator_greatest reduce using rule 58 (expr -> item .)
    operator_goodname reduce using rule 58 (expr -> item .)
    [               reduce using rule 58 (expr -> item .)
    operator_scan   reduce using rule 58 (expr -> item .)
    operator_reduc  reduce using rule 58 (expr -> item .)
    operator_bitnot reduce using rule 58 (expr -> item .)
    operator_not    reduce using rule 58 (expr -> item .)
    operator_inner  reduce using rule 58 (expr -> item .)
    operator_reverse reduce using rule 58 (expr -> item .)
    operator_sorted_incr reduce using rule 58 (expr -> item .)
    operator_sorted_decr reduce using rule 58 (expr -> item .)
    operator_s_combinator reduce using rule 58 (expr -> item .)
    operator_s_combinator_2 reduce using rule 58 (expr -> item .)
    operator_goodname2 reduce using rule 58 (expr -> item .)
    NEWLINE         reduce using rule 58 (expr -> item .)
    $end            reduce using rule 58 (expr -> item .)
    }               reduce using rule 58 (expr -> item .)
    )               reduce using rule 58 (expr -> item .)
    (               reduce using rule 58 (expr -> item .)
    VAR             reduce using rule 58 (expr -> item .)
    FLOAT           reduce using rule 58 (expr -> item .)
    NUM             reduce using rule 58 (expr -> item .)
    STRING_3SQ      reduce using rule 58 (expr -> item .)
    STRING_3DQ      reduce using rule 58 (expr -> item .)
    STRING_SQ       reduce using rule 58 (expr -> item .)
    STRING_DQ       reduce using rule 58 (expr -> item .)
    true            reduce using rule 58 (expr -> item .)
    Null            reduce using rule 58 (expr -> item .)
    false           reduce using rule 58 (expr -> item .)
    type_type       reduce using rule 58 (expr -> item .)
    type_num        reduce using rule 58 (expr -> item .)
    type_bool       reduce using rule 58 (expr -> item .)
    type_any        reduce using rule 58 (expr -> item .)
    type_u64        reduce using rule 58 (expr -> item .)
    type_u32        reduce using rule 58 (expr -> item .)
    type_u16        reduce using rule 58 (expr -> item .)
    type_u8         reduce using rule 58 (expr -> item .)
    type_i64        reduce using rule 58 (expr -> item .)
    type_i32        reduce using rule 58 (expr -> item .)
    type_i16        reduce using rule 58 (expr -> item .)
    type_i8         reduce using rule 58 (expr -> item .)
    type_f32        reduce using rule 58 (expr -> item .)
    type_f64        reduce using rule 58 (expr -> item .)
    type_str        reduce using rule 58 (expr -> item .)
    type_list       reduce using rule 58 (expr -> item .)
    type_tuple      reduce using rule 58 (expr -> item .)
    type_array      reduce using rule 58 (expr -> item .)
    type_vector     reduce using rule 58 (expr -> item .)
    type_dict       reduce using rule 58 (expr -> item .)
    type_generator  reduce using rule 58 (expr -> item .)
    type_linked_list reduce using rule 58 (expr -> item .)
    type_doubly_linked_list reduce using rule 58 (expr -> item .)
    type_deque      reduce using rule 58 (expr -> item .)
    type_heap       reduce using rule 58 (expr -> item .)
    type_fibonacci_heap reduce using rule 58 (expr -> item .)
    type_tree       reduce using rule 58 (expr -> item .)
    type_trie       reduce using rule 58 (expr -> item .)
    type_stack      reduce using rule 58 (expr -> item .)
    type_queue      reduce using rule 58 (expr -> item .)
    type_binary_search_tree reduce using rule 58 (expr -> item .)
    type_bitset     reduce using rule 58 (expr -> item .)
    type_set        reduce using rule 58 (expr -> item .)
    type_map        reduce using rule 58 (expr -> item .)
    type_range      reduce using rule 58 (expr -> item .)
    type_bad_struct reduce using rule 58 (expr -> item .)
    type_bad_struct2 reduce using rule 58 (expr -> item .)
    lambda          reduce using rule 58 (expr -> item .)
    {               reduce using rule 58 (expr -> item .)
    ]               reduce using rule 58 (expr -> item .)
    :               reduce using rule 58 (expr -> item .)
    ,               reduce using rule 58 (expr -> item .)


state 187

    (59) expr -> simple_slice .

    operator_add    reduce using rule 59 (expr -> simple_slice .)
    operator_sub    reduce using rule 59 (expr -> simple_slice .)
    operator_mul    reduce using rule 59 (expr -> simple_slice .)
    operator_div    reduce using rule 59 (expr -> simple_slice .)
    operator_trudiv reduce using rule 59 (expr -> simple_slice .)
    operator_pow    reduce using rule 59 (expr -> simple_slice .)
    operator_join   reduce using rule 59 (expr -> simple_slice .)
    operator_split  reduce using rule 59 (expr -> simple_slice .)
    operator_bitand reduce using rule 59 (expr -> simple_slice .)
    operator_bitor  reduce using rule 59 (expr -> simple_slice .)
    operator_bitxor reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftleft reduce using rule 59 (expr -> simple_slice .)
    operator_bitshiftright reduce using rule 59 (expr -> simple_slice .)
    operator_and    reduce using rule 59 (expr -> simple_slice .)
    operator_or     reduce using rule 59 (expr -> simple_slice .)
    operator_xor    reduce using rule 59 (expr -> simple_slice .)
    operator_contains reduce using rule 59 (expr -> simple_slice .)
    operator_incr   reduce using rule 59 (expr -> simple_slice .)
    operator_decr   reduce using rule 59 (expr -> simple_slice .)
    operator_outer  reduce using rule 59 (expr -> simple_slice .)
    operator_rotate reduce using rule 59 (expr -> simple_slice .)
    operator_apply  reduce using rule 59 (expr -> simple_slice .)
    operator_compose reduce using rule 59 (expr -> simple_slice .)
    operator_over   reduce using rule 59 (expr -> simple_slice .)
    operator_map    reduce using rule 59 (expr -> simple_slice .)
    operator_less_than reduce using rule 59 (expr -> simple_slice .)
    operator_less_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than reduce using rule 59 (expr -> simple_slice .)
    operator_greater_than_equals reduce using rule 59 (expr -> simple_slice .)
    operator_equals reduce using rule 59 (expr -> simple_slice .)
    operator_not_equals reduce using rule 59 (expr -> simple_slice .)
    operator_smallest reduce using rule 59 (expr -> simple_slice .)
    operator_greatest reduce using rule 59 (expr -> simple_slice .)
    operator_goodname reduce using rule 59 (expr -> simple_slice .)
    [               reduce using rule 59 (expr -> simple_slice .)
    operator_scan   reduce using rule 59 (expr -> simple_slice .)
    operator_reduc  reduce using rule 59 (expr -> simple_slice .)
    operator_bitnot reduce using rule 59 (expr -> simple_slice .)
    operator_not    reduce using rule 59 (expr -> simple_slice .)
    operator_inner  reduce using rule 59 (expr -> simple_slice .)
    operator_reverse reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_incr reduce using rule 59 (expr -> simple_slice .)
    operator_sorted_decr reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator reduce using rule 59 (expr -> simple_slice .)
    operator_s_combinator_2 reduce using rule 59 (expr -> simple_slice .)
    operator_goodname2 reduce using rule 59 (expr -> simple_slice .)
    NEWLINE         reduce using rule 59 (expr -> simple_slice .)
    $end            reduce using rule 59 (expr -> simple_slice .)
    }               reduce using rule 59 (expr -> simple_slice .)
    )               reduce using rule 59 (expr -> simple_slice .)
    (               reduce using rule 59 (expr -> simple_slice .)
    VAR             reduce using rule 59 (expr -> simple_slice .)
    FLOAT           reduce using rule 59 (expr -> simple_slice .)
    NUM             reduce using rule 59 (expr -> simple_slice .)
    STRING_3SQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_3DQ      reduce using rule 59 (expr -> simple_slice .)
    STRING_SQ       reduce using rule 59 (expr -> simple_slice .)
    STRING_DQ       reduce using rule 59 (expr -> simple_slice .)
    true            reduce using rule 59 (expr -> simple_slice .)
    Null            reduce using rule 59 (expr -> simple_slice .)
    false           reduce using rule 59 (expr -> simple_slice .)
    type_type       reduce using rule 59 (expr -> simple_slice .)
    type_num        reduce using rule 59 (expr -> simple_slice .)
    type_bool       reduce using rule 59 (expr -> simple_slice .)
    type_any        reduce using rule 59 (expr -> simple_slice .)
    type_u64        reduce using rule 59 (expr -> simple_slice .)
    type_u32        reduce using rule 59 (expr -> simple_slice .)
    type_u16        reduce using rule 59 (expr -> simple_slice .)
    type_u8         reduce using rule 59 (expr -> simple_slice .)
    type_i64        reduce using rule 59 (expr -> simple_slice .)
    type_i32        reduce using rule 59 (expr -> simple_slice .)
    type_i16        reduce using rule 59 (expr -> simple_slice .)
    type_i8         reduce using rule 59 (expr -> simple_slice .)
    type_f32        reduce using rule 59 (expr -> simple_slice .)
    type_f64        reduce using rule 59 (expr -> simple_slice .)
    type_str        reduce using rule 59 (expr -> simple_slice .)
    type_list       reduce using rule 59 (expr -> simple_slice .)
    type_tuple      reduce using rule 59 (expr -> simple_slice .)
    type_array      reduce using rule 59 (expr -> simple_slice .)
    type_vector     reduce using rule 59 (expr -> simple_slice .)
    type_dict       reduce using rule 59 (expr -> simple_slice .)
    type_generator  reduce using rule 59 (expr -> simple_slice .)
    type_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_doubly_linked_list reduce using rule 59 (expr -> simple_slice .)
    type_deque      reduce using rule 59 (expr -> simple_slice .)
    type_heap       reduce using rule 59 (expr -> simple_slice .)
    type_fibonacci_heap reduce using rule 59 (expr -> simple_slice .)
    type_tree       reduce using rule 59 (expr -> simple_slice .)
    type_trie       reduce using rule 59 (expr -> simple_slice .)
    type_stack      reduce using rule 59 (expr -> simple_slice .)
    type_queue      reduce using rule 59 (expr -> simple_slice .)
    type_binary_search_tree reduce using rule 59 (expr -> simple_slice .)
    type_bitset     reduce using rule 59 (expr -> simple_slice .)
    type_set        reduce using rule 59 (expr -> simple_slice .)
    type_map        reduce using rule 59 (expr -> simple_slice .)
    type_range      reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct reduce using rule 59 (expr -> simple_slice .)
    type_bad_struct2 reduce using rule 59 (expr -> simple_slice .)
    lambda          reduce using rule 59 (expr -> simple_slice .)
    {               reduce using rule 59 (expr -> simple_slice .)
    ]               reduce using rule 59 (expr -> simple_slice .)
    :               reduce using rule 59 (expr -> simple_slice .)
    ,               reduce using rule 59 (expr -> simple_slice .)


state 188

    (60) expr -> full_slice .

    operator_add    reduce using rule 60 (expr -> full_slice .)
    operator_sub    reduce using rule 60 (expr -> full_slice .)
    operator_mul    reduce using rule 60 (expr -> full_slice .)
    operator_div    reduce using rule 60 (expr -> full_slice .)
    operator_trudiv reduce using rule 60 (expr -> full_slice .)
    operator_pow    reduce using rule 60 (expr -> full_slice .)
    operator_join   reduce using rule 60 (expr -> full_slice .)
    operator_split  reduce using rule 60 (expr -> full_slice .)
    operator_bitand reduce using rule 60 (expr -> full_slice .)
    operator_bitor  reduce using rule 60 (expr -> full_slice .)
    operator_bitxor reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftleft reduce using rule 60 (expr -> full_slice .)
    operator_bitshiftright reduce using rule 60 (expr -> full_slice .)
    operator_and    reduce using rule 60 (expr -> full_slice .)
    operator_or     reduce using rule 60 (expr -> full_slice .)
    operator_xor    reduce using rule 60 (expr -> full_slice .)
    operator_contains reduce using rule 60 (expr -> full_slice .)
    operator_incr   reduce using rule 60 (expr -> full_slice .)
    operator_decr   reduce using rule 60 (expr -> full_slice .)
    operator_outer  reduce using rule 60 (expr -> full_slice .)
    operator_rotate reduce using rule 60 (expr -> full_slice .)
    operator_apply  reduce using rule 60 (expr -> full_slice .)
    operator_compose reduce using rule 60 (expr -> full_slice .)
    operator_over   reduce using rule 60 (expr -> full_slice .)
    operator_map    reduce using rule 60 (expr -> full_slice .)
    operator_less_than reduce using rule 60 (expr -> full_slice .)
    operator_less_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_greater_than reduce using rule 60 (expr -> full_slice .)
    operator_greater_than_equals reduce using rule 60 (expr -> full_slice .)
    operator_equals reduce using rule 60 (expr -> full_slice .)
    operator_not_equals reduce using rule 60 (expr -> full_slice .)
    operator_smallest reduce using rule 60 (expr -> full_slice .)
    operator_greatest reduce using rule 60 (expr -> full_slice .)
    operator_goodname reduce using rule 60 (expr -> full_slice .)
    [               reduce using rule 60 (expr -> full_slice .)
    operator_scan   reduce using rule 60 (expr -> full_slice .)
    operator_reduc  reduce using rule 60 (expr -> full_slice .)
    operator_bitnot reduce using rule 60 (expr -> full_slice .)
    operator_not    reduce using rule 60 (expr -> full_slice .)
    operator_inner  reduce using rule 60 (expr -> full_slice .)
    operator_reverse reduce using rule 60 (expr -> full_slice .)
    operator_sorted_incr reduce using rule 60 (expr -> full_slice .)
    operator_sorted_decr reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator reduce using rule 60 (expr -> full_slice .)
    operator_s_combinator_2 reduce using rule 60 (expr -> full_slice .)
    operator_goodname2 reduce using rule 60 (expr -> full_slice .)
    NEWLINE         reduce using rule 60 (expr -> full_slice .)
    $end            reduce using rule 60 (expr -> full_slice .)
    }               reduce using rule 60 (expr -> full_slice .)
    )               reduce using rule 60 (expr -> full_slice .)
    (               reduce using rule 60 (expr -> full_slice .)
    VAR             reduce using rule 60 (expr -> full_slice .)
    FLOAT           reduce using rule 60 (expr -> full_slice .)
    NUM             reduce using rule 60 (expr -> full_slice .)
    STRING_3SQ      reduce using rule 60 (expr -> full_slice .)
    STRING_3DQ      reduce using rule 60 (expr -> full_slice .)
    STRING_SQ       reduce using rule 60 (expr -> full_slice .)
    STRING_DQ       reduce using rule 60 (expr -> full_slice .)
    true            reduce using rule 60 (expr -> full_slice .)
    Null            reduce using rule 60 (expr -> full_slice .)
    false           reduce using rule 60 (expr -> full_slice .)
    type_type       reduce using rule 60 (expr -> full_slice .)
    type_num        reduce using rule 60 (expr -> full_slice .)
    type_bool       reduce using rule 60 (expr -> full_slice .)
    type_any        reduce using rule 60 (expr -> full_slice .)
    type_u64        reduce using rule 60 (expr -> full_slice .)
    type_u32        reduce using rule 60 (expr -> full_slice .)
    type_u16        reduce using rule 60 (expr -> full_slice .)
    type_u8         reduce using rule 60 (expr -> full_slice .)
    type_i64        reduce using rule 60 (expr -> full_slice .)
    type_i32        reduce using rule 60 (expr -> full_slice .)
    type_i16        reduce using rule 60 (expr -> full_slice .)
    type_i8         reduce using rule 60 (expr -> full_slice .)
    type_f32        reduce using rule 60 (expr -> full_slice .)
    type_f64        reduce using rule 60 (expr -> full_slice .)
    type_str        reduce using rule 60 (expr -> full_slice .)
    type_list       reduce using rule 60 (expr -> full_slice .)
    type_tuple      reduce using rule 60 (expr -> full_slice .)
    type_array      reduce using rule 60 (expr -> full_slice .)
    type_vector     reduce using rule 60 (expr -> full_slice .)
    type_dict       reduce using rule 60 (expr -> full_slice .)
    type_generator  reduce using rule 60 (expr -> full_slice .)
    type_linked_list reduce using rule 60 (expr -> full_slice .)
    type_doubly_linked_list reduce using rule 60 (expr -> full_slice .)
    type_deque      reduce using rule 60 (expr -> full_slice .)
    type_heap       reduce using rule 60 (expr -> full_slice .)
    type_fibonacci_heap reduce using rule 60 (expr -> full_slice .)
    type_tree       reduce using rule 60 (expr -> full_slice .)
    type_trie       reduce using rule 60 (expr -> full_slice .)
    type_stack      reduce using rule 60 (expr -> full_slice .)
    type_queue      reduce using rule 60 (expr -> full_slice .)
    type_binary_search_tree reduce using rule 60 (expr -> full_slice .)
    type_bitset     reduce using rule 60 (expr -> full_slice .)
    type_set        reduce using rule 60 (expr -> full_slice .)
    type_map        reduce using rule 60 (expr -> full_slice .)
    type_range      reduce using rule 60 (expr -> full_slice .)
    type_bad_struct reduce using rule 60 (expr -> full_slice .)
    type_bad_struct2 reduce using rule 60 (expr -> full_slice .)
    lambda          reduce using rule 60 (expr -> full_slice .)
    {               reduce using rule 60 (expr -> full_slice .)
    ]               reduce using rule 60 (expr -> full_slice .)
    :               reduce using rule 60 (expr -> full_slice .)
    ,               reduce using rule 60 (expr -> full_slice .)


state 189

    (147) expr -> VAR .
    (185) return_val -> VAR . ( arguments )

  ! shift/reduce conflict for ( resolved as shift
    operator_add    reduce using rule 147 (expr -> VAR .)
    operator_sub    reduce using rule 147 (expr -> VAR .)
    operator_mul    reduce using rule 147 (expr -> VAR .)
    operator_div    reduce using rule 147 (expr -> VAR .)
    operator_trudiv reduce using rule 147 (expr -> VAR .)
    operator_pow    reduce using rule 147 (expr -> VAR .)
    operator_join   reduce using rule 147 (expr -> VAR .)
    operator_split  reduce using rule 147 (expr -> VAR .)
    operator_bitand reduce using rule 147 (expr -> VAR .)
    operator_bitor  reduce using rule 147 (expr -> VAR .)
    operator_bitxor reduce using rule 147 (expr -> VAR .)
    operator_bitshiftleft reduce using rule 147 (expr -> VAR .)
    operator_bitshiftright reduce using rule 147 (expr -> VAR .)
    operator_and    reduce using rule 147 (expr -> VAR .)
    operator_or     reduce using rule 147 (expr -> VAR .)
    operator_xor    reduce using rule 147 (expr -> VAR .)
    operator_contains reduce using rule 147 (expr -> VAR .)
    operator_incr   reduce using rule 147 (expr -> VAR .)
    operator_decr   reduce using rule 147 (expr -> VAR .)
    operator_outer  reduce using rule 147 (expr -> VAR .)
    operator_rotate reduce using rule 147 (expr -> VAR .)
    operator_apply  reduce using rule 147 (expr -> VAR .)
    operator_compose reduce using rule 147 (expr -> VAR .)
    operator_over   reduce using rule 147 (expr -> VAR .)
    operator_map    reduce using rule 147 (expr -> VAR .)
    operator_less_than reduce using rule 147 (expr -> VAR .)
    operator_less_than_equals reduce using rule 147 (expr -> VAR .)
    operator_greater_than reduce using rule 147 (expr -> VAR .)
    operator_greater_than_equals reduce using rule 147 (expr -> VAR .)
    operator_equals reduce using rule 147 (expr -> VAR .)
    operator_not_equals reduce using rule 147 (expr -> VAR .)
    operator_smallest reduce using rule 147 (expr -> VAR .)
    operator_greatest reduce using rule 147 (expr -> VAR .)
    operator_goodname reduce using rule 147 (expr -> VAR .)
    [               reduce using rule 147 (expr -> VAR .)
    operator_scan   reduce using rule 147 (expr -> VAR .)
    operator_reduc  reduce using rule 147 (expr -> VAR .)
    operator_bitnot reduce using rule 147 (expr -> VAR .)
    operator_not    reduce using rule 147 (expr -> VAR .)
    operator_inner  reduce using rule 147 (expr -> VAR .)
    operator_reverse reduce using rule 147 (expr -> VAR .)
    operator_sorted_incr reduce using rule 147 (expr -> VAR .)
    operator_sorted_decr reduce using rule 147 (expr -> VAR .)
    operator_s_combinator reduce using rule 147 (expr -> VAR .)
    operator_s_combinator_2 reduce using rule 147 (expr -> VAR .)
    operator_goodname2 reduce using rule 147 (expr -> VAR .)
    NEWLINE         reduce using rule 147 (expr -> VAR .)
    $end            reduce using rule 147 (expr -> VAR .)
    }               reduce using rule 147 (expr -> VAR .)
    )               reduce using rule 147 (expr -> VAR .)
    VAR             reduce using rule 147 (expr -> VAR .)
    FLOAT           reduce using rule 147 (expr -> VAR .)
    NUM             reduce using rule 147 (expr -> VAR .)
    STRING_3SQ      reduce using rule 147 (expr -> VAR .)
    STRING_3DQ      reduce using rule 147 (expr -> VAR .)
    STRING_SQ       reduce using rule 147 (expr -> VAR .)
    STRING_DQ       reduce using rule 147 (expr -> VAR .)
    true            reduce using rule 147 (expr -> VAR .)
    Null            reduce using rule 147 (expr -> VAR .)
    false           reduce using rule 147 (expr -> VAR .)
    type_type       reduce using rule 147 (expr -> VAR .)
    type_num        reduce using rule 147 (expr -> VAR .)
    type_bool       reduce using rule 147 (expr -> VAR .)
    type_any        reduce using rule 147 (expr -> VAR .)
    type_u64        reduce using rule 147 (expr -> VAR .)
    type_u32        reduce using rule 147 (expr -> VAR .)
    type_u16        reduce using rule 147 (expr -> VAR .)
    type_u8         reduce using rule 147 (expr -> VAR .)
    type_i64        reduce using rule 147 (expr -> VAR .)
    type_i32        reduce using rule 147 (expr -> VAR .)
    type_i16        reduce using rule 147 (expr -> VAR .)
    type_i8         reduce using rule 147 (expr -> VAR .)
    type_f32        reduce using rule 147 (expr -> VAR .)
    type_f64        reduce using rule 147 (expr -> VAR .)
    type_str        reduce using rule 147 (expr -> VAR .)
    type_list       reduce using rule 147 (expr -> VAR .)
    type_tuple      reduce using rule 147 (expr -> VAR .)
    type_array      reduce using rule 147 (expr -> VAR .)
    type_vector     reduce using rule 147 (expr -> VAR .)
    type_dict       reduce using rule 147 (expr -> VAR .)
    type_generator  reduce using rule 147 (expr -> VAR .)
    type_linked_list reduce using rule 147 (expr -> VAR .)
    type_doubly_linked_list reduce using rule 147 (expr -> VAR .)
    type_deque      reduce using rule 147 (expr -> VAR .)
    type_heap       reduce using rule 147 (expr -> VAR .)
    type_fibonacci_heap reduce using rule 147 (expr -> VAR .)
    type_tree       reduce using rule 147 (expr -> VAR .)
    type_trie       reduce using rule 147 (expr -> VAR .)
    type_stack      reduce using rule 147 (expr -> VAR .)
    type_queue      reduce using rule 147 (expr -> VAR .)
    type_binary_search_tree reduce using rule 147 (expr -> VAR .)
    type_bitset     reduce using rule 147 (expr -> VAR .)
    type_set        reduce using rule 147 (expr -> VAR .)
    type_map        reduce using rule 147 (expr -> VAR .)
    type_range      reduce using rule 147 (expr -> VAR .)
    type_bad_struct reduce using rule 147 (expr -> VAR .)
    type_bad_struct2 reduce using rule 147 (expr -> VAR .)
    lambda          reduce using rule 147 (expr -> VAR .)
    {               reduce using rule 147 (expr -> VAR .)
    ]               reduce using rule 147 (expr -> VAR .)
    :               reduce using rule 147 (expr -> VAR .)
    ,               reduce using rule 147 (expr -> VAR .)
    (               shift and go to state 205

  ! (               [ reduce using rule 147 (expr -> VAR .) ]


state 190

    (189) expr -> TYPE .

    operator_add    reduce using rule 189 (expr -> TYPE .)
    operator_sub    reduce using rule 189 (expr -> TYPE .)
    operator_mul    reduce using rule 189 (expr -> TYPE .)
    operator_div    reduce using rule 189 (expr -> TYPE .)
    operator_trudiv reduce using rule 189 (expr -> TYPE .)
    operator_pow    reduce using rule 189 (expr -> TYPE .)
    operator_join   reduce using rule 189 (expr -> TYPE .)
    operator_split  reduce using rule 189 (expr -> TYPE .)
    operator_bitand reduce using rule 189 (expr -> TYPE .)
    operator_bitor  reduce using rule 189 (expr -> TYPE .)
    operator_bitxor reduce using rule 189 (expr -> TYPE .)
    operator_bitshiftleft reduce using rule 189 (expr -> TYPE .)
    operator_bitshiftright reduce using rule 189 (expr -> TYPE .)
    operator_and    reduce using rule 189 (expr -> TYPE .)
    operator_or     reduce using rule 189 (expr -> TYPE .)
    operator_xor    reduce using rule 189 (expr -> TYPE .)
    operator_contains reduce using rule 189 (expr -> TYPE .)
    operator_incr   reduce using rule 189 (expr -> TYPE .)
    operator_decr   reduce using rule 189 (expr -> TYPE .)
    operator_outer  reduce using rule 189 (expr -> TYPE .)
    operator_rotate reduce using rule 189 (expr -> TYPE .)
    operator_apply  reduce using rule 189 (expr -> TYPE .)
    operator_compose reduce using rule 189 (expr -> TYPE .)
    operator_over   reduce using rule 189 (expr -> TYPE .)
    operator_map    reduce using rule 189 (expr -> TYPE .)
    operator_less_than reduce using rule 189 (expr -> TYPE .)
    operator_less_than_equals reduce using rule 189 (expr -> TYPE .)
    operator_greater_than reduce using rule 189 (expr -> TYPE .)
    operator_greater_than_equals reduce using rule 189 (expr -> TYPE .)
    operator_equals reduce using rule 189 (expr -> TYPE .)
    operator_not_equals reduce using rule 189 (expr -> TYPE .)
    operator_smallest reduce using rule 189 (expr -> TYPE .)
    operator_greatest reduce using rule 189 (expr -> TYPE .)
    operator_goodname reduce using rule 189 (expr -> TYPE .)
    [               reduce using rule 189 (expr -> TYPE .)
    operator_scan   reduce using rule 189 (expr -> TYPE .)
    operator_reduc  reduce using rule 189 (expr -> TYPE .)
    operator_bitnot reduce using rule 189 (expr -> TYPE .)
    operator_not    reduce using rule 189 (expr -> TYPE .)
    operator_inner  reduce using rule 189 (expr -> TYPE .)
    operator_reverse reduce using rule 189 (expr -> TYPE .)
    operator_sorted_incr reduce using rule 189 (expr -> TYPE .)
    operator_sorted_decr reduce using rule 189 (expr -> TYPE .)
    operator_s_combinator reduce using rule 189 (expr -> TYPE .)
    operator_s_combinator_2 reduce using rule 189 (expr -> TYPE .)
    operator_goodname2 reduce using rule 189 (expr -> TYPE .)
    NEWLINE         reduce using rule 189 (expr -> TYPE .)
    $end            reduce using rule 189 (expr -> TYPE .)
    }               reduce using rule 189 (expr -> TYPE .)
    )               reduce using rule 189 (expr -> TYPE .)
    (               reduce using rule 189 (expr -> TYPE .)
    VAR             reduce using rule 189 (expr -> TYPE .)
    FLOAT           reduce using rule 189 (expr -> TYPE .)
    NUM             reduce using rule 189 (expr -> TYPE .)
    STRING_3SQ      reduce using rule 189 (expr -> TYPE .)
    STRING_3DQ      reduce using rule 189 (expr -> TYPE .)
    STRING_SQ       reduce using rule 189 (expr -> TYPE .)
    STRING_DQ       reduce using rule 189 (expr -> TYPE .)
    true            reduce using rule 189 (expr -> TYPE .)
    Null            reduce using rule 189 (expr -> TYPE .)
    false           reduce using rule 189 (expr -> TYPE .)
    type_type       reduce using rule 189 (expr -> TYPE .)
    type_num        reduce using rule 189 (expr -> TYPE .)
    type_bool       reduce using rule 189 (expr -> TYPE .)
    type_any        reduce using rule 189 (expr -> TYPE .)
    type_u64        reduce using rule 189 (expr -> TYPE .)
    type_u32        reduce using rule 189 (expr -> TYPE .)
    type_u16        reduce using rule 189 (expr -> TYPE .)
    type_u8         reduce using rule 189 (expr -> TYPE .)
    type_i64        reduce using rule 189 (expr -> TYPE .)
    type_i32        reduce using rule 189 (expr -> TYPE .)
    type_i16        reduce using rule 189 (expr -> TYPE .)
    type_i8         reduce using rule 189 (expr -> TYPE .)
    type_f32        reduce using rule 189 (expr -> TYPE .)
    type_f64        reduce using rule 189 (expr -> TYPE .)
    type_str        reduce using rule 189 (expr -> TYPE .)
    type_list       reduce using rule 189 (expr -> TYPE .)
    type_tuple      reduce using rule 189 (expr -> TYPE .)
    type_array      reduce using rule 189 (expr -> TYPE .)
    type_vector     reduce using rule 189 (expr -> TYPE .)
    type_dict       reduce using rule 189 (expr -> TYPE .)
    type_generator  reduce using rule 189 (expr -> TYPE .)
    type_linked_list reduce using rule 189 (expr -> TYPE .)
    type_doubly_linked_list reduce using rule 189 (expr -> TYPE .)
    type_deque      reduce using rule 189 (expr -> TYPE .)
    type_heap       reduce using rule 189 (expr -> TYPE .)
    type_fibonacci_heap reduce using rule 189 (expr -> TYPE .)
    type_tree       reduce using rule 189 (expr -> TYPE .)
    type_trie       reduce using rule 189 (expr -> TYPE .)
    type_stack      reduce using rule 189 (expr -> TYPE .)
    type_queue      reduce using rule 189 (expr -> TYPE .)
    type_binary_search_tree reduce using rule 189 (expr -> TYPE .)
    type_bitset     reduce using rule 189 (expr -> TYPE .)
    type_set        reduce using rule 189 (expr -> TYPE .)
    type_map        reduce using rule 189 (expr -> TYPE .)
    type_range      reduce using rule 189 (expr -> TYPE .)
    type_bad_struct reduce using rule 189 (expr -> TYPE .)
    type_bad_struct2 reduce using rule 189 (expr -> TYPE .)
    lambda          reduce using rule 189 (expr -> TYPE .)
    {               reduce using rule 189 (expr -> TYPE .)
    ]               reduce using rule 189 (expr -> TYPE .)
    :               reduce using rule 189 (expr -> TYPE .)
    ,               reduce using rule 189 (expr -> TYPE .)


state 191

    (65) assign_stmt -> item = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    item                           shift and go to state 186
    expr                           shift and go to state 331
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 192

    (66) assign_stmt -> simple_slice = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    simple_slice                   shift and go to state 187
    expr                           shift and go to state 332
    item                           shift and go to state 186
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 193

    (67) assign_stmt -> full_slice = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    full_slice                     shift and go to state 188
    expr                           shift and go to state 333
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 194

    (101) expr -> ( expr . )
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    )               shift and go to state 334
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 195

    (110) expr -> OPERATOR operator_scan . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    OPERATOR                       shift and go to state 30
    expr                           shift and go to state 335
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 196

    (111) expr -> OPERATOR operator_reduc . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    OPERATOR                       shift and go to state 30
    expr                           shift and go to state 336
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 197

    (121) expr -> operator_bitnot expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_sub    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_mul    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_div    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_trudiv reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_pow    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_join   reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_split  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitand reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitor  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitxor reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitshiftleft reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitshiftright reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_and    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_or     reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_xor    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_contains reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_incr   reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_decr   reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_outer  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_rotate reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_apply  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_less_than reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_less_than_equals reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_greater_than reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_greater_than_equals reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_equals reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_not_equals reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_smallest reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_greatest reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_goodname reduce using rule 121 (expr -> operator_bitnot expr .)
    [               reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_scan   reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_reduc  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_bitnot reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_not    reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_inner  reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_reverse reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_sorted_incr reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_sorted_decr reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_s_combinator reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_s_combinator_2 reduce using rule 121 (expr -> operator_bitnot expr .)
    NEWLINE         reduce using rule 121 (expr -> operator_bitnot expr .)
    $end            reduce using rule 121 (expr -> operator_bitnot expr .)
    }               reduce using rule 121 (expr -> operator_bitnot expr .)
    )               reduce using rule 121 (expr -> operator_bitnot expr .)
    (               reduce using rule 121 (expr -> operator_bitnot expr .)
    VAR             reduce using rule 121 (expr -> operator_bitnot expr .)
    FLOAT           reduce using rule 121 (expr -> operator_bitnot expr .)
    NUM             reduce using rule 121 (expr -> operator_bitnot expr .)
    STRING_3SQ      reduce using rule 121 (expr -> operator_bitnot expr .)
    STRING_3DQ      reduce using rule 121 (expr -> operator_bitnot expr .)
    STRING_SQ       reduce using rule 121 (expr -> operator_bitnot expr .)
    STRING_DQ       reduce using rule 121 (expr -> operator_bitnot expr .)
    true            reduce using rule 121 (expr -> operator_bitnot expr .)
    Null            reduce using rule 121 (expr -> operator_bitnot expr .)
    false           reduce using rule 121 (expr -> operator_bitnot expr .)
    type_type       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_num        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_bool       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_any        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_u64        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_u32        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_u16        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_u8         reduce using rule 121 (expr -> operator_bitnot expr .)
    type_i64        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_i32        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_i16        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_i8         reduce using rule 121 (expr -> operator_bitnot expr .)
    type_f32        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_f64        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_str        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_list       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_tuple      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_array      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_vector     reduce using rule 121 (expr -> operator_bitnot expr .)
    type_dict       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_generator  reduce using rule 121 (expr -> operator_bitnot expr .)
    type_linked_list reduce using rule 121 (expr -> operator_bitnot expr .)
    type_doubly_linked_list reduce using rule 121 (expr -> operator_bitnot expr .)
    type_deque      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_heap       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_fibonacci_heap reduce using rule 121 (expr -> operator_bitnot expr .)
    type_tree       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_trie       reduce using rule 121 (expr -> operator_bitnot expr .)
    type_stack      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_queue      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_binary_search_tree reduce using rule 121 (expr -> operator_bitnot expr .)
    type_bitset     reduce using rule 121 (expr -> operator_bitnot expr .)
    type_set        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_map        reduce using rule 121 (expr -> operator_bitnot expr .)
    type_range      reduce using rule 121 (expr -> operator_bitnot expr .)
    type_bad_struct reduce using rule 121 (expr -> operator_bitnot expr .)
    type_bad_struct2 reduce using rule 121 (expr -> operator_bitnot expr .)
    lambda          reduce using rule 121 (expr -> operator_bitnot expr .)
    {               reduce using rule 121 (expr -> operator_bitnot expr .)
    ]               reduce using rule 121 (expr -> operator_bitnot expr .)
    :               reduce using rule 121 (expr -> operator_bitnot expr .)
    ,               reduce using rule 121 (expr -> operator_bitnot expr .)
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 121 (expr -> operator_bitnot expr .) ]
  ! operator_over   [ reduce using rule 121 (expr -> operator_bitnot expr .) ]
  ! operator_map    [ reduce using rule 121 (expr -> operator_bitnot expr .) ]
  ! operator_goodname2 [ reduce using rule 121 (expr -> operator_bitnot expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 198

    (122) expr -> operator_not expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 122 (expr -> operator_not expr .)
    operator_or     reduce using rule 122 (expr -> operator_not expr .)
    operator_xor    reduce using rule 122 (expr -> operator_not expr .)
    operator_contains reduce using rule 122 (expr -> operator_not expr .)
    operator_less_than reduce using rule 122 (expr -> operator_not expr .)
    operator_less_than_equals reduce using rule 122 (expr -> operator_not expr .)
    operator_greater_than reduce using rule 122 (expr -> operator_not expr .)
    operator_greater_than_equals reduce using rule 122 (expr -> operator_not expr .)
    operator_equals reduce using rule 122 (expr -> operator_not expr .)
    operator_not_equals reduce using rule 122 (expr -> operator_not expr .)
    operator_smallest reduce using rule 122 (expr -> operator_not expr .)
    operator_greatest reduce using rule 122 (expr -> operator_not expr .)
    [               reduce using rule 122 (expr -> operator_not expr .)
    operator_not    reduce using rule 122 (expr -> operator_not expr .)
    operator_s_combinator reduce using rule 122 (expr -> operator_not expr .)
    operator_s_combinator_2 reduce using rule 122 (expr -> operator_not expr .)
    NEWLINE         reduce using rule 122 (expr -> operator_not expr .)
    $end            reduce using rule 122 (expr -> operator_not expr .)
    }               reduce using rule 122 (expr -> operator_not expr .)
    )               reduce using rule 122 (expr -> operator_not expr .)
    (               reduce using rule 122 (expr -> operator_not expr .)
    VAR             reduce using rule 122 (expr -> operator_not expr .)
    FLOAT           reduce using rule 122 (expr -> operator_not expr .)
    NUM             reduce using rule 122 (expr -> operator_not expr .)
    STRING_3SQ      reduce using rule 122 (expr -> operator_not expr .)
    STRING_3DQ      reduce using rule 122 (expr -> operator_not expr .)
    STRING_SQ       reduce using rule 122 (expr -> operator_not expr .)
    STRING_DQ       reduce using rule 122 (expr -> operator_not expr .)
    true            reduce using rule 122 (expr -> operator_not expr .)
    Null            reduce using rule 122 (expr -> operator_not expr .)
    false           reduce using rule 122 (expr -> operator_not expr .)
    type_type       reduce using rule 122 (expr -> operator_not expr .)
    type_num        reduce using rule 122 (expr -> operator_not expr .)
    type_bool       reduce using rule 122 (expr -> operator_not expr .)
    type_any        reduce using rule 122 (expr -> operator_not expr .)
    type_u64        reduce using rule 122 (expr -> operator_not expr .)
    type_u32        reduce using rule 122 (expr -> operator_not expr .)
    type_u16        reduce using rule 122 (expr -> operator_not expr .)
    type_u8         reduce using rule 122 (expr -> operator_not expr .)
    type_i64        reduce using rule 122 (expr -> operator_not expr .)
    type_i32        reduce using rule 122 (expr -> operator_not expr .)
    type_i16        reduce using rule 122 (expr -> operator_not expr .)
    type_i8         reduce using rule 122 (expr -> operator_not expr .)
    type_f32        reduce using rule 122 (expr -> operator_not expr .)
    type_f64        reduce using rule 122 (expr -> operator_not expr .)
    type_str        reduce using rule 122 (expr -> operator_not expr .)
    type_list       reduce using rule 122 (expr -> operator_not expr .)
    type_tuple      reduce using rule 122 (expr -> operator_not expr .)
    type_array      reduce using rule 122 (expr -> operator_not expr .)
    type_vector     reduce using rule 122 (expr -> operator_not expr .)
    type_dict       reduce using rule 122 (expr -> operator_not expr .)
    type_generator  reduce using rule 122 (expr -> operator_not expr .)
    type_linked_list reduce using rule 122 (expr -> operator_not expr .)
    type_doubly_linked_list reduce using rule 122 (expr -> operator_not expr .)
    type_deque      reduce using rule 122 (expr -> operator_not expr .)
    type_heap       reduce using rule 122 (expr -> operator_not expr .)
    type_fibonacci_heap reduce using rule 122 (expr -> operator_not expr .)
    type_tree       reduce using rule 122 (expr -> operator_not expr .)
    type_trie       reduce using rule 122 (expr -> operator_not expr .)
    type_stack      reduce using rule 122 (expr -> operator_not expr .)
    type_queue      reduce using rule 122 (expr -> operator_not expr .)
    type_binary_search_tree reduce using rule 122 (expr -> operator_not expr .)
    type_bitset     reduce using rule 122 (expr -> operator_not expr .)
    type_set        reduce using rule 122 (expr -> operator_not expr .)
    type_map        reduce using rule 122 (expr -> operator_not expr .)
    type_range      reduce using rule 122 (expr -> operator_not expr .)
    type_bad_struct reduce using rule 122 (expr -> operator_not expr .)
    type_bad_struct2 reduce using rule 122 (expr -> operator_not expr .)
    lambda          reduce using rule 122 (expr -> operator_not expr .)
    {               reduce using rule 122 (expr -> operator_not expr .)
    ]               reduce using rule 122 (expr -> operator_not expr .)
    :               reduce using rule 122 (expr -> operator_not expr .)
    ,               reduce using rule 122 (expr -> operator_not expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_sub    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_mul    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_div    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_trudiv [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_pow    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_join   [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_split  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitand [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitor  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitxor [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitshiftleft [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitshiftright [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_incr   [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_decr   [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_outer  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_rotate [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_apply  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_compose [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_over   [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_map    [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_goodname [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_scan   [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_reduc  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_bitnot [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_inner  [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_reverse [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_sorted_incr [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_sorted_decr [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_goodname2 [ reduce using rule 122 (expr -> operator_not expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 199

    (127) expr -> operator_reverse expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_sub    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_mul    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_div    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_trudiv reduce using rule 127 (expr -> operator_reverse expr .)
    operator_pow    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_join   reduce using rule 127 (expr -> operator_reverse expr .)
    operator_split  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitand reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitor  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitxor reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitshiftleft reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitshiftright reduce using rule 127 (expr -> operator_reverse expr .)
    operator_and    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_or     reduce using rule 127 (expr -> operator_reverse expr .)
    operator_xor    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_contains reduce using rule 127 (expr -> operator_reverse expr .)
    operator_incr   reduce using rule 127 (expr -> operator_reverse expr .)
    operator_decr   reduce using rule 127 (expr -> operator_reverse expr .)
    operator_outer  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_rotate reduce using rule 127 (expr -> operator_reverse expr .)
    operator_apply  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_less_than reduce using rule 127 (expr -> operator_reverse expr .)
    operator_less_than_equals reduce using rule 127 (expr -> operator_reverse expr .)
    operator_greater_than reduce using rule 127 (expr -> operator_reverse expr .)
    operator_greater_than_equals reduce using rule 127 (expr -> operator_reverse expr .)
    operator_equals reduce using rule 127 (expr -> operator_reverse expr .)
    operator_not_equals reduce using rule 127 (expr -> operator_reverse expr .)
    operator_smallest reduce using rule 127 (expr -> operator_reverse expr .)
    operator_greatest reduce using rule 127 (expr -> operator_reverse expr .)
    operator_goodname reduce using rule 127 (expr -> operator_reverse expr .)
    [               reduce using rule 127 (expr -> operator_reverse expr .)
    operator_scan   reduce using rule 127 (expr -> operator_reverse expr .)
    operator_reduc  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_bitnot reduce using rule 127 (expr -> operator_reverse expr .)
    operator_not    reduce using rule 127 (expr -> operator_reverse expr .)
    operator_inner  reduce using rule 127 (expr -> operator_reverse expr .)
    operator_reverse reduce using rule 127 (expr -> operator_reverse expr .)
    operator_sorted_incr reduce using rule 127 (expr -> operator_reverse expr .)
    operator_sorted_decr reduce using rule 127 (expr -> operator_reverse expr .)
    operator_s_combinator reduce using rule 127 (expr -> operator_reverse expr .)
    operator_s_combinator_2 reduce using rule 127 (expr -> operator_reverse expr .)
    NEWLINE         reduce using rule 127 (expr -> operator_reverse expr .)
    $end            reduce using rule 127 (expr -> operator_reverse expr .)
    }               reduce using rule 127 (expr -> operator_reverse expr .)
    )               reduce using rule 127 (expr -> operator_reverse expr .)
    (               reduce using rule 127 (expr -> operator_reverse expr .)
    VAR             reduce using rule 127 (expr -> operator_reverse expr .)
    FLOAT           reduce using rule 127 (expr -> operator_reverse expr .)
    NUM             reduce using rule 127 (expr -> operator_reverse expr .)
    STRING_3SQ      reduce using rule 127 (expr -> operator_reverse expr .)
    STRING_3DQ      reduce using rule 127 (expr -> operator_reverse expr .)
    STRING_SQ       reduce using rule 127 (expr -> operator_reverse expr .)
    STRING_DQ       reduce using rule 127 (expr -> operator_reverse expr .)
    true            reduce using rule 127 (expr -> operator_reverse expr .)
    Null            reduce using rule 127 (expr -> operator_reverse expr .)
    false           reduce using rule 127 (expr -> operator_reverse expr .)
    type_type       reduce using rule 127 (expr -> operator_reverse expr .)
    type_num        reduce using rule 127 (expr -> operator_reverse expr .)
    type_bool       reduce using rule 127 (expr -> operator_reverse expr .)
    type_any        reduce using rule 127 (expr -> operator_reverse expr .)
    type_u64        reduce using rule 127 (expr -> operator_reverse expr .)
    type_u32        reduce using rule 127 (expr -> operator_reverse expr .)
    type_u16        reduce using rule 127 (expr -> operator_reverse expr .)
    type_u8         reduce using rule 127 (expr -> operator_reverse expr .)
    type_i64        reduce using rule 127 (expr -> operator_reverse expr .)
    type_i32        reduce using rule 127 (expr -> operator_reverse expr .)
    type_i16        reduce using rule 127 (expr -> operator_reverse expr .)
    type_i8         reduce using rule 127 (expr -> operator_reverse expr .)
    type_f32        reduce using rule 127 (expr -> operator_reverse expr .)
    type_f64        reduce using rule 127 (expr -> operator_reverse expr .)
    type_str        reduce using rule 127 (expr -> operator_reverse expr .)
    type_list       reduce using rule 127 (expr -> operator_reverse expr .)
    type_tuple      reduce using rule 127 (expr -> operator_reverse expr .)
    type_array      reduce using rule 127 (expr -> operator_reverse expr .)
    type_vector     reduce using rule 127 (expr -> operator_reverse expr .)
    type_dict       reduce using rule 127 (expr -> operator_reverse expr .)
    type_generator  reduce using rule 127 (expr -> operator_reverse expr .)
    type_linked_list reduce using rule 127 (expr -> operator_reverse expr .)
    type_doubly_linked_list reduce using rule 127 (expr -> operator_reverse expr .)
    type_deque      reduce using rule 127 (expr -> operator_reverse expr .)
    type_heap       reduce using rule 127 (expr -> operator_reverse expr .)
    type_fibonacci_heap reduce using rule 127 (expr -> operator_reverse expr .)
    type_tree       reduce using rule 127 (expr -> operator_reverse expr .)
    type_trie       reduce using rule 127 (expr -> operator_reverse expr .)
    type_stack      reduce using rule 127 (expr -> operator_reverse expr .)
    type_queue      reduce using rule 127 (expr -> operator_reverse expr .)
    type_binary_search_tree reduce using rule 127 (expr -> operator_reverse expr .)
    type_bitset     reduce using rule 127 (expr -> operator_reverse expr .)
    type_set        reduce using rule 127 (expr -> operator_reverse expr .)
    type_map        reduce using rule 127 (expr -> operator_reverse expr .)
    type_range      reduce using rule 127 (expr -> operator_reverse expr .)
    type_bad_struct reduce using rule 127 (expr -> operator_reverse expr .)
    type_bad_struct2 reduce using rule 127 (expr -> operator_reverse expr .)
    lambda          reduce using rule 127 (expr -> operator_reverse expr .)
    {               reduce using rule 127 (expr -> operator_reverse expr .)
    ]               reduce using rule 127 (expr -> operator_reverse expr .)
    :               reduce using rule 127 (expr -> operator_reverse expr .)
    ,               reduce using rule 127 (expr -> operator_reverse expr .)
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 127 (expr -> operator_reverse expr .) ]
  ! operator_over   [ reduce using rule 127 (expr -> operator_reverse expr .) ]
  ! operator_map    [ reduce using rule 127 (expr -> operator_reverse expr .) ]
  ! operator_goodname2 [ reduce using rule 127 (expr -> operator_reverse expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 200

    (133) expr -> operator_sorted_incr expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_sub    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_mul    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_div    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_trudiv reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_pow    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_join   reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_split  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitand reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitor  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitxor reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitshiftleft reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitshiftright reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_and    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_or     reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_xor    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_contains reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_incr   reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_decr   reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_outer  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_rotate reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_apply  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_less_than reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_less_than_equals reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_greater_than reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_greater_than_equals reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_equals reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_not_equals reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_smallest reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_greatest reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_goodname reduce using rule 133 (expr -> operator_sorted_incr expr .)
    [               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_scan   reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_reduc  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_bitnot reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_not    reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_inner  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_reverse reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_sorted_incr reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_sorted_decr reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_s_combinator reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_s_combinator_2 reduce using rule 133 (expr -> operator_sorted_incr expr .)
    NEWLINE         reduce using rule 133 (expr -> operator_sorted_incr expr .)
    $end            reduce using rule 133 (expr -> operator_sorted_incr expr .)
    }               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    )               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    (               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    VAR             reduce using rule 133 (expr -> operator_sorted_incr expr .)
    FLOAT           reduce using rule 133 (expr -> operator_sorted_incr expr .)
    NUM             reduce using rule 133 (expr -> operator_sorted_incr expr .)
    STRING_3SQ      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    STRING_3DQ      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    STRING_SQ       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    STRING_DQ       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    true            reduce using rule 133 (expr -> operator_sorted_incr expr .)
    Null            reduce using rule 133 (expr -> operator_sorted_incr expr .)
    false           reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_type       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_num        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_bool       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_any        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_u64        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_u32        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_u16        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_u8         reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_i64        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_i32        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_i16        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_i8         reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_f32        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_f64        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_str        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_list       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_tuple      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_array      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_vector     reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_dict       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_generator  reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_linked_list reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_doubly_linked_list reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_deque      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_heap       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_fibonacci_heap reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_tree       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_trie       reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_stack      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_queue      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_binary_search_tree reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_bitset     reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_set        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_map        reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_range      reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_bad_struct reduce using rule 133 (expr -> operator_sorted_incr expr .)
    type_bad_struct2 reduce using rule 133 (expr -> operator_sorted_incr expr .)
    lambda          reduce using rule 133 (expr -> operator_sorted_incr expr .)
    {               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    ]               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    :               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    ,               reduce using rule 133 (expr -> operator_sorted_incr expr .)
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 133 (expr -> operator_sorted_incr expr .) ]
  ! operator_over   [ reduce using rule 133 (expr -> operator_sorted_incr expr .) ]
  ! operator_map    [ reduce using rule 133 (expr -> operator_sorted_incr expr .) ]
  ! operator_goodname2 [ reduce using rule 133 (expr -> operator_sorted_incr expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 201

    (134) expr -> operator_sorted_decr expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_sub    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_mul    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_div    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_trudiv reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_pow    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_join   reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_split  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitand reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitor  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitxor reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitshiftleft reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitshiftright reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_and    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_or     reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_xor    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_contains reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_incr   reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_decr   reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_outer  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_rotate reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_apply  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_less_than reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_less_than_equals reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_greater_than reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_greater_than_equals reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_equals reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_not_equals reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_smallest reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_greatest reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_goodname reduce using rule 134 (expr -> operator_sorted_decr expr .)
    [               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_scan   reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_reduc  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_bitnot reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_not    reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_inner  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_reverse reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_sorted_incr reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_sorted_decr reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_s_combinator reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_s_combinator_2 reduce using rule 134 (expr -> operator_sorted_decr expr .)
    NEWLINE         reduce using rule 134 (expr -> operator_sorted_decr expr .)
    $end            reduce using rule 134 (expr -> operator_sorted_decr expr .)
    }               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    )               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    (               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    VAR             reduce using rule 134 (expr -> operator_sorted_decr expr .)
    FLOAT           reduce using rule 134 (expr -> operator_sorted_decr expr .)
    NUM             reduce using rule 134 (expr -> operator_sorted_decr expr .)
    STRING_3SQ      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    STRING_3DQ      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    STRING_SQ       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    STRING_DQ       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    true            reduce using rule 134 (expr -> operator_sorted_decr expr .)
    Null            reduce using rule 134 (expr -> operator_sorted_decr expr .)
    false           reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_type       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_num        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_bool       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_any        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_u64        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_u32        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_u16        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_u8         reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_i64        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_i32        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_i16        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_i8         reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_f32        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_f64        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_str        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_list       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_tuple      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_array      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_vector     reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_dict       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_generator  reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_linked_list reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_doubly_linked_list reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_deque      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_heap       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_fibonacci_heap reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_tree       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_trie       reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_stack      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_queue      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_binary_search_tree reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_bitset     reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_set        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_map        reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_range      reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_bad_struct reduce using rule 134 (expr -> operator_sorted_decr expr .)
    type_bad_struct2 reduce using rule 134 (expr -> operator_sorted_decr expr .)
    lambda          reduce using rule 134 (expr -> operator_sorted_decr expr .)
    {               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    ]               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    :               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    ,               reduce using rule 134 (expr -> operator_sorted_decr expr .)
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 134 (expr -> operator_sorted_decr expr .) ]
  ! operator_over   [ reduce using rule 134 (expr -> operator_sorted_decr expr .) ]
  ! operator_map    [ reduce using rule 134 (expr -> operator_sorted_decr expr .) ]
  ! operator_goodname2 [ reduce using rule 134 (expr -> operator_sorted_decr expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 202

    (144) expr -> operator_s_combinator expr . expr expr
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_inner  shift and go to state 47
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 337
    OPERATOR                       shift and go to state 338
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 203

    (145) expr -> operator_s_combinator_2 OPERATOR . OPERATOR expr
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 339

state 204

    (146) expr -> operator_goodname2 expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_sub    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_mul    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_div    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_trudiv reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_pow    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_join   reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_split  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitand reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitor  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitxor reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitshiftleft reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitshiftright reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_and    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_or     reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_xor    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_contains reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_incr   reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_decr   reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_outer  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_rotate reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_apply  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_compose reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_over   reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_map    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_less_than reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_less_than_equals reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_greater_than reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_greater_than_equals reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_equals reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_not_equals reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_smallest reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_greatest reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_goodname reduce using rule 146 (expr -> operator_goodname2 expr .)
    [               reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_scan   reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_reduc  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_bitnot reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_not    reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_inner  reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_reverse reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_sorted_incr reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_sorted_decr reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_s_combinator reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_s_combinator_2 reduce using rule 146 (expr -> operator_goodname2 expr .)
    operator_goodname2 reduce using rule 146 (expr -> operator_goodname2 expr .)
    NEWLINE         reduce using rule 146 (expr -> operator_goodname2 expr .)
    $end            reduce using rule 146 (expr -> operator_goodname2 expr .)
    }               reduce using rule 146 (expr -> operator_goodname2 expr .)
    )               reduce using rule 146 (expr -> operator_goodname2 expr .)
    (               reduce using rule 146 (expr -> operator_goodname2 expr .)
    VAR             reduce using rule 146 (expr -> operator_goodname2 expr .)
    FLOAT           reduce using rule 146 (expr -> operator_goodname2 expr .)
    NUM             reduce using rule 146 (expr -> operator_goodname2 expr .)
    STRING_3SQ      reduce using rule 146 (expr -> operator_goodname2 expr .)
    STRING_3DQ      reduce using rule 146 (expr -> operator_goodname2 expr .)
    STRING_SQ       reduce using rule 146 (expr -> operator_goodname2 expr .)
    STRING_DQ       reduce using rule 146 (expr -> operator_goodname2 expr .)
    true            reduce using rule 146 (expr -> operator_goodname2 expr .)
    Null            reduce using rule 146 (expr -> operator_goodname2 expr .)
    false           reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_type       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_num        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_bool       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_any        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_u64        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_u32        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_u16        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_u8         reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_i64        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_i32        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_i16        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_i8         reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_f32        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_f64        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_str        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_list       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_tuple      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_array      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_vector     reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_dict       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_generator  reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_linked_list reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_doubly_linked_list reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_deque      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_heap       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_fibonacci_heap reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_tree       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_trie       reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_stack      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_queue      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_binary_search_tree reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_bitset     reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_set        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_map        reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_range      reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_bad_struct reduce using rule 146 (expr -> operator_goodname2 expr .)
    type_bad_struct2 reduce using rule 146 (expr -> operator_goodname2 expr .)
    lambda          reduce using rule 146 (expr -> operator_goodname2 expr .)
    {               reduce using rule 146 (expr -> operator_goodname2 expr .)
    ]               reduce using rule 146 (expr -> operator_goodname2 expr .)
    :               reduce using rule 146 (expr -> operator_goodname2 expr .)
    ,               reduce using rule 146 (expr -> operator_goodname2 expr .)

  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_compose [ shift and go to state 163 ]
  ! operator_over   [ shift and go to state 164 ]
  ! operator_map    [ shift and go to state 165 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]
  ! operator_goodname2 [ shift and go to state 183 ]

    OPERATOR                       shift and go to state 160

state 205

    (185) return_val -> VAR ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 340
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 206

    (70) comma_separated_names -> VAR , . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 208

    comma_separated_names          shift and go to state 343

state 207

    (68) declaration_stmt -> TYPE comma_separated_names .

    NEWLINE         reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    $end            reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    }               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    ;               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)
    )               reduce using rule 68 (declaration_stmt -> TYPE comma_separated_names .)


state 208

    (69) comma_separated_names -> VAR .
    (70) comma_separated_names -> VAR . , comma_separated_names

    NEWLINE         reduce using rule 69 (comma_separated_names -> VAR .)
    $end            reduce using rule 69 (comma_separated_names -> VAR .)
    }               reduce using rule 69 (comma_separated_names -> VAR .)
    :               reduce using rule 69 (comma_separated_names -> VAR .)
    operator_contains reduce using rule 69 (comma_separated_names -> VAR .)
    =               reduce using rule 69 (comma_separated_names -> VAR .)
    ;               reduce using rule 69 (comma_separated_names -> VAR .)
    )               reduce using rule 69 (comma_separated_names -> VAR .)
    ,               shift and go to state 206


state 209

    (63) del_stmt -> del expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 63 (del_stmt -> del expr .)
    $end            reduce using rule 63 (del_stmt -> del expr .)
    }               reduce using rule 63 (del_stmt -> del expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 210

    (64) assign_stmt -> comma_separated_names = . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 344
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 211

    (148) return_val -> type_type ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 345
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 212

    (149) return_val -> type_num ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 346
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 213

    (150) return_val -> type_bool ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 347
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 214

    (151) return_val -> type_any ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 348
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 215

    (152) return_val -> type_u64 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 349
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 216

    (153) return_val -> type_u32 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 350
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 217

    (154) return_val -> type_u16 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 351
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 218

    (155) return_val -> type_u8 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 352
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 219

    (156) return_val -> type_i64 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 353
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 220

    (157) return_val -> type_i32 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 354
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 221

    (158) return_val -> type_i16 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 355
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 222

    (159) return_val -> type_i8 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 356
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 223

    (160) return_val -> type_f32 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 357
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 224

    (161) return_val -> type_f64 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 358
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 225

    (162) return_val -> type_str ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 359
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 226

    (163) return_val -> type_list ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 360
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 227

    (164) return_val -> type_tuple ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 361
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 228

    (165) return_val -> type_array ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 362
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 229

    (166) return_val -> type_vector ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 363
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 230

    (167) return_val -> type_dict ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 364
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 231

    (168) return_val -> type_generator ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 365
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 232

    (169) return_val -> type_linked_list ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 366
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 233

    (170) return_val -> type_doubly_linked_list ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 367
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 234

    (171) return_val -> type_deque ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 368
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 235

    (172) return_val -> type_heap ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 369
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 236

    (173) return_val -> type_fibonacci_heap ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 370
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 237

    (174) return_val -> type_tree ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 371
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 238

    (175) return_val -> type_trie ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 372
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 239

    (176) return_val -> type_stack ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 373
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 240

    (177) return_val -> type_queue ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 374
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 241

    (178) return_val -> type_binary_search_tree ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 375
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 242

    (179) return_val -> type_bitset ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 376
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 243

    (180) return_val -> type_set ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 377
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 244

    (181) return_val -> type_map ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 378
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 245

    (182) return_val -> type_range ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 379
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 246

    (183) return_val -> type_bad_struct ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 380
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 247

    (184) return_val -> type_bad_struct2 ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 381
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 248

    (61) lambda_decl -> lambda comma_separated_names . : expr

    :               shift and go to state 382


state 249

    (82) for_decl -> for comma_separated_names . operator_contains expr

    operator_contains shift and go to state 383


state 250

    (83) if_decl -> if expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    {               reduce using rule 83 (if_decl -> if expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 251

    (84) elif_decl -> elif expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    {               reduce using rule 84 (elif_decl -> elif expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 252

    (85) operator_decl -> operator ( . arguments )
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    )               reduce using rule 190 (empty -> .)
    ,               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 384
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 253

    (86) struct_decl -> struct TYPE .

    {               reduce using rule 86 (struct_decl -> struct TYPE .)


state 254

    (10) TYPE -> type_type .

    {               reduce using rule 10 (TYPE -> type_type .)
    VAR             reduce using rule 10 (TYPE -> type_type .)


state 255

    (11) TYPE -> type_num .

    {               reduce using rule 11 (TYPE -> type_num .)
    VAR             reduce using rule 11 (TYPE -> type_num .)


state 256

    (12) TYPE -> type_bool .

    {               reduce using rule 12 (TYPE -> type_bool .)
    VAR             reduce using rule 12 (TYPE -> type_bool .)


state 257

    (13) TYPE -> type_any .

    {               reduce using rule 13 (TYPE -> type_any .)
    VAR             reduce using rule 13 (TYPE -> type_any .)


state 258

    (14) TYPE -> type_u64 .

    {               reduce using rule 14 (TYPE -> type_u64 .)
    VAR             reduce using rule 14 (TYPE -> type_u64 .)


state 259

    (15) TYPE -> type_u32 .

    {               reduce using rule 15 (TYPE -> type_u32 .)
    VAR             reduce using rule 15 (TYPE -> type_u32 .)


state 260

    (16) TYPE -> type_u16 .

    {               reduce using rule 16 (TYPE -> type_u16 .)
    VAR             reduce using rule 16 (TYPE -> type_u16 .)


state 261

    (17) TYPE -> type_u8 .

    {               reduce using rule 17 (TYPE -> type_u8 .)
    VAR             reduce using rule 17 (TYPE -> type_u8 .)


state 262

    (18) TYPE -> type_i64 .

    {               reduce using rule 18 (TYPE -> type_i64 .)
    VAR             reduce using rule 18 (TYPE -> type_i64 .)


state 263

    (19) TYPE -> type_i32 .

    {               reduce using rule 19 (TYPE -> type_i32 .)
    VAR             reduce using rule 19 (TYPE -> type_i32 .)


state 264

    (20) TYPE -> type_i16 .

    {               reduce using rule 20 (TYPE -> type_i16 .)
    VAR             reduce using rule 20 (TYPE -> type_i16 .)


state 265

    (21) TYPE -> type_i8 .

    {               reduce using rule 21 (TYPE -> type_i8 .)
    VAR             reduce using rule 21 (TYPE -> type_i8 .)


state 266

    (22) TYPE -> type_f32 .

    {               reduce using rule 22 (TYPE -> type_f32 .)
    VAR             reduce using rule 22 (TYPE -> type_f32 .)


state 267

    (23) TYPE -> type_f64 .

    {               reduce using rule 23 (TYPE -> type_f64 .)
    VAR             reduce using rule 23 (TYPE -> type_f64 .)


state 268

    (24) TYPE -> type_str .

    {               reduce using rule 24 (TYPE -> type_str .)
    VAR             reduce using rule 24 (TYPE -> type_str .)


state 269

    (25) TYPE -> type_list .

    {               reduce using rule 25 (TYPE -> type_list .)
    VAR             reduce using rule 25 (TYPE -> type_list .)


state 270

    (26) TYPE -> type_tuple .

    {               reduce using rule 26 (TYPE -> type_tuple .)
    VAR             reduce using rule 26 (TYPE -> type_tuple .)


state 271

    (27) TYPE -> type_array .

    {               reduce using rule 27 (TYPE -> type_array .)
    VAR             reduce using rule 27 (TYPE -> type_array .)


state 272

    (28) TYPE -> type_vector .

    {               reduce using rule 28 (TYPE -> type_vector .)
    VAR             reduce using rule 28 (TYPE -> type_vector .)


state 273

    (29) TYPE -> type_dict .

    {               reduce using rule 29 (TYPE -> type_dict .)
    VAR             reduce using rule 29 (TYPE -> type_dict .)


state 274

    (30) TYPE -> type_generator .

    {               reduce using rule 30 (TYPE -> type_generator .)
    VAR             reduce using rule 30 (TYPE -> type_generator .)


state 275

    (31) TYPE -> type_linked_list .

    {               reduce using rule 31 (TYPE -> type_linked_list .)
    VAR             reduce using rule 31 (TYPE -> type_linked_list .)


state 276

    (32) TYPE -> type_doubly_linked_list .

    {               reduce using rule 32 (TYPE -> type_doubly_linked_list .)
    VAR             reduce using rule 32 (TYPE -> type_doubly_linked_list .)


state 277

    (33) TYPE -> type_deque .

    {               reduce using rule 33 (TYPE -> type_deque .)
    VAR             reduce using rule 33 (TYPE -> type_deque .)


state 278

    (34) TYPE -> type_heap .

    {               reduce using rule 34 (TYPE -> type_heap .)
    VAR             reduce using rule 34 (TYPE -> type_heap .)


state 279

    (35) TYPE -> type_fibonacci_heap .

    {               reduce using rule 35 (TYPE -> type_fibonacci_heap .)
    VAR             reduce using rule 35 (TYPE -> type_fibonacci_heap .)


state 280

    (36) TYPE -> type_tree .

    {               reduce using rule 36 (TYPE -> type_tree .)
    VAR             reduce using rule 36 (TYPE -> type_tree .)


state 281

    (37) TYPE -> type_trie .

    {               reduce using rule 37 (TYPE -> type_trie .)
    VAR             reduce using rule 37 (TYPE -> type_trie .)


state 282

    (38) TYPE -> type_stack .

    {               reduce using rule 38 (TYPE -> type_stack .)
    VAR             reduce using rule 38 (TYPE -> type_stack .)


state 283

    (39) TYPE -> type_queue .

    {               reduce using rule 39 (TYPE -> type_queue .)
    VAR             reduce using rule 39 (TYPE -> type_queue .)


state 284

    (40) TYPE -> type_binary_search_tree .

    {               reduce using rule 40 (TYPE -> type_binary_search_tree .)
    VAR             reduce using rule 40 (TYPE -> type_binary_search_tree .)


state 285

    (41) TYPE -> type_bitset .

    {               reduce using rule 41 (TYPE -> type_bitset .)
    VAR             reduce using rule 41 (TYPE -> type_bitset .)


state 286

    (42) TYPE -> type_set .

    {               reduce using rule 42 (TYPE -> type_set .)
    VAR             reduce using rule 42 (TYPE -> type_set .)


state 287

    (43) TYPE -> type_map .

    {               reduce using rule 43 (TYPE -> type_map .)
    VAR             reduce using rule 43 (TYPE -> type_map .)


state 288

    (44) TYPE -> type_range .

    {               reduce using rule 44 (TYPE -> type_range .)
    VAR             reduce using rule 44 (TYPE -> type_range .)


state 289

    (45) TYPE -> type_bad_struct .

    {               reduce using rule 45 (TYPE -> type_bad_struct .)
    VAR             reduce using rule 45 (TYPE -> type_bad_struct .)


state 290

    (46) TYPE -> type_bad_struct2 .

    {               reduce using rule 46 (TYPE -> type_bad_struct2 .)
    VAR             reduce using rule 46 (TYPE -> type_bad_struct2 .)


state 291

    (87) while_decl -> while expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    {               reduce using rule 87 (while_decl -> while expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 292

    (88) func_decl -> func VAR . ( def_arguments )

    (               shift and go to state 385


state 293

    (7) stmts -> stmts newline stmt .

    NEWLINE         reduce using rule 7 (stmts -> stmts newline stmt .)
    $end            reduce using rule 7 (stmts -> stmts newline stmt .)
    }               reduce using rule 7 (stmts -> stmts newline stmt .)


state 294

    (3) program -> newline stmts newline .
    (7) stmts -> stmts newline . stmt
    (8) stmt -> . line_stmt
    (9) stmt -> . block_stmt
    (47) line_stmt -> . return_stmt
    (48) line_stmt -> . expr
    (49) line_stmt -> . del_stmt
    (50) line_stmt -> . declaration_stmt
    (51) line_stmt -> . pass
    (52) line_stmt -> . continue
    (53) line_stmt -> . break
    (54) line_stmt -> . assign_stmt
    (71) block_stmt -> . block_decl { stmts }
    (72) block_stmt -> . block_decl { }
    (73) block_stmt -> . block_decl { newline }
    (62) return_stmt -> . return expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (63) del_stmt -> . del expr
    (68) declaration_stmt -> . TYPE comma_separated_names
    (64) assign_stmt -> . comma_separated_names = expr
    (65) assign_stmt -> . item = expr
    (66) assign_stmt -> . simple_slice = expr
    (67) assign_stmt -> . full_slice = expr
    (74) block_decl -> . for_decl
    (75) block_decl -> . if_decl
    (76) block_decl -> . else
    (77) block_decl -> . elif_decl
    (78) block_decl -> . operator_decl
    (79) block_decl -> . struct_decl
    (80) block_decl -> . while_decl
    (81) block_decl -> . func_decl
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names
    (82) for_decl -> . for comma_separated_names operator_contains expr
    (83) if_decl -> . if expr
    (84) elif_decl -> . elif expr
    (85) operator_decl -> . operator ( arguments )
    (86) struct_decl -> . struct TYPE
    (87) while_decl -> . while expr
    (88) func_decl -> . func VAR ( def_arguments )

    $end            reduce using rule 3 (program -> newline stmts newline .)
    pass            shift and go to state 12
    continue        shift and go to state 13
    break           shift and go to state 14
    return          shift and go to state 17
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 68
    del             shift and go to state 73
    else            shift and go to state 77
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129
    for             shift and go to state 130
    if              shift and go to state 131
    elif            shift and go to state 132
    operator        shift and go to state 133
    struct          shift and go to state 134
    while           shift and go to state 135
    func            shift and go to state 136

    stmt                           shift and go to state 293
    line_stmt                      shift and go to state 6
    block_stmt                     shift and go to state 7
    return_stmt                    shift and go to state 8
    expr                           shift and go to state 9
    del_stmt                       shift and go to state 10
    declaration_stmt               shift and go to state 11
    assign_stmt                    shift and go to state 15
    block_decl                     shift and go to state 16
    item                           shift and go to state 18
    simple_slice                   shift and go to state 19
    full_slice                     shift and go to state 20
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 72
    comma_separated_names          shift and go to state 74
    for_decl                       shift and go to state 75
    if_decl                        shift and go to state 76
    elif_decl                      shift and go to state 78
    operator_decl                  shift and go to state 79
    struct_decl                    shift and go to state 80
    while_decl                     shift and go to state 81
    func_decl                      shift and go to state 82

state 295

    (102) expr -> expr operator_add expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 102 (expr -> expr operator_add expr .)
    operator_sub    reduce using rule 102 (expr -> expr operator_add expr .)
    operator_join   reduce using rule 102 (expr -> expr operator_add expr .)
    operator_split  reduce using rule 102 (expr -> expr operator_add expr .)
    operator_bitand reduce using rule 102 (expr -> expr operator_add expr .)
    operator_bitor  reduce using rule 102 (expr -> expr operator_add expr .)
    operator_bitxor reduce using rule 102 (expr -> expr operator_add expr .)
    operator_bitshiftleft reduce using rule 102 (expr -> expr operator_add expr .)
    operator_bitshiftright reduce using rule 102 (expr -> expr operator_add expr .)
    operator_and    reduce using rule 102 (expr -> expr operator_add expr .)
    operator_or     reduce using rule 102 (expr -> expr operator_add expr .)
    operator_xor    reduce using rule 102 (expr -> expr operator_add expr .)
    operator_contains reduce using rule 102 (expr -> expr operator_add expr .)
    operator_outer  reduce using rule 102 (expr -> expr operator_add expr .)
    operator_less_than reduce using rule 102 (expr -> expr operator_add expr .)
    operator_less_than_equals reduce using rule 102 (expr -> expr operator_add expr .)
    operator_greater_than reduce using rule 102 (expr -> expr operator_add expr .)
    operator_greater_than_equals reduce using rule 102 (expr -> expr operator_add expr .)
    operator_equals reduce using rule 102 (expr -> expr operator_add expr .)
    operator_not_equals reduce using rule 102 (expr -> expr operator_add expr .)
    operator_smallest reduce using rule 102 (expr -> expr operator_add expr .)
    operator_greatest reduce using rule 102 (expr -> expr operator_add expr .)
    [               reduce using rule 102 (expr -> expr operator_add expr .)
    operator_not    reduce using rule 102 (expr -> expr operator_add expr .)
    operator_inner  reduce using rule 102 (expr -> expr operator_add expr .)
    operator_s_combinator reduce using rule 102 (expr -> expr operator_add expr .)
    operator_s_combinator_2 reduce using rule 102 (expr -> expr operator_add expr .)
    NEWLINE         reduce using rule 102 (expr -> expr operator_add expr .)
    $end            reduce using rule 102 (expr -> expr operator_add expr .)
    }               reduce using rule 102 (expr -> expr operator_add expr .)
    )               reduce using rule 102 (expr -> expr operator_add expr .)
    (               reduce using rule 102 (expr -> expr operator_add expr .)
    VAR             reduce using rule 102 (expr -> expr operator_add expr .)
    FLOAT           reduce using rule 102 (expr -> expr operator_add expr .)
    NUM             reduce using rule 102 (expr -> expr operator_add expr .)
    STRING_3SQ      reduce using rule 102 (expr -> expr operator_add expr .)
    STRING_3DQ      reduce using rule 102 (expr -> expr operator_add expr .)
    STRING_SQ       reduce using rule 102 (expr -> expr operator_add expr .)
    STRING_DQ       reduce using rule 102 (expr -> expr operator_add expr .)
    true            reduce using rule 102 (expr -> expr operator_add expr .)
    Null            reduce using rule 102 (expr -> expr operator_add expr .)
    false           reduce using rule 102 (expr -> expr operator_add expr .)
    type_type       reduce using rule 102 (expr -> expr operator_add expr .)
    type_num        reduce using rule 102 (expr -> expr operator_add expr .)
    type_bool       reduce using rule 102 (expr -> expr operator_add expr .)
    type_any        reduce using rule 102 (expr -> expr operator_add expr .)
    type_u64        reduce using rule 102 (expr -> expr operator_add expr .)
    type_u32        reduce using rule 102 (expr -> expr operator_add expr .)
    type_u16        reduce using rule 102 (expr -> expr operator_add expr .)
    type_u8         reduce using rule 102 (expr -> expr operator_add expr .)
    type_i64        reduce using rule 102 (expr -> expr operator_add expr .)
    type_i32        reduce using rule 102 (expr -> expr operator_add expr .)
    type_i16        reduce using rule 102 (expr -> expr operator_add expr .)
    type_i8         reduce using rule 102 (expr -> expr operator_add expr .)
    type_f32        reduce using rule 102 (expr -> expr operator_add expr .)
    type_f64        reduce using rule 102 (expr -> expr operator_add expr .)
    type_str        reduce using rule 102 (expr -> expr operator_add expr .)
    type_list       reduce using rule 102 (expr -> expr operator_add expr .)
    type_tuple      reduce using rule 102 (expr -> expr operator_add expr .)
    type_array      reduce using rule 102 (expr -> expr operator_add expr .)
    type_vector     reduce using rule 102 (expr -> expr operator_add expr .)
    type_dict       reduce using rule 102 (expr -> expr operator_add expr .)
    type_generator  reduce using rule 102 (expr -> expr operator_add expr .)
    type_linked_list reduce using rule 102 (expr -> expr operator_add expr .)
    type_doubly_linked_list reduce using rule 102 (expr -> expr operator_add expr .)
    type_deque      reduce using rule 102 (expr -> expr operator_add expr .)
    type_heap       reduce using rule 102 (expr -> expr operator_add expr .)
    type_fibonacci_heap reduce using rule 102 (expr -> expr operator_add expr .)
    type_tree       reduce using rule 102 (expr -> expr operator_add expr .)
    type_trie       reduce using rule 102 (expr -> expr operator_add expr .)
    type_stack      reduce using rule 102 (expr -> expr operator_add expr .)
    type_queue      reduce using rule 102 (expr -> expr operator_add expr .)
    type_binary_search_tree reduce using rule 102 (expr -> expr operator_add expr .)
    type_bitset     reduce using rule 102 (expr -> expr operator_add expr .)
    type_set        reduce using rule 102 (expr -> expr operator_add expr .)
    type_map        reduce using rule 102 (expr -> expr operator_add expr .)
    type_range      reduce using rule 102 (expr -> expr operator_add expr .)
    type_bad_struct reduce using rule 102 (expr -> expr operator_add expr .)
    type_bad_struct2 reduce using rule 102 (expr -> expr operator_add expr .)
    lambda          reduce using rule 102 (expr -> expr operator_add expr .)
    {               reduce using rule 102 (expr -> expr operator_add expr .)
    ]               reduce using rule 102 (expr -> expr operator_add expr .)
    :               reduce using rule 102 (expr -> expr operator_add expr .)
    ,               reduce using rule 102 (expr -> expr operator_add expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_div    [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_trudiv [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_pow    [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_incr   [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_decr   [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_rotate [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_apply  [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_compose [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_over   [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_map    [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_goodname [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_scan   [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_reduc  [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_bitnot [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_reverse [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_sorted_incr [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_sorted_decr [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_goodname2 [ reduce using rule 102 (expr -> expr operator_add expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 296

    (103) expr -> expr operator_sub expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_sub    reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_join   reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_split  reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_bitand reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_bitor  reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_bitxor reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_bitshiftleft reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_bitshiftright reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_and    reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_or     reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_xor    reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_contains reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_outer  reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_less_than reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_less_than_equals reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_greater_than reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_greater_than_equals reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_equals reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_not_equals reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_smallest reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_greatest reduce using rule 103 (expr -> expr operator_sub expr .)
    [               reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_not    reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_inner  reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_s_combinator reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_s_combinator_2 reduce using rule 103 (expr -> expr operator_sub expr .)
    NEWLINE         reduce using rule 103 (expr -> expr operator_sub expr .)
    $end            reduce using rule 103 (expr -> expr operator_sub expr .)
    }               reduce using rule 103 (expr -> expr operator_sub expr .)
    )               reduce using rule 103 (expr -> expr operator_sub expr .)
    (               reduce using rule 103 (expr -> expr operator_sub expr .)
    VAR             reduce using rule 103 (expr -> expr operator_sub expr .)
    FLOAT           reduce using rule 103 (expr -> expr operator_sub expr .)
    NUM             reduce using rule 103 (expr -> expr operator_sub expr .)
    STRING_3SQ      reduce using rule 103 (expr -> expr operator_sub expr .)
    STRING_3DQ      reduce using rule 103 (expr -> expr operator_sub expr .)
    STRING_SQ       reduce using rule 103 (expr -> expr operator_sub expr .)
    STRING_DQ       reduce using rule 103 (expr -> expr operator_sub expr .)
    true            reduce using rule 103 (expr -> expr operator_sub expr .)
    Null            reduce using rule 103 (expr -> expr operator_sub expr .)
    false           reduce using rule 103 (expr -> expr operator_sub expr .)
    type_type       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_num        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_bool       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_any        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_u64        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_u32        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_u16        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_u8         reduce using rule 103 (expr -> expr operator_sub expr .)
    type_i64        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_i32        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_i16        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_i8         reduce using rule 103 (expr -> expr operator_sub expr .)
    type_f32        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_f64        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_str        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_list       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_tuple      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_array      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_vector     reduce using rule 103 (expr -> expr operator_sub expr .)
    type_dict       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_generator  reduce using rule 103 (expr -> expr operator_sub expr .)
    type_linked_list reduce using rule 103 (expr -> expr operator_sub expr .)
    type_doubly_linked_list reduce using rule 103 (expr -> expr operator_sub expr .)
    type_deque      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_heap       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_fibonacci_heap reduce using rule 103 (expr -> expr operator_sub expr .)
    type_tree       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_trie       reduce using rule 103 (expr -> expr operator_sub expr .)
    type_stack      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_queue      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_binary_search_tree reduce using rule 103 (expr -> expr operator_sub expr .)
    type_bitset     reduce using rule 103 (expr -> expr operator_sub expr .)
    type_set        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_map        reduce using rule 103 (expr -> expr operator_sub expr .)
    type_range      reduce using rule 103 (expr -> expr operator_sub expr .)
    type_bad_struct reduce using rule 103 (expr -> expr operator_sub expr .)
    type_bad_struct2 reduce using rule 103 (expr -> expr operator_sub expr .)
    lambda          reduce using rule 103 (expr -> expr operator_sub expr .)
    {               reduce using rule 103 (expr -> expr operator_sub expr .)
    ]               reduce using rule 103 (expr -> expr operator_sub expr .)
    :               reduce using rule 103 (expr -> expr operator_sub expr .)
    ,               reduce using rule 103 (expr -> expr operator_sub expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_div    [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_trudiv [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_pow    [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_incr   [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_decr   [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_rotate [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_apply  [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_compose [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_over   [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_map    [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_goodname [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_scan   [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_reduc  [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_bitnot [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_reverse [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_incr [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_sorted_decr [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_goodname2 [ reduce using rule 103 (expr -> expr operator_sub expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 297

    (104) expr -> expr operator_mul expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_sub    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_mul    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_div    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_trudiv reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_join   reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_split  reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_bitand reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_bitor  reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_bitxor reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_bitshiftleft reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_bitshiftright reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_and    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_or     reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_xor    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_contains reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_outer  reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_less_than reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_less_than_equals reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_greater_than reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_greater_than_equals reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_equals reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_not_equals reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_smallest reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_greatest reduce using rule 104 (expr -> expr operator_mul expr .)
    [               reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_not    reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_inner  reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_s_combinator reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_s_combinator_2 reduce using rule 104 (expr -> expr operator_mul expr .)
    NEWLINE         reduce using rule 104 (expr -> expr operator_mul expr .)
    $end            reduce using rule 104 (expr -> expr operator_mul expr .)
    }               reduce using rule 104 (expr -> expr operator_mul expr .)
    )               reduce using rule 104 (expr -> expr operator_mul expr .)
    (               reduce using rule 104 (expr -> expr operator_mul expr .)
    VAR             reduce using rule 104 (expr -> expr operator_mul expr .)
    FLOAT           reduce using rule 104 (expr -> expr operator_mul expr .)
    NUM             reduce using rule 104 (expr -> expr operator_mul expr .)
    STRING_3SQ      reduce using rule 104 (expr -> expr operator_mul expr .)
    STRING_3DQ      reduce using rule 104 (expr -> expr operator_mul expr .)
    STRING_SQ       reduce using rule 104 (expr -> expr operator_mul expr .)
    STRING_DQ       reduce using rule 104 (expr -> expr operator_mul expr .)
    true            reduce using rule 104 (expr -> expr operator_mul expr .)
    Null            reduce using rule 104 (expr -> expr operator_mul expr .)
    false           reduce using rule 104 (expr -> expr operator_mul expr .)
    type_type       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_num        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_bool       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_any        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_u64        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_u32        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_u16        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_u8         reduce using rule 104 (expr -> expr operator_mul expr .)
    type_i64        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_i32        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_i16        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_i8         reduce using rule 104 (expr -> expr operator_mul expr .)
    type_f32        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_f64        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_str        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_list       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_tuple      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_array      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_vector     reduce using rule 104 (expr -> expr operator_mul expr .)
    type_dict       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_generator  reduce using rule 104 (expr -> expr operator_mul expr .)
    type_linked_list reduce using rule 104 (expr -> expr operator_mul expr .)
    type_doubly_linked_list reduce using rule 104 (expr -> expr operator_mul expr .)
    type_deque      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_heap       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_fibonacci_heap reduce using rule 104 (expr -> expr operator_mul expr .)
    type_tree       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_trie       reduce using rule 104 (expr -> expr operator_mul expr .)
    type_stack      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_queue      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_binary_search_tree reduce using rule 104 (expr -> expr operator_mul expr .)
    type_bitset     reduce using rule 104 (expr -> expr operator_mul expr .)
    type_set        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_map        reduce using rule 104 (expr -> expr operator_mul expr .)
    type_range      reduce using rule 104 (expr -> expr operator_mul expr .)
    type_bad_struct reduce using rule 104 (expr -> expr operator_mul expr .)
    type_bad_struct2 reduce using rule 104 (expr -> expr operator_mul expr .)
    lambda          reduce using rule 104 (expr -> expr operator_mul expr .)
    {               reduce using rule 104 (expr -> expr operator_mul expr .)
    ]               reduce using rule 104 (expr -> expr operator_mul expr .)
    :               reduce using rule 104 (expr -> expr operator_mul expr .)
    ,               reduce using rule 104 (expr -> expr operator_mul expr .)
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_pow    [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_incr   [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_decr   [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_rotate [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_apply  [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_compose [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_over   [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_map    [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_goodname [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_scan   [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_reduc  [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_bitnot [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_reverse [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_incr [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_sorted_decr [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_goodname2 [ reduce using rule 104 (expr -> expr operator_mul expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 298

    (105) expr -> expr operator_div expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_sub    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_mul    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_div    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_trudiv reduce using rule 105 (expr -> expr operator_div expr .)
    operator_join   reduce using rule 105 (expr -> expr operator_div expr .)
    operator_split  reduce using rule 105 (expr -> expr operator_div expr .)
    operator_bitand reduce using rule 105 (expr -> expr operator_div expr .)
    operator_bitor  reduce using rule 105 (expr -> expr operator_div expr .)
    operator_bitxor reduce using rule 105 (expr -> expr operator_div expr .)
    operator_bitshiftleft reduce using rule 105 (expr -> expr operator_div expr .)
    operator_bitshiftright reduce using rule 105 (expr -> expr operator_div expr .)
    operator_and    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_or     reduce using rule 105 (expr -> expr operator_div expr .)
    operator_xor    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_contains reduce using rule 105 (expr -> expr operator_div expr .)
    operator_outer  reduce using rule 105 (expr -> expr operator_div expr .)
    operator_less_than reduce using rule 105 (expr -> expr operator_div expr .)
    operator_less_than_equals reduce using rule 105 (expr -> expr operator_div expr .)
    operator_greater_than reduce using rule 105 (expr -> expr operator_div expr .)
    operator_greater_than_equals reduce using rule 105 (expr -> expr operator_div expr .)
    operator_equals reduce using rule 105 (expr -> expr operator_div expr .)
    operator_not_equals reduce using rule 105 (expr -> expr operator_div expr .)
    operator_smallest reduce using rule 105 (expr -> expr operator_div expr .)
    operator_greatest reduce using rule 105 (expr -> expr operator_div expr .)
    [               reduce using rule 105 (expr -> expr operator_div expr .)
    operator_not    reduce using rule 105 (expr -> expr operator_div expr .)
    operator_inner  reduce using rule 105 (expr -> expr operator_div expr .)
    operator_s_combinator reduce using rule 105 (expr -> expr operator_div expr .)
    operator_s_combinator_2 reduce using rule 105 (expr -> expr operator_div expr .)
    NEWLINE         reduce using rule 105 (expr -> expr operator_div expr .)
    $end            reduce using rule 105 (expr -> expr operator_div expr .)
    }               reduce using rule 105 (expr -> expr operator_div expr .)
    )               reduce using rule 105 (expr -> expr operator_div expr .)
    (               reduce using rule 105 (expr -> expr operator_div expr .)
    VAR             reduce using rule 105 (expr -> expr operator_div expr .)
    FLOAT           reduce using rule 105 (expr -> expr operator_div expr .)
    NUM             reduce using rule 105 (expr -> expr operator_div expr .)
    STRING_3SQ      reduce using rule 105 (expr -> expr operator_div expr .)
    STRING_3DQ      reduce using rule 105 (expr -> expr operator_div expr .)
    STRING_SQ       reduce using rule 105 (expr -> expr operator_div expr .)
    STRING_DQ       reduce using rule 105 (expr -> expr operator_div expr .)
    true            reduce using rule 105 (expr -> expr operator_div expr .)
    Null            reduce using rule 105 (expr -> expr operator_div expr .)
    false           reduce using rule 105 (expr -> expr operator_div expr .)
    type_type       reduce using rule 105 (expr -> expr operator_div expr .)
    type_num        reduce using rule 105 (expr -> expr operator_div expr .)
    type_bool       reduce using rule 105 (expr -> expr operator_div expr .)
    type_any        reduce using rule 105 (expr -> expr operator_div expr .)
    type_u64        reduce using rule 105 (expr -> expr operator_div expr .)
    type_u32        reduce using rule 105 (expr -> expr operator_div expr .)
    type_u16        reduce using rule 105 (expr -> expr operator_div expr .)
    type_u8         reduce using rule 105 (expr -> expr operator_div expr .)
    type_i64        reduce using rule 105 (expr -> expr operator_div expr .)
    type_i32        reduce using rule 105 (expr -> expr operator_div expr .)
    type_i16        reduce using rule 105 (expr -> expr operator_div expr .)
    type_i8         reduce using rule 105 (expr -> expr operator_div expr .)
    type_f32        reduce using rule 105 (expr -> expr operator_div expr .)
    type_f64        reduce using rule 105 (expr -> expr operator_div expr .)
    type_str        reduce using rule 105 (expr -> expr operator_div expr .)
    type_list       reduce using rule 105 (expr -> expr operator_div expr .)
    type_tuple      reduce using rule 105 (expr -> expr operator_div expr .)
    type_array      reduce using rule 105 (expr -> expr operator_div expr .)
    type_vector     reduce using rule 105 (expr -> expr operator_div expr .)
    type_dict       reduce using rule 105 (expr -> expr operator_div expr .)
    type_generator  reduce using rule 105 (expr -> expr operator_div expr .)
    type_linked_list reduce using rule 105 (expr -> expr operator_div expr .)
    type_doubly_linked_list reduce using rule 105 (expr -> expr operator_div expr .)
    type_deque      reduce using rule 105 (expr -> expr operator_div expr .)
    type_heap       reduce using rule 105 (expr -> expr operator_div expr .)
    type_fibonacci_heap reduce using rule 105 (expr -> expr operator_div expr .)
    type_tree       reduce using rule 105 (expr -> expr operator_div expr .)
    type_trie       reduce using rule 105 (expr -> expr operator_div expr .)
    type_stack      reduce using rule 105 (expr -> expr operator_div expr .)
    type_queue      reduce using rule 105 (expr -> expr operator_div expr .)
    type_binary_search_tree reduce using rule 105 (expr -> expr operator_div expr .)
    type_bitset     reduce using rule 105 (expr -> expr operator_div expr .)
    type_set        reduce using rule 105 (expr -> expr operator_div expr .)
    type_map        reduce using rule 105 (expr -> expr operator_div expr .)
    type_range      reduce using rule 105 (expr -> expr operator_div expr .)
    type_bad_struct reduce using rule 105 (expr -> expr operator_div expr .)
    type_bad_struct2 reduce using rule 105 (expr -> expr operator_div expr .)
    lambda          reduce using rule 105 (expr -> expr operator_div expr .)
    {               reduce using rule 105 (expr -> expr operator_div expr .)
    ]               reduce using rule 105 (expr -> expr operator_div expr .)
    :               reduce using rule 105 (expr -> expr operator_div expr .)
    ,               reduce using rule 105 (expr -> expr operator_div expr .)
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_pow    [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_incr   [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_decr   [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_rotate [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_apply  [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_compose [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_over   [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_map    [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_goodname [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_scan   [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_reduc  [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_bitnot [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_reverse [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_sorted_incr [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_sorted_decr [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_goodname2 [ reduce using rule 105 (expr -> expr operator_div expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 299

    (106) expr -> expr operator_trudiv expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_sub    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_mul    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_div    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_trudiv reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_join   reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_split  reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_bitand reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_bitor  reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_bitxor reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_bitshiftleft reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_bitshiftright reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_and    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_or     reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_xor    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_contains reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_outer  reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_less_than reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_less_than_equals reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_greater_than reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_greater_than_equals reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_equals reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_not_equals reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_smallest reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_greatest reduce using rule 106 (expr -> expr operator_trudiv expr .)
    [               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_not    reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_inner  reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_s_combinator reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_s_combinator_2 reduce using rule 106 (expr -> expr operator_trudiv expr .)
    NEWLINE         reduce using rule 106 (expr -> expr operator_trudiv expr .)
    $end            reduce using rule 106 (expr -> expr operator_trudiv expr .)
    }               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    )               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    (               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    VAR             reduce using rule 106 (expr -> expr operator_trudiv expr .)
    FLOAT           reduce using rule 106 (expr -> expr operator_trudiv expr .)
    NUM             reduce using rule 106 (expr -> expr operator_trudiv expr .)
    STRING_3SQ      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    STRING_3DQ      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    STRING_SQ       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    STRING_DQ       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    true            reduce using rule 106 (expr -> expr operator_trudiv expr .)
    Null            reduce using rule 106 (expr -> expr operator_trudiv expr .)
    false           reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_type       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_num        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_bool       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_any        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_u64        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_u32        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_u16        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_u8         reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_i64        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_i32        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_i16        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_i8         reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_f32        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_f64        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_str        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_list       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_tuple      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_array      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_vector     reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_dict       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_generator  reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_linked_list reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_doubly_linked_list reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_deque      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_heap       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_fibonacci_heap reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_tree       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_trie       reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_stack      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_queue      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_binary_search_tree reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_bitset     reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_set        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_map        reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_range      reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_bad_struct reduce using rule 106 (expr -> expr operator_trudiv expr .)
    type_bad_struct2 reduce using rule 106 (expr -> expr operator_trudiv expr .)
    lambda          reduce using rule 106 (expr -> expr operator_trudiv expr .)
    {               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    ]               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    :               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    ,               reduce using rule 106 (expr -> expr operator_trudiv expr .)
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_pow    [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_incr   [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_decr   [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_rotate [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_apply  [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_compose [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_over   [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_map    [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_scan   [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_reduc  [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_bitnot [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_reverse [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_incr [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_sorted_decr [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_goodname2 [ reduce using rule 106 (expr -> expr operator_trudiv expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 300

    (107) expr -> expr operator_pow expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_sub    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_mul    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_div    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_trudiv reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_pow    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_join   reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_split  reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_bitand reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_bitor  reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_bitxor reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_bitshiftleft reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_bitshiftright reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_and    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_or     reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_xor    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_contains reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_outer  reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_less_than reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_less_than_equals reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_greater_than reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_greater_than_equals reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_equals reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_not_equals reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_smallest reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_greatest reduce using rule 107 (expr -> expr operator_pow expr .)
    [               reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_not    reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_inner  reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_s_combinator reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_s_combinator_2 reduce using rule 107 (expr -> expr operator_pow expr .)
    NEWLINE         reduce using rule 107 (expr -> expr operator_pow expr .)
    $end            reduce using rule 107 (expr -> expr operator_pow expr .)
    }               reduce using rule 107 (expr -> expr operator_pow expr .)
    )               reduce using rule 107 (expr -> expr operator_pow expr .)
    (               reduce using rule 107 (expr -> expr operator_pow expr .)
    VAR             reduce using rule 107 (expr -> expr operator_pow expr .)
    FLOAT           reduce using rule 107 (expr -> expr operator_pow expr .)
    NUM             reduce using rule 107 (expr -> expr operator_pow expr .)
    STRING_3SQ      reduce using rule 107 (expr -> expr operator_pow expr .)
    STRING_3DQ      reduce using rule 107 (expr -> expr operator_pow expr .)
    STRING_SQ       reduce using rule 107 (expr -> expr operator_pow expr .)
    STRING_DQ       reduce using rule 107 (expr -> expr operator_pow expr .)
    true            reduce using rule 107 (expr -> expr operator_pow expr .)
    Null            reduce using rule 107 (expr -> expr operator_pow expr .)
    false           reduce using rule 107 (expr -> expr operator_pow expr .)
    type_type       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_num        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_bool       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_any        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_u64        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_u32        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_u16        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_u8         reduce using rule 107 (expr -> expr operator_pow expr .)
    type_i64        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_i32        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_i16        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_i8         reduce using rule 107 (expr -> expr operator_pow expr .)
    type_f32        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_f64        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_str        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_list       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_tuple      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_array      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_vector     reduce using rule 107 (expr -> expr operator_pow expr .)
    type_dict       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_generator  reduce using rule 107 (expr -> expr operator_pow expr .)
    type_linked_list reduce using rule 107 (expr -> expr operator_pow expr .)
    type_doubly_linked_list reduce using rule 107 (expr -> expr operator_pow expr .)
    type_deque      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_heap       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_fibonacci_heap reduce using rule 107 (expr -> expr operator_pow expr .)
    type_tree       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_trie       reduce using rule 107 (expr -> expr operator_pow expr .)
    type_stack      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_queue      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_binary_search_tree reduce using rule 107 (expr -> expr operator_pow expr .)
    type_bitset     reduce using rule 107 (expr -> expr operator_pow expr .)
    type_set        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_map        reduce using rule 107 (expr -> expr operator_pow expr .)
    type_range      reduce using rule 107 (expr -> expr operator_pow expr .)
    type_bad_struct reduce using rule 107 (expr -> expr operator_pow expr .)
    type_bad_struct2 reduce using rule 107 (expr -> expr operator_pow expr .)
    lambda          reduce using rule 107 (expr -> expr operator_pow expr .)
    {               reduce using rule 107 (expr -> expr operator_pow expr .)
    ]               reduce using rule 107 (expr -> expr operator_pow expr .)
    :               reduce using rule 107 (expr -> expr operator_pow expr .)
    ,               reduce using rule 107 (expr -> expr operator_pow expr .)
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_incr   [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_decr   [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_rotate [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_apply  [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_compose [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_over   [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_map    [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_goodname [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_scan   [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_reduc  [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_bitnot [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_reverse [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_incr [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_sorted_decr [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_goodname2 [ reduce using rule 107 (expr -> expr operator_pow expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 301

    (108) expr -> expr operator_join expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 108 (expr -> expr operator_join expr .)
    operator_sub    reduce using rule 108 (expr -> expr operator_join expr .)
    operator_join   reduce using rule 108 (expr -> expr operator_join expr .)
    operator_split  reduce using rule 108 (expr -> expr operator_join expr .)
    operator_bitand reduce using rule 108 (expr -> expr operator_join expr .)
    operator_bitor  reduce using rule 108 (expr -> expr operator_join expr .)
    operator_bitxor reduce using rule 108 (expr -> expr operator_join expr .)
    operator_bitshiftleft reduce using rule 108 (expr -> expr operator_join expr .)
    operator_bitshiftright reduce using rule 108 (expr -> expr operator_join expr .)
    operator_and    reduce using rule 108 (expr -> expr operator_join expr .)
    operator_or     reduce using rule 108 (expr -> expr operator_join expr .)
    operator_xor    reduce using rule 108 (expr -> expr operator_join expr .)
    operator_contains reduce using rule 108 (expr -> expr operator_join expr .)
    operator_outer  reduce using rule 108 (expr -> expr operator_join expr .)
    operator_less_than reduce using rule 108 (expr -> expr operator_join expr .)
    operator_less_than_equals reduce using rule 108 (expr -> expr operator_join expr .)
    operator_greater_than reduce using rule 108 (expr -> expr operator_join expr .)
    operator_greater_than_equals reduce using rule 108 (expr -> expr operator_join expr .)
    operator_equals reduce using rule 108 (expr -> expr operator_join expr .)
    operator_not_equals reduce using rule 108 (expr -> expr operator_join expr .)
    operator_smallest reduce using rule 108 (expr -> expr operator_join expr .)
    operator_greatest reduce using rule 108 (expr -> expr operator_join expr .)
    [               reduce using rule 108 (expr -> expr operator_join expr .)
    operator_not    reduce using rule 108 (expr -> expr operator_join expr .)
    operator_inner  reduce using rule 108 (expr -> expr operator_join expr .)
    operator_s_combinator reduce using rule 108 (expr -> expr operator_join expr .)
    operator_s_combinator_2 reduce using rule 108 (expr -> expr operator_join expr .)
    NEWLINE         reduce using rule 108 (expr -> expr operator_join expr .)
    $end            reduce using rule 108 (expr -> expr operator_join expr .)
    }               reduce using rule 108 (expr -> expr operator_join expr .)
    )               reduce using rule 108 (expr -> expr operator_join expr .)
    (               reduce using rule 108 (expr -> expr operator_join expr .)
    VAR             reduce using rule 108 (expr -> expr operator_join expr .)
    FLOAT           reduce using rule 108 (expr -> expr operator_join expr .)
    NUM             reduce using rule 108 (expr -> expr operator_join expr .)
    STRING_3SQ      reduce using rule 108 (expr -> expr operator_join expr .)
    STRING_3DQ      reduce using rule 108 (expr -> expr operator_join expr .)
    STRING_SQ       reduce using rule 108 (expr -> expr operator_join expr .)
    STRING_DQ       reduce using rule 108 (expr -> expr operator_join expr .)
    true            reduce using rule 108 (expr -> expr operator_join expr .)
    Null            reduce using rule 108 (expr -> expr operator_join expr .)
    false           reduce using rule 108 (expr -> expr operator_join expr .)
    type_type       reduce using rule 108 (expr -> expr operator_join expr .)
    type_num        reduce using rule 108 (expr -> expr operator_join expr .)
    type_bool       reduce using rule 108 (expr -> expr operator_join expr .)
    type_any        reduce using rule 108 (expr -> expr operator_join expr .)
    type_u64        reduce using rule 108 (expr -> expr operator_join expr .)
    type_u32        reduce using rule 108 (expr -> expr operator_join expr .)
    type_u16        reduce using rule 108 (expr -> expr operator_join expr .)
    type_u8         reduce using rule 108 (expr -> expr operator_join expr .)
    type_i64        reduce using rule 108 (expr -> expr operator_join expr .)
    type_i32        reduce using rule 108 (expr -> expr operator_join expr .)
    type_i16        reduce using rule 108 (expr -> expr operator_join expr .)
    type_i8         reduce using rule 108 (expr -> expr operator_join expr .)
    type_f32        reduce using rule 108 (expr -> expr operator_join expr .)
    type_f64        reduce using rule 108 (expr -> expr operator_join expr .)
    type_str        reduce using rule 108 (expr -> expr operator_join expr .)
    type_list       reduce using rule 108 (expr -> expr operator_join expr .)
    type_tuple      reduce using rule 108 (expr -> expr operator_join expr .)
    type_array      reduce using rule 108 (expr -> expr operator_join expr .)
    type_vector     reduce using rule 108 (expr -> expr operator_join expr .)
    type_dict       reduce using rule 108 (expr -> expr operator_join expr .)
    type_generator  reduce using rule 108 (expr -> expr operator_join expr .)
    type_linked_list reduce using rule 108 (expr -> expr operator_join expr .)
    type_doubly_linked_list reduce using rule 108 (expr -> expr operator_join expr .)
    type_deque      reduce using rule 108 (expr -> expr operator_join expr .)
    type_heap       reduce using rule 108 (expr -> expr operator_join expr .)
    type_fibonacci_heap reduce using rule 108 (expr -> expr operator_join expr .)
    type_tree       reduce using rule 108 (expr -> expr operator_join expr .)
    type_trie       reduce using rule 108 (expr -> expr operator_join expr .)
    type_stack      reduce using rule 108 (expr -> expr operator_join expr .)
    type_queue      reduce using rule 108 (expr -> expr operator_join expr .)
    type_binary_search_tree reduce using rule 108 (expr -> expr operator_join expr .)
    type_bitset     reduce using rule 108 (expr -> expr operator_join expr .)
    type_set        reduce using rule 108 (expr -> expr operator_join expr .)
    type_map        reduce using rule 108 (expr -> expr operator_join expr .)
    type_range      reduce using rule 108 (expr -> expr operator_join expr .)
    type_bad_struct reduce using rule 108 (expr -> expr operator_join expr .)
    type_bad_struct2 reduce using rule 108 (expr -> expr operator_join expr .)
    lambda          reduce using rule 108 (expr -> expr operator_join expr .)
    {               reduce using rule 108 (expr -> expr operator_join expr .)
    ]               reduce using rule 108 (expr -> expr operator_join expr .)
    :               reduce using rule 108 (expr -> expr operator_join expr .)
    ,               reduce using rule 108 (expr -> expr operator_join expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_div    [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_trudiv [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_pow    [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_incr   [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_decr   [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_rotate [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_apply  [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_compose [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_over   [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_map    [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_goodname [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_scan   [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_reduc  [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_bitnot [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_reverse [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_sorted_incr [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_sorted_decr [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_goodname2 [ reduce using rule 108 (expr -> expr operator_join expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 302

    (109) expr -> expr operator_split expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 109 (expr -> expr operator_split expr .)
    operator_sub    reduce using rule 109 (expr -> expr operator_split expr .)
    operator_join   reduce using rule 109 (expr -> expr operator_split expr .)
    operator_split  reduce using rule 109 (expr -> expr operator_split expr .)
    operator_bitand reduce using rule 109 (expr -> expr operator_split expr .)
    operator_bitor  reduce using rule 109 (expr -> expr operator_split expr .)
    operator_bitxor reduce using rule 109 (expr -> expr operator_split expr .)
    operator_bitshiftleft reduce using rule 109 (expr -> expr operator_split expr .)
    operator_bitshiftright reduce using rule 109 (expr -> expr operator_split expr .)
    operator_and    reduce using rule 109 (expr -> expr operator_split expr .)
    operator_or     reduce using rule 109 (expr -> expr operator_split expr .)
    operator_xor    reduce using rule 109 (expr -> expr operator_split expr .)
    operator_contains reduce using rule 109 (expr -> expr operator_split expr .)
    operator_outer  reduce using rule 109 (expr -> expr operator_split expr .)
    operator_less_than reduce using rule 109 (expr -> expr operator_split expr .)
    operator_less_than_equals reduce using rule 109 (expr -> expr operator_split expr .)
    operator_greater_than reduce using rule 109 (expr -> expr operator_split expr .)
    operator_greater_than_equals reduce using rule 109 (expr -> expr operator_split expr .)
    operator_equals reduce using rule 109 (expr -> expr operator_split expr .)
    operator_not_equals reduce using rule 109 (expr -> expr operator_split expr .)
    operator_smallest reduce using rule 109 (expr -> expr operator_split expr .)
    operator_greatest reduce using rule 109 (expr -> expr operator_split expr .)
    [               reduce using rule 109 (expr -> expr operator_split expr .)
    operator_not    reduce using rule 109 (expr -> expr operator_split expr .)
    operator_inner  reduce using rule 109 (expr -> expr operator_split expr .)
    operator_s_combinator reduce using rule 109 (expr -> expr operator_split expr .)
    operator_s_combinator_2 reduce using rule 109 (expr -> expr operator_split expr .)
    NEWLINE         reduce using rule 109 (expr -> expr operator_split expr .)
    $end            reduce using rule 109 (expr -> expr operator_split expr .)
    }               reduce using rule 109 (expr -> expr operator_split expr .)
    )               reduce using rule 109 (expr -> expr operator_split expr .)
    (               reduce using rule 109 (expr -> expr operator_split expr .)
    VAR             reduce using rule 109 (expr -> expr operator_split expr .)
    FLOAT           reduce using rule 109 (expr -> expr operator_split expr .)
    NUM             reduce using rule 109 (expr -> expr operator_split expr .)
    STRING_3SQ      reduce using rule 109 (expr -> expr operator_split expr .)
    STRING_3DQ      reduce using rule 109 (expr -> expr operator_split expr .)
    STRING_SQ       reduce using rule 109 (expr -> expr operator_split expr .)
    STRING_DQ       reduce using rule 109 (expr -> expr operator_split expr .)
    true            reduce using rule 109 (expr -> expr operator_split expr .)
    Null            reduce using rule 109 (expr -> expr operator_split expr .)
    false           reduce using rule 109 (expr -> expr operator_split expr .)
    type_type       reduce using rule 109 (expr -> expr operator_split expr .)
    type_num        reduce using rule 109 (expr -> expr operator_split expr .)
    type_bool       reduce using rule 109 (expr -> expr operator_split expr .)
    type_any        reduce using rule 109 (expr -> expr operator_split expr .)
    type_u64        reduce using rule 109 (expr -> expr operator_split expr .)
    type_u32        reduce using rule 109 (expr -> expr operator_split expr .)
    type_u16        reduce using rule 109 (expr -> expr operator_split expr .)
    type_u8         reduce using rule 109 (expr -> expr operator_split expr .)
    type_i64        reduce using rule 109 (expr -> expr operator_split expr .)
    type_i32        reduce using rule 109 (expr -> expr operator_split expr .)
    type_i16        reduce using rule 109 (expr -> expr operator_split expr .)
    type_i8         reduce using rule 109 (expr -> expr operator_split expr .)
    type_f32        reduce using rule 109 (expr -> expr operator_split expr .)
    type_f64        reduce using rule 109 (expr -> expr operator_split expr .)
    type_str        reduce using rule 109 (expr -> expr operator_split expr .)
    type_list       reduce using rule 109 (expr -> expr operator_split expr .)
    type_tuple      reduce using rule 109 (expr -> expr operator_split expr .)
    type_array      reduce using rule 109 (expr -> expr operator_split expr .)
    type_vector     reduce using rule 109 (expr -> expr operator_split expr .)
    type_dict       reduce using rule 109 (expr -> expr operator_split expr .)
    type_generator  reduce using rule 109 (expr -> expr operator_split expr .)
    type_linked_list reduce using rule 109 (expr -> expr operator_split expr .)
    type_doubly_linked_list reduce using rule 109 (expr -> expr operator_split expr .)
    type_deque      reduce using rule 109 (expr -> expr operator_split expr .)
    type_heap       reduce using rule 109 (expr -> expr operator_split expr .)
    type_fibonacci_heap reduce using rule 109 (expr -> expr operator_split expr .)
    type_tree       reduce using rule 109 (expr -> expr operator_split expr .)
    type_trie       reduce using rule 109 (expr -> expr operator_split expr .)
    type_stack      reduce using rule 109 (expr -> expr operator_split expr .)
    type_queue      reduce using rule 109 (expr -> expr operator_split expr .)
    type_binary_search_tree reduce using rule 109 (expr -> expr operator_split expr .)
    type_bitset     reduce using rule 109 (expr -> expr operator_split expr .)
    type_set        reduce using rule 109 (expr -> expr operator_split expr .)
    type_map        reduce using rule 109 (expr -> expr operator_split expr .)
    type_range      reduce using rule 109 (expr -> expr operator_split expr .)
    type_bad_struct reduce using rule 109 (expr -> expr operator_split expr .)
    type_bad_struct2 reduce using rule 109 (expr -> expr operator_split expr .)
    lambda          reduce using rule 109 (expr -> expr operator_split expr .)
    {               reduce using rule 109 (expr -> expr operator_split expr .)
    ]               reduce using rule 109 (expr -> expr operator_split expr .)
    :               reduce using rule 109 (expr -> expr operator_split expr .)
    ,               reduce using rule 109 (expr -> expr operator_split expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_div    [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_trudiv [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_pow    [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_incr   [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_decr   [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_rotate [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_apply  [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_compose [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_over   [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_map    [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_goodname [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_scan   [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_reduc  [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_bitnot [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_reverse [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_sorted_incr [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_sorted_decr [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_goodname2 [ reduce using rule 109 (expr -> expr operator_split expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 303

    (112) expr -> expr operator_bitand expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_sub    reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_join   reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_split  reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_bitand reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_bitor  reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_bitxor reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_bitshiftleft reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_bitshiftright reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_and    reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_or     reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_xor    reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_contains reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_outer  reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_less_than reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_less_than_equals reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_greater_than reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_greater_than_equals reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_equals reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_not_equals reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_smallest reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_greatest reduce using rule 112 (expr -> expr operator_bitand expr .)
    [               reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_not    reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_inner  reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_s_combinator reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_s_combinator_2 reduce using rule 112 (expr -> expr operator_bitand expr .)
    NEWLINE         reduce using rule 112 (expr -> expr operator_bitand expr .)
    $end            reduce using rule 112 (expr -> expr operator_bitand expr .)
    }               reduce using rule 112 (expr -> expr operator_bitand expr .)
    )               reduce using rule 112 (expr -> expr operator_bitand expr .)
    (               reduce using rule 112 (expr -> expr operator_bitand expr .)
    VAR             reduce using rule 112 (expr -> expr operator_bitand expr .)
    FLOAT           reduce using rule 112 (expr -> expr operator_bitand expr .)
    NUM             reduce using rule 112 (expr -> expr operator_bitand expr .)
    STRING_3SQ      reduce using rule 112 (expr -> expr operator_bitand expr .)
    STRING_3DQ      reduce using rule 112 (expr -> expr operator_bitand expr .)
    STRING_SQ       reduce using rule 112 (expr -> expr operator_bitand expr .)
    STRING_DQ       reduce using rule 112 (expr -> expr operator_bitand expr .)
    true            reduce using rule 112 (expr -> expr operator_bitand expr .)
    Null            reduce using rule 112 (expr -> expr operator_bitand expr .)
    false           reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_type       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_num        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_bool       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_any        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_u64        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_u32        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_u16        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_u8         reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_i64        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_i32        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_i16        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_i8         reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_f32        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_f64        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_str        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_list       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_tuple      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_array      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_vector     reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_dict       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_generator  reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_linked_list reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_doubly_linked_list reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_deque      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_heap       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_fibonacci_heap reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_tree       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_trie       reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_stack      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_queue      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_binary_search_tree reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_bitset     reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_set        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_map        reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_range      reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_bad_struct reduce using rule 112 (expr -> expr operator_bitand expr .)
    type_bad_struct2 reduce using rule 112 (expr -> expr operator_bitand expr .)
    lambda          reduce using rule 112 (expr -> expr operator_bitand expr .)
    {               reduce using rule 112 (expr -> expr operator_bitand expr .)
    ]               reduce using rule 112 (expr -> expr operator_bitand expr .)
    :               reduce using rule 112 (expr -> expr operator_bitand expr .)
    ,               reduce using rule 112 (expr -> expr operator_bitand expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_div    [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_trudiv [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_pow    [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_incr   [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_decr   [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_rotate [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_apply  [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_compose [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_over   [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_map    [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_scan   [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_reduc  [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_bitnot [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_reverse [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_incr [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_sorted_decr [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_goodname2 [ reduce using rule 112 (expr -> expr operator_bitand expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 304

    (113) expr -> expr operator_bitor expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_sub    reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_join   reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_split  reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_bitand reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_bitor  reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_bitxor reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_bitshiftleft reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_bitshiftright reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_and    reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_or     reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_xor    reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_contains reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_outer  reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_less_than reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_less_than_equals reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_greater_than reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_greater_than_equals reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_equals reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_not_equals reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_smallest reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_greatest reduce using rule 113 (expr -> expr operator_bitor expr .)
    [               reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_not    reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_inner  reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_s_combinator reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_s_combinator_2 reduce using rule 113 (expr -> expr operator_bitor expr .)
    NEWLINE         reduce using rule 113 (expr -> expr operator_bitor expr .)
    $end            reduce using rule 113 (expr -> expr operator_bitor expr .)
    }               reduce using rule 113 (expr -> expr operator_bitor expr .)
    )               reduce using rule 113 (expr -> expr operator_bitor expr .)
    (               reduce using rule 113 (expr -> expr operator_bitor expr .)
    VAR             reduce using rule 113 (expr -> expr operator_bitor expr .)
    FLOAT           reduce using rule 113 (expr -> expr operator_bitor expr .)
    NUM             reduce using rule 113 (expr -> expr operator_bitor expr .)
    STRING_3SQ      reduce using rule 113 (expr -> expr operator_bitor expr .)
    STRING_3DQ      reduce using rule 113 (expr -> expr operator_bitor expr .)
    STRING_SQ       reduce using rule 113 (expr -> expr operator_bitor expr .)
    STRING_DQ       reduce using rule 113 (expr -> expr operator_bitor expr .)
    true            reduce using rule 113 (expr -> expr operator_bitor expr .)
    Null            reduce using rule 113 (expr -> expr operator_bitor expr .)
    false           reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_type       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_num        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_bool       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_any        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_u64        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_u32        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_u16        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_u8         reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_i64        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_i32        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_i16        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_i8         reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_f32        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_f64        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_str        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_list       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_tuple      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_array      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_vector     reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_dict       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_generator  reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_linked_list reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_doubly_linked_list reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_deque      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_heap       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_fibonacci_heap reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_tree       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_trie       reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_stack      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_queue      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_binary_search_tree reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_bitset     reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_set        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_map        reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_range      reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_bad_struct reduce using rule 113 (expr -> expr operator_bitor expr .)
    type_bad_struct2 reduce using rule 113 (expr -> expr operator_bitor expr .)
    lambda          reduce using rule 113 (expr -> expr operator_bitor expr .)
    {               reduce using rule 113 (expr -> expr operator_bitor expr .)
    ]               reduce using rule 113 (expr -> expr operator_bitor expr .)
    :               reduce using rule 113 (expr -> expr operator_bitor expr .)
    ,               reduce using rule 113 (expr -> expr operator_bitor expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_div    [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_trudiv [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_pow    [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_incr   [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_decr   [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_rotate [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_apply  [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_compose [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_over   [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_map    [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_scan   [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_reduc  [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_bitnot [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_reverse [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_incr [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_sorted_decr [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_goodname2 [ reduce using rule 113 (expr -> expr operator_bitor expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 305

    (114) expr -> expr operator_bitxor expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_sub    reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_join   reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_split  reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_bitand reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_bitor  reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_bitxor reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_bitshiftleft reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_bitshiftright reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_and    reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_or     reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_xor    reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_contains reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_outer  reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_less_than reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_less_than_equals reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_greater_than reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_greater_than_equals reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_equals reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_not_equals reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_smallest reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_greatest reduce using rule 114 (expr -> expr operator_bitxor expr .)
    [               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_not    reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_inner  reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_s_combinator reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_s_combinator_2 reduce using rule 114 (expr -> expr operator_bitxor expr .)
    NEWLINE         reduce using rule 114 (expr -> expr operator_bitxor expr .)
    $end            reduce using rule 114 (expr -> expr operator_bitxor expr .)
    }               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    )               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    (               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    VAR             reduce using rule 114 (expr -> expr operator_bitxor expr .)
    FLOAT           reduce using rule 114 (expr -> expr operator_bitxor expr .)
    NUM             reduce using rule 114 (expr -> expr operator_bitxor expr .)
    STRING_3SQ      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    STRING_3DQ      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    STRING_SQ       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    STRING_DQ       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    true            reduce using rule 114 (expr -> expr operator_bitxor expr .)
    Null            reduce using rule 114 (expr -> expr operator_bitxor expr .)
    false           reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_type       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_num        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_bool       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_any        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_u64        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_u32        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_u16        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_u8         reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_i64        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_i32        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_i16        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_i8         reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_f32        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_f64        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_str        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_list       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_tuple      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_array      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_vector     reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_dict       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_generator  reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_linked_list reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_doubly_linked_list reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_deque      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_heap       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_fibonacci_heap reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_tree       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_trie       reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_stack      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_queue      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_binary_search_tree reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_bitset     reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_set        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_map        reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_range      reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_bad_struct reduce using rule 114 (expr -> expr operator_bitxor expr .)
    type_bad_struct2 reduce using rule 114 (expr -> expr operator_bitxor expr .)
    lambda          reduce using rule 114 (expr -> expr operator_bitxor expr .)
    {               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    ]               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    :               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    ,               reduce using rule 114 (expr -> expr operator_bitxor expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_div    [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_trudiv [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_pow    [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_incr   [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_decr   [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_rotate [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_apply  [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_compose [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_over   [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_map    [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_scan   [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_reduc  [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_bitnot [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_reverse [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_incr [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_sorted_decr [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_goodname2 [ reduce using rule 114 (expr -> expr operator_bitxor expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 306

    (115) expr -> expr operator_bitshiftleft expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_sub    reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_join   reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_split  reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_bitand reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_bitor  reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_bitxor reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftleft reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_bitshiftright reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_and    reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_or     reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_xor    reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_contains reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_outer  reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_less_than_equals reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_greater_than_equals reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_equals reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_not_equals reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_smallest reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_greatest reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    [               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_not    reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_inner  reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_s_combinator reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_s_combinator_2 reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    NEWLINE         reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    $end            reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    }               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    )               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    (               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    VAR             reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    FLOAT           reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    NUM             reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    STRING_3SQ      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    STRING_3DQ      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    STRING_SQ       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    STRING_DQ       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    true            reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    Null            reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    false           reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_type       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_num        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_bool       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_any        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_u64        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_u32        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_u16        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_u8         reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_i64        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_i32        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_i16        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_i8         reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_f32        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_f64        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_str        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_list       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_tuple      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_array      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_vector     reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_dict       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_generator  reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_linked_list reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_doubly_linked_list reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_deque      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_heap       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_fibonacci_heap reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_tree       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_trie       reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_stack      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_queue      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_binary_search_tree reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_bitset     reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_set        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_map        reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_range      reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_bad_struct reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    type_bad_struct2 reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    lambda          reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    {               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    ]               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    :               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    ,               reduce using rule 115 (expr -> expr operator_bitshiftleft expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_div    [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_trudiv [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_pow    [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_incr   [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_decr   [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_rotate [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_apply  [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_compose [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_over   [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_map    [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_scan   [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reduc  [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_bitnot [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_reverse [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_incr [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_sorted_decr [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_goodname2 [ reduce using rule 115 (expr -> expr operator_bitshiftleft expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 307

    (116) expr -> expr operator_bitshiftright expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_sub    reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_join   reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_split  reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_bitand reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_bitor  reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_bitxor reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftleft reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_bitshiftright reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_and    reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_or     reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_xor    reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_contains reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_outer  reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_less_than reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_less_than_equals reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_greater_than_equals reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_equals reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_not_equals reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_smallest reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_greatest reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    [               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_not    reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_inner  reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_s_combinator reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_s_combinator_2 reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    NEWLINE         reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    $end            reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    }               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    )               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    (               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    VAR             reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    FLOAT           reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    NUM             reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    STRING_3SQ      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    STRING_3DQ      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    STRING_SQ       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    STRING_DQ       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    true            reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    Null            reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    false           reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_type       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_num        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_bool       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_any        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_u64        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_u32        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_u16        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_u8         reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_i64        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_i32        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_i16        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_i8         reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_f32        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_f64        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_str        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_list       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_tuple      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_array      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_vector     reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_dict       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_generator  reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_linked_list reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_doubly_linked_list reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_deque      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_heap       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_fibonacci_heap reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_tree       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_trie       reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_stack      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_queue      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_binary_search_tree reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_bitset     reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_set        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_map        reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_range      reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_bad_struct reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    type_bad_struct2 reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    lambda          reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    {               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    ]               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    :               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    ,               reduce using rule 116 (expr -> expr operator_bitshiftright expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_div    [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_trudiv [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_pow    [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_incr   [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_decr   [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_rotate [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_apply  [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_compose [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_over   [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_map    [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_scan   [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reduc  [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_bitnot [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_reverse [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_incr [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_sorted_decr [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_goodname2 [ reduce using rule 116 (expr -> expr operator_bitshiftright expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 308

    (117) expr -> expr operator_and expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 117 (expr -> expr operator_and expr .)
    operator_or     reduce using rule 117 (expr -> expr operator_and expr .)
    operator_xor    reduce using rule 117 (expr -> expr operator_and expr .)
    operator_contains reduce using rule 117 (expr -> expr operator_and expr .)
    operator_less_than reduce using rule 117 (expr -> expr operator_and expr .)
    operator_less_than_equals reduce using rule 117 (expr -> expr operator_and expr .)
    operator_greater_than reduce using rule 117 (expr -> expr operator_and expr .)
    operator_greater_than_equals reduce using rule 117 (expr -> expr operator_and expr .)
    operator_equals reduce using rule 117 (expr -> expr operator_and expr .)
    operator_not_equals reduce using rule 117 (expr -> expr operator_and expr .)
    operator_smallest reduce using rule 117 (expr -> expr operator_and expr .)
    operator_greatest reduce using rule 117 (expr -> expr operator_and expr .)
    [               reduce using rule 117 (expr -> expr operator_and expr .)
    operator_not    reduce using rule 117 (expr -> expr operator_and expr .)
    operator_s_combinator reduce using rule 117 (expr -> expr operator_and expr .)
    operator_s_combinator_2 reduce using rule 117 (expr -> expr operator_and expr .)
    NEWLINE         reduce using rule 117 (expr -> expr operator_and expr .)
    $end            reduce using rule 117 (expr -> expr operator_and expr .)
    }               reduce using rule 117 (expr -> expr operator_and expr .)
    )               reduce using rule 117 (expr -> expr operator_and expr .)
    (               reduce using rule 117 (expr -> expr operator_and expr .)
    VAR             reduce using rule 117 (expr -> expr operator_and expr .)
    FLOAT           reduce using rule 117 (expr -> expr operator_and expr .)
    NUM             reduce using rule 117 (expr -> expr operator_and expr .)
    STRING_3SQ      reduce using rule 117 (expr -> expr operator_and expr .)
    STRING_3DQ      reduce using rule 117 (expr -> expr operator_and expr .)
    STRING_SQ       reduce using rule 117 (expr -> expr operator_and expr .)
    STRING_DQ       reduce using rule 117 (expr -> expr operator_and expr .)
    true            reduce using rule 117 (expr -> expr operator_and expr .)
    Null            reduce using rule 117 (expr -> expr operator_and expr .)
    false           reduce using rule 117 (expr -> expr operator_and expr .)
    type_type       reduce using rule 117 (expr -> expr operator_and expr .)
    type_num        reduce using rule 117 (expr -> expr operator_and expr .)
    type_bool       reduce using rule 117 (expr -> expr operator_and expr .)
    type_any        reduce using rule 117 (expr -> expr operator_and expr .)
    type_u64        reduce using rule 117 (expr -> expr operator_and expr .)
    type_u32        reduce using rule 117 (expr -> expr operator_and expr .)
    type_u16        reduce using rule 117 (expr -> expr operator_and expr .)
    type_u8         reduce using rule 117 (expr -> expr operator_and expr .)
    type_i64        reduce using rule 117 (expr -> expr operator_and expr .)
    type_i32        reduce using rule 117 (expr -> expr operator_and expr .)
    type_i16        reduce using rule 117 (expr -> expr operator_and expr .)
    type_i8         reduce using rule 117 (expr -> expr operator_and expr .)
    type_f32        reduce using rule 117 (expr -> expr operator_and expr .)
    type_f64        reduce using rule 117 (expr -> expr operator_and expr .)
    type_str        reduce using rule 117 (expr -> expr operator_and expr .)
    type_list       reduce using rule 117 (expr -> expr operator_and expr .)
    type_tuple      reduce using rule 117 (expr -> expr operator_and expr .)
    type_array      reduce using rule 117 (expr -> expr operator_and expr .)
    type_vector     reduce using rule 117 (expr -> expr operator_and expr .)
    type_dict       reduce using rule 117 (expr -> expr operator_and expr .)
    type_generator  reduce using rule 117 (expr -> expr operator_and expr .)
    type_linked_list reduce using rule 117 (expr -> expr operator_and expr .)
    type_doubly_linked_list reduce using rule 117 (expr -> expr operator_and expr .)
    type_deque      reduce using rule 117 (expr -> expr operator_and expr .)
    type_heap       reduce using rule 117 (expr -> expr operator_and expr .)
    type_fibonacci_heap reduce using rule 117 (expr -> expr operator_and expr .)
    type_tree       reduce using rule 117 (expr -> expr operator_and expr .)
    type_trie       reduce using rule 117 (expr -> expr operator_and expr .)
    type_stack      reduce using rule 117 (expr -> expr operator_and expr .)
    type_queue      reduce using rule 117 (expr -> expr operator_and expr .)
    type_binary_search_tree reduce using rule 117 (expr -> expr operator_and expr .)
    type_bitset     reduce using rule 117 (expr -> expr operator_and expr .)
    type_set        reduce using rule 117 (expr -> expr operator_and expr .)
    type_map        reduce using rule 117 (expr -> expr operator_and expr .)
    type_range      reduce using rule 117 (expr -> expr operator_and expr .)
    type_bad_struct reduce using rule 117 (expr -> expr operator_and expr .)
    type_bad_struct2 reduce using rule 117 (expr -> expr operator_and expr .)
    lambda          reduce using rule 117 (expr -> expr operator_and expr .)
    {               reduce using rule 117 (expr -> expr operator_and expr .)
    ]               reduce using rule 117 (expr -> expr operator_and expr .)
    :               reduce using rule 117 (expr -> expr operator_and expr .)
    ,               reduce using rule 117 (expr -> expr operator_and expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_sub    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_mul    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_div    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_trudiv [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_pow    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_join   [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_split  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitand [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitor  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitxor [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftleft [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitshiftright [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_incr   [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_decr   [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_outer  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_rotate [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_apply  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_compose [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_over   [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_map    [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_goodname [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_scan   [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_reduc  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_bitnot [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_inner  [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_reverse [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_sorted_incr [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_sorted_decr [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_goodname2 [ reduce using rule 117 (expr -> expr operator_and expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 309

    (118) expr -> expr operator_or expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 118 (expr -> expr operator_or expr .)
    operator_or     reduce using rule 118 (expr -> expr operator_or expr .)
    operator_xor    reduce using rule 118 (expr -> expr operator_or expr .)
    operator_contains reduce using rule 118 (expr -> expr operator_or expr .)
    operator_less_than reduce using rule 118 (expr -> expr operator_or expr .)
    operator_less_than_equals reduce using rule 118 (expr -> expr operator_or expr .)
    operator_greater_than reduce using rule 118 (expr -> expr operator_or expr .)
    operator_greater_than_equals reduce using rule 118 (expr -> expr operator_or expr .)
    operator_equals reduce using rule 118 (expr -> expr operator_or expr .)
    operator_not_equals reduce using rule 118 (expr -> expr operator_or expr .)
    operator_smallest reduce using rule 118 (expr -> expr operator_or expr .)
    operator_greatest reduce using rule 118 (expr -> expr operator_or expr .)
    [               reduce using rule 118 (expr -> expr operator_or expr .)
    operator_not    reduce using rule 118 (expr -> expr operator_or expr .)
    operator_s_combinator reduce using rule 118 (expr -> expr operator_or expr .)
    operator_s_combinator_2 reduce using rule 118 (expr -> expr operator_or expr .)
    NEWLINE         reduce using rule 118 (expr -> expr operator_or expr .)
    $end            reduce using rule 118 (expr -> expr operator_or expr .)
    }               reduce using rule 118 (expr -> expr operator_or expr .)
    )               reduce using rule 118 (expr -> expr operator_or expr .)
    (               reduce using rule 118 (expr -> expr operator_or expr .)
    VAR             reduce using rule 118 (expr -> expr operator_or expr .)
    FLOAT           reduce using rule 118 (expr -> expr operator_or expr .)
    NUM             reduce using rule 118 (expr -> expr operator_or expr .)
    STRING_3SQ      reduce using rule 118 (expr -> expr operator_or expr .)
    STRING_3DQ      reduce using rule 118 (expr -> expr operator_or expr .)
    STRING_SQ       reduce using rule 118 (expr -> expr operator_or expr .)
    STRING_DQ       reduce using rule 118 (expr -> expr operator_or expr .)
    true            reduce using rule 118 (expr -> expr operator_or expr .)
    Null            reduce using rule 118 (expr -> expr operator_or expr .)
    false           reduce using rule 118 (expr -> expr operator_or expr .)
    type_type       reduce using rule 118 (expr -> expr operator_or expr .)
    type_num        reduce using rule 118 (expr -> expr operator_or expr .)
    type_bool       reduce using rule 118 (expr -> expr operator_or expr .)
    type_any        reduce using rule 118 (expr -> expr operator_or expr .)
    type_u64        reduce using rule 118 (expr -> expr operator_or expr .)
    type_u32        reduce using rule 118 (expr -> expr operator_or expr .)
    type_u16        reduce using rule 118 (expr -> expr operator_or expr .)
    type_u8         reduce using rule 118 (expr -> expr operator_or expr .)
    type_i64        reduce using rule 118 (expr -> expr operator_or expr .)
    type_i32        reduce using rule 118 (expr -> expr operator_or expr .)
    type_i16        reduce using rule 118 (expr -> expr operator_or expr .)
    type_i8         reduce using rule 118 (expr -> expr operator_or expr .)
    type_f32        reduce using rule 118 (expr -> expr operator_or expr .)
    type_f64        reduce using rule 118 (expr -> expr operator_or expr .)
    type_str        reduce using rule 118 (expr -> expr operator_or expr .)
    type_list       reduce using rule 118 (expr -> expr operator_or expr .)
    type_tuple      reduce using rule 118 (expr -> expr operator_or expr .)
    type_array      reduce using rule 118 (expr -> expr operator_or expr .)
    type_vector     reduce using rule 118 (expr -> expr operator_or expr .)
    type_dict       reduce using rule 118 (expr -> expr operator_or expr .)
    type_generator  reduce using rule 118 (expr -> expr operator_or expr .)
    type_linked_list reduce using rule 118 (expr -> expr operator_or expr .)
    type_doubly_linked_list reduce using rule 118 (expr -> expr operator_or expr .)
    type_deque      reduce using rule 118 (expr -> expr operator_or expr .)
    type_heap       reduce using rule 118 (expr -> expr operator_or expr .)
    type_fibonacci_heap reduce using rule 118 (expr -> expr operator_or expr .)
    type_tree       reduce using rule 118 (expr -> expr operator_or expr .)
    type_trie       reduce using rule 118 (expr -> expr operator_or expr .)
    type_stack      reduce using rule 118 (expr -> expr operator_or expr .)
    type_queue      reduce using rule 118 (expr -> expr operator_or expr .)
    type_binary_search_tree reduce using rule 118 (expr -> expr operator_or expr .)
    type_bitset     reduce using rule 118 (expr -> expr operator_or expr .)
    type_set        reduce using rule 118 (expr -> expr operator_or expr .)
    type_map        reduce using rule 118 (expr -> expr operator_or expr .)
    type_range      reduce using rule 118 (expr -> expr operator_or expr .)
    type_bad_struct reduce using rule 118 (expr -> expr operator_or expr .)
    type_bad_struct2 reduce using rule 118 (expr -> expr operator_or expr .)
    lambda          reduce using rule 118 (expr -> expr operator_or expr .)
    {               reduce using rule 118 (expr -> expr operator_or expr .)
    ]               reduce using rule 118 (expr -> expr operator_or expr .)
    :               reduce using rule 118 (expr -> expr operator_or expr .)
    ,               reduce using rule 118 (expr -> expr operator_or expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_sub    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_mul    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_div    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_trudiv [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_pow    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_join   [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_split  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitand [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitor  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitxor [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftleft [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitshiftright [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_incr   [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_decr   [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_outer  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_rotate [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_apply  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_compose [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_over   [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_map    [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_goodname [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_scan   [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_reduc  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_bitnot [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_inner  [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_reverse [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_sorted_incr [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_sorted_decr [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_goodname2 [ reduce using rule 118 (expr -> expr operator_or expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 310

    (119) expr -> expr operator_xor expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_or     reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_xor    reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_contains reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_less_than reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_less_than_equals reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_greater_than reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_greater_than_equals reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_equals reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_not_equals reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_smallest reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_greatest reduce using rule 119 (expr -> expr operator_xor expr .)
    [               reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_not    reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_s_combinator reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_s_combinator_2 reduce using rule 119 (expr -> expr operator_xor expr .)
    NEWLINE         reduce using rule 119 (expr -> expr operator_xor expr .)
    $end            reduce using rule 119 (expr -> expr operator_xor expr .)
    }               reduce using rule 119 (expr -> expr operator_xor expr .)
    )               reduce using rule 119 (expr -> expr operator_xor expr .)
    (               reduce using rule 119 (expr -> expr operator_xor expr .)
    VAR             reduce using rule 119 (expr -> expr operator_xor expr .)
    FLOAT           reduce using rule 119 (expr -> expr operator_xor expr .)
    NUM             reduce using rule 119 (expr -> expr operator_xor expr .)
    STRING_3SQ      reduce using rule 119 (expr -> expr operator_xor expr .)
    STRING_3DQ      reduce using rule 119 (expr -> expr operator_xor expr .)
    STRING_SQ       reduce using rule 119 (expr -> expr operator_xor expr .)
    STRING_DQ       reduce using rule 119 (expr -> expr operator_xor expr .)
    true            reduce using rule 119 (expr -> expr operator_xor expr .)
    Null            reduce using rule 119 (expr -> expr operator_xor expr .)
    false           reduce using rule 119 (expr -> expr operator_xor expr .)
    type_type       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_num        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_bool       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_any        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_u64        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_u32        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_u16        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_u8         reduce using rule 119 (expr -> expr operator_xor expr .)
    type_i64        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_i32        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_i16        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_i8         reduce using rule 119 (expr -> expr operator_xor expr .)
    type_f32        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_f64        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_str        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_list       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_tuple      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_array      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_vector     reduce using rule 119 (expr -> expr operator_xor expr .)
    type_dict       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_generator  reduce using rule 119 (expr -> expr operator_xor expr .)
    type_linked_list reduce using rule 119 (expr -> expr operator_xor expr .)
    type_doubly_linked_list reduce using rule 119 (expr -> expr operator_xor expr .)
    type_deque      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_heap       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_fibonacci_heap reduce using rule 119 (expr -> expr operator_xor expr .)
    type_tree       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_trie       reduce using rule 119 (expr -> expr operator_xor expr .)
    type_stack      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_queue      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_binary_search_tree reduce using rule 119 (expr -> expr operator_xor expr .)
    type_bitset     reduce using rule 119 (expr -> expr operator_xor expr .)
    type_set        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_map        reduce using rule 119 (expr -> expr operator_xor expr .)
    type_range      reduce using rule 119 (expr -> expr operator_xor expr .)
    type_bad_struct reduce using rule 119 (expr -> expr operator_xor expr .)
    type_bad_struct2 reduce using rule 119 (expr -> expr operator_xor expr .)
    lambda          reduce using rule 119 (expr -> expr operator_xor expr .)
    {               reduce using rule 119 (expr -> expr operator_xor expr .)
    ]               reduce using rule 119 (expr -> expr operator_xor expr .)
    :               reduce using rule 119 (expr -> expr operator_xor expr .)
    ,               reduce using rule 119 (expr -> expr operator_xor expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_sub    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_mul    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_div    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_trudiv [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_pow    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_join   [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_split  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitand [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitor  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitxor [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftleft [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitshiftright [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_incr   [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_decr   [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_outer  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_rotate [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_apply  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_compose [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_over   [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_map    [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_goodname [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_scan   [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_reduc  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_bitnot [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_inner  [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_reverse [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_incr [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_sorted_decr [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_goodname2 [ reduce using rule 119 (expr -> expr operator_xor expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 311

    (120) expr -> expr operator_contains expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_or     reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_xor    reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_contains reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_less_than reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_less_than_equals reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_greater_than reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_greater_than_equals reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_equals reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_not_equals reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_smallest reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_greatest reduce using rule 120 (expr -> expr operator_contains expr .)
    [               reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_not    reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_s_combinator reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_s_combinator_2 reduce using rule 120 (expr -> expr operator_contains expr .)
    NEWLINE         reduce using rule 120 (expr -> expr operator_contains expr .)
    $end            reduce using rule 120 (expr -> expr operator_contains expr .)
    }               reduce using rule 120 (expr -> expr operator_contains expr .)
    )               reduce using rule 120 (expr -> expr operator_contains expr .)
    (               reduce using rule 120 (expr -> expr operator_contains expr .)
    VAR             reduce using rule 120 (expr -> expr operator_contains expr .)
    FLOAT           reduce using rule 120 (expr -> expr operator_contains expr .)
    NUM             reduce using rule 120 (expr -> expr operator_contains expr .)
    STRING_3SQ      reduce using rule 120 (expr -> expr operator_contains expr .)
    STRING_3DQ      reduce using rule 120 (expr -> expr operator_contains expr .)
    STRING_SQ       reduce using rule 120 (expr -> expr operator_contains expr .)
    STRING_DQ       reduce using rule 120 (expr -> expr operator_contains expr .)
    true            reduce using rule 120 (expr -> expr operator_contains expr .)
    Null            reduce using rule 120 (expr -> expr operator_contains expr .)
    false           reduce using rule 120 (expr -> expr operator_contains expr .)
    type_type       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_num        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_bool       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_any        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_u64        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_u32        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_u16        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_u8         reduce using rule 120 (expr -> expr operator_contains expr .)
    type_i64        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_i32        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_i16        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_i8         reduce using rule 120 (expr -> expr operator_contains expr .)
    type_f32        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_f64        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_str        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_list       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_tuple      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_array      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_vector     reduce using rule 120 (expr -> expr operator_contains expr .)
    type_dict       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_generator  reduce using rule 120 (expr -> expr operator_contains expr .)
    type_linked_list reduce using rule 120 (expr -> expr operator_contains expr .)
    type_doubly_linked_list reduce using rule 120 (expr -> expr operator_contains expr .)
    type_deque      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_heap       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_fibonacci_heap reduce using rule 120 (expr -> expr operator_contains expr .)
    type_tree       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_trie       reduce using rule 120 (expr -> expr operator_contains expr .)
    type_stack      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_queue      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_binary_search_tree reduce using rule 120 (expr -> expr operator_contains expr .)
    type_bitset     reduce using rule 120 (expr -> expr operator_contains expr .)
    type_set        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_map        reduce using rule 120 (expr -> expr operator_contains expr .)
    type_range      reduce using rule 120 (expr -> expr operator_contains expr .)
    type_bad_struct reduce using rule 120 (expr -> expr operator_contains expr .)
    type_bad_struct2 reduce using rule 120 (expr -> expr operator_contains expr .)
    lambda          reduce using rule 120 (expr -> expr operator_contains expr .)
    {               reduce using rule 120 (expr -> expr operator_contains expr .)
    ]               reduce using rule 120 (expr -> expr operator_contains expr .)
    :               reduce using rule 120 (expr -> expr operator_contains expr .)
    ,               reduce using rule 120 (expr -> expr operator_contains expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_sub    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_mul    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_div    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_trudiv [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_pow    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_join   [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_split  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitand [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitor  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitxor [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftleft [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitshiftright [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_incr   [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_decr   [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_outer  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_rotate [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_apply  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_compose [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_over   [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_map    [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_goodname [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_scan   [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_reduc  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_bitnot [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_inner  [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_reverse [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_incr [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_sorted_decr [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_goodname2 [ reduce using rule 120 (expr -> expr operator_contains expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 312

    (125) expr -> expr operator_outer OPERATOR . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 386
    OPERATOR                       shift and go to state 30
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 313

    (126) expr -> expr OPERATOR operator_inner . OPERATOR expr
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 387

state 314

    (128) expr -> expr operator_rotate expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_sub    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_mul    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_div    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_trudiv reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_pow    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_join   reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_split  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_bitand reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_bitor  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_bitxor reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_bitshiftleft reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_bitshiftright reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_and    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_or     reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_xor    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_contains reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_outer  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_rotate reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_apply  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_less_than reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_less_than_equals reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_greater_than reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_greater_than_equals reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_equals reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_not_equals reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_smallest reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_greatest reduce using rule 128 (expr -> expr operator_rotate expr .)
    [               reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_scan   reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_reduc  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_not    reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_inner  reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_s_combinator reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_s_combinator_2 reduce using rule 128 (expr -> expr operator_rotate expr .)
    NEWLINE         reduce using rule 128 (expr -> expr operator_rotate expr .)
    $end            reduce using rule 128 (expr -> expr operator_rotate expr .)
    }               reduce using rule 128 (expr -> expr operator_rotate expr .)
    )               reduce using rule 128 (expr -> expr operator_rotate expr .)
    (               reduce using rule 128 (expr -> expr operator_rotate expr .)
    VAR             reduce using rule 128 (expr -> expr operator_rotate expr .)
    FLOAT           reduce using rule 128 (expr -> expr operator_rotate expr .)
    NUM             reduce using rule 128 (expr -> expr operator_rotate expr .)
    STRING_3SQ      reduce using rule 128 (expr -> expr operator_rotate expr .)
    STRING_3DQ      reduce using rule 128 (expr -> expr operator_rotate expr .)
    STRING_SQ       reduce using rule 128 (expr -> expr operator_rotate expr .)
    STRING_DQ       reduce using rule 128 (expr -> expr operator_rotate expr .)
    true            reduce using rule 128 (expr -> expr operator_rotate expr .)
    Null            reduce using rule 128 (expr -> expr operator_rotate expr .)
    false           reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_type       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_num        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_bool       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_any        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_u64        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_u32        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_u16        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_u8         reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_i64        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_i32        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_i16        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_i8         reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_f32        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_f64        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_str        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_list       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_tuple      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_array      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_vector     reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_dict       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_generator  reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_linked_list reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_doubly_linked_list reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_deque      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_heap       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_fibonacci_heap reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_tree       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_trie       reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_stack      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_queue      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_binary_search_tree reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_bitset     reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_set        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_map        reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_range      reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_bad_struct reduce using rule 128 (expr -> expr operator_rotate expr .)
    type_bad_struct2 reduce using rule 128 (expr -> expr operator_rotate expr .)
    lambda          reduce using rule 128 (expr -> expr operator_rotate expr .)
    {               reduce using rule 128 (expr -> expr operator_rotate expr .)
    ]               reduce using rule 128 (expr -> expr operator_rotate expr .)
    :               reduce using rule 128 (expr -> expr operator_rotate expr .)
    ,               reduce using rule 128 (expr -> expr operator_rotate expr .)
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_incr   [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_decr   [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_compose [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_over   [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_map    [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_bitnot [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_reverse [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_incr [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_sorted_decr [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_goodname2 [ reduce using rule 128 (expr -> expr operator_rotate expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 315

    (129) expr -> expr operator_apply expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_sub    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_mul    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_div    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_trudiv reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_pow    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_join   reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_split  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_bitand reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_bitor  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_bitxor reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_bitshiftleft reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_bitshiftright reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_and    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_or     reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_xor    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_contains reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_outer  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_rotate reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_apply  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_less_than reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_less_than_equals reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_greater_than reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_greater_than_equals reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_equals reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_not_equals reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_smallest reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_greatest reduce using rule 129 (expr -> expr operator_apply expr .)
    [               reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_scan   reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_reduc  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_not    reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_inner  reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_s_combinator reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_s_combinator_2 reduce using rule 129 (expr -> expr operator_apply expr .)
    NEWLINE         reduce using rule 129 (expr -> expr operator_apply expr .)
    $end            reduce using rule 129 (expr -> expr operator_apply expr .)
    }               reduce using rule 129 (expr -> expr operator_apply expr .)
    )               reduce using rule 129 (expr -> expr operator_apply expr .)
    (               reduce using rule 129 (expr -> expr operator_apply expr .)
    VAR             reduce using rule 129 (expr -> expr operator_apply expr .)
    FLOAT           reduce using rule 129 (expr -> expr operator_apply expr .)
    NUM             reduce using rule 129 (expr -> expr operator_apply expr .)
    STRING_3SQ      reduce using rule 129 (expr -> expr operator_apply expr .)
    STRING_3DQ      reduce using rule 129 (expr -> expr operator_apply expr .)
    STRING_SQ       reduce using rule 129 (expr -> expr operator_apply expr .)
    STRING_DQ       reduce using rule 129 (expr -> expr operator_apply expr .)
    true            reduce using rule 129 (expr -> expr operator_apply expr .)
    Null            reduce using rule 129 (expr -> expr operator_apply expr .)
    false           reduce using rule 129 (expr -> expr operator_apply expr .)
    type_type       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_num        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_bool       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_any        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_u64        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_u32        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_u16        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_u8         reduce using rule 129 (expr -> expr operator_apply expr .)
    type_i64        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_i32        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_i16        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_i8         reduce using rule 129 (expr -> expr operator_apply expr .)
    type_f32        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_f64        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_str        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_list       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_tuple      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_array      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_vector     reduce using rule 129 (expr -> expr operator_apply expr .)
    type_dict       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_generator  reduce using rule 129 (expr -> expr operator_apply expr .)
    type_linked_list reduce using rule 129 (expr -> expr operator_apply expr .)
    type_doubly_linked_list reduce using rule 129 (expr -> expr operator_apply expr .)
    type_deque      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_heap       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_fibonacci_heap reduce using rule 129 (expr -> expr operator_apply expr .)
    type_tree       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_trie       reduce using rule 129 (expr -> expr operator_apply expr .)
    type_stack      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_queue      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_binary_search_tree reduce using rule 129 (expr -> expr operator_apply expr .)
    type_bitset     reduce using rule 129 (expr -> expr operator_apply expr .)
    type_set        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_map        reduce using rule 129 (expr -> expr operator_apply expr .)
    type_range      reduce using rule 129 (expr -> expr operator_apply expr .)
    type_bad_struct reduce using rule 129 (expr -> expr operator_apply expr .)
    type_bad_struct2 reduce using rule 129 (expr -> expr operator_apply expr .)
    lambda          reduce using rule 129 (expr -> expr operator_apply expr .)
    {               reduce using rule 129 (expr -> expr operator_apply expr .)
    ]               reduce using rule 129 (expr -> expr operator_apply expr .)
    :               reduce using rule 129 (expr -> expr operator_apply expr .)
    ,               reduce using rule 129 (expr -> expr operator_apply expr .)
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_incr   [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_decr   [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_compose [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_over   [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_map    [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_goodname [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_bitnot [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_reverse [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_incr [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_sorted_decr [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_goodname2 [ reduce using rule 129 (expr -> expr operator_apply expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 316

    (130) expr -> expr operator_compose expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_sub    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_mul    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_div    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_trudiv reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_pow    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_join   reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_split  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitand reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitor  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitxor reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitshiftleft reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitshiftright reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_and    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_or     reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_xor    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_contains reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_incr   reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_decr   reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_outer  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_rotate reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_apply  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_compose reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_over   reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_map    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_less_than reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_less_than_equals reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_greater_than reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_greater_than_equals reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_equals reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_not_equals reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_smallest reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_greatest reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_goodname reduce using rule 130 (expr -> expr operator_compose expr .)
    [               reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_scan   reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_reduc  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_bitnot reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_not    reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_inner  reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_reverse reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_sorted_incr reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_sorted_decr reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_s_combinator reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_s_combinator_2 reduce using rule 130 (expr -> expr operator_compose expr .)
    NEWLINE         reduce using rule 130 (expr -> expr operator_compose expr .)
    $end            reduce using rule 130 (expr -> expr operator_compose expr .)
    }               reduce using rule 130 (expr -> expr operator_compose expr .)
    )               reduce using rule 130 (expr -> expr operator_compose expr .)
    (               reduce using rule 130 (expr -> expr operator_compose expr .)
    VAR             reduce using rule 130 (expr -> expr operator_compose expr .)
    FLOAT           reduce using rule 130 (expr -> expr operator_compose expr .)
    NUM             reduce using rule 130 (expr -> expr operator_compose expr .)
    STRING_3SQ      reduce using rule 130 (expr -> expr operator_compose expr .)
    STRING_3DQ      reduce using rule 130 (expr -> expr operator_compose expr .)
    STRING_SQ       reduce using rule 130 (expr -> expr operator_compose expr .)
    STRING_DQ       reduce using rule 130 (expr -> expr operator_compose expr .)
    true            reduce using rule 130 (expr -> expr operator_compose expr .)
    Null            reduce using rule 130 (expr -> expr operator_compose expr .)
    false           reduce using rule 130 (expr -> expr operator_compose expr .)
    type_type       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_num        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_bool       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_any        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_u64        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_u32        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_u16        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_u8         reduce using rule 130 (expr -> expr operator_compose expr .)
    type_i64        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_i32        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_i16        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_i8         reduce using rule 130 (expr -> expr operator_compose expr .)
    type_f32        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_f64        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_str        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_list       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_tuple      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_array      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_vector     reduce using rule 130 (expr -> expr operator_compose expr .)
    type_dict       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_generator  reduce using rule 130 (expr -> expr operator_compose expr .)
    type_linked_list reduce using rule 130 (expr -> expr operator_compose expr .)
    type_doubly_linked_list reduce using rule 130 (expr -> expr operator_compose expr .)
    type_deque      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_heap       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_fibonacci_heap reduce using rule 130 (expr -> expr operator_compose expr .)
    type_tree       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_trie       reduce using rule 130 (expr -> expr operator_compose expr .)
    type_stack      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_queue      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_binary_search_tree reduce using rule 130 (expr -> expr operator_compose expr .)
    type_bitset     reduce using rule 130 (expr -> expr operator_compose expr .)
    type_set        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_map        reduce using rule 130 (expr -> expr operator_compose expr .)
    type_range      reduce using rule 130 (expr -> expr operator_compose expr .)
    type_bad_struct reduce using rule 130 (expr -> expr operator_compose expr .)
    type_bad_struct2 reduce using rule 130 (expr -> expr operator_compose expr .)
    lambda          reduce using rule 130 (expr -> expr operator_compose expr .)
    {               reduce using rule 130 (expr -> expr operator_compose expr .)
    ]               reduce using rule 130 (expr -> expr operator_compose expr .)
    :               reduce using rule 130 (expr -> expr operator_compose expr .)
    ,               reduce using rule 130 (expr -> expr operator_compose expr .)
    operator_goodname2 shift and go to state 183

  ! operator_goodname2 [ reduce using rule 130 (expr -> expr operator_compose expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_compose [ shift and go to state 163 ]
  ! operator_over   [ shift and go to state 164 ]
  ! operator_map    [ shift and go to state 165 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 317

    (131) expr -> expr operator_over expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_sub    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_mul    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_div    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_trudiv reduce using rule 131 (expr -> expr operator_over expr .)
    operator_pow    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_join   reduce using rule 131 (expr -> expr operator_over expr .)
    operator_split  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitand reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitor  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitxor reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitshiftleft reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitshiftright reduce using rule 131 (expr -> expr operator_over expr .)
    operator_and    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_or     reduce using rule 131 (expr -> expr operator_over expr .)
    operator_xor    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_contains reduce using rule 131 (expr -> expr operator_over expr .)
    operator_incr   reduce using rule 131 (expr -> expr operator_over expr .)
    operator_decr   reduce using rule 131 (expr -> expr operator_over expr .)
    operator_outer  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_rotate reduce using rule 131 (expr -> expr operator_over expr .)
    operator_apply  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_over   reduce using rule 131 (expr -> expr operator_over expr .)
    operator_map    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_less_than reduce using rule 131 (expr -> expr operator_over expr .)
    operator_less_than_equals reduce using rule 131 (expr -> expr operator_over expr .)
    operator_greater_than reduce using rule 131 (expr -> expr operator_over expr .)
    operator_greater_than_equals reduce using rule 131 (expr -> expr operator_over expr .)
    operator_equals reduce using rule 131 (expr -> expr operator_over expr .)
    operator_not_equals reduce using rule 131 (expr -> expr operator_over expr .)
    operator_smallest reduce using rule 131 (expr -> expr operator_over expr .)
    operator_greatest reduce using rule 131 (expr -> expr operator_over expr .)
    operator_goodname reduce using rule 131 (expr -> expr operator_over expr .)
    [               reduce using rule 131 (expr -> expr operator_over expr .)
    operator_scan   reduce using rule 131 (expr -> expr operator_over expr .)
    operator_reduc  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_bitnot reduce using rule 131 (expr -> expr operator_over expr .)
    operator_not    reduce using rule 131 (expr -> expr operator_over expr .)
    operator_inner  reduce using rule 131 (expr -> expr operator_over expr .)
    operator_reverse reduce using rule 131 (expr -> expr operator_over expr .)
    operator_sorted_incr reduce using rule 131 (expr -> expr operator_over expr .)
    operator_sorted_decr reduce using rule 131 (expr -> expr operator_over expr .)
    operator_s_combinator reduce using rule 131 (expr -> expr operator_over expr .)
    operator_s_combinator_2 reduce using rule 131 (expr -> expr operator_over expr .)
    NEWLINE         reduce using rule 131 (expr -> expr operator_over expr .)
    $end            reduce using rule 131 (expr -> expr operator_over expr .)
    }               reduce using rule 131 (expr -> expr operator_over expr .)
    )               reduce using rule 131 (expr -> expr operator_over expr .)
    (               reduce using rule 131 (expr -> expr operator_over expr .)
    VAR             reduce using rule 131 (expr -> expr operator_over expr .)
    FLOAT           reduce using rule 131 (expr -> expr operator_over expr .)
    NUM             reduce using rule 131 (expr -> expr operator_over expr .)
    STRING_3SQ      reduce using rule 131 (expr -> expr operator_over expr .)
    STRING_3DQ      reduce using rule 131 (expr -> expr operator_over expr .)
    STRING_SQ       reduce using rule 131 (expr -> expr operator_over expr .)
    STRING_DQ       reduce using rule 131 (expr -> expr operator_over expr .)
    true            reduce using rule 131 (expr -> expr operator_over expr .)
    Null            reduce using rule 131 (expr -> expr operator_over expr .)
    false           reduce using rule 131 (expr -> expr operator_over expr .)
    type_type       reduce using rule 131 (expr -> expr operator_over expr .)
    type_num        reduce using rule 131 (expr -> expr operator_over expr .)
    type_bool       reduce using rule 131 (expr -> expr operator_over expr .)
    type_any        reduce using rule 131 (expr -> expr operator_over expr .)
    type_u64        reduce using rule 131 (expr -> expr operator_over expr .)
    type_u32        reduce using rule 131 (expr -> expr operator_over expr .)
    type_u16        reduce using rule 131 (expr -> expr operator_over expr .)
    type_u8         reduce using rule 131 (expr -> expr operator_over expr .)
    type_i64        reduce using rule 131 (expr -> expr operator_over expr .)
    type_i32        reduce using rule 131 (expr -> expr operator_over expr .)
    type_i16        reduce using rule 131 (expr -> expr operator_over expr .)
    type_i8         reduce using rule 131 (expr -> expr operator_over expr .)
    type_f32        reduce using rule 131 (expr -> expr operator_over expr .)
    type_f64        reduce using rule 131 (expr -> expr operator_over expr .)
    type_str        reduce using rule 131 (expr -> expr operator_over expr .)
    type_list       reduce using rule 131 (expr -> expr operator_over expr .)
    type_tuple      reduce using rule 131 (expr -> expr operator_over expr .)
    type_array      reduce using rule 131 (expr -> expr operator_over expr .)
    type_vector     reduce using rule 131 (expr -> expr operator_over expr .)
    type_dict       reduce using rule 131 (expr -> expr operator_over expr .)
    type_generator  reduce using rule 131 (expr -> expr operator_over expr .)
    type_linked_list reduce using rule 131 (expr -> expr operator_over expr .)
    type_doubly_linked_list reduce using rule 131 (expr -> expr operator_over expr .)
    type_deque      reduce using rule 131 (expr -> expr operator_over expr .)
    type_heap       reduce using rule 131 (expr -> expr operator_over expr .)
    type_fibonacci_heap reduce using rule 131 (expr -> expr operator_over expr .)
    type_tree       reduce using rule 131 (expr -> expr operator_over expr .)
    type_trie       reduce using rule 131 (expr -> expr operator_over expr .)
    type_stack      reduce using rule 131 (expr -> expr operator_over expr .)
    type_queue      reduce using rule 131 (expr -> expr operator_over expr .)
    type_binary_search_tree reduce using rule 131 (expr -> expr operator_over expr .)
    type_bitset     reduce using rule 131 (expr -> expr operator_over expr .)
    type_set        reduce using rule 131 (expr -> expr operator_over expr .)
    type_map        reduce using rule 131 (expr -> expr operator_over expr .)
    type_range      reduce using rule 131 (expr -> expr operator_over expr .)
    type_bad_struct reduce using rule 131 (expr -> expr operator_over expr .)
    type_bad_struct2 reduce using rule 131 (expr -> expr operator_over expr .)
    lambda          reduce using rule 131 (expr -> expr operator_over expr .)
    {               reduce using rule 131 (expr -> expr operator_over expr .)
    ]               reduce using rule 131 (expr -> expr operator_over expr .)
    :               reduce using rule 131 (expr -> expr operator_over expr .)
    ,               reduce using rule 131 (expr -> expr operator_over expr .)
    operator_compose shift and go to state 163
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 131 (expr -> expr operator_over expr .) ]
  ! operator_goodname2 [ reduce using rule 131 (expr -> expr operator_over expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_over   [ shift and go to state 164 ]
  ! operator_map    [ shift and go to state 165 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 318

    (135) expr -> expr operator_less_than expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_or     reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_xor    reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_contains reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_less_than reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_less_than_equals reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_greater_than reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_greater_than_equals reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_equals reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_not_equals reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_smallest reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_greatest reduce using rule 135 (expr -> expr operator_less_than expr .)
    [               reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_not    reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_s_combinator reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_s_combinator_2 reduce using rule 135 (expr -> expr operator_less_than expr .)
    NEWLINE         reduce using rule 135 (expr -> expr operator_less_than expr .)
    $end            reduce using rule 135 (expr -> expr operator_less_than expr .)
    }               reduce using rule 135 (expr -> expr operator_less_than expr .)
    )               reduce using rule 135 (expr -> expr operator_less_than expr .)
    (               reduce using rule 135 (expr -> expr operator_less_than expr .)
    VAR             reduce using rule 135 (expr -> expr operator_less_than expr .)
    FLOAT           reduce using rule 135 (expr -> expr operator_less_than expr .)
    NUM             reduce using rule 135 (expr -> expr operator_less_than expr .)
    STRING_3SQ      reduce using rule 135 (expr -> expr operator_less_than expr .)
    STRING_3DQ      reduce using rule 135 (expr -> expr operator_less_than expr .)
    STRING_SQ       reduce using rule 135 (expr -> expr operator_less_than expr .)
    STRING_DQ       reduce using rule 135 (expr -> expr operator_less_than expr .)
    true            reduce using rule 135 (expr -> expr operator_less_than expr .)
    Null            reduce using rule 135 (expr -> expr operator_less_than expr .)
    false           reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_type       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_num        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_bool       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_any        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_u64        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_u32        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_u16        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_u8         reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_i64        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_i32        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_i16        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_i8         reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_f32        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_f64        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_str        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_list       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_tuple      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_array      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_vector     reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_dict       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_generator  reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_linked_list reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_doubly_linked_list reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_deque      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_heap       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_fibonacci_heap reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_tree       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_trie       reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_stack      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_queue      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_binary_search_tree reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_bitset     reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_set        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_map        reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_range      reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_bad_struct reduce using rule 135 (expr -> expr operator_less_than expr .)
    type_bad_struct2 reduce using rule 135 (expr -> expr operator_less_than expr .)
    lambda          reduce using rule 135 (expr -> expr operator_less_than expr .)
    {               reduce using rule 135 (expr -> expr operator_less_than expr .)
    ]               reduce using rule 135 (expr -> expr operator_less_than expr .)
    :               reduce using rule 135 (expr -> expr operator_less_than expr .)
    ,               reduce using rule 135 (expr -> expr operator_less_than expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_sub    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_mul    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_div    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_trudiv [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_pow    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_join   [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_split  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitand [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitor  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitxor [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_incr   [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_decr   [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_outer  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_rotate [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_apply  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_compose [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_over   [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_map    [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_scan   [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_reduc  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_bitnot [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_inner  [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_reverse [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_goodname2 [ reduce using rule 135 (expr -> expr operator_less_than expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 319

    (136) expr -> expr operator_less_than_equals expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_or     reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_xor    reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_contains reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_less_than reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_less_than_equals reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_greater_than_equals reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_equals reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_not_equals reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_smallest reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_greatest reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    [               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_not    reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_s_combinator reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_s_combinator_2 reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    NEWLINE         reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    $end            reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    }               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    )               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    (               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    VAR             reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    FLOAT           reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    NUM             reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    STRING_3SQ      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    STRING_3DQ      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    STRING_SQ       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    STRING_DQ       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    true            reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    Null            reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    false           reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_type       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_num        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_bool       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_any        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_u64        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_u32        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_u16        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_u8         reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_i64        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_i32        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_i16        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_i8         reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_f32        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_f64        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_str        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_list       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_tuple      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_array      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_vector     reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_dict       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_generator  reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_linked_list reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_doubly_linked_list reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_deque      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_heap       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_fibonacci_heap reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_tree       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_trie       reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_stack      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_queue      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_binary_search_tree reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_bitset     reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_set        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_map        reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_range      reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_bad_struct reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    type_bad_struct2 reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    lambda          reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    {               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    ]               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    :               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    ,               reduce using rule 136 (expr -> expr operator_less_than_equals expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_div    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_join   [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_split  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_compose [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_over   [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_map    [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_inner  [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 136 (expr -> expr operator_less_than_equals expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 320

    (137) expr -> expr operator_greater_than expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_or     reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_xor    reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_contains reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_less_than reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_less_than_equals reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_greater_than reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_greater_than_equals reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_equals reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_not_equals reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_smallest reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_greatest reduce using rule 137 (expr -> expr operator_greater_than expr .)
    [               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_not    reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_s_combinator reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_s_combinator_2 reduce using rule 137 (expr -> expr operator_greater_than expr .)
    NEWLINE         reduce using rule 137 (expr -> expr operator_greater_than expr .)
    $end            reduce using rule 137 (expr -> expr operator_greater_than expr .)
    }               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    )               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    (               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    VAR             reduce using rule 137 (expr -> expr operator_greater_than expr .)
    FLOAT           reduce using rule 137 (expr -> expr operator_greater_than expr .)
    NUM             reduce using rule 137 (expr -> expr operator_greater_than expr .)
    STRING_3SQ      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    STRING_3DQ      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    STRING_SQ       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    STRING_DQ       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    true            reduce using rule 137 (expr -> expr operator_greater_than expr .)
    Null            reduce using rule 137 (expr -> expr operator_greater_than expr .)
    false           reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_type       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_num        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_bool       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_any        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_u64        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_u32        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_u16        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_u8         reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_i64        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_i32        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_i16        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_i8         reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_f32        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_f64        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_str        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_list       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_tuple      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_array      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_vector     reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_dict       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_generator  reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_linked_list reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_doubly_linked_list reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_deque      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_heap       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_fibonacci_heap reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_tree       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_trie       reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_stack      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_queue      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_binary_search_tree reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_bitset     reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_set        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_map        reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_range      reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_bad_struct reduce using rule 137 (expr -> expr operator_greater_than expr .)
    type_bad_struct2 reduce using rule 137 (expr -> expr operator_greater_than expr .)
    lambda          reduce using rule 137 (expr -> expr operator_greater_than expr .)
    {               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    ]               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    :               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    ,               reduce using rule 137 (expr -> expr operator_greater_than expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_sub    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_mul    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_div    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_trudiv [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_pow    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_join   [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_split  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitand [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitor  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitxor [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftleft [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitshiftright [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_incr   [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_decr   [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_outer  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_rotate [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_apply  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_compose [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_over   [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_map    [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_scan   [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_reduc  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_bitnot [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_inner  [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_reverse [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_incr [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_sorted_decr [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_goodname2 [ reduce using rule 137 (expr -> expr operator_greater_than expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 321

    (138) expr -> expr operator_greater_than_equals expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_or     reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_xor    reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_contains reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_less_than_equals reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_greater_than_equals reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_equals reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_not_equals reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_smallest reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_greatest reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    [               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_not    reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_s_combinator reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_s_combinator_2 reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    NEWLINE         reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    $end            reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    }               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    )               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    (               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    VAR             reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    FLOAT           reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    NUM             reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    STRING_3SQ      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    STRING_3DQ      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    STRING_SQ       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    STRING_DQ       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    true            reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    Null            reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    false           reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_type       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_num        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_bool       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_any        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_u64        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_u32        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_u16        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_u8         reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_i64        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_i32        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_i16        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_i8         reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_f32        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_f64        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_str        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_list       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_tuple      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_array      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_vector     reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_dict       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_generator  reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_linked_list reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_doubly_linked_list reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_deque      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_heap       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_fibonacci_heap reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_tree       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_trie       reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_stack      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_queue      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_binary_search_tree reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_bitset     reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_set        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_map        reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_range      reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_bad_struct reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    type_bad_struct2 reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    lambda          reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    {               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    ]               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    :               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    ,               reduce using rule 138 (expr -> expr operator_greater_than_equals expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sub    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_mul    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_div    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_trudiv [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_pow    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_join   [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_split  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitand [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitor  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitxor [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_incr   [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_decr   [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_outer  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_rotate [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_apply  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_compose [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_over   [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_map    [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_scan   [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reduc  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_bitnot [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_inner  [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_reverse [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 138 (expr -> expr operator_greater_than_equals expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 322

    (139) expr -> expr operator_equals expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_or     reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_xor    reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_contains reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_less_than reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_less_than_equals reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_greater_than reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_greater_than_equals reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_equals reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_not_equals reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_smallest reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_greatest reduce using rule 139 (expr -> expr operator_equals expr .)
    [               reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_not    reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_s_combinator reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_s_combinator_2 reduce using rule 139 (expr -> expr operator_equals expr .)
    NEWLINE         reduce using rule 139 (expr -> expr operator_equals expr .)
    $end            reduce using rule 139 (expr -> expr operator_equals expr .)
    }               reduce using rule 139 (expr -> expr operator_equals expr .)
    )               reduce using rule 139 (expr -> expr operator_equals expr .)
    (               reduce using rule 139 (expr -> expr operator_equals expr .)
    VAR             reduce using rule 139 (expr -> expr operator_equals expr .)
    FLOAT           reduce using rule 139 (expr -> expr operator_equals expr .)
    NUM             reduce using rule 139 (expr -> expr operator_equals expr .)
    STRING_3SQ      reduce using rule 139 (expr -> expr operator_equals expr .)
    STRING_3DQ      reduce using rule 139 (expr -> expr operator_equals expr .)
    STRING_SQ       reduce using rule 139 (expr -> expr operator_equals expr .)
    STRING_DQ       reduce using rule 139 (expr -> expr operator_equals expr .)
    true            reduce using rule 139 (expr -> expr operator_equals expr .)
    Null            reduce using rule 139 (expr -> expr operator_equals expr .)
    false           reduce using rule 139 (expr -> expr operator_equals expr .)
    type_type       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_num        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_bool       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_any        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_u64        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_u32        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_u16        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_u8         reduce using rule 139 (expr -> expr operator_equals expr .)
    type_i64        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_i32        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_i16        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_i8         reduce using rule 139 (expr -> expr operator_equals expr .)
    type_f32        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_f64        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_str        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_list       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_tuple      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_array      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_vector     reduce using rule 139 (expr -> expr operator_equals expr .)
    type_dict       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_generator  reduce using rule 139 (expr -> expr operator_equals expr .)
    type_linked_list reduce using rule 139 (expr -> expr operator_equals expr .)
    type_doubly_linked_list reduce using rule 139 (expr -> expr operator_equals expr .)
    type_deque      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_heap       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_fibonacci_heap reduce using rule 139 (expr -> expr operator_equals expr .)
    type_tree       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_trie       reduce using rule 139 (expr -> expr operator_equals expr .)
    type_stack      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_queue      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_binary_search_tree reduce using rule 139 (expr -> expr operator_equals expr .)
    type_bitset     reduce using rule 139 (expr -> expr operator_equals expr .)
    type_set        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_map        reduce using rule 139 (expr -> expr operator_equals expr .)
    type_range      reduce using rule 139 (expr -> expr operator_equals expr .)
    type_bad_struct reduce using rule 139 (expr -> expr operator_equals expr .)
    type_bad_struct2 reduce using rule 139 (expr -> expr operator_equals expr .)
    lambda          reduce using rule 139 (expr -> expr operator_equals expr .)
    {               reduce using rule 139 (expr -> expr operator_equals expr .)
    ]               reduce using rule 139 (expr -> expr operator_equals expr .)
    :               reduce using rule 139 (expr -> expr operator_equals expr .)
    ,               reduce using rule 139 (expr -> expr operator_equals expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_sub    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_mul    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_div    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_trudiv [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_pow    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_join   [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_split  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitand [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitor  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitxor [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_incr   [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_decr   [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_outer  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_rotate [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_apply  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_compose [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_over   [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_map    [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_goodname [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_scan   [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_reduc  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_bitnot [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_inner  [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_reverse [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 139 (expr -> expr operator_equals expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 323

    (140) expr -> expr operator_not_equals expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_or     reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_xor    reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_contains reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_less_than reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_less_than_equals reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_greater_than reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_greater_than_equals reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_equals reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_not_equals reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_smallest reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_greatest reduce using rule 140 (expr -> expr operator_not_equals expr .)
    [               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_not    reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_s_combinator reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_s_combinator_2 reduce using rule 140 (expr -> expr operator_not_equals expr .)
    NEWLINE         reduce using rule 140 (expr -> expr operator_not_equals expr .)
    $end            reduce using rule 140 (expr -> expr operator_not_equals expr .)
    }               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    )               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    (               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    VAR             reduce using rule 140 (expr -> expr operator_not_equals expr .)
    FLOAT           reduce using rule 140 (expr -> expr operator_not_equals expr .)
    NUM             reduce using rule 140 (expr -> expr operator_not_equals expr .)
    STRING_3SQ      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    STRING_3DQ      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    STRING_SQ       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    STRING_DQ       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    true            reduce using rule 140 (expr -> expr operator_not_equals expr .)
    Null            reduce using rule 140 (expr -> expr operator_not_equals expr .)
    false           reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_type       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_num        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_bool       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_any        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_u64        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_u32        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_u16        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_u8         reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_i64        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_i32        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_i16        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_i8         reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_f32        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_f64        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_str        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_list       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_tuple      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_array      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_vector     reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_dict       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_generator  reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_linked_list reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_doubly_linked_list reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_deque      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_heap       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_fibonacci_heap reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_tree       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_trie       reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_stack      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_queue      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_binary_search_tree reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_bitset     reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_set        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_map        reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_range      reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_bad_struct reduce using rule 140 (expr -> expr operator_not_equals expr .)
    type_bad_struct2 reduce using rule 140 (expr -> expr operator_not_equals expr .)
    lambda          reduce using rule 140 (expr -> expr operator_not_equals expr .)
    {               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    ]               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    :               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    ,               reduce using rule 140 (expr -> expr operator_not_equals expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_sub    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_mul    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_div    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_trudiv [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_pow    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_join   [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_split  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitand [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitor  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitxor [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftleft [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitshiftright [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_incr   [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_decr   [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_outer  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_rotate [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_apply  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_compose [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_over   [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_map    [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_scan   [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_reduc  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_bitnot [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_inner  [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_reverse [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_incr [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_sorted_decr [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_goodname2 [ reduce using rule 140 (expr -> expr operator_not_equals expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 324

    (141) expr -> expr operator_smallest expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_or     reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_xor    reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_contains reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_less_than reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_less_than_equals reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_greater_than reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_greater_than_equals reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_equals reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_not_equals reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_smallest reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_greatest reduce using rule 141 (expr -> expr operator_smallest expr .)
    [               reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_not    reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_s_combinator reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_s_combinator_2 reduce using rule 141 (expr -> expr operator_smallest expr .)
    NEWLINE         reduce using rule 141 (expr -> expr operator_smallest expr .)
    $end            reduce using rule 141 (expr -> expr operator_smallest expr .)
    }               reduce using rule 141 (expr -> expr operator_smallest expr .)
    )               reduce using rule 141 (expr -> expr operator_smallest expr .)
    (               reduce using rule 141 (expr -> expr operator_smallest expr .)
    VAR             reduce using rule 141 (expr -> expr operator_smallest expr .)
    FLOAT           reduce using rule 141 (expr -> expr operator_smallest expr .)
    NUM             reduce using rule 141 (expr -> expr operator_smallest expr .)
    STRING_3SQ      reduce using rule 141 (expr -> expr operator_smallest expr .)
    STRING_3DQ      reduce using rule 141 (expr -> expr operator_smallest expr .)
    STRING_SQ       reduce using rule 141 (expr -> expr operator_smallest expr .)
    STRING_DQ       reduce using rule 141 (expr -> expr operator_smallest expr .)
    true            reduce using rule 141 (expr -> expr operator_smallest expr .)
    Null            reduce using rule 141 (expr -> expr operator_smallest expr .)
    false           reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_type       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_num        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_bool       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_any        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_u64        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_u32        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_u16        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_u8         reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_i64        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_i32        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_i16        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_i8         reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_f32        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_f64        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_str        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_list       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_tuple      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_array      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_vector     reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_dict       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_generator  reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_linked_list reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_doubly_linked_list reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_deque      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_heap       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_fibonacci_heap reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_tree       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_trie       reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_stack      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_queue      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_binary_search_tree reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_bitset     reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_set        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_map        reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_range      reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_bad_struct reduce using rule 141 (expr -> expr operator_smallest expr .)
    type_bad_struct2 reduce using rule 141 (expr -> expr operator_smallest expr .)
    lambda          reduce using rule 141 (expr -> expr operator_smallest expr .)
    {               reduce using rule 141 (expr -> expr operator_smallest expr .)
    ]               reduce using rule 141 (expr -> expr operator_smallest expr .)
    :               reduce using rule 141 (expr -> expr operator_smallest expr .)
    ,               reduce using rule 141 (expr -> expr operator_smallest expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_sub    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_mul    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_div    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_trudiv [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_pow    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_join   [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_split  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitand [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitor  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitxor [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitshiftright [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_incr   [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_decr   [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_outer  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_rotate [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_apply  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_compose [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_over   [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_map    [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_scan   [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_reduc  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_bitnot [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_inner  [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_reverse [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_incr [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_sorted_decr [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_goodname2 [ reduce using rule 141 (expr -> expr operator_smallest expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 325

    (142) expr -> expr operator_greatest expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_or     reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_xor    reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_contains reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_less_than reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_less_than_equals reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_greater_than reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_greater_than_equals reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_equals reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_not_equals reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_smallest reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_greatest reduce using rule 142 (expr -> expr operator_greatest expr .)
    [               reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_not    reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_s_combinator reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_s_combinator_2 reduce using rule 142 (expr -> expr operator_greatest expr .)
    NEWLINE         reduce using rule 142 (expr -> expr operator_greatest expr .)
    $end            reduce using rule 142 (expr -> expr operator_greatest expr .)
    }               reduce using rule 142 (expr -> expr operator_greatest expr .)
    )               reduce using rule 142 (expr -> expr operator_greatest expr .)
    (               reduce using rule 142 (expr -> expr operator_greatest expr .)
    VAR             reduce using rule 142 (expr -> expr operator_greatest expr .)
    FLOAT           reduce using rule 142 (expr -> expr operator_greatest expr .)
    NUM             reduce using rule 142 (expr -> expr operator_greatest expr .)
    STRING_3SQ      reduce using rule 142 (expr -> expr operator_greatest expr .)
    STRING_3DQ      reduce using rule 142 (expr -> expr operator_greatest expr .)
    STRING_SQ       reduce using rule 142 (expr -> expr operator_greatest expr .)
    STRING_DQ       reduce using rule 142 (expr -> expr operator_greatest expr .)
    true            reduce using rule 142 (expr -> expr operator_greatest expr .)
    Null            reduce using rule 142 (expr -> expr operator_greatest expr .)
    false           reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_type       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_num        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_bool       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_any        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_u64        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_u32        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_u16        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_u8         reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_i64        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_i32        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_i16        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_i8         reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_f32        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_f64        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_str        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_list       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_tuple      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_array      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_vector     reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_dict       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_generator  reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_linked_list reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_doubly_linked_list reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_deque      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_heap       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_fibonacci_heap reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_tree       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_trie       reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_stack      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_queue      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_binary_search_tree reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_bitset     reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_set        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_map        reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_range      reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_bad_struct reduce using rule 142 (expr -> expr operator_greatest expr .)
    type_bad_struct2 reduce using rule 142 (expr -> expr operator_greatest expr .)
    lambda          reduce using rule 142 (expr -> expr operator_greatest expr .)
    {               reduce using rule 142 (expr -> expr operator_greatest expr .)
    ]               reduce using rule 142 (expr -> expr operator_greatest expr .)
    :               reduce using rule 142 (expr -> expr operator_greatest expr .)
    ,               reduce using rule 142 (expr -> expr operator_greatest expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_sub    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_mul    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_div    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_trudiv [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_pow    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_join   [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_split  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitand [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitor  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitxor [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftleft [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitshiftright [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_incr   [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_decr   [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_outer  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_rotate [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_apply  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_compose [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_over   [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_map    [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_scan   [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_reduc  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_bitnot [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_inner  [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_reverse [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_incr [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_sorted_decr [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_goodname2 [ reduce using rule 142 (expr -> expr operator_greatest expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 326

    (143) expr -> expr operator_goodname expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_sub    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_mul    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_div    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_trudiv reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_pow    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_join   reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_split  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitand reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitor  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitxor reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitshiftleft reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitshiftright reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_and    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_or     reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_xor    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_contains reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_incr   reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_decr   reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_outer  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_rotate reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_apply  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_less_than reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_less_than_equals reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_greater_than reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_greater_than_equals reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_equals reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_not_equals reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_smallest reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_greatest reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_goodname reduce using rule 143 (expr -> expr operator_goodname expr .)
    [               reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_scan   reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_reduc  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_bitnot reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_not    reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_inner  reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_reverse reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_sorted_incr reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_sorted_decr reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_s_combinator reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_s_combinator_2 reduce using rule 143 (expr -> expr operator_goodname expr .)
    NEWLINE         reduce using rule 143 (expr -> expr operator_goodname expr .)
    $end            reduce using rule 143 (expr -> expr operator_goodname expr .)
    }               reduce using rule 143 (expr -> expr operator_goodname expr .)
    )               reduce using rule 143 (expr -> expr operator_goodname expr .)
    (               reduce using rule 143 (expr -> expr operator_goodname expr .)
    VAR             reduce using rule 143 (expr -> expr operator_goodname expr .)
    FLOAT           reduce using rule 143 (expr -> expr operator_goodname expr .)
    NUM             reduce using rule 143 (expr -> expr operator_goodname expr .)
    STRING_3SQ      reduce using rule 143 (expr -> expr operator_goodname expr .)
    STRING_3DQ      reduce using rule 143 (expr -> expr operator_goodname expr .)
    STRING_SQ       reduce using rule 143 (expr -> expr operator_goodname expr .)
    STRING_DQ       reduce using rule 143 (expr -> expr operator_goodname expr .)
    true            reduce using rule 143 (expr -> expr operator_goodname expr .)
    Null            reduce using rule 143 (expr -> expr operator_goodname expr .)
    false           reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_type       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_num        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_bool       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_any        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_u64        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_u32        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_u16        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_u8         reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_i64        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_i32        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_i16        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_i8         reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_f32        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_f64        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_str        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_list       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_tuple      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_array      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_vector     reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_dict       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_generator  reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_linked_list reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_doubly_linked_list reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_deque      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_heap       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_fibonacci_heap reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_tree       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_trie       reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_stack      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_queue      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_binary_search_tree reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_bitset     reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_set        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_map        reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_range      reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_bad_struct reduce using rule 143 (expr -> expr operator_goodname expr .)
    type_bad_struct2 reduce using rule 143 (expr -> expr operator_goodname expr .)
    lambda          reduce using rule 143 (expr -> expr operator_goodname expr .)
    {               reduce using rule 143 (expr -> expr operator_goodname expr .)
    ]               reduce using rule 143 (expr -> expr operator_goodname expr .)
    :               reduce using rule 143 (expr -> expr operator_goodname expr .)
    ,               reduce using rule 143 (expr -> expr operator_goodname expr .)
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname2 shift and go to state 183

  ! operator_compose [ reduce using rule 143 (expr -> expr operator_goodname expr .) ]
  ! operator_over   [ reduce using rule 143 (expr -> expr operator_goodname expr .) ]
  ! operator_map    [ reduce using rule 143 (expr -> expr operator_goodname expr .) ]
  ! operator_goodname2 [ reduce using rule 143 (expr -> expr operator_goodname expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_incr   [ shift and go to state 157 ]
  ! operator_decr   [ shift and go to state 158 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! operator_goodname [ shift and go to state 174 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_bitnot [ shift and go to state 176 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_reverse [ shift and go to state 178 ]
  ! operator_sorted_incr [ shift and go to state 179 ]
  ! operator_sorted_decr [ shift and go to state 180 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 327

    (55) item -> expr [ expr . ]
    (56) simple_slice -> expr [ expr . : expr ]
    (57) full_slice -> expr [ expr . : expr : expr ]
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    ]               shift and go to state 388
    :               shift and go to state 389
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 328

    (71) block_stmt -> block_decl { stmts . }
    (7) stmts -> stmts . newline stmt
    (4) newline -> . NEWLINE
    (5) newline -> . NEWLINE newline

    }               shift and go to state 390
    NEWLINE         shift and go to state 5

    newline                        shift and go to state 137

state 329

    (72) block_stmt -> block_decl { } .

    NEWLINE         reduce using rule 72 (block_stmt -> block_decl { } .)
    $end            reduce using rule 72 (block_stmt -> block_decl { } .)
    }               reduce using rule 72 (block_stmt -> block_decl { } .)


state 330

    (73) block_stmt -> block_decl { newline . }

    }               shift and go to state 391


state 331

    (65) assign_stmt -> item = expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 65 (assign_stmt -> item = expr .)
    $end            reduce using rule 65 (assign_stmt -> item = expr .)
    }               reduce using rule 65 (assign_stmt -> item = expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 332

    (66) assign_stmt -> simple_slice = expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    $end            reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    }               reduce using rule 66 (assign_stmt -> simple_slice = expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 333

    (67) assign_stmt -> full_slice = expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 67 (assign_stmt -> full_slice = expr .)
    $end            reduce using rule 67 (assign_stmt -> full_slice = expr .)
    }               reduce using rule 67 (assign_stmt -> full_slice = expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 334

    (101) expr -> ( expr ) .

    operator_add    reduce using rule 101 (expr -> ( expr ) .)
    operator_sub    reduce using rule 101 (expr -> ( expr ) .)
    operator_mul    reduce using rule 101 (expr -> ( expr ) .)
    operator_div    reduce using rule 101 (expr -> ( expr ) .)
    operator_trudiv reduce using rule 101 (expr -> ( expr ) .)
    operator_pow    reduce using rule 101 (expr -> ( expr ) .)
    operator_join   reduce using rule 101 (expr -> ( expr ) .)
    operator_split  reduce using rule 101 (expr -> ( expr ) .)
    operator_bitand reduce using rule 101 (expr -> ( expr ) .)
    operator_bitor  reduce using rule 101 (expr -> ( expr ) .)
    operator_bitxor reduce using rule 101 (expr -> ( expr ) .)
    operator_bitshiftleft reduce using rule 101 (expr -> ( expr ) .)
    operator_bitshiftright reduce using rule 101 (expr -> ( expr ) .)
    operator_and    reduce using rule 101 (expr -> ( expr ) .)
    operator_or     reduce using rule 101 (expr -> ( expr ) .)
    operator_xor    reduce using rule 101 (expr -> ( expr ) .)
    operator_contains reduce using rule 101 (expr -> ( expr ) .)
    operator_incr   reduce using rule 101 (expr -> ( expr ) .)
    operator_decr   reduce using rule 101 (expr -> ( expr ) .)
    operator_outer  reduce using rule 101 (expr -> ( expr ) .)
    operator_rotate reduce using rule 101 (expr -> ( expr ) .)
    operator_apply  reduce using rule 101 (expr -> ( expr ) .)
    operator_compose reduce using rule 101 (expr -> ( expr ) .)
    operator_over   reduce using rule 101 (expr -> ( expr ) .)
    operator_map    reduce using rule 101 (expr -> ( expr ) .)
    operator_less_than reduce using rule 101 (expr -> ( expr ) .)
    operator_less_than_equals reduce using rule 101 (expr -> ( expr ) .)
    operator_greater_than reduce using rule 101 (expr -> ( expr ) .)
    operator_greater_than_equals reduce using rule 101 (expr -> ( expr ) .)
    operator_equals reduce using rule 101 (expr -> ( expr ) .)
    operator_not_equals reduce using rule 101 (expr -> ( expr ) .)
    operator_smallest reduce using rule 101 (expr -> ( expr ) .)
    operator_greatest reduce using rule 101 (expr -> ( expr ) .)
    operator_goodname reduce using rule 101 (expr -> ( expr ) .)
    [               reduce using rule 101 (expr -> ( expr ) .)
    operator_scan   reduce using rule 101 (expr -> ( expr ) .)
    operator_reduc  reduce using rule 101 (expr -> ( expr ) .)
    operator_bitnot reduce using rule 101 (expr -> ( expr ) .)
    operator_not    reduce using rule 101 (expr -> ( expr ) .)
    operator_inner  reduce using rule 101 (expr -> ( expr ) .)
    operator_reverse reduce using rule 101 (expr -> ( expr ) .)
    operator_sorted_incr reduce using rule 101 (expr -> ( expr ) .)
    operator_sorted_decr reduce using rule 101 (expr -> ( expr ) .)
    operator_s_combinator reduce using rule 101 (expr -> ( expr ) .)
    operator_s_combinator_2 reduce using rule 101 (expr -> ( expr ) .)
    operator_goodname2 reduce using rule 101 (expr -> ( expr ) .)
    NEWLINE         reduce using rule 101 (expr -> ( expr ) .)
    $end            reduce using rule 101 (expr -> ( expr ) .)
    }               reduce using rule 101 (expr -> ( expr ) .)
    )               reduce using rule 101 (expr -> ( expr ) .)
    (               reduce using rule 101 (expr -> ( expr ) .)
    VAR             reduce using rule 101 (expr -> ( expr ) .)
    FLOAT           reduce using rule 101 (expr -> ( expr ) .)
    NUM             reduce using rule 101 (expr -> ( expr ) .)
    STRING_3SQ      reduce using rule 101 (expr -> ( expr ) .)
    STRING_3DQ      reduce using rule 101 (expr -> ( expr ) .)
    STRING_SQ       reduce using rule 101 (expr -> ( expr ) .)
    STRING_DQ       reduce using rule 101 (expr -> ( expr ) .)
    true            reduce using rule 101 (expr -> ( expr ) .)
    Null            reduce using rule 101 (expr -> ( expr ) .)
    false           reduce using rule 101 (expr -> ( expr ) .)
    type_type       reduce using rule 101 (expr -> ( expr ) .)
    type_num        reduce using rule 101 (expr -> ( expr ) .)
    type_bool       reduce using rule 101 (expr -> ( expr ) .)
    type_any        reduce using rule 101 (expr -> ( expr ) .)
    type_u64        reduce using rule 101 (expr -> ( expr ) .)
    type_u32        reduce using rule 101 (expr -> ( expr ) .)
    type_u16        reduce using rule 101 (expr -> ( expr ) .)
    type_u8         reduce using rule 101 (expr -> ( expr ) .)
    type_i64        reduce using rule 101 (expr -> ( expr ) .)
    type_i32        reduce using rule 101 (expr -> ( expr ) .)
    type_i16        reduce using rule 101 (expr -> ( expr ) .)
    type_i8         reduce using rule 101 (expr -> ( expr ) .)
    type_f32        reduce using rule 101 (expr -> ( expr ) .)
    type_f64        reduce using rule 101 (expr -> ( expr ) .)
    type_str        reduce using rule 101 (expr -> ( expr ) .)
    type_list       reduce using rule 101 (expr -> ( expr ) .)
    type_tuple      reduce using rule 101 (expr -> ( expr ) .)
    type_array      reduce using rule 101 (expr -> ( expr ) .)
    type_vector     reduce using rule 101 (expr -> ( expr ) .)
    type_dict       reduce using rule 101 (expr -> ( expr ) .)
    type_generator  reduce using rule 101 (expr -> ( expr ) .)
    type_linked_list reduce using rule 101 (expr -> ( expr ) .)
    type_doubly_linked_list reduce using rule 101 (expr -> ( expr ) .)
    type_deque      reduce using rule 101 (expr -> ( expr ) .)
    type_heap       reduce using rule 101 (expr -> ( expr ) .)
    type_fibonacci_heap reduce using rule 101 (expr -> ( expr ) .)
    type_tree       reduce using rule 101 (expr -> ( expr ) .)
    type_trie       reduce using rule 101 (expr -> ( expr ) .)
    type_stack      reduce using rule 101 (expr -> ( expr ) .)
    type_queue      reduce using rule 101 (expr -> ( expr ) .)
    type_binary_search_tree reduce using rule 101 (expr -> ( expr ) .)
    type_bitset     reduce using rule 101 (expr -> ( expr ) .)
    type_set        reduce using rule 101 (expr -> ( expr ) .)
    type_map        reduce using rule 101 (expr -> ( expr ) .)
    type_range      reduce using rule 101 (expr -> ( expr ) .)
    type_bad_struct reduce using rule 101 (expr -> ( expr ) .)
    type_bad_struct2 reduce using rule 101 (expr -> ( expr ) .)
    lambda          reduce using rule 101 (expr -> ( expr ) .)
    {               reduce using rule 101 (expr -> ( expr ) .)
    ]               reduce using rule 101 (expr -> ( expr ) .)
    :               reduce using rule 101 (expr -> ( expr ) .)
    ,               reduce using rule 101 (expr -> ( expr ) .)


state 335

    (110) expr -> OPERATOR operator_scan expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_sub    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_mul    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_div    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_trudiv reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_pow    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_join   reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_split  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_bitand reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_bitor  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_bitxor reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_bitshiftleft reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_bitshiftright reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_and    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_or     reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_xor    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_contains reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_outer  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_rotate reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_apply  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_less_than reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_less_than_equals reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_greater_than reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_greater_than_equals reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_equals reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_not_equals reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_smallest reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_greatest reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    [               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_scan   reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_reduc  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_not    reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_inner  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_s_combinator reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_s_combinator_2 reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    NEWLINE         reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    $end            reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    }               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    )               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    (               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    VAR             reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    FLOAT           reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    NUM             reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    STRING_3SQ      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    STRING_3DQ      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    STRING_SQ       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    STRING_DQ       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    true            reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    Null            reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    false           reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_type       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_num        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_bool       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_any        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_u64        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_u32        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_u16        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_u8         reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_i64        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_i32        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_i16        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_i8         reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_f32        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_f64        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_str        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_list       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_tuple      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_array      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_vector     reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_dict       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_generator  reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_linked_list reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_doubly_linked_list reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_deque      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_heap       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_fibonacci_heap reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_tree       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_trie       reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_stack      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_queue      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_binary_search_tree reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_bitset     reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_set        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_map        reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_range      reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_bad_struct reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    type_bad_struct2 reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    lambda          reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    {               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    ]               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    :               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    ,               reduce using rule 110 (expr -> OPERATOR operator_scan expr .)
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_incr   [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_decr   [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_compose [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_over   [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_map    [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_goodname [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_bitnot [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_reverse [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_sorted_incr [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_sorted_decr [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_goodname2 [ reduce using rule 110 (expr -> OPERATOR operator_scan expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 336

    (111) expr -> OPERATOR operator_reduc expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_sub    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_mul    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_div    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_trudiv reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_pow    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_join   reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_split  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_bitand reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_bitor  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_bitxor reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_bitshiftleft reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_bitshiftright reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_and    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_or     reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_xor    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_contains reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_outer  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_rotate reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_apply  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_less_than reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_less_than_equals reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_greater_than reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_greater_than_equals reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_equals reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_not_equals reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_smallest reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_greatest reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    [               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_scan   reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_reduc  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_not    reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_inner  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_s_combinator reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_s_combinator_2 reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    NEWLINE         reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    $end            reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    }               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    )               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    (               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    VAR             reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    FLOAT           reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    NUM             reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    STRING_3SQ      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    STRING_3DQ      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    STRING_SQ       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    STRING_DQ       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    true            reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    Null            reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    false           reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_type       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_num        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_bool       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_any        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_u64        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_u32        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_u16        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_u8         reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_i64        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_i32        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_i16        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_i8         reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_f32        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_f64        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_str        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_list       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_tuple      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_array      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_vector     reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_dict       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_generator  reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_linked_list reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_doubly_linked_list reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_deque      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_heap       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_fibonacci_heap reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_tree       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_trie       reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_stack      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_queue      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_binary_search_tree reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_bitset     reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_set        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_map        reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_range      reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_bad_struct reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    type_bad_struct2 reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    lambda          reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    {               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    ]               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    :               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    ,               reduce using rule 111 (expr -> OPERATOR operator_reduc expr .)
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_incr   [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_decr   [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_compose [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_over   [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_map    [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_goodname [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_bitnot [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_reverse [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_sorted_incr [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_sorted_decr [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_goodname2 [ reduce using rule 111 (expr -> OPERATOR operator_reduc expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_mul    [ shift and go to state 142 ]
  ! operator_div    [ shift and go to state 143 ]
  ! operator_trudiv [ shift and go to state 144 ]
  ! operator_pow    [ shift and go to state 145 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_rotate [ shift and go to state 161 ]
  ! operator_apply  [ shift and go to state 162 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_scan   [ shift and go to state 31 ]
  ! operator_reduc  [ shift and go to state 32 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 337

    (144) expr -> operator_s_combinator expr expr . expr
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_inner  shift and go to state 47
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 392
    OPERATOR                       shift and go to state 338
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 338

    (126) expr -> expr OPERATOR . operator_inner OPERATOR expr
    (110) expr -> OPERATOR . operator_scan expr
    (111) expr -> OPERATOR . operator_reduc expr

    operator_inner  shift and go to state 313
    operator_scan   shift and go to state 195
    operator_reduc  shift and go to state 196


state 339

    (145) expr -> operator_s_combinator_2 OPERATOR OPERATOR . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    OPERATOR                       shift and go to state 30
    expr                           shift and go to state 393
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 340

    (185) return_val -> VAR ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 394
    ,               shift and go to state 395


state 341

    (191) arguments -> expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    )               reduce using rule 191 (arguments -> expr .)
    ,               reduce using rule 191 (arguments -> expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 342

    (193) arguments -> empty .

    )               reduce using rule 193 (arguments -> empty .)
    ,               reduce using rule 193 (arguments -> empty .)


state 343

    (70) comma_separated_names -> VAR , comma_separated_names .

    =               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    NEWLINE         reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    $end            reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    }               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    :               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    operator_contains reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    ;               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)
    )               reduce using rule 70 (comma_separated_names -> VAR , comma_separated_names .)


state 344

    (64) assign_stmt -> comma_separated_names = expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    NEWLINE         reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    $end            reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    }               reduce using rule 64 (assign_stmt -> comma_separated_names = expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 345

    (148) return_val -> type_type ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 396
    ,               shift and go to state 395


state 346

    (149) return_val -> type_num ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 397
    ,               shift and go to state 395


state 347

    (150) return_val -> type_bool ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 398
    ,               shift and go to state 395


state 348

    (151) return_val -> type_any ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 399
    ,               shift and go to state 395


state 349

    (152) return_val -> type_u64 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 400
    ,               shift and go to state 395


state 350

    (153) return_val -> type_u32 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 401
    ,               shift and go to state 395


state 351

    (154) return_val -> type_u16 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 402
    ,               shift and go to state 395


state 352

    (155) return_val -> type_u8 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 403
    ,               shift and go to state 395


state 353

    (156) return_val -> type_i64 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 404
    ,               shift and go to state 395


state 354

    (157) return_val -> type_i32 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 405
    ,               shift and go to state 395


state 355

    (158) return_val -> type_i16 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 406
    ,               shift and go to state 395


state 356

    (159) return_val -> type_i8 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 407
    ,               shift and go to state 395


state 357

    (160) return_val -> type_f32 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 408
    ,               shift and go to state 395


state 358

    (161) return_val -> type_f64 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 409
    ,               shift and go to state 395


state 359

    (162) return_val -> type_str ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 410
    ,               shift and go to state 395


state 360

    (163) return_val -> type_list ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 411
    ,               shift and go to state 395


state 361

    (164) return_val -> type_tuple ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 412
    ,               shift and go to state 395


state 362

    (165) return_val -> type_array ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 413
    ,               shift and go to state 395


state 363

    (166) return_val -> type_vector ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 414
    ,               shift and go to state 395


state 364

    (167) return_val -> type_dict ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 415
    ,               shift and go to state 395


state 365

    (168) return_val -> type_generator ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 416
    ,               shift and go to state 395


state 366

    (169) return_val -> type_linked_list ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 417
    ,               shift and go to state 395


state 367

    (170) return_val -> type_doubly_linked_list ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 418
    ,               shift and go to state 395


state 368

    (171) return_val -> type_deque ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 419
    ,               shift and go to state 395


state 369

    (172) return_val -> type_heap ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 420
    ,               shift and go to state 395


state 370

    (173) return_val -> type_fibonacci_heap ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 421
    ,               shift and go to state 395


state 371

    (174) return_val -> type_tree ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 422
    ,               shift and go to state 395


state 372

    (175) return_val -> type_trie ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 423
    ,               shift and go to state 395


state 373

    (176) return_val -> type_stack ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 424
    ,               shift and go to state 395


state 374

    (177) return_val -> type_queue ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 425
    ,               shift and go to state 395


state 375

    (178) return_val -> type_binary_search_tree ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 426
    ,               shift and go to state 395


state 376

    (179) return_val -> type_bitset ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 427
    ,               shift and go to state 395


state 377

    (180) return_val -> type_set ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 428
    ,               shift and go to state 395


state 378

    (181) return_val -> type_map ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 429
    ,               shift and go to state 395


state 379

    (182) return_val -> type_range ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 430
    ,               shift and go to state 395


state 380

    (183) return_val -> type_bad_struct ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 431
    ,               shift and go to state 395


state 381

    (184) return_val -> type_bad_struct2 ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 432
    ,               shift and go to state 395


state 382

    (61) lambda_decl -> lambda comma_separated_names : . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 433
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 383

    (82) for_decl -> for comma_separated_names operator_contains . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 434
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 384

    (85) operator_decl -> operator ( arguments . )
    (192) arguments -> arguments . , arguments

    )               shift and go to state 435
    ,               shift and go to state 395


state 385

    (88) func_decl -> func VAR ( . def_arguments )
    (89) def_arguments -> . declaration_stmt
    (90) def_arguments -> . empty
    (91) def_arguments -> . declaration_stmt ; def_arguments
    (68) declaration_stmt -> . TYPE comma_separated_names
    (190) empty -> .
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    )               reduce using rule 190 (empty -> .)
    type_type       shift and go to state 254
    type_num        shift and go to state 255
    type_bool       shift and go to state 256
    type_any        shift and go to state 257
    type_u64        shift and go to state 258
    type_u32        shift and go to state 259
    type_u16        shift and go to state 260
    type_u8         shift and go to state 261
    type_i64        shift and go to state 262
    type_i32        shift and go to state 263
    type_i16        shift and go to state 264
    type_i8         shift and go to state 265
    type_f32        shift and go to state 266
    type_f64        shift and go to state 267
    type_str        shift and go to state 268
    type_list       shift and go to state 269
    type_tuple      shift and go to state 270
    type_array      shift and go to state 271
    type_vector     shift and go to state 272
    type_dict       shift and go to state 273
    type_generator  shift and go to state 274
    type_linked_list shift and go to state 275
    type_doubly_linked_list shift and go to state 276
    type_deque      shift and go to state 277
    type_heap       shift and go to state 278
    type_fibonacci_heap shift and go to state 279
    type_tree       shift and go to state 280
    type_trie       shift and go to state 281
    type_stack      shift and go to state 282
    type_queue      shift and go to state 283
    type_binary_search_tree shift and go to state 284
    type_bitset     shift and go to state 285
    type_set        shift and go to state 286
    type_map        shift and go to state 287
    type_range      shift and go to state 288
    type_bad_struct shift and go to state 289
    type_bad_struct2 shift and go to state 290

    def_arguments                  shift and go to state 436
    declaration_stmt               shift and go to state 437
    empty                          shift and go to state 438
    TYPE                           shift and go to state 439

state 386

    (125) expr -> expr operator_outer OPERATOR expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_sub    reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_join   reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_split  reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitand reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitor  reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitxor reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitshiftleft reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_bitshiftright reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_and    reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_or     reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_xor    reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_contains reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_outer  reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_less_than reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_less_than_equals reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_greater_than reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_greater_than_equals reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_equals reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_not_equals reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_smallest reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_greatest reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    [               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_not    reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_inner  reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_s_combinator reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_s_combinator_2 reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    NEWLINE         reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    $end            reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    }               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    )               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    (               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    VAR             reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    FLOAT           reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    NUM             reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    STRING_3SQ      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    STRING_3DQ      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    STRING_SQ       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    STRING_DQ       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    true            reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    Null            reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    false           reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_type       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_num        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_bool       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_any        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_u64        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_u32        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_u16        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_u8         reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_i64        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_i32        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_i16        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_i8         reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_f32        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_f64        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_str        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_list       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_tuple      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_array      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_vector     reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_dict       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_generator  reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_linked_list reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_doubly_linked_list reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_deque      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_heap       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_fibonacci_heap reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_tree       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_trie       reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_stack      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_queue      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_binary_search_tree reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_bitset     reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_set        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_map        reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_range      reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_bad_struct reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    type_bad_struct2 reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    lambda          reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    {               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    ]               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    :               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    ,               reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_div    [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_trudiv [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_pow    [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_incr   [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_decr   [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_rotate [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_apply  [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_compose [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_over   [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_map    [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_goodname [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_scan   [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_reduc  [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_bitnot [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_reverse [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_sorted_incr [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_sorted_decr [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_goodname2 [ reduce using rule 125 (expr -> expr operator_outer OPERATOR expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 387

    (126) expr -> expr OPERATOR operator_inner OPERATOR . expr
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 440
    OPERATOR                       shift and go to state 30
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 388

    (55) item -> expr [ expr ] .

    =               reduce using rule 55 (item -> expr [ expr ] .)
    operator_add    reduce using rule 55 (item -> expr [ expr ] .)
    operator_sub    reduce using rule 55 (item -> expr [ expr ] .)
    operator_mul    reduce using rule 55 (item -> expr [ expr ] .)
    operator_div    reduce using rule 55 (item -> expr [ expr ] .)
    operator_trudiv reduce using rule 55 (item -> expr [ expr ] .)
    operator_pow    reduce using rule 55 (item -> expr [ expr ] .)
    operator_join   reduce using rule 55 (item -> expr [ expr ] .)
    operator_split  reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitand reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitor  reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitxor reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitshiftleft reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitshiftright reduce using rule 55 (item -> expr [ expr ] .)
    operator_and    reduce using rule 55 (item -> expr [ expr ] .)
    operator_or     reduce using rule 55 (item -> expr [ expr ] .)
    operator_xor    reduce using rule 55 (item -> expr [ expr ] .)
    operator_contains reduce using rule 55 (item -> expr [ expr ] .)
    operator_incr   reduce using rule 55 (item -> expr [ expr ] .)
    operator_decr   reduce using rule 55 (item -> expr [ expr ] .)
    operator_outer  reduce using rule 55 (item -> expr [ expr ] .)
    operator_rotate reduce using rule 55 (item -> expr [ expr ] .)
    operator_apply  reduce using rule 55 (item -> expr [ expr ] .)
    operator_compose reduce using rule 55 (item -> expr [ expr ] .)
    operator_over   reduce using rule 55 (item -> expr [ expr ] .)
    operator_map    reduce using rule 55 (item -> expr [ expr ] .)
    operator_less_than reduce using rule 55 (item -> expr [ expr ] .)
    operator_less_than_equals reduce using rule 55 (item -> expr [ expr ] .)
    operator_greater_than reduce using rule 55 (item -> expr [ expr ] .)
    operator_greater_than_equals reduce using rule 55 (item -> expr [ expr ] .)
    operator_equals reduce using rule 55 (item -> expr [ expr ] .)
    operator_not_equals reduce using rule 55 (item -> expr [ expr ] .)
    operator_smallest reduce using rule 55 (item -> expr [ expr ] .)
    operator_greatest reduce using rule 55 (item -> expr [ expr ] .)
    operator_goodname reduce using rule 55 (item -> expr [ expr ] .)
    [               reduce using rule 55 (item -> expr [ expr ] .)
    operator_scan   reduce using rule 55 (item -> expr [ expr ] .)
    operator_reduc  reduce using rule 55 (item -> expr [ expr ] .)
    operator_bitnot reduce using rule 55 (item -> expr [ expr ] .)
    operator_not    reduce using rule 55 (item -> expr [ expr ] .)
    operator_inner  reduce using rule 55 (item -> expr [ expr ] .)
    operator_reverse reduce using rule 55 (item -> expr [ expr ] .)
    operator_sorted_incr reduce using rule 55 (item -> expr [ expr ] .)
    operator_sorted_decr reduce using rule 55 (item -> expr [ expr ] .)
    operator_s_combinator reduce using rule 55 (item -> expr [ expr ] .)
    operator_s_combinator_2 reduce using rule 55 (item -> expr [ expr ] .)
    operator_goodname2 reduce using rule 55 (item -> expr [ expr ] .)
    NEWLINE         reduce using rule 55 (item -> expr [ expr ] .)
    $end            reduce using rule 55 (item -> expr [ expr ] .)
    }               reduce using rule 55 (item -> expr [ expr ] .)
    )               reduce using rule 55 (item -> expr [ expr ] .)
    (               reduce using rule 55 (item -> expr [ expr ] .)
    VAR             reduce using rule 55 (item -> expr [ expr ] .)
    FLOAT           reduce using rule 55 (item -> expr [ expr ] .)
    NUM             reduce using rule 55 (item -> expr [ expr ] .)
    STRING_3SQ      reduce using rule 55 (item -> expr [ expr ] .)
    STRING_3DQ      reduce using rule 55 (item -> expr [ expr ] .)
    STRING_SQ       reduce using rule 55 (item -> expr [ expr ] .)
    STRING_DQ       reduce using rule 55 (item -> expr [ expr ] .)
    true            reduce using rule 55 (item -> expr [ expr ] .)
    Null            reduce using rule 55 (item -> expr [ expr ] .)
    false           reduce using rule 55 (item -> expr [ expr ] .)
    type_type       reduce using rule 55 (item -> expr [ expr ] .)
    type_num        reduce using rule 55 (item -> expr [ expr ] .)
    type_bool       reduce using rule 55 (item -> expr [ expr ] .)
    type_any        reduce using rule 55 (item -> expr [ expr ] .)
    type_u64        reduce using rule 55 (item -> expr [ expr ] .)
    type_u32        reduce using rule 55 (item -> expr [ expr ] .)
    type_u16        reduce using rule 55 (item -> expr [ expr ] .)
    type_u8         reduce using rule 55 (item -> expr [ expr ] .)
    type_i64        reduce using rule 55 (item -> expr [ expr ] .)
    type_i32        reduce using rule 55 (item -> expr [ expr ] .)
    type_i16        reduce using rule 55 (item -> expr [ expr ] .)
    type_i8         reduce using rule 55 (item -> expr [ expr ] .)
    type_f32        reduce using rule 55 (item -> expr [ expr ] .)
    type_f64        reduce using rule 55 (item -> expr [ expr ] .)
    type_str        reduce using rule 55 (item -> expr [ expr ] .)
    type_list       reduce using rule 55 (item -> expr [ expr ] .)
    type_tuple      reduce using rule 55 (item -> expr [ expr ] .)
    type_array      reduce using rule 55 (item -> expr [ expr ] .)
    type_vector     reduce using rule 55 (item -> expr [ expr ] .)
    type_dict       reduce using rule 55 (item -> expr [ expr ] .)
    type_generator  reduce using rule 55 (item -> expr [ expr ] .)
    type_linked_list reduce using rule 55 (item -> expr [ expr ] .)
    type_doubly_linked_list reduce using rule 55 (item -> expr [ expr ] .)
    type_deque      reduce using rule 55 (item -> expr [ expr ] .)
    type_heap       reduce using rule 55 (item -> expr [ expr ] .)
    type_fibonacci_heap reduce using rule 55 (item -> expr [ expr ] .)
    type_tree       reduce using rule 55 (item -> expr [ expr ] .)
    type_trie       reduce using rule 55 (item -> expr [ expr ] .)
    type_stack      reduce using rule 55 (item -> expr [ expr ] .)
    type_queue      reduce using rule 55 (item -> expr [ expr ] .)
    type_binary_search_tree reduce using rule 55 (item -> expr [ expr ] .)
    type_bitset     reduce using rule 55 (item -> expr [ expr ] .)
    type_set        reduce using rule 55 (item -> expr [ expr ] .)
    type_map        reduce using rule 55 (item -> expr [ expr ] .)
    type_range      reduce using rule 55 (item -> expr [ expr ] .)
    type_bad_struct reduce using rule 55 (item -> expr [ expr ] .)
    type_bad_struct2 reduce using rule 55 (item -> expr [ expr ] .)
    lambda          reduce using rule 55 (item -> expr [ expr ] .)
    {               reduce using rule 55 (item -> expr [ expr ] .)
    ]               reduce using rule 55 (item -> expr [ expr ] .)
    :               reduce using rule 55 (item -> expr [ expr ] .)
    ,               reduce using rule 55 (item -> expr [ expr ] .)


state 389

    (56) simple_slice -> expr [ expr : . expr ]
    (57) full_slice -> expr [ expr : . expr : expr ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 441
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 390

    (71) block_stmt -> block_decl { stmts } .

    NEWLINE         reduce using rule 71 (block_stmt -> block_decl { stmts } .)
    $end            reduce using rule 71 (block_stmt -> block_decl { stmts } .)
    }               reduce using rule 71 (block_stmt -> block_decl { stmts } .)


state 391

    (73) block_stmt -> block_decl { newline } .

    NEWLINE         reduce using rule 73 (block_stmt -> block_decl { newline } .)
    $end            reduce using rule 73 (block_stmt -> block_decl { newline } .)
    }               reduce using rule 73 (block_stmt -> block_decl { newline } .)


state 392

    (144) expr -> operator_s_combinator expr expr expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_or     reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_xor    reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_contains reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_less_than reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_less_than_equals reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_greater_than reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_greater_than_equals reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_equals reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_not_equals reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_smallest reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_greatest reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    [               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_not    reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_s_combinator reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_s_combinator_2 reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    NEWLINE         reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    $end            reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    }               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    )               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    (               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    VAR             reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    FLOAT           reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    NUM             reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    STRING_3SQ      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    STRING_3DQ      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    STRING_SQ       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    STRING_DQ       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    true            reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    Null            reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    false           reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_type       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_num        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_bool       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_any        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_u64        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_u32        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_u16        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_u8         reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_i64        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_i32        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_i16        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_i8         reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_f32        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_f64        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_str        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_list       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_tuple      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_array      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_vector     reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_dict       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_generator  reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_linked_list reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_doubly_linked_list reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_deque      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_heap       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_fibonacci_heap reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_tree       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_trie       reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_stack      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_queue      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_binary_search_tree reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_bitset     reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_set        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_map        reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_range      reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_bad_struct reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    type_bad_struct2 reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    lambda          reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    {               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    ]               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    :               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    ,               reduce using rule 144 (expr -> operator_s_combinator expr expr expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sub    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_mul    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_div    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_trudiv [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_pow    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_join   [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_split  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitand [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitor  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitxor [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftleft [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitshiftright [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_incr   [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_decr   [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_outer  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_rotate [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_apply  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_compose [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_over   [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_map    [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_scan   [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reduc  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_bitnot [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_inner  [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_reverse [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_incr [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_sorted_decr [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_goodname2 [ reduce using rule 144 (expr -> operator_s_combinator expr expr expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 393

    (145) expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_and    reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_or     reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_xor    reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_contains reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_less_than reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_less_than_equals reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_greater_than reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_greater_than_equals reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_equals reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_not_equals reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_smallest reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_greatest reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    [               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_not    reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_s_combinator reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_s_combinator_2 reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    NEWLINE         reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    $end            reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    }               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    )               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    (               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    VAR             reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    FLOAT           reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    NUM             reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    STRING_3SQ      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    STRING_3DQ      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    STRING_SQ       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    STRING_DQ       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    true            reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    Null            reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    false           reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_type       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_num        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_bool       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_any        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_u64        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_u32        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_u16        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_u8         reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_i64        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_i32        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_i16        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_i8         reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_f32        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_f64        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_str        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_list       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_tuple      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_array      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_vector     reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_dict       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_generator  reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_linked_list reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_doubly_linked_list reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_deque      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_heap       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_fibonacci_heap reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_tree       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_trie       reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_stack      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_queue      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_binary_search_tree reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_bitset     reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_set        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_map        reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_range      reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_bad_struct reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    type_bad_struct2 reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    lambda          reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    {               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    ]               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    :               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    ,               reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_sub    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_mul    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_div    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_trudiv [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_pow    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_join   [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_split  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitand [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitor  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitxor [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitshiftleft [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitshiftright [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_incr   [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_decr   [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_outer  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_rotate [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_apply  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_compose [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_over   [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_map    [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_goodname [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_scan   [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_reduc  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_bitnot [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_inner  [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_reverse [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_sorted_incr [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_sorted_decr [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_goodname2 [ reduce using rule 145 (expr -> operator_s_combinator_2 OPERATOR OPERATOR expr .) ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 394

    (185) return_val -> VAR ( arguments ) .

    operator_add    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_sub    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_mul    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_div    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_trudiv reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_pow    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_join   reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_split  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitand reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitor  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitxor reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitshiftleft reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitshiftright reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_and    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_or     reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_xor    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_contains reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_incr   reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_decr   reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_outer  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_rotate reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_apply  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_compose reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_over   reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_map    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_less_than reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_less_than_equals reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_greater_than reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_greater_than_equals reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_equals reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_not_equals reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_smallest reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_greatest reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_goodname reduce using rule 185 (return_val -> VAR ( arguments ) .)
    [               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_scan   reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_reduc  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_bitnot reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_not    reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_inner  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_reverse reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_sorted_incr reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_sorted_decr reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_s_combinator reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_s_combinator_2 reduce using rule 185 (return_val -> VAR ( arguments ) .)
    operator_goodname2 reduce using rule 185 (return_val -> VAR ( arguments ) .)
    NEWLINE         reduce using rule 185 (return_val -> VAR ( arguments ) .)
    $end            reduce using rule 185 (return_val -> VAR ( arguments ) .)
    }               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    )               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    (               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    VAR             reduce using rule 185 (return_val -> VAR ( arguments ) .)
    FLOAT           reduce using rule 185 (return_val -> VAR ( arguments ) .)
    NUM             reduce using rule 185 (return_val -> VAR ( arguments ) .)
    STRING_3SQ      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    STRING_3DQ      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    STRING_SQ       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    STRING_DQ       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    true            reduce using rule 185 (return_val -> VAR ( arguments ) .)
    Null            reduce using rule 185 (return_val -> VAR ( arguments ) .)
    false           reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_type       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_num        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_bool       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_any        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_u64        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_u32        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_u16        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_u8         reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_i64        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_i32        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_i16        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_i8         reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_f32        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_f64        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_str        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_list       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_tuple      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_array      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_vector     reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_dict       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_generator  reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_linked_list reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_doubly_linked_list reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_deque      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_heap       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_fibonacci_heap reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_tree       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_trie       reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_stack      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_queue      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_binary_search_tree reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_bitset     reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_set        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_map        reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_range      reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_bad_struct reduce using rule 185 (return_val -> VAR ( arguments ) .)
    type_bad_struct2 reduce using rule 185 (return_val -> VAR ( arguments ) .)
    lambda          reduce using rule 185 (return_val -> VAR ( arguments ) .)
    {               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    ]               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    :               reduce using rule 185 (return_val -> VAR ( arguments ) .)
    ,               reduce using rule 185 (return_val -> VAR ( arguments ) .)


state 395

    (192) arguments -> arguments , . arguments
    (191) arguments -> . expr
    (192) arguments -> . arguments , arguments
    (193) arguments -> . empty
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (190) empty -> .
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    ,               reduce using rule 190 (empty -> .)
    )               reduce using rule 190 (empty -> .)
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    arguments                      shift and go to state 442
    expr                           shift and go to state 341
    empty                          shift and go to state 342
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 396

    (148) return_val -> type_type ( arguments ) .

    operator_add    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_sub    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_mul    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_div    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_trudiv reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_pow    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_join   reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_split  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitand reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitor  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitxor reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitshiftleft reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitshiftright reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_and    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_or     reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_xor    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_contains reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_incr   reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_decr   reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_outer  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_rotate reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_apply  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_compose reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_over   reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_map    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_less_than reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_less_than_equals reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_greater_than reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_greater_than_equals reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_equals reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_not_equals reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_smallest reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_greatest reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_goodname reduce using rule 148 (return_val -> type_type ( arguments ) .)
    [               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_scan   reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_reduc  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_bitnot reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_not    reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_inner  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_reverse reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_sorted_incr reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_sorted_decr reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_s_combinator reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_s_combinator_2 reduce using rule 148 (return_val -> type_type ( arguments ) .)
    operator_goodname2 reduce using rule 148 (return_val -> type_type ( arguments ) .)
    NEWLINE         reduce using rule 148 (return_val -> type_type ( arguments ) .)
    $end            reduce using rule 148 (return_val -> type_type ( arguments ) .)
    }               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    )               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    (               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    VAR             reduce using rule 148 (return_val -> type_type ( arguments ) .)
    FLOAT           reduce using rule 148 (return_val -> type_type ( arguments ) .)
    NUM             reduce using rule 148 (return_val -> type_type ( arguments ) .)
    STRING_3SQ      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    STRING_3DQ      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    STRING_SQ       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    STRING_DQ       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    true            reduce using rule 148 (return_val -> type_type ( arguments ) .)
    Null            reduce using rule 148 (return_val -> type_type ( arguments ) .)
    false           reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_type       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_num        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_bool       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_any        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_u64        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_u32        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_u16        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_u8         reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_i64        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_i32        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_i16        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_i8         reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_f32        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_f64        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_str        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_list       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_tuple      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_array      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_vector     reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_dict       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_generator  reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_linked_list reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_doubly_linked_list reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_deque      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_heap       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_fibonacci_heap reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_tree       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_trie       reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_stack      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_queue      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_binary_search_tree reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_bitset     reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_set        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_map        reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_range      reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_bad_struct reduce using rule 148 (return_val -> type_type ( arguments ) .)
    type_bad_struct2 reduce using rule 148 (return_val -> type_type ( arguments ) .)
    lambda          reduce using rule 148 (return_val -> type_type ( arguments ) .)
    {               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    ]               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    :               reduce using rule 148 (return_val -> type_type ( arguments ) .)
    ,               reduce using rule 148 (return_val -> type_type ( arguments ) .)


state 397

    (149) return_val -> type_num ( arguments ) .

    operator_add    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_sub    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_mul    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_div    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_trudiv reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_pow    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_join   reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_split  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitand reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitor  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitxor reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitshiftleft reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitshiftright reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_and    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_or     reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_xor    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_contains reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_incr   reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_decr   reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_outer  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_rotate reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_apply  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_compose reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_over   reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_map    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_less_than reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_less_than_equals reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_greater_than reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_greater_than_equals reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_equals reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_not_equals reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_smallest reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_greatest reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_goodname reduce using rule 149 (return_val -> type_num ( arguments ) .)
    [               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_scan   reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_reduc  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_bitnot reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_not    reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_inner  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_reverse reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_sorted_incr reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_sorted_decr reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_s_combinator reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_s_combinator_2 reduce using rule 149 (return_val -> type_num ( arguments ) .)
    operator_goodname2 reduce using rule 149 (return_val -> type_num ( arguments ) .)
    NEWLINE         reduce using rule 149 (return_val -> type_num ( arguments ) .)
    $end            reduce using rule 149 (return_val -> type_num ( arguments ) .)
    }               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    )               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    (               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    VAR             reduce using rule 149 (return_val -> type_num ( arguments ) .)
    FLOAT           reduce using rule 149 (return_val -> type_num ( arguments ) .)
    NUM             reduce using rule 149 (return_val -> type_num ( arguments ) .)
    STRING_3SQ      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    STRING_3DQ      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    STRING_SQ       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    STRING_DQ       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    true            reduce using rule 149 (return_val -> type_num ( arguments ) .)
    Null            reduce using rule 149 (return_val -> type_num ( arguments ) .)
    false           reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_type       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_num        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_bool       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_any        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_u64        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_u32        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_u16        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_u8         reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_i64        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_i32        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_i16        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_i8         reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_f32        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_f64        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_str        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_list       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_tuple      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_array      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_vector     reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_dict       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_generator  reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_linked_list reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_doubly_linked_list reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_deque      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_heap       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_fibonacci_heap reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_tree       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_trie       reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_stack      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_queue      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_binary_search_tree reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_bitset     reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_set        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_map        reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_range      reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_bad_struct reduce using rule 149 (return_val -> type_num ( arguments ) .)
    type_bad_struct2 reduce using rule 149 (return_val -> type_num ( arguments ) .)
    lambda          reduce using rule 149 (return_val -> type_num ( arguments ) .)
    {               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    ]               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    :               reduce using rule 149 (return_val -> type_num ( arguments ) .)
    ,               reduce using rule 149 (return_val -> type_num ( arguments ) .)


state 398

    (150) return_val -> type_bool ( arguments ) .

    operator_add    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_sub    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_mul    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_div    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_trudiv reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_pow    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_join   reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_split  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitand reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitor  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitxor reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftleft reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitshiftright reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_and    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_or     reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_xor    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_contains reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_incr   reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_decr   reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_outer  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_rotate reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_apply  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_compose reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_over   reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_map    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_less_than reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_less_than_equals reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_greater_than reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_greater_than_equals reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_equals reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_not_equals reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_smallest reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_greatest reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_goodname reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    [               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_scan   reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_reduc  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_bitnot reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_not    reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_inner  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_reverse reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_sorted_incr reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_sorted_decr reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_s_combinator reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_s_combinator_2 reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    operator_goodname2 reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    NEWLINE         reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    $end            reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    }               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    )               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    (               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    VAR             reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    FLOAT           reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    NUM             reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    STRING_3SQ      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    STRING_3DQ      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    STRING_SQ       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    STRING_DQ       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    true            reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    Null            reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    false           reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_type       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_num        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_bool       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_any        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_u64        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_u32        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_u16        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_u8         reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_i64        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_i32        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_i16        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_i8         reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_f32        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_f64        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_str        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_list       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_tuple      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_array      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_vector     reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_dict       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_generator  reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_linked_list reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_doubly_linked_list reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_deque      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_heap       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_fibonacci_heap reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_tree       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_trie       reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_stack      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_queue      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_binary_search_tree reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_bitset     reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_set        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_map        reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_range      reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_bad_struct reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    type_bad_struct2 reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    lambda          reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    {               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    ]               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    :               reduce using rule 150 (return_val -> type_bool ( arguments ) .)
    ,               reduce using rule 150 (return_val -> type_bool ( arguments ) .)


state 399

    (151) return_val -> type_any ( arguments ) .

    operator_add    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_sub    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_mul    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_div    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_trudiv reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_pow    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_join   reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_split  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitand reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitor  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitxor reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitshiftleft reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitshiftright reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_and    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_or     reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_xor    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_contains reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_incr   reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_decr   reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_outer  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_rotate reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_apply  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_compose reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_over   reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_map    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_less_than reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_less_than_equals reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_greater_than reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_greater_than_equals reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_equals reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_not_equals reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_smallest reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_greatest reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_goodname reduce using rule 151 (return_val -> type_any ( arguments ) .)
    [               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_scan   reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_reduc  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_bitnot reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_not    reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_inner  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_reverse reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_sorted_incr reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_sorted_decr reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_s_combinator reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_s_combinator_2 reduce using rule 151 (return_val -> type_any ( arguments ) .)
    operator_goodname2 reduce using rule 151 (return_val -> type_any ( arguments ) .)
    NEWLINE         reduce using rule 151 (return_val -> type_any ( arguments ) .)
    $end            reduce using rule 151 (return_val -> type_any ( arguments ) .)
    }               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    )               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    (               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    VAR             reduce using rule 151 (return_val -> type_any ( arguments ) .)
    FLOAT           reduce using rule 151 (return_val -> type_any ( arguments ) .)
    NUM             reduce using rule 151 (return_val -> type_any ( arguments ) .)
    STRING_3SQ      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    STRING_3DQ      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    STRING_SQ       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    STRING_DQ       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    true            reduce using rule 151 (return_val -> type_any ( arguments ) .)
    Null            reduce using rule 151 (return_val -> type_any ( arguments ) .)
    false           reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_type       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_num        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_bool       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_any        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_u64        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_u32        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_u16        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_u8         reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_i64        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_i32        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_i16        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_i8         reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_f32        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_f64        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_str        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_list       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_tuple      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_array      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_vector     reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_dict       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_generator  reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_linked_list reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_doubly_linked_list reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_deque      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_heap       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_fibonacci_heap reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_tree       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_trie       reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_stack      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_queue      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_binary_search_tree reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_bitset     reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_set        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_map        reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_range      reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_bad_struct reduce using rule 151 (return_val -> type_any ( arguments ) .)
    type_bad_struct2 reduce using rule 151 (return_val -> type_any ( arguments ) .)
    lambda          reduce using rule 151 (return_val -> type_any ( arguments ) .)
    {               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    ]               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    :               reduce using rule 151 (return_val -> type_any ( arguments ) .)
    ,               reduce using rule 151 (return_val -> type_any ( arguments ) .)


state 400

    (152) return_val -> type_u64 ( arguments ) .

    operator_add    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_sub    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_mul    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_div    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_trudiv reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_pow    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_join   reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_split  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitand reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitor  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitxor reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitshiftright reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_and    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_or     reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_xor    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_contains reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_incr   reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_decr   reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_outer  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_rotate reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_apply  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_compose reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_over   reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_map    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_less_than reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_less_than_equals reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_equals reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_not_equals reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_smallest reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_greatest reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_goodname reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    [               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_scan   reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_reduc  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_bitnot reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_not    reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_inner  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_reverse reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_incr reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_sorted_decr reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_s_combinator reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    operator_goodname2 reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    NEWLINE         reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    $end            reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    }               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    )               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    (               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    VAR             reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    FLOAT           reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    NUM             reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    STRING_3SQ      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    STRING_3DQ      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    STRING_SQ       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    STRING_DQ       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    true            reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    Null            reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    false           reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_type       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_num        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_bool       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_any        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_u64        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_u32        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_u16        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_u8         reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_i64        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_i32        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_i16        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_i8         reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_f32        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_f64        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_str        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_list       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_tuple      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_array      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_vector     reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_dict       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_generator  reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_linked_list reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_deque      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_heap       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_tree       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_trie       reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_stack      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_queue      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_binary_search_tree reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_bitset     reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_set        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_map        reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_range      reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    type_bad_struct2 reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    lambda          reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    {               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    ]               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    :               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)
    ,               reduce using rule 152 (return_val -> type_u64 ( arguments ) .)


state 401

    (153) return_val -> type_u32 ( arguments ) .

    operator_add    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_sub    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_mul    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_div    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_trudiv reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_pow    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_join   reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_split  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitand reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitor  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitxor reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitshiftright reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_and    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_or     reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_xor    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_contains reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_incr   reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_decr   reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_outer  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_rotate reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_apply  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_compose reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_over   reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_map    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_less_than reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_less_than_equals reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_equals reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_not_equals reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_smallest reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_greatest reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_goodname reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    [               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_scan   reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_reduc  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_bitnot reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_not    reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_inner  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_reverse reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_incr reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_sorted_decr reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_s_combinator reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    operator_goodname2 reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    NEWLINE         reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    $end            reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    }               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    )               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    (               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    VAR             reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    FLOAT           reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    NUM             reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    STRING_3SQ      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    STRING_3DQ      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    STRING_SQ       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    STRING_DQ       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    true            reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    Null            reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    false           reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_type       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_num        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_bool       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_any        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_u64        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_u32        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_u16        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_u8         reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_i64        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_i32        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_i16        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_i8         reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_f32        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_f64        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_str        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_list       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_tuple      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_array      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_vector     reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_dict       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_generator  reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_linked_list reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_deque      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_heap       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_tree       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_trie       reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_stack      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_queue      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_binary_search_tree reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_bitset     reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_set        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_map        reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_range      reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    type_bad_struct2 reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    lambda          reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    {               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    ]               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    :               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)
    ,               reduce using rule 153 (return_val -> type_u32 ( arguments ) .)


state 402

    (154) return_val -> type_u16 ( arguments ) .

    operator_add    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_sub    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_mul    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_div    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_trudiv reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_pow    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_join   reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_split  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitand reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitor  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitxor reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitshiftright reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_and    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_or     reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_xor    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_contains reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_incr   reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_decr   reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_outer  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_rotate reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_apply  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_compose reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_over   reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_map    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_less_than reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_less_than_equals reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_equals reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_not_equals reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_smallest reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_greatest reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_goodname reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    [               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_scan   reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_reduc  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_bitnot reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_not    reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_inner  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_reverse reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_incr reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_sorted_decr reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_s_combinator reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    operator_goodname2 reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    NEWLINE         reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    $end            reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    }               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    )               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    (               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    VAR             reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    FLOAT           reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    NUM             reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    STRING_3SQ      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    STRING_3DQ      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    STRING_SQ       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    STRING_DQ       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    true            reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    Null            reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    false           reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_type       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_num        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_bool       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_any        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_u64        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_u32        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_u16        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_u8         reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_i64        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_i32        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_i16        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_i8         reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_f32        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_f64        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_str        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_list       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_tuple      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_array      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_vector     reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_dict       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_generator  reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_linked_list reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_deque      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_heap       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_tree       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_trie       reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_stack      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_queue      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_binary_search_tree reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_bitset     reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_set        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_map        reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_range      reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    type_bad_struct2 reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    lambda          reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    {               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    ]               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    :               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)
    ,               reduce using rule 154 (return_val -> type_u16 ( arguments ) .)


state 403

    (155) return_val -> type_u8 ( arguments ) .

    operator_add    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_sub    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_mul    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_div    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_trudiv reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_pow    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_join   reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_split  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitand reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitor  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitxor reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitshiftright reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_and    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_or     reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_xor    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_contains reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_incr   reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_decr   reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_outer  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_rotate reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_apply  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_compose reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_over   reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_map    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_less_than reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_less_than_equals reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_equals reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_not_equals reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_smallest reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_greatest reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_goodname reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    [               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_scan   reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_reduc  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_bitnot reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_not    reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_inner  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_reverse reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_incr reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_sorted_decr reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_s_combinator reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    operator_goodname2 reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    NEWLINE         reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    $end            reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    }               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    )               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    (               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    VAR             reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    FLOAT           reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    NUM             reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    STRING_3SQ      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    STRING_3DQ      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    STRING_SQ       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    STRING_DQ       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    true            reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    Null            reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    false           reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_type       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_num        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_bool       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_any        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_u64        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_u32        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_u16        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_u8         reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_i64        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_i32        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_i16        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_i8         reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_f32        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_f64        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_str        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_list       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_tuple      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_array      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_vector     reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_dict       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_generator  reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_linked_list reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_deque      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_heap       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_tree       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_trie       reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_stack      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_queue      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_binary_search_tree reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_bitset     reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_set        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_map        reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_range      reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    type_bad_struct2 reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    lambda          reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    {               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    ]               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    :               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)
    ,               reduce using rule 155 (return_val -> type_u8 ( arguments ) .)


state 404

    (156) return_val -> type_i64 ( arguments ) .

    operator_add    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_sub    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_mul    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_div    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_trudiv reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_pow    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_join   reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_split  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitand reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitor  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitxor reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitshiftright reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_and    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_or     reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_xor    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_contains reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_incr   reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_decr   reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_outer  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_rotate reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_apply  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_compose reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_over   reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_map    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_less_than reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_less_than_equals reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_equals reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_not_equals reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_smallest reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_greatest reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_goodname reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    [               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_scan   reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_reduc  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_bitnot reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_not    reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_inner  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_reverse reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_incr reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_sorted_decr reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_s_combinator reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    operator_goodname2 reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    NEWLINE         reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    $end            reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    }               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    )               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    (               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    VAR             reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    FLOAT           reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    NUM             reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    STRING_3SQ      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    STRING_3DQ      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    STRING_SQ       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    STRING_DQ       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    true            reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    Null            reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    false           reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_type       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_num        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_bool       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_any        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_u64        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_u32        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_u16        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_u8         reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_i64        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_i32        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_i16        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_i8         reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_f32        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_f64        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_str        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_list       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_tuple      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_array      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_vector     reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_dict       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_generator  reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_linked_list reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_deque      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_heap       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_tree       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_trie       reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_stack      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_queue      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_binary_search_tree reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_bitset     reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_set        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_map        reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_range      reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    type_bad_struct2 reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    lambda          reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    {               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    ]               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    :               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)
    ,               reduce using rule 156 (return_val -> type_i64 ( arguments ) .)


state 405

    (157) return_val -> type_i32 ( arguments ) .

    operator_add    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_sub    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_mul    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_div    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_trudiv reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_pow    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_join   reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_split  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitand reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitor  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitxor reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitshiftright reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_and    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_or     reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_xor    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_contains reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_incr   reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_decr   reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_outer  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_rotate reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_apply  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_compose reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_over   reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_map    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_less_than reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_less_than_equals reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_equals reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_not_equals reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_smallest reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_greatest reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_goodname reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    [               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_scan   reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_reduc  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_bitnot reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_not    reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_inner  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_reverse reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_incr reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_sorted_decr reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_s_combinator reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    operator_goodname2 reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    NEWLINE         reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    $end            reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    }               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    )               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    (               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    VAR             reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    FLOAT           reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    NUM             reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    STRING_3SQ      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    STRING_3DQ      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    STRING_SQ       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    STRING_DQ       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    true            reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    Null            reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    false           reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_type       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_num        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_bool       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_any        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_u64        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_u32        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_u16        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_u8         reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_i64        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_i32        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_i16        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_i8         reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_f32        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_f64        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_str        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_list       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_tuple      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_array      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_vector     reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_dict       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_generator  reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_linked_list reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_deque      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_heap       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_tree       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_trie       reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_stack      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_queue      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_binary_search_tree reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_bitset     reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_set        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_map        reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_range      reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    type_bad_struct2 reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    lambda          reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    {               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    ]               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    :               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)
    ,               reduce using rule 157 (return_val -> type_i32 ( arguments ) .)


state 406

    (158) return_val -> type_i16 ( arguments ) .

    operator_add    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_sub    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_mul    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_div    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_trudiv reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_pow    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_join   reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_split  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitand reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitor  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitxor reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftleft reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitshiftright reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_and    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_or     reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_xor    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_contains reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_incr   reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_decr   reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_outer  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_rotate reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_apply  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_compose reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_over   reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_map    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_less_than reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_less_than_equals reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_greater_than_equals reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_equals reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_not_equals reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_smallest reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_greatest reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_goodname reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    [               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_scan   reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_reduc  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_bitnot reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_not    reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_inner  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_reverse reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_incr reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_sorted_decr reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_s_combinator reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    operator_goodname2 reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    NEWLINE         reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    $end            reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    }               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    )               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    (               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    VAR             reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    FLOAT           reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    NUM             reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    STRING_3SQ      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    STRING_3DQ      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    STRING_SQ       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    STRING_DQ       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    true            reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    Null            reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    false           reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_type       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_num        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_bool       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_any        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_u64        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_u32        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_u16        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_u8         reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_i64        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_i32        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_i16        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_i8         reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_f32        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_f64        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_str        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_list       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_tuple      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_array      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_vector     reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_dict       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_generator  reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_linked_list reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_doubly_linked_list reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_deque      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_heap       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_fibonacci_heap reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_tree       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_trie       reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_stack      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_queue      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_binary_search_tree reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_bitset     reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_set        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_map        reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_range      reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    type_bad_struct2 reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    lambda          reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    {               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    ]               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    :               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)
    ,               reduce using rule 158 (return_val -> type_i16 ( arguments ) .)


state 407

    (159) return_val -> type_i8 ( arguments ) .

    operator_add    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_sub    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_mul    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_div    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_trudiv reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_pow    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_join   reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_split  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitand reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitor  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitxor reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftleft reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitshiftright reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_and    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_or     reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_xor    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_contains reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_incr   reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_decr   reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_outer  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_rotate reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_apply  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_compose reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_over   reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_map    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_less_than reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_less_than_equals reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_greater_than_equals reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_equals reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_not_equals reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_smallest reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_greatest reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_goodname reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    [               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_scan   reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_reduc  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_bitnot reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_not    reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_inner  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_reverse reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_incr reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_sorted_decr reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_s_combinator reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    operator_goodname2 reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    NEWLINE         reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    $end            reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    }               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    )               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    (               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    VAR             reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    FLOAT           reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    NUM             reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    STRING_3SQ      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    STRING_3DQ      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    STRING_SQ       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    STRING_DQ       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    true            reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    Null            reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    false           reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_type       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_num        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_bool       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_any        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_u64        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_u32        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_u16        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_u8         reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_i64        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_i32        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_i16        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_i8         reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_f32        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_f64        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_str        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_list       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_tuple      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_array      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_vector     reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_dict       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_generator  reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_linked_list reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_doubly_linked_list reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_deque      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_heap       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_fibonacci_heap reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_tree       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_trie       reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_stack      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_queue      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_binary_search_tree reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_bitset     reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_set        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_map        reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_range      reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    type_bad_struct2 reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    lambda          reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    {               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    ]               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    :               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)
    ,               reduce using rule 159 (return_val -> type_i8 ( arguments ) .)


state 408

    (160) return_val -> type_f32 ( arguments ) .

    operator_add    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_sub    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_mul    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_div    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_trudiv reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_pow    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_join   reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_split  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitand reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitor  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitxor reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftleft reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitshiftright reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_and    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_or     reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_xor    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_contains reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_incr   reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_decr   reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_outer  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_rotate reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_apply  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_compose reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_over   reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_map    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_less_than reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_less_than_equals reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_greater_than_equals reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_equals reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_not_equals reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_smallest reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_greatest reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_goodname reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    [               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_scan   reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_reduc  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_bitnot reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_not    reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_inner  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_reverse reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_incr reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_sorted_decr reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_s_combinator reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    operator_goodname2 reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    NEWLINE         reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    $end            reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    }               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    )               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    (               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    VAR             reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    FLOAT           reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    NUM             reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    STRING_3SQ      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    STRING_3DQ      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    STRING_SQ       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    STRING_DQ       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    true            reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    Null            reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    false           reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_type       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_num        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_bool       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_any        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_u64        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_u32        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_u16        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_u8         reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_i64        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_i32        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_i16        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_i8         reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_f32        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_f64        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_str        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_list       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_tuple      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_array      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_vector     reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_dict       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_generator  reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_linked_list reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_doubly_linked_list reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_deque      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_heap       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_fibonacci_heap reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_tree       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_trie       reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_stack      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_queue      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_binary_search_tree reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_bitset     reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_set        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_map        reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_range      reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    type_bad_struct2 reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    lambda          reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    {               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    ]               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    :               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)
    ,               reduce using rule 160 (return_val -> type_f32 ( arguments ) .)


state 409

    (161) return_val -> type_f64 ( arguments ) .

    operator_add    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_sub    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_mul    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_div    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_trudiv reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_pow    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_join   reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_split  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitand reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitor  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitxor reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftleft reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitshiftright reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_and    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_or     reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_xor    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_contains reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_incr   reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_decr   reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_outer  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_rotate reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_apply  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_compose reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_over   reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_map    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_less_than reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_less_than_equals reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_greater_than_equals reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_equals reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_not_equals reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_smallest reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_greatest reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_goodname reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    [               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_scan   reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_reduc  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_bitnot reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_not    reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_inner  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_reverse reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_incr reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_sorted_decr reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_s_combinator reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    operator_goodname2 reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    NEWLINE         reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    $end            reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    }               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    )               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    (               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    VAR             reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    FLOAT           reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    NUM             reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    STRING_3SQ      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    STRING_3DQ      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    STRING_SQ       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    STRING_DQ       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    true            reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    Null            reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    false           reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_type       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_num        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_bool       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_any        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_u64        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_u32        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_u16        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_u8         reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_i64        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_i32        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_i16        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_i8         reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_f32        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_f64        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_str        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_list       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_tuple      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_array      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_vector     reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_dict       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_generator  reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_linked_list reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_doubly_linked_list reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_deque      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_heap       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_fibonacci_heap reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_tree       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_trie       reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_stack      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_queue      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_binary_search_tree reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_bitset     reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_set        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_map        reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_range      reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    type_bad_struct2 reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    lambda          reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    {               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    ]               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    :               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)
    ,               reduce using rule 161 (return_val -> type_f64 ( arguments ) .)


state 410

    (162) return_val -> type_str ( arguments ) .

    operator_add    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_sub    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_mul    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_div    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_trudiv reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_pow    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_join   reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_split  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitand reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitor  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitxor reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitshiftleft reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitshiftright reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_and    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_or     reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_xor    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_contains reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_incr   reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_decr   reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_outer  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_rotate reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_apply  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_compose reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_over   reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_map    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_less_than reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_less_than_equals reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_greater_than reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_greater_than_equals reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_equals reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_not_equals reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_smallest reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_greatest reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_goodname reduce using rule 162 (return_val -> type_str ( arguments ) .)
    [               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_scan   reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_reduc  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_bitnot reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_not    reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_inner  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_reverse reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_sorted_incr reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_sorted_decr reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_s_combinator reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_s_combinator_2 reduce using rule 162 (return_val -> type_str ( arguments ) .)
    operator_goodname2 reduce using rule 162 (return_val -> type_str ( arguments ) .)
    NEWLINE         reduce using rule 162 (return_val -> type_str ( arguments ) .)
    $end            reduce using rule 162 (return_val -> type_str ( arguments ) .)
    }               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    )               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    (               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    VAR             reduce using rule 162 (return_val -> type_str ( arguments ) .)
    FLOAT           reduce using rule 162 (return_val -> type_str ( arguments ) .)
    NUM             reduce using rule 162 (return_val -> type_str ( arguments ) .)
    STRING_3SQ      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    STRING_3DQ      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    STRING_SQ       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    STRING_DQ       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    true            reduce using rule 162 (return_val -> type_str ( arguments ) .)
    Null            reduce using rule 162 (return_val -> type_str ( arguments ) .)
    false           reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_type       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_num        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_bool       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_any        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_u64        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_u32        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_u16        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_u8         reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_i64        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_i32        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_i16        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_i8         reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_f32        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_f64        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_str        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_list       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_tuple      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_array      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_vector     reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_dict       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_generator  reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_linked_list reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_doubly_linked_list reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_deque      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_heap       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_fibonacci_heap reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_tree       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_trie       reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_stack      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_queue      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_binary_search_tree reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_bitset     reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_set        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_map        reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_range      reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_bad_struct reduce using rule 162 (return_val -> type_str ( arguments ) .)
    type_bad_struct2 reduce using rule 162 (return_val -> type_str ( arguments ) .)
    lambda          reduce using rule 162 (return_val -> type_str ( arguments ) .)
    {               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    ]               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    :               reduce using rule 162 (return_val -> type_str ( arguments ) .)
    ,               reduce using rule 162 (return_val -> type_str ( arguments ) .)


state 411

    (163) return_val -> type_list ( arguments ) .

    operator_add    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_sub    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_mul    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_div    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_trudiv reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_pow    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_join   reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_split  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitand reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitor  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitxor reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitshiftright reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_and    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_or     reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_xor    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_contains reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_incr   reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_decr   reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_outer  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_rotate reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_apply  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_compose reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_over   reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_map    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_less_than reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_less_than_equals reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_greater_than reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_equals reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_not_equals reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_smallest reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_greatest reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_goodname reduce using rule 163 (return_val -> type_list ( arguments ) .)
    [               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_scan   reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_reduc  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_bitnot reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_not    reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_inner  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_reverse reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_sorted_incr reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_sorted_decr reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_s_combinator reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_s_combinator_2 reduce using rule 163 (return_val -> type_list ( arguments ) .)
    operator_goodname2 reduce using rule 163 (return_val -> type_list ( arguments ) .)
    NEWLINE         reduce using rule 163 (return_val -> type_list ( arguments ) .)
    $end            reduce using rule 163 (return_val -> type_list ( arguments ) .)
    }               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    )               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    (               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    VAR             reduce using rule 163 (return_val -> type_list ( arguments ) .)
    FLOAT           reduce using rule 163 (return_val -> type_list ( arguments ) .)
    NUM             reduce using rule 163 (return_val -> type_list ( arguments ) .)
    STRING_3SQ      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    STRING_3DQ      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    STRING_SQ       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    STRING_DQ       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    true            reduce using rule 163 (return_val -> type_list ( arguments ) .)
    Null            reduce using rule 163 (return_val -> type_list ( arguments ) .)
    false           reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_type       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_num        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_bool       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_any        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_u64        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_u32        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_u16        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_u8         reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_i64        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_i32        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_i16        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_i8         reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_f32        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_f64        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_str        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_list       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_tuple      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_array      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_vector     reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_dict       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_generator  reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_linked_list reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_deque      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_heap       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_tree       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_trie       reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_stack      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_queue      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_binary_search_tree reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_bitset     reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_set        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_map        reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_range      reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_bad_struct reduce using rule 163 (return_val -> type_list ( arguments ) .)
    type_bad_struct2 reduce using rule 163 (return_val -> type_list ( arguments ) .)
    lambda          reduce using rule 163 (return_val -> type_list ( arguments ) .)
    {               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    ]               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    :               reduce using rule 163 (return_val -> type_list ( arguments ) .)
    ,               reduce using rule 163 (return_val -> type_list ( arguments ) .)


state 412

    (164) return_val -> type_tuple ( arguments ) .

    operator_add    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_sub    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_mul    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_div    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_trudiv reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_pow    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_join   reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_split  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitand reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitor  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitxor reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftleft reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitshiftright reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_and    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_or     reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_xor    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_contains reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_incr   reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_decr   reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_outer  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_rotate reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_apply  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_compose reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_over   reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_map    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_less_than reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_less_than_equals reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_greater_than_equals reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_equals reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_not_equals reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_smallest reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_greatest reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_goodname reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    [               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_scan   reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_reduc  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_bitnot reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_not    reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_inner  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_reverse reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_incr reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_sorted_decr reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_s_combinator reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_s_combinator_2 reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    operator_goodname2 reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    NEWLINE         reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    $end            reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    }               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    )               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    (               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    VAR             reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    FLOAT           reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    NUM             reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    STRING_3SQ      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    STRING_3DQ      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    STRING_SQ       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    STRING_DQ       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    true            reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    Null            reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    false           reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_type       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_num        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_bool       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_any        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_u64        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_u32        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_u16        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_u8         reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_i64        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_i32        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_i16        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_i8         reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_f32        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_f64        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_str        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_list       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_tuple      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_array      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_vector     reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_dict       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_generator  reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_linked_list reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_doubly_linked_list reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_deque      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_heap       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_fibonacci_heap reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_tree       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_trie       reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_stack      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_queue      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_binary_search_tree reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_bitset     reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_set        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_map        reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_range      reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    type_bad_struct2 reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    lambda          reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    {               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    ]               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    :               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)
    ,               reduce using rule 164 (return_val -> type_tuple ( arguments ) .)


state 413

    (165) return_val -> type_array ( arguments ) .

    operator_add    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_sub    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_mul    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_div    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_trudiv reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_pow    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_join   reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_split  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitand reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitor  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitxor reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitshiftleft reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitshiftright reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_and    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_or     reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_xor    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_contains reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_incr   reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_decr   reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_outer  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_rotate reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_apply  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_compose reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_over   reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_map    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_less_than reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_less_than_equals reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_greater_than reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_greater_than_equals reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_equals reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_not_equals reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_smallest reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_greatest reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_goodname reduce using rule 165 (return_val -> type_array ( arguments ) .)
    [               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_scan   reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_reduc  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_bitnot reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_not    reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_inner  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_reverse reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_sorted_incr reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_sorted_decr reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_s_combinator reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_s_combinator_2 reduce using rule 165 (return_val -> type_array ( arguments ) .)
    operator_goodname2 reduce using rule 165 (return_val -> type_array ( arguments ) .)
    NEWLINE         reduce using rule 165 (return_val -> type_array ( arguments ) .)
    $end            reduce using rule 165 (return_val -> type_array ( arguments ) .)
    }               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    )               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    (               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    VAR             reduce using rule 165 (return_val -> type_array ( arguments ) .)
    FLOAT           reduce using rule 165 (return_val -> type_array ( arguments ) .)
    NUM             reduce using rule 165 (return_val -> type_array ( arguments ) .)
    STRING_3SQ      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    STRING_3DQ      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    STRING_SQ       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    STRING_DQ       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    true            reduce using rule 165 (return_val -> type_array ( arguments ) .)
    Null            reduce using rule 165 (return_val -> type_array ( arguments ) .)
    false           reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_type       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_num        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_bool       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_any        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_u64        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_u32        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_u16        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_u8         reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_i64        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_i32        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_i16        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_i8         reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_f32        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_f64        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_str        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_list       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_tuple      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_array      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_vector     reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_dict       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_generator  reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_linked_list reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_doubly_linked_list reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_deque      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_heap       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_fibonacci_heap reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_tree       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_trie       reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_stack      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_queue      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_binary_search_tree reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_bitset     reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_set        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_map        reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_range      reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_bad_struct reduce using rule 165 (return_val -> type_array ( arguments ) .)
    type_bad_struct2 reduce using rule 165 (return_val -> type_array ( arguments ) .)
    lambda          reduce using rule 165 (return_val -> type_array ( arguments ) .)
    {               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    ]               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    :               reduce using rule 165 (return_val -> type_array ( arguments ) .)
    ,               reduce using rule 165 (return_val -> type_array ( arguments ) .)


state 414

    (166) return_val -> type_vector ( arguments ) .

    operator_add    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_sub    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_mul    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_div    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_trudiv reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_pow    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_join   reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_split  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitand reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitor  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitxor reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftleft reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitshiftright reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_and    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_or     reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_xor    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_contains reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_incr   reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_decr   reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_outer  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_rotate reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_apply  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_compose reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_over   reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_map    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_less_than reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_less_than_equals reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_greater_than reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_greater_than_equals reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_equals reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_not_equals reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_smallest reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_greatest reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_goodname reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    [               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_scan   reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_reduc  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_bitnot reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_not    reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_inner  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_reverse reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_sorted_incr reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_sorted_decr reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_s_combinator reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_s_combinator_2 reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    operator_goodname2 reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    NEWLINE         reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    $end            reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    }               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    )               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    (               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    VAR             reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    FLOAT           reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    NUM             reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    STRING_3SQ      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    STRING_3DQ      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    STRING_SQ       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    STRING_DQ       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    true            reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    Null            reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    false           reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_type       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_num        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_bool       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_any        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_u64        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_u32        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_u16        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_u8         reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_i64        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_i32        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_i16        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_i8         reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_f32        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_f64        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_str        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_list       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_tuple      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_array      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_vector     reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_dict       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_generator  reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_linked_list reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_doubly_linked_list reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_deque      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_heap       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_fibonacci_heap reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_tree       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_trie       reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_stack      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_queue      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_binary_search_tree reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_bitset     reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_set        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_map        reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_range      reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_bad_struct reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    type_bad_struct2 reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    lambda          reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    {               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    ]               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    :               reduce using rule 166 (return_val -> type_vector ( arguments ) .)
    ,               reduce using rule 166 (return_val -> type_vector ( arguments ) .)


state 415

    (167) return_val -> type_dict ( arguments ) .

    operator_add    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_sub    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_mul    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_div    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_trudiv reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_pow    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_join   reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_split  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitand reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitor  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitxor reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftleft reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitshiftright reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_and    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_or     reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_xor    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_contains reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_incr   reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_decr   reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_outer  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_rotate reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_apply  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_compose reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_over   reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_map    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_less_than reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_less_than_equals reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_greater_than reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_greater_than_equals reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_equals reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_not_equals reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_smallest reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_greatest reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_goodname reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    [               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_scan   reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_reduc  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_bitnot reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_not    reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_inner  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_reverse reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_sorted_incr reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_sorted_decr reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_s_combinator reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_s_combinator_2 reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    operator_goodname2 reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    NEWLINE         reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    $end            reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    }               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    )               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    (               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    VAR             reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    FLOAT           reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    NUM             reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    STRING_3SQ      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    STRING_3DQ      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    STRING_SQ       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    STRING_DQ       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    true            reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    Null            reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    false           reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_type       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_num        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_bool       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_any        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_u64        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_u32        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_u16        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_u8         reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_i64        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_i32        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_i16        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_i8         reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_f32        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_f64        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_str        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_list       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_tuple      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_array      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_vector     reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_dict       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_generator  reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_linked_list reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_doubly_linked_list reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_deque      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_heap       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_fibonacci_heap reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_tree       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_trie       reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_stack      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_queue      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_binary_search_tree reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_bitset     reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_set        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_map        reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_range      reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_bad_struct reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    type_bad_struct2 reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    lambda          reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    {               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    ]               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    :               reduce using rule 167 (return_val -> type_dict ( arguments ) .)
    ,               reduce using rule 167 (return_val -> type_dict ( arguments ) .)


state 416

    (168) return_val -> type_generator ( arguments ) .

    operator_add    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_sub    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_mul    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_div    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_trudiv reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_pow    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_join   reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_split  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitand reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitor  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitxor reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftleft reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitshiftright reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_and    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_or     reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_xor    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_contains reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_incr   reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_decr   reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_outer  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_rotate reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_apply  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_compose reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_over   reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_map    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_less_than reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_less_than_equals reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_greater_than reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_greater_than_equals reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_equals reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_not_equals reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_smallest reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_greatest reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_goodname reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    [               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_scan   reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_reduc  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_bitnot reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_not    reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_inner  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_reverse reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_sorted_incr reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_sorted_decr reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_s_combinator reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_s_combinator_2 reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    operator_goodname2 reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    NEWLINE         reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    $end            reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    }               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    )               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    (               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    VAR             reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    FLOAT           reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    NUM             reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    STRING_3SQ      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    STRING_3DQ      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    STRING_SQ       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    STRING_DQ       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    true            reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    Null            reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    false           reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_type       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_num        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_bool       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_any        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_u64        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_u32        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_u16        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_u8         reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_i64        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_i32        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_i16        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_i8         reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_f32        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_f64        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_str        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_list       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_tuple      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_array      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_vector     reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_dict       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_generator  reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_linked_list reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_doubly_linked_list reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_deque      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_heap       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_fibonacci_heap reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_tree       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_trie       reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_stack      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_queue      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_binary_search_tree reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_bitset     reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_set        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_map        reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_range      reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_bad_struct reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    type_bad_struct2 reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    lambda          reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    {               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    ]               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    :               reduce using rule 168 (return_val -> type_generator ( arguments ) .)
    ,               reduce using rule 168 (return_val -> type_generator ( arguments ) .)


state 417

    (169) return_val -> type_linked_list ( arguments ) .

    operator_add    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_sub    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_mul    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_div    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_pow    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_join   reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_split  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitand reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_and    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_or     reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_xor    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_contains reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_incr   reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_decr   reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_outer  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_rotate reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_apply  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_compose reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_over   reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_map    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_equals reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_smallest reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_greatest reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    [               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_scan   reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_not    reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_inner  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_reverse reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_s_combinator_2 reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    $end            reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    }               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    )               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    (               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    VAR             reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    FLOAT           reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    NUM             reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    true            reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    Null            reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    false           reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_type       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_num        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_bool       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_any        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_u64        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_u32        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_u16        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_u8         reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_i64        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_i32        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_i16        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_i8         reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_f32        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_f64        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_str        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_list       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_tuple      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_array      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_vector     reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_dict       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_generator  reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_linked_list reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_deque      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_heap       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_tree       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_trie       reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_stack      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_queue      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_bitset     reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_set        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_map        reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_range      reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    lambda          reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    {               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    ]               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    :               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)
    ,               reduce using rule 169 (return_val -> type_linked_list ( arguments ) .)


state 418

    (170) return_val -> type_doubly_linked_list ( arguments ) .

    operator_add    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sub    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_mul    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_div    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_trudiv reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_pow    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_join   reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_split  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitand reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitor  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitxor reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftleft reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitshiftright reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_and    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_or     reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_xor    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_contains reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_incr   reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_decr   reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_outer  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_rotate reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_apply  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_compose reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_over   reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_map    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_less_than_equals reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greater_than_equals reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_equals reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not_equals reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_smallest reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_greatest reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    [               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_scan   reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reduc  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_bitnot reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_not    reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_inner  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_reverse reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_incr reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_sorted_decr reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s_combinator reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_s_combinator_2 reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    operator_goodname2 reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    NEWLINE         reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    $end            reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    }               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    )               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    (               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    VAR             reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    FLOAT           reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    NUM             reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3SQ      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_3DQ      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_SQ       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    STRING_DQ       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    true            reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    Null            reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    false           reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_type       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_num        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bool       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_any        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u64        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u32        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u16        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_u8         reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i64        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i32        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i16        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_i8         reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f32        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_f64        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_str        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_list       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tuple      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_array      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_vector     reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_dict       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_generator  reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_linked_list reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_doubly_linked_list reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_deque      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_heap       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_fibonacci_heap reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_tree       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_trie       reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_stack      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_queue      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_binary_search_tree reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bitset     reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_set        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_map        reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_range      reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    type_bad_struct2 reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    lambda          reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    {               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    ]               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    :               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)
    ,               reduce using rule 170 (return_val -> type_doubly_linked_list ( arguments ) .)


state 419

    (171) return_val -> type_deque ( arguments ) .

    operator_add    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_sub    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_mul    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_div    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_trudiv reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_pow    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_join   reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_split  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitand reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitor  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitxor reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftleft reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitshiftright reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_and    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_or     reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_xor    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_contains reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_incr   reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_decr   reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_outer  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_rotate reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_apply  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_compose reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_over   reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_map    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_less_than reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_less_than_equals reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_greater_than reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_greater_than_equals reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_equals reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_not_equals reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_smallest reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_greatest reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_goodname reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    [               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_scan   reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_reduc  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_bitnot reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_not    reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_inner  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_reverse reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_sorted_incr reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_sorted_decr reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_s_combinator reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_s_combinator_2 reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    operator_goodname2 reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    NEWLINE         reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    $end            reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    }               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    )               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    (               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    VAR             reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    FLOAT           reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    NUM             reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    STRING_3SQ      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    STRING_3DQ      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    STRING_SQ       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    STRING_DQ       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    true            reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    Null            reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    false           reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_type       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_num        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_bool       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_any        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_u64        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_u32        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_u16        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_u8         reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_i64        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_i32        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_i16        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_i8         reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_f32        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_f64        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_str        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_list       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_tuple      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_array      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_vector     reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_dict       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_generator  reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_linked_list reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_doubly_linked_list reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_deque      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_heap       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_fibonacci_heap reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_tree       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_trie       reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_stack      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_queue      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_binary_search_tree reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_bitset     reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_set        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_map        reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_range      reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_bad_struct reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    type_bad_struct2 reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    lambda          reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    {               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    ]               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    :               reduce using rule 171 (return_val -> type_deque ( arguments ) .)
    ,               reduce using rule 171 (return_val -> type_deque ( arguments ) .)


state 420

    (172) return_val -> type_heap ( arguments ) .

    operator_add    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_sub    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_mul    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_div    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_trudiv reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_pow    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_join   reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_split  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitand reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitor  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitxor reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_and    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_or     reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_xor    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_contains reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_incr   reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_decr   reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_outer  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_rotate reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_apply  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_compose reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_over   reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_map    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_less_than reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_greater_than reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_equals reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_not_equals reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_smallest reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_greatest reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_goodname reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    [               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_scan   reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_reduc  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_bitnot reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_not    reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_inner  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_reverse reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_s_combinator reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_s_combinator_2 reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    operator_goodname2 reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    NEWLINE         reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    $end            reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    }               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    )               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    (               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    VAR             reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    FLOAT           reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    NUM             reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    STRING_SQ       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    STRING_DQ       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    true            reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    Null            reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    false           reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_type       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_num        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_bool       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_any        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_u64        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_u32        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_u16        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_u8         reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_i64        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_i32        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_i16        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_i8         reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_f32        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_f64        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_str        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_list       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_tuple      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_array      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_vector     reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_dict       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_generator  reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_linked_list reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_deque      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_heap       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_tree       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_trie       reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_stack      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_queue      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_bitset     reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_set        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_map        reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_range      reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_bad_struct reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    lambda          reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    {               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    ]               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    :               reduce using rule 172 (return_val -> type_heap ( arguments ) .)
    ,               reduce using rule 172 (return_val -> type_heap ( arguments ) .)


state 421

    (173) return_val -> type_fibonacci_heap ( arguments ) .

    operator_add    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sub    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_mul    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_div    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_trudiv reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_pow    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_join   reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_split  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitand reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitor  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitxor reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftleft reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitshiftright reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_and    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_or     reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_xor    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_contains reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_incr   reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_decr   reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_outer  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_rotate reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_apply  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_compose reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_over   reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_map    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_less_than_equals reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greater_than_equals reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_equals reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not_equals reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_smallest reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_greatest reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    [               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_scan   reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reduc  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_bitnot reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_not    reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_inner  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_reverse reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_incr reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_sorted_decr reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s_combinator reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_s_combinator_2 reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    operator_goodname2 reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    NEWLINE         reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    $end            reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    }               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    )               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    (               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    VAR             reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    FLOAT           reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    NUM             reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3SQ      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_3DQ      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_SQ       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    STRING_DQ       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    true            reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    Null            reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    false           reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_type       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_num        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bool       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_any        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u64        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u32        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u16        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_u8         reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i64        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i32        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i16        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_i8         reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f32        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_f64        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_str        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_list       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tuple      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_array      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_vector     reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_dict       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_generator  reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_linked_list reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_doubly_linked_list reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_deque      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_heap       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_fibonacci_heap reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_tree       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_trie       reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_stack      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_queue      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_binary_search_tree reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bitset     reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_set        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_map        reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_range      reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    type_bad_struct2 reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    lambda          reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    {               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    ]               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    :               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)
    ,               reduce using rule 173 (return_val -> type_fibonacci_heap ( arguments ) .)


state 422

    (174) return_val -> type_tree ( arguments ) .

    operator_add    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_sub    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_mul    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_div    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_trudiv reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_pow    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_join   reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_split  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitand reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitor  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitxor reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_and    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_or     reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_xor    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_contains reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_incr   reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_decr   reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_outer  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_rotate reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_apply  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_compose reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_over   reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_map    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_less_than reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_greater_than reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_equals reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_not_equals reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_smallest reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_greatest reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_goodname reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    [               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_scan   reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_reduc  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_bitnot reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_not    reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_inner  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_reverse reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_s_combinator reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_s_combinator_2 reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    operator_goodname2 reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    NEWLINE         reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    $end            reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    }               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    )               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    (               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    VAR             reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    FLOAT           reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    NUM             reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    STRING_SQ       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    STRING_DQ       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    true            reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    Null            reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    false           reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_type       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_num        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_bool       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_any        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_u64        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_u32        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_u16        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_u8         reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_i64        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_i32        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_i16        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_i8         reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_f32        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_f64        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_str        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_list       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_tuple      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_array      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_vector     reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_dict       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_generator  reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_linked_list reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_deque      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_heap       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_tree       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_trie       reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_stack      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_queue      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_bitset     reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_set        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_map        reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_range      reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_bad_struct reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    lambda          reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    {               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    ]               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    :               reduce using rule 174 (return_val -> type_tree ( arguments ) .)
    ,               reduce using rule 174 (return_val -> type_tree ( arguments ) .)


state 423

    (175) return_val -> type_trie ( arguments ) .

    operator_add    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_sub    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_mul    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_div    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_trudiv reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_pow    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_join   reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_split  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitand reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitor  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitxor reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftleft reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitshiftright reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_and    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_or     reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_xor    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_contains reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_incr   reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_decr   reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_outer  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_rotate reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_apply  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_compose reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_over   reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_map    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_less_than reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_less_than_equals reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_greater_than reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_greater_than_equals reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_equals reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_not_equals reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_smallest reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_greatest reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_goodname reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    [               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_scan   reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_reduc  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_bitnot reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_not    reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_inner  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_reverse reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_sorted_incr reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_sorted_decr reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_s_combinator reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_s_combinator_2 reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    operator_goodname2 reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    NEWLINE         reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    $end            reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    }               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    )               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    (               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    VAR             reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    FLOAT           reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    NUM             reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    STRING_3SQ      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    STRING_3DQ      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    STRING_SQ       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    STRING_DQ       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    true            reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    Null            reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    false           reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_type       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_num        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_bool       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_any        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_u64        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_u32        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_u16        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_u8         reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_i64        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_i32        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_i16        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_i8         reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_f32        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_f64        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_str        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_list       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_tuple      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_array      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_vector     reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_dict       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_generator  reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_linked_list reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_doubly_linked_list reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_deque      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_heap       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_fibonacci_heap reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_tree       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_trie       reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_stack      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_queue      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_binary_search_tree reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_bitset     reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_set        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_map        reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_range      reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_bad_struct reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    type_bad_struct2 reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    lambda          reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    {               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    ]               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    :               reduce using rule 175 (return_val -> type_trie ( arguments ) .)
    ,               reduce using rule 175 (return_val -> type_trie ( arguments ) .)


state 424

    (176) return_val -> type_stack ( arguments ) .

    operator_add    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_sub    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_mul    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_div    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_trudiv reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_pow    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_join   reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_split  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitand reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitor  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitxor reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftleft reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitshiftright reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_and    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_or     reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_xor    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_contains reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_incr   reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_decr   reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_outer  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_rotate reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_apply  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_compose reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_over   reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_map    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_less_than reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_less_than_equals reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_greater_than reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_greater_than_equals reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_equals reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_not_equals reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_smallest reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_greatest reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_goodname reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    [               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_scan   reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_reduc  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_bitnot reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_not    reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_inner  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_reverse reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_sorted_incr reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_sorted_decr reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_s_combinator reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_s_combinator_2 reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    operator_goodname2 reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    NEWLINE         reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    $end            reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    }               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    )               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    (               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    VAR             reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    FLOAT           reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    NUM             reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    STRING_3SQ      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    STRING_3DQ      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    STRING_SQ       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    STRING_DQ       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    true            reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    Null            reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    false           reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_type       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_num        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_bool       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_any        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_u64        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_u32        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_u16        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_u8         reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_i64        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_i32        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_i16        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_i8         reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_f32        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_f64        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_str        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_list       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_tuple      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_array      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_vector     reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_dict       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_generator  reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_linked_list reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_doubly_linked_list reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_deque      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_heap       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_fibonacci_heap reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_tree       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_trie       reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_stack      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_queue      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_binary_search_tree reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_bitset     reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_set        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_map        reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_range      reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_bad_struct reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    type_bad_struct2 reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    lambda          reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    {               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    ]               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    :               reduce using rule 176 (return_val -> type_stack ( arguments ) .)
    ,               reduce using rule 176 (return_val -> type_stack ( arguments ) .)


state 425

    (177) return_val -> type_queue ( arguments ) .

    operator_add    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_sub    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_mul    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_div    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_trudiv reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_pow    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_join   reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_split  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitand reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitor  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitxor reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftleft reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitshiftright reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_and    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_or     reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_xor    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_contains reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_incr   reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_decr   reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_outer  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_rotate reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_apply  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_compose reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_over   reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_map    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_less_than reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_less_than_equals reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_greater_than reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_greater_than_equals reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_equals reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_not_equals reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_smallest reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_greatest reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_goodname reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    [               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_scan   reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_reduc  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_bitnot reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_not    reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_inner  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_reverse reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_sorted_incr reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_sorted_decr reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_s_combinator reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_s_combinator_2 reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    operator_goodname2 reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    NEWLINE         reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    $end            reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    }               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    )               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    (               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    VAR             reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    FLOAT           reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    NUM             reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    STRING_3SQ      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    STRING_3DQ      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    STRING_SQ       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    STRING_DQ       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    true            reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    Null            reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    false           reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_type       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_num        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_bool       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_any        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_u64        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_u32        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_u16        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_u8         reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_i64        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_i32        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_i16        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_i8         reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_f32        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_f64        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_str        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_list       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_tuple      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_array      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_vector     reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_dict       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_generator  reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_linked_list reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_doubly_linked_list reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_deque      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_heap       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_fibonacci_heap reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_tree       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_trie       reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_stack      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_queue      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_binary_search_tree reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_bitset     reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_set        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_map        reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_range      reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_bad_struct reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    type_bad_struct2 reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    lambda          reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    {               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    ]               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    :               reduce using rule 177 (return_val -> type_queue ( arguments ) .)
    ,               reduce using rule 177 (return_val -> type_queue ( arguments ) .)


state 426

    (178) return_val -> type_binary_search_tree ( arguments ) .

    operator_add    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sub    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_mul    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_div    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_trudiv reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_pow    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_join   reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_split  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitand reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitor  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitxor reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftleft reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitshiftright reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_and    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_or     reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_xor    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_contains reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_incr   reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_decr   reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_outer  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_rotate reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_apply  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_compose reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_over   reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_map    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_less_than_equals reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greater_than_equals reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_equals reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not_equals reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_smallest reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_greatest reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    [               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_scan   reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reduc  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_bitnot reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_not    reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_inner  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_reverse reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_incr reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_sorted_decr reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s_combinator reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_s_combinator_2 reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    operator_goodname2 reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    NEWLINE         reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    $end            reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    }               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    )               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    (               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    VAR             reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    FLOAT           reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    NUM             reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3SQ      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_3DQ      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_SQ       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    STRING_DQ       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    true            reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    Null            reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    false           reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_type       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_num        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bool       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_any        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u64        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u32        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u16        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_u8         reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i64        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i32        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i16        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_i8         reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f32        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_f64        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_str        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_list       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tuple      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_array      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_vector     reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_dict       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_generator  reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_linked_list reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_doubly_linked_list reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_deque      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_heap       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_fibonacci_heap reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_tree       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_trie       reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_stack      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_queue      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_binary_search_tree reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bitset     reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_set        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_map        reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_range      reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    type_bad_struct2 reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    lambda          reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    {               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    ]               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    :               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)
    ,               reduce using rule 178 (return_val -> type_binary_search_tree ( arguments ) .)


state 427

    (179) return_val -> type_bitset ( arguments ) .

    operator_add    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_sub    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_mul    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_div    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_trudiv reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_pow    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_join   reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_split  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitand reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitor  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitxor reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftleft reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitshiftright reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_and    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_or     reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_xor    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_contains reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_incr   reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_decr   reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_outer  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_rotate reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_apply  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_compose reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_over   reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_map    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_less_than reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_less_than_equals reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_greater_than_equals reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_equals reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_not_equals reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_smallest reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_greatest reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_goodname reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    [               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_scan   reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_reduc  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_bitnot reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_not    reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_inner  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_reverse reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_incr reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_sorted_decr reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_s_combinator reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_s_combinator_2 reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    operator_goodname2 reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    NEWLINE         reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    $end            reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    }               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    )               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    (               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    VAR             reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    FLOAT           reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    NUM             reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    STRING_3SQ      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    STRING_3DQ      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    STRING_SQ       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    STRING_DQ       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    true            reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    Null            reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    false           reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_type       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_num        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_bool       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_any        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_u64        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_u32        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_u16        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_u8         reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_i64        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_i32        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_i16        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_i8         reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_f32        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_f64        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_str        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_list       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_tuple      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_array      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_vector     reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_dict       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_generator  reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_linked_list reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_doubly_linked_list reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_deque      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_heap       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_fibonacci_heap reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_tree       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_trie       reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_stack      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_queue      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_binary_search_tree reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_bitset     reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_set        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_map        reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_range      reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    type_bad_struct2 reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    lambda          reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    {               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    ]               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    :               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)
    ,               reduce using rule 179 (return_val -> type_bitset ( arguments ) .)


state 428

    (180) return_val -> type_set ( arguments ) .

    operator_add    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_sub    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_mul    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_div    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_trudiv reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_pow    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_join   reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_split  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitand reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitor  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitxor reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitshiftleft reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitshiftright reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_and    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_or     reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_xor    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_contains reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_incr   reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_decr   reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_outer  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_rotate reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_apply  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_compose reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_over   reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_map    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_less_than reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_less_than_equals reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_greater_than reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_greater_than_equals reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_equals reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_not_equals reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_smallest reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_greatest reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_goodname reduce using rule 180 (return_val -> type_set ( arguments ) .)
    [               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_scan   reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_reduc  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_bitnot reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_not    reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_inner  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_reverse reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_sorted_incr reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_sorted_decr reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_s_combinator reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_s_combinator_2 reduce using rule 180 (return_val -> type_set ( arguments ) .)
    operator_goodname2 reduce using rule 180 (return_val -> type_set ( arguments ) .)
    NEWLINE         reduce using rule 180 (return_val -> type_set ( arguments ) .)
    $end            reduce using rule 180 (return_val -> type_set ( arguments ) .)
    }               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    )               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    (               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    VAR             reduce using rule 180 (return_val -> type_set ( arguments ) .)
    FLOAT           reduce using rule 180 (return_val -> type_set ( arguments ) .)
    NUM             reduce using rule 180 (return_val -> type_set ( arguments ) .)
    STRING_3SQ      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    STRING_3DQ      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    STRING_SQ       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    STRING_DQ       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    true            reduce using rule 180 (return_val -> type_set ( arguments ) .)
    Null            reduce using rule 180 (return_val -> type_set ( arguments ) .)
    false           reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_type       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_num        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_bool       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_any        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_u64        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_u32        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_u16        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_u8         reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_i64        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_i32        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_i16        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_i8         reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_f32        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_f64        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_str        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_list       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_tuple      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_array      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_vector     reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_dict       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_generator  reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_linked_list reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_doubly_linked_list reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_deque      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_heap       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_fibonacci_heap reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_tree       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_trie       reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_stack      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_queue      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_binary_search_tree reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_bitset     reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_set        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_map        reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_range      reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_bad_struct reduce using rule 180 (return_val -> type_set ( arguments ) .)
    type_bad_struct2 reduce using rule 180 (return_val -> type_set ( arguments ) .)
    lambda          reduce using rule 180 (return_val -> type_set ( arguments ) .)
    {               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    ]               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    :               reduce using rule 180 (return_val -> type_set ( arguments ) .)
    ,               reduce using rule 180 (return_val -> type_set ( arguments ) .)


state 429

    (181) return_val -> type_map ( arguments ) .

    operator_add    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_sub    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_mul    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_div    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_trudiv reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_pow    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_join   reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_split  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitand reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitor  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitxor reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitshiftleft reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitshiftright reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_and    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_or     reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_xor    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_contains reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_incr   reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_decr   reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_outer  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_rotate reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_apply  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_compose reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_over   reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_map    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_less_than reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_less_than_equals reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_greater_than reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_greater_than_equals reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_equals reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_not_equals reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_smallest reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_greatest reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_goodname reduce using rule 181 (return_val -> type_map ( arguments ) .)
    [               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_scan   reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_reduc  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_bitnot reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_not    reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_inner  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_reverse reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_sorted_incr reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_sorted_decr reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_s_combinator reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_s_combinator_2 reduce using rule 181 (return_val -> type_map ( arguments ) .)
    operator_goodname2 reduce using rule 181 (return_val -> type_map ( arguments ) .)
    NEWLINE         reduce using rule 181 (return_val -> type_map ( arguments ) .)
    $end            reduce using rule 181 (return_val -> type_map ( arguments ) .)
    }               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    )               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    (               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    VAR             reduce using rule 181 (return_val -> type_map ( arguments ) .)
    FLOAT           reduce using rule 181 (return_val -> type_map ( arguments ) .)
    NUM             reduce using rule 181 (return_val -> type_map ( arguments ) .)
    STRING_3SQ      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    STRING_3DQ      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    STRING_SQ       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    STRING_DQ       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    true            reduce using rule 181 (return_val -> type_map ( arguments ) .)
    Null            reduce using rule 181 (return_val -> type_map ( arguments ) .)
    false           reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_type       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_num        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_bool       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_any        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_u64        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_u32        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_u16        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_u8         reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_i64        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_i32        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_i16        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_i8         reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_f32        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_f64        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_str        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_list       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_tuple      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_array      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_vector     reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_dict       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_generator  reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_linked_list reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_doubly_linked_list reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_deque      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_heap       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_fibonacci_heap reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_tree       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_trie       reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_stack      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_queue      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_binary_search_tree reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_bitset     reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_set        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_map        reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_range      reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_bad_struct reduce using rule 181 (return_val -> type_map ( arguments ) .)
    type_bad_struct2 reduce using rule 181 (return_val -> type_map ( arguments ) .)
    lambda          reduce using rule 181 (return_val -> type_map ( arguments ) .)
    {               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    ]               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    :               reduce using rule 181 (return_val -> type_map ( arguments ) .)
    ,               reduce using rule 181 (return_val -> type_map ( arguments ) .)


state 430

    (182) return_val -> type_range ( arguments ) .

    operator_add    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_sub    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_mul    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_div    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_trudiv reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_pow    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_join   reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_split  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitand reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitor  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitxor reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitshiftleft reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitshiftright reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_and    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_or     reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_xor    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_contains reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_incr   reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_decr   reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_outer  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_rotate reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_apply  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_compose reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_over   reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_map    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_less_than reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_less_than_equals reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_greater_than reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_greater_than_equals reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_equals reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_not_equals reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_smallest reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_greatest reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_goodname reduce using rule 182 (return_val -> type_range ( arguments ) .)
    [               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_scan   reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_reduc  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_bitnot reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_not    reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_inner  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_reverse reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_sorted_incr reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_sorted_decr reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_s_combinator reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_s_combinator_2 reduce using rule 182 (return_val -> type_range ( arguments ) .)
    operator_goodname2 reduce using rule 182 (return_val -> type_range ( arguments ) .)
    NEWLINE         reduce using rule 182 (return_val -> type_range ( arguments ) .)
    $end            reduce using rule 182 (return_val -> type_range ( arguments ) .)
    }               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    )               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    (               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    VAR             reduce using rule 182 (return_val -> type_range ( arguments ) .)
    FLOAT           reduce using rule 182 (return_val -> type_range ( arguments ) .)
    NUM             reduce using rule 182 (return_val -> type_range ( arguments ) .)
    STRING_3SQ      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    STRING_3DQ      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    STRING_SQ       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    STRING_DQ       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    true            reduce using rule 182 (return_val -> type_range ( arguments ) .)
    Null            reduce using rule 182 (return_val -> type_range ( arguments ) .)
    false           reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_type       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_num        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_bool       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_any        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_u64        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_u32        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_u16        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_u8         reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_i64        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_i32        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_i16        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_i8         reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_f32        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_f64        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_str        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_list       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_tuple      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_array      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_vector     reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_dict       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_generator  reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_linked_list reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_doubly_linked_list reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_deque      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_heap       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_fibonacci_heap reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_tree       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_trie       reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_stack      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_queue      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_binary_search_tree reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_bitset     reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_set        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_map        reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_range      reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_bad_struct reduce using rule 182 (return_val -> type_range ( arguments ) .)
    type_bad_struct2 reduce using rule 182 (return_val -> type_range ( arguments ) .)
    lambda          reduce using rule 182 (return_val -> type_range ( arguments ) .)
    {               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    ]               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    :               reduce using rule 182 (return_val -> type_range ( arguments ) .)
    ,               reduce using rule 182 (return_val -> type_range ( arguments ) .)


state 431

    (183) return_val -> type_bad_struct ( arguments ) .

    operator_add    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_sub    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_mul    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_div    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_trudiv reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_pow    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_join   reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_split  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitand reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitor  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitxor reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftleft reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitshiftright reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_and    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_or     reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_xor    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_contains reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_incr   reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_decr   reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_outer  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_rotate reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_apply  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_compose reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_over   reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_map    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_less_than_equals reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_greater_than_equals reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_equals reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_not_equals reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_smallest reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_greatest reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    [               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_scan   reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_reduc  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_bitnot reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_not    reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_inner  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_reverse reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_incr reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_sorted_decr reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_s_combinator reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_s_combinator_2 reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    operator_goodname2 reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    NEWLINE         reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    $end            reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    }               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    )               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    (               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    VAR             reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    FLOAT           reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    NUM             reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3SQ      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    STRING_3DQ      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    STRING_SQ       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    STRING_DQ       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    true            reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    Null            reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    false           reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_type       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_num        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_bool       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_any        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_u64        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_u32        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_u16        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_u8         reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_i64        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_i32        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_i16        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_i8         reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_f32        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_f64        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_str        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_list       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_tuple      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_array      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_vector     reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_dict       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_generator  reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_linked_list reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_doubly_linked_list reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_deque      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_heap       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_fibonacci_heap reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_tree       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_trie       reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_stack      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_queue      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_binary_search_tree reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_bitset     reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_set        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_map        reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_range      reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    type_bad_struct2 reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    lambda          reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    {               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    ]               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    :               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)
    ,               reduce using rule 183 (return_val -> type_bad_struct ( arguments ) .)


state 432

    (184) return_val -> type_bad_struct2 ( arguments ) .

    operator_add    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sub    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_mul    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_div    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_trudiv reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_pow    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_join   reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_split  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitand reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitor  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitxor reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftleft reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitshiftright reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_and    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_or     reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_xor    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_contains reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_incr   reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_decr   reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_outer  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_rotate reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_apply  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_compose reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_over   reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_map    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_less_than_equals reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greater_than_equals reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_equals reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not_equals reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_smallest reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_greatest reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    [               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_scan   reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reduc  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_bitnot reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_not    reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_inner  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_reverse reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_incr reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_sorted_decr reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s_combinator reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_s_combinator_2 reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    operator_goodname2 reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    NEWLINE         reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    $end            reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    }               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    )               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    (               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    VAR             reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    FLOAT           reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    NUM             reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3SQ      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_3DQ      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_SQ       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    STRING_DQ       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    true            reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    Null            reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    false           reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_type       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_num        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bool       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_any        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u64        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u32        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u16        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_u8         reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i64        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i32        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i16        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_i8         reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f32        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_f64        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_str        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_list       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tuple      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_array      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_vector     reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_dict       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_generator  reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_linked_list reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_doubly_linked_list reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_deque      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_heap       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_fibonacci_heap reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_tree       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_trie       reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_stack      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_queue      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_binary_search_tree reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bitset     reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_set        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_map        reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_range      reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    type_bad_struct2 reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    lambda          reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    {               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    ]               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    :               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)
    ,               reduce using rule 184 (return_val -> type_bad_struct2 ( arguments ) .)


state 433

    (61) lambda_decl -> lambda comma_separated_names : expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

  ! shift/reduce conflict for operator_add resolved as shift
  ! shift/reduce conflict for operator_sub resolved as shift
  ! shift/reduce conflict for operator_mul resolved as shift
  ! shift/reduce conflict for operator_div resolved as shift
  ! shift/reduce conflict for operator_trudiv resolved as shift
  ! shift/reduce conflict for operator_pow resolved as shift
  ! shift/reduce conflict for operator_join resolved as shift
  ! shift/reduce conflict for operator_split resolved as shift
  ! shift/reduce conflict for operator_bitand resolved as shift
  ! shift/reduce conflict for operator_bitor resolved as shift
  ! shift/reduce conflict for operator_bitxor resolved as shift
  ! shift/reduce conflict for operator_bitshiftleft resolved as shift
  ! shift/reduce conflict for operator_bitshiftright resolved as shift
  ! shift/reduce conflict for operator_and resolved as shift
  ! shift/reduce conflict for operator_or resolved as shift
  ! shift/reduce conflict for operator_xor resolved as shift
  ! shift/reduce conflict for operator_contains resolved as shift
  ! shift/reduce conflict for operator_incr resolved as shift
  ! shift/reduce conflict for operator_decr resolved as shift
  ! shift/reduce conflict for operator_outer resolved as shift
  ! shift/reduce conflict for operator_rotate resolved as shift
  ! shift/reduce conflict for operator_apply resolved as shift
  ! shift/reduce conflict for operator_compose resolved as shift
  ! shift/reduce conflict for operator_over resolved as shift
  ! shift/reduce conflict for operator_map resolved as shift
  ! shift/reduce conflict for operator_less_than resolved as shift
  ! shift/reduce conflict for operator_less_than_equals resolved as shift
  ! shift/reduce conflict for operator_greater_than resolved as shift
  ! shift/reduce conflict for operator_greater_than_equals resolved as shift
  ! shift/reduce conflict for operator_equals resolved as shift
  ! shift/reduce conflict for operator_not_equals resolved as shift
  ! shift/reduce conflict for operator_smallest resolved as shift
  ! shift/reduce conflict for operator_greatest resolved as shift
  ! shift/reduce conflict for operator_goodname resolved as shift
  ! shift/reduce conflict for [ resolved as shift
  ! shift/reduce conflict for operator_scan resolved as shift
  ! shift/reduce conflict for operator_reduc resolved as shift
  ! shift/reduce conflict for operator_bitnot resolved as shift
  ! shift/reduce conflict for operator_not resolved as shift
  ! shift/reduce conflict for operator_inner resolved as shift
  ! shift/reduce conflict for operator_reverse resolved as shift
  ! shift/reduce conflict for operator_sorted_incr resolved as shift
  ! shift/reduce conflict for operator_sorted_decr resolved as shift
  ! shift/reduce conflict for operator_s_combinator resolved as shift
  ! shift/reduce conflict for operator_s_combinator_2 resolved as shift
  ! shift/reduce conflict for operator_goodname2 resolved as shift
    NEWLINE         reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    $end            reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    }               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    )               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    (               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    VAR             reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    FLOAT           reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    NUM             reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    STRING_3SQ      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    STRING_3DQ      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    STRING_SQ       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    STRING_DQ       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    true            reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    Null            reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    false           reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_type       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_num        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_bool       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_any        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_u64        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_u32        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_u16        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_u8         reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_i64        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_i32        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_i16        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_i8         reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_f32        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_f64        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_str        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_list       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_tuple      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_array      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_vector     reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_dict       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_generator  reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_linked_list reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_doubly_linked_list reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_deque      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_heap       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_fibonacci_heap reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_tree       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_trie       reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_stack      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_queue      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_binary_search_tree reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_bitset     reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_set        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_map        reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_range      reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_bad_struct reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    type_bad_struct2 reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    lambda          reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    {               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    ]               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    :               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    ,               reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

  ! operator_add    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sub    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_mul    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_div    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_trudiv [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_pow    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_join   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_split  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitand [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitor  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitxor [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftleft [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitshiftright [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_and    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_or     [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_xor    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_contains [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_incr   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_decr   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_outer  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_rotate [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_apply  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_compose [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_over   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_map    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_less_than_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greater_than_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not_equals [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_smallest [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_greatest [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! [               [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_scan   [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reduc  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_bitnot [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_not    [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_inner  [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_reverse [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_incr [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_sorted_decr [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s_combinator [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_s_combinator_2 [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]
  ! operator_goodname2 [ reduce using rule 61 (lambda_decl -> lambda comma_separated_names : expr .) ]

    OPERATOR                       shift and go to state 160

state 434

    (82) for_decl -> for comma_separated_names operator_contains expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    {               reduce using rule 82 (for_decl -> for comma_separated_names operator_contains expr .)
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 435

    (85) operator_decl -> operator ( arguments ) .

    {               reduce using rule 85 (operator_decl -> operator ( arguments ) .)


state 436

    (88) func_decl -> func VAR ( def_arguments . )

    )               shift and go to state 443


state 437

    (89) def_arguments -> declaration_stmt .
    (91) def_arguments -> declaration_stmt . ; def_arguments

    )               reduce using rule 89 (def_arguments -> declaration_stmt .)
    ;               shift and go to state 444


state 438

    (90) def_arguments -> empty .

    )               reduce using rule 90 (def_arguments -> empty .)


state 439

    (68) declaration_stmt -> TYPE . comma_separated_names
    (69) comma_separated_names -> . VAR
    (70) comma_separated_names -> . VAR , comma_separated_names

    VAR             shift and go to state 208

    comma_separated_names          shift and go to state 207

state 440

    (126) expr -> expr OPERATOR operator_inner OPERATOR expr .
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    operator_add    reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_sub    reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_join   reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_split  reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitand reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitor  reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitxor reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitshiftleft reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_bitshiftright reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_and    reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_or     reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_xor    reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_contains reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_outer  reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_less_than reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_less_than_equals reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greater_than reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greater_than_equals reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_equals reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_not_equals reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_smallest reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_greatest reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    [               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_not    reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_inner  reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_s_combinator reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_s_combinator_2 reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    NEWLINE         reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    $end            reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    }               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    )               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    (               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    VAR             reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    FLOAT           reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    NUM             reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    STRING_3SQ      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    STRING_3DQ      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    STRING_SQ       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    STRING_DQ       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    true            reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    Null            reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    false           reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_type       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_num        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_bool       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_any        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_u64        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_u32        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_u16        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_u8         reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_i64        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_i32        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_i16        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_i8         reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_f32        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_f64        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_str        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_list       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_tuple      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_array      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_vector     reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_dict       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_generator  reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_linked_list reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_doubly_linked_list reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_deque      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_heap       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_fibonacci_heap reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_tree       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_trie       reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_stack      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_queue      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_binary_search_tree reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_bitset     reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_set        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_map        reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_range      reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_bad_struct reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    type_bad_struct2 reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    lambda          reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    {               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    ]               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    :               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    ,               reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .)
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_goodname shift and go to state 174
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_goodname2 shift and go to state 183

  ! operator_mul    [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_div    [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_trudiv [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_pow    [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_incr   [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_decr   [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_rotate [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_apply  [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_compose [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_over   [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_map    [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_goodname [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_scan   [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_reduc  [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_bitnot [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_reverse [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_sorted_incr [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_sorted_decr [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_goodname2 [ reduce using rule 126 (expr -> expr OPERATOR operator_inner OPERATOR expr .) ]
  ! operator_add    [ shift and go to state 140 ]
  ! operator_sub    [ shift and go to state 141 ]
  ! operator_join   [ shift and go to state 146 ]
  ! operator_split  [ shift and go to state 147 ]
  ! operator_bitand [ shift and go to state 148 ]
  ! operator_bitor  [ shift and go to state 149 ]
  ! operator_bitxor [ shift and go to state 150 ]
  ! operator_bitshiftleft [ shift and go to state 151 ]
  ! operator_bitshiftright [ shift and go to state 152 ]
  ! operator_and    [ shift and go to state 153 ]
  ! operator_or     [ shift and go to state 154 ]
  ! operator_xor    [ shift and go to state 155 ]
  ! operator_contains [ shift and go to state 156 ]
  ! operator_outer  [ shift and go to state 159 ]
  ! operator_less_than [ shift and go to state 166 ]
  ! operator_less_than_equals [ shift and go to state 167 ]
  ! operator_greater_than [ shift and go to state 168 ]
  ! operator_greater_than_equals [ shift and go to state 169 ]
  ! operator_equals [ shift and go to state 170 ]
  ! operator_not_equals [ shift and go to state 171 ]
  ! operator_smallest [ shift and go to state 172 ]
  ! operator_greatest [ shift and go to state 173 ]
  ! [               [ shift and go to state 175 ]
  ! operator_not    [ shift and go to state 177 ]
  ! operator_inner  [ shift and go to state 47 ]
  ! operator_s_combinator [ shift and go to state 181 ]
  ! operator_s_combinator_2 [ shift and go to state 182 ]

    OPERATOR                       shift and go to state 160

state 441

    (56) simple_slice -> expr [ expr : expr . ]
    (57) full_slice -> expr [ expr : expr . : expr ]
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    ]               shift and go to state 446
    :               shift and go to state 445
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 442

    (192) arguments -> arguments , arguments .
    (192) arguments -> arguments . , arguments

  ! shift/reduce conflict for , resolved as shift
    )               reduce using rule 192 (arguments -> arguments , arguments .)
    ,               shift and go to state 395

  ! ,               [ reduce using rule 192 (arguments -> arguments , arguments .) ]


state 443

    (88) func_decl -> func VAR ( def_arguments ) .

    {               reduce using rule 88 (func_decl -> func VAR ( def_arguments ) .)


state 444

    (91) def_arguments -> declaration_stmt ; . def_arguments
    (89) def_arguments -> . declaration_stmt
    (90) def_arguments -> . empty
    (91) def_arguments -> . declaration_stmt ; def_arguments
    (68) declaration_stmt -> . TYPE comma_separated_names
    (190) empty -> .
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    )               reduce using rule 190 (empty -> .)
    type_type       shift and go to state 254
    type_num        shift and go to state 255
    type_bool       shift and go to state 256
    type_any        shift and go to state 257
    type_u64        shift and go to state 258
    type_u32        shift and go to state 259
    type_u16        shift and go to state 260
    type_u8         shift and go to state 261
    type_i64        shift and go to state 262
    type_i32        shift and go to state 263
    type_i16        shift and go to state 264
    type_i8         shift and go to state 265
    type_f32        shift and go to state 266
    type_f64        shift and go to state 267
    type_str        shift and go to state 268
    type_list       shift and go to state 269
    type_tuple      shift and go to state 270
    type_array      shift and go to state 271
    type_vector     shift and go to state 272
    type_dict       shift and go to state 273
    type_generator  shift and go to state 274
    type_linked_list shift and go to state 275
    type_doubly_linked_list shift and go to state 276
    type_deque      shift and go to state 277
    type_heap       shift and go to state 278
    type_fibonacci_heap shift and go to state 279
    type_tree       shift and go to state 280
    type_trie       shift and go to state 281
    type_stack      shift and go to state 282
    type_queue      shift and go to state 283
    type_binary_search_tree shift and go to state 284
    type_bitset     shift and go to state 285
    type_set        shift and go to state 286
    type_map        shift and go to state 287
    type_range      shift and go to state 288
    type_bad_struct shift and go to state 289
    type_bad_struct2 shift and go to state 290

    declaration_stmt               shift and go to state 437
    def_arguments                  shift and go to state 447
    empty                          shift and go to state 438
    TYPE                           shift and go to state 439

state 445

    (57) full_slice -> expr [ expr : expr : . expr ]
    (58) expr -> . item
    (59) expr -> . simple_slice
    (60) expr -> . full_slice
    (101) expr -> . ( expr )
    (102) expr -> . expr operator_add expr
    (103) expr -> . expr operator_sub expr
    (104) expr -> . expr operator_mul expr
    (105) expr -> . expr operator_div expr
    (106) expr -> . expr operator_trudiv expr
    (107) expr -> . expr operator_pow expr
    (108) expr -> . expr operator_join expr
    (109) expr -> . expr operator_split expr
    (110) expr -> . OPERATOR operator_scan expr
    (111) expr -> . OPERATOR operator_reduc expr
    (112) expr -> . expr operator_bitand expr
    (113) expr -> . expr operator_bitor expr
    (114) expr -> . expr operator_bitxor expr
    (115) expr -> . expr operator_bitshiftleft expr
    (116) expr -> . expr operator_bitshiftright expr
    (117) expr -> . expr operator_and expr
    (118) expr -> . expr operator_or expr
    (119) expr -> . expr operator_xor expr
    (120) expr -> . expr operator_contains expr
    (121) expr -> . operator_bitnot expr
    (122) expr -> . operator_not expr
    (123) expr -> . expr operator_incr
    (124) expr -> . expr operator_decr
    (125) expr -> . expr operator_outer OPERATOR expr
    (126) expr -> . expr OPERATOR operator_inner OPERATOR expr
    (127) expr -> . operator_reverse expr
    (128) expr -> . expr operator_rotate expr
    (129) expr -> . expr operator_apply expr
    (130) expr -> . expr operator_compose expr
    (131) expr -> . expr operator_over expr
    (132) expr -> . expr operator_map
    (133) expr -> . operator_sorted_incr expr
    (134) expr -> . operator_sorted_decr expr
    (135) expr -> . expr operator_less_than expr
    (136) expr -> . expr operator_less_than_equals expr
    (137) expr -> . expr operator_greater_than expr
    (138) expr -> . expr operator_greater_than_equals expr
    (139) expr -> . expr operator_equals expr
    (140) expr -> . expr operator_not_equals expr
    (141) expr -> . expr operator_smallest expr
    (142) expr -> . expr operator_greatest expr
    (143) expr -> . expr operator_goodname expr
    (144) expr -> . operator_s_combinator expr expr expr
    (145) expr -> . operator_s_combinator_2 OPERATOR OPERATOR expr
    (146) expr -> . operator_goodname2 expr
    (147) expr -> . VAR
    (186) expr -> . const_val
    (187) expr -> . return_val
    (188) expr -> . lambda_decl
    (189) expr -> . TYPE
    (55) item -> . expr [ expr ]
    (56) simple_slice -> . expr [ expr : expr ]
    (57) full_slice -> . expr [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2
    (92) const_val -> . FLOAT
    (93) const_val -> . NUM
    (94) const_val -> . STRING_3SQ
    (95) const_val -> . STRING_3DQ
    (96) const_val -> . STRING_SQ
    (97) const_val -> . STRING_DQ
    (98) const_val -> . true
    (99) const_val -> . Null
    (100) const_val -> . false
    (148) return_val -> . type_type ( arguments )
    (149) return_val -> . type_num ( arguments )
    (150) return_val -> . type_bool ( arguments )
    (151) return_val -> . type_any ( arguments )
    (152) return_val -> . type_u64 ( arguments )
    (153) return_val -> . type_u32 ( arguments )
    (154) return_val -> . type_u16 ( arguments )
    (155) return_val -> . type_u8 ( arguments )
    (156) return_val -> . type_i64 ( arguments )
    (157) return_val -> . type_i32 ( arguments )
    (158) return_val -> . type_i16 ( arguments )
    (159) return_val -> . type_i8 ( arguments )
    (160) return_val -> . type_f32 ( arguments )
    (161) return_val -> . type_f64 ( arguments )
    (162) return_val -> . type_str ( arguments )
    (163) return_val -> . type_list ( arguments )
    (164) return_val -> . type_tuple ( arguments )
    (165) return_val -> . type_array ( arguments )
    (166) return_val -> . type_vector ( arguments )
    (167) return_val -> . type_dict ( arguments )
    (168) return_val -> . type_generator ( arguments )
    (169) return_val -> . type_linked_list ( arguments )
    (170) return_val -> . type_doubly_linked_list ( arguments )
    (171) return_val -> . type_deque ( arguments )
    (172) return_val -> . type_heap ( arguments )
    (173) return_val -> . type_fibonacci_heap ( arguments )
    (174) return_val -> . type_tree ( arguments )
    (175) return_val -> . type_trie ( arguments )
    (176) return_val -> . type_stack ( arguments )
    (177) return_val -> . type_queue ( arguments )
    (178) return_val -> . type_binary_search_tree ( arguments )
    (179) return_val -> . type_bitset ( arguments )
    (180) return_val -> . type_set ( arguments )
    (181) return_val -> . type_map ( arguments )
    (182) return_val -> . type_range ( arguments )
    (183) return_val -> . type_bad_struct ( arguments )
    (184) return_val -> . type_bad_struct2 ( arguments )
    (185) return_val -> . VAR ( arguments )
    (61) lambda_decl -> . lambda comma_separated_names : expr
    (10) TYPE -> . type_type
    (11) TYPE -> . type_num
    (12) TYPE -> . type_bool
    (13) TYPE -> . type_any
    (14) TYPE -> . type_u64
    (15) TYPE -> . type_u32
    (16) TYPE -> . type_u16
    (17) TYPE -> . type_u8
    (18) TYPE -> . type_i64
    (19) TYPE -> . type_i32
    (20) TYPE -> . type_i16
    (21) TYPE -> . type_i8
    (22) TYPE -> . type_f32
    (23) TYPE -> . type_f64
    (24) TYPE -> . type_str
    (25) TYPE -> . type_list
    (26) TYPE -> . type_tuple
    (27) TYPE -> . type_array
    (28) TYPE -> . type_vector
    (29) TYPE -> . type_dict
    (30) TYPE -> . type_generator
    (31) TYPE -> . type_linked_list
    (32) TYPE -> . type_doubly_linked_list
    (33) TYPE -> . type_deque
    (34) TYPE -> . type_heap
    (35) TYPE -> . type_fibonacci_heap
    (36) TYPE -> . type_tree
    (37) TYPE -> . type_trie
    (38) TYPE -> . type_stack
    (39) TYPE -> . type_queue
    (40) TYPE -> . type_binary_search_tree
    (41) TYPE -> . type_bitset
    (42) TYPE -> . type_set
    (43) TYPE -> . type_map
    (44) TYPE -> . type_range
    (45) TYPE -> . type_bad_struct
    (46) TYPE -> . type_bad_struct2

    (               shift and go to state 21
    operator_bitnot shift and go to state 42
    operator_not    shift and go to state 43
    operator_reverse shift and go to state 48
    operator_sorted_incr shift and go to state 54
    operator_sorted_decr shift and go to state 55
    operator_s_combinator shift and go to state 65
    operator_s_combinator_2 shift and go to state 66
    operator_goodname2 shift and go to state 67
    VAR             shift and go to state 189
    operator_add    shift and go to state 22
    operator_sub    shift and go to state 23
    operator_mul    shift and go to state 24
    operator_div    shift and go to state 25
    operator_trudiv shift and go to state 26
    operator_pow    shift and go to state 27
    operator_join   shift and go to state 28
    operator_split  shift and go to state 29
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitand shift and go to state 33
    operator_bitor  shift and go to state 34
    operator_bitxor shift and go to state 35
    operator_bitshiftleft shift and go to state 36
    operator_bitshiftright shift and go to state 37
    operator_and    shift and go to state 38
    operator_or     shift and go to state 39
    operator_xor    shift and go to state 40
    operator_contains shift and go to state 41
    operator_incr   shift and go to state 44
    operator_decr   shift and go to state 45
    operator_outer  shift and go to state 46
    operator_inner  shift and go to state 47
    operator_rotate shift and go to state 49
    operator_apply  shift and go to state 50
    operator_compose shift and go to state 51
    operator_over   shift and go to state 52
    operator_map    shift and go to state 53
    operator_less_than shift and go to state 56
    operator_less_than_equals shift and go to state 57
    operator_greater_than shift and go to state 58
    operator_greater_than_equals shift and go to state 59
    operator_equals shift and go to state 60
    operator_not_equals shift and go to state 61
    operator_smallest shift and go to state 62
    operator_greatest shift and go to state 63
    operator_goodname shift and go to state 64
    FLOAT           shift and go to state 83
    NUM             shift and go to state 84
    STRING_3SQ      shift and go to state 85
    STRING_3DQ      shift and go to state 86
    STRING_SQ       shift and go to state 87
    STRING_DQ       shift and go to state 88
    true            shift and go to state 89
    Null            shift and go to state 90
    false           shift and go to state 91
    type_type       shift and go to state 92
    type_num        shift and go to state 93
    type_bool       shift and go to state 94
    type_any        shift and go to state 95
    type_u64        shift and go to state 96
    type_u32        shift and go to state 97
    type_u16        shift and go to state 98
    type_u8         shift and go to state 99
    type_i64        shift and go to state 100
    type_i32        shift and go to state 101
    type_i16        shift and go to state 102
    type_i8         shift and go to state 103
    type_f32        shift and go to state 104
    type_f64        shift and go to state 105
    type_str        shift and go to state 106
    type_list       shift and go to state 107
    type_tuple      shift and go to state 108
    type_array      shift and go to state 109
    type_vector     shift and go to state 110
    type_dict       shift and go to state 111
    type_generator  shift and go to state 112
    type_linked_list shift and go to state 113
    type_doubly_linked_list shift and go to state 114
    type_deque      shift and go to state 115
    type_heap       shift and go to state 116
    type_fibonacci_heap shift and go to state 117
    type_tree       shift and go to state 118
    type_trie       shift and go to state 119
    type_stack      shift and go to state 120
    type_queue      shift and go to state 121
    type_binary_search_tree shift and go to state 122
    type_bitset     shift and go to state 123
    type_set        shift and go to state 124
    type_map        shift and go to state 125
    type_range      shift and go to state 126
    type_bad_struct shift and go to state 127
    type_bad_struct2 shift and go to state 128
    lambda          shift and go to state 129

    expr                           shift and go to state 448
    item                           shift and go to state 186
    simple_slice                   shift and go to state 187
    full_slice                     shift and go to state 188
    OPERATOR                       shift and go to state 30
    const_val                      shift and go to state 69
    return_val                     shift and go to state 70
    lambda_decl                    shift and go to state 71
    TYPE                           shift and go to state 190

state 446

    (56) simple_slice -> expr [ expr : expr ] .

    =               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_add    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_sub    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_mul    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_div    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_trudiv reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_pow    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_join   reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_split  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitand reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitor  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitxor reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitshiftleft reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitshiftright reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_and    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_or     reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_xor    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_contains reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_incr   reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_decr   reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_outer  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_rotate reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_apply  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_compose reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_over   reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_map    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_less_than reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_less_than_equals reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_greater_than reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_greater_than_equals reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_equals reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_not_equals reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_smallest reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_greatest reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_goodname reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    [               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_scan   reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_reduc  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_bitnot reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_not    reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_inner  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_reverse reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_sorted_incr reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_sorted_decr reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_s_combinator reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_s_combinator_2 reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    operator_goodname2 reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    NEWLINE         reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    $end            reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    }               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    )               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    (               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    VAR             reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    FLOAT           reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    NUM             reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    STRING_3SQ      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    STRING_3DQ      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    STRING_SQ       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    STRING_DQ       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    true            reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    Null            reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    false           reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_type       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_num        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_bool       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_any        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_u64        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_u32        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_u16        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_u8         reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_i64        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_i32        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_i16        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_i8         reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_f32        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_f64        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_str        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_list       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_tuple      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_array      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_vector     reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_dict       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_generator  reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_linked_list reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_doubly_linked_list reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_deque      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_heap       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_fibonacci_heap reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_tree       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_trie       reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_stack      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_queue      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_binary_search_tree reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_bitset     reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_set        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_map        reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_range      reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_bad_struct reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    type_bad_struct2 reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    lambda          reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    {               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    ]               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    :               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)
    ,               reduce using rule 56 (simple_slice -> expr [ expr : expr ] .)


state 447

    (91) def_arguments -> declaration_stmt ; def_arguments .

    )               reduce using rule 91 (def_arguments -> declaration_stmt ; def_arguments .)


state 448

    (57) full_slice -> expr [ expr : expr : expr . ]
    (102) expr -> expr . operator_add expr
    (103) expr -> expr . operator_sub expr
    (104) expr -> expr . operator_mul expr
    (105) expr -> expr . operator_div expr
    (106) expr -> expr . operator_trudiv expr
    (107) expr -> expr . operator_pow expr
    (108) expr -> expr . operator_join expr
    (109) expr -> expr . operator_split expr
    (112) expr -> expr . operator_bitand expr
    (113) expr -> expr . operator_bitor expr
    (114) expr -> expr . operator_bitxor expr
    (115) expr -> expr . operator_bitshiftleft expr
    (116) expr -> expr . operator_bitshiftright expr
    (117) expr -> expr . operator_and expr
    (118) expr -> expr . operator_or expr
    (119) expr -> expr . operator_xor expr
    (120) expr -> expr . operator_contains expr
    (123) expr -> expr . operator_incr
    (124) expr -> expr . operator_decr
    (125) expr -> expr . operator_outer OPERATOR expr
    (126) expr -> expr . OPERATOR operator_inner OPERATOR expr
    (128) expr -> expr . operator_rotate expr
    (129) expr -> expr . operator_apply expr
    (130) expr -> expr . operator_compose expr
    (131) expr -> expr . operator_over expr
    (132) expr -> expr . operator_map
    (135) expr -> expr . operator_less_than expr
    (136) expr -> expr . operator_less_than_equals expr
    (137) expr -> expr . operator_greater_than expr
    (138) expr -> expr . operator_greater_than_equals expr
    (139) expr -> expr . operator_equals expr
    (140) expr -> expr . operator_not_equals expr
    (141) expr -> expr . operator_smallest expr
    (142) expr -> expr . operator_greatest expr
    (143) expr -> expr . operator_goodname expr
    (55) item -> expr . [ expr ]
    (56) simple_slice -> expr . [ expr : expr ]
    (57) full_slice -> expr . [ expr : expr : expr ]
    (194) OPERATOR -> . operator_add
    (195) OPERATOR -> . operator_sub
    (196) OPERATOR -> . operator_mul
    (197) OPERATOR -> . operator_div
    (198) OPERATOR -> . operator_trudiv
    (199) OPERATOR -> . operator_pow
    (200) OPERATOR -> . operator_join
    (201) OPERATOR -> . operator_split
    (202) OPERATOR -> . operator_scan
    (203) OPERATOR -> . operator_reduc
    (204) OPERATOR -> . operator_bitand
    (205) OPERATOR -> . operator_bitor
    (206) OPERATOR -> . operator_bitxor
    (207) OPERATOR -> . operator_bitshiftleft
    (208) OPERATOR -> . operator_bitshiftright
    (209) OPERATOR -> . operator_and
    (210) OPERATOR -> . operator_or
    (211) OPERATOR -> . operator_xor
    (212) OPERATOR -> . operator_contains
    (213) OPERATOR -> . operator_bitnot
    (214) OPERATOR -> . operator_not
    (215) OPERATOR -> . operator_incr
    (216) OPERATOR -> . operator_decr
    (217) OPERATOR -> . operator_outer
    (218) OPERATOR -> . operator_inner
    (219) OPERATOR -> . operator_reverse
    (220) OPERATOR -> . operator_rotate
    (221) OPERATOR -> . operator_apply
    (222) OPERATOR -> . operator_compose
    (223) OPERATOR -> . operator_over
    (224) OPERATOR -> . operator_map
    (225) OPERATOR -> . operator_sorted_incr
    (226) OPERATOR -> . operator_sorted_decr
    (227) OPERATOR -> . operator_less_than
    (228) OPERATOR -> . operator_less_than_equals
    (229) OPERATOR -> . operator_greater_than
    (230) OPERATOR -> . operator_greater_than_equals
    (231) OPERATOR -> . operator_equals
    (232) OPERATOR -> . operator_not_equals
    (233) OPERATOR -> . operator_smallest
    (234) OPERATOR -> . operator_greatest
    (235) OPERATOR -> . operator_goodname
    (236) OPERATOR -> . operator_s_combinator
    (237) OPERATOR -> . operator_s_combinator_2
    (238) OPERATOR -> . operator_goodname2

    ]               shift and go to state 449
    operator_add    shift and go to state 140
    operator_sub    shift and go to state 141
    operator_mul    shift and go to state 142
    operator_div    shift and go to state 143
    operator_trudiv shift and go to state 144
    operator_pow    shift and go to state 145
    operator_join   shift and go to state 146
    operator_split  shift and go to state 147
    operator_bitand shift and go to state 148
    operator_bitor  shift and go to state 149
    operator_bitxor shift and go to state 150
    operator_bitshiftleft shift and go to state 151
    operator_bitshiftright shift and go to state 152
    operator_and    shift and go to state 153
    operator_or     shift and go to state 154
    operator_xor    shift and go to state 155
    operator_contains shift and go to state 156
    operator_incr   shift and go to state 157
    operator_decr   shift and go to state 158
    operator_outer  shift and go to state 159
    operator_rotate shift and go to state 161
    operator_apply  shift and go to state 162
    operator_compose shift and go to state 163
    operator_over   shift and go to state 164
    operator_map    shift and go to state 165
    operator_less_than shift and go to state 166
    operator_less_than_equals shift and go to state 167
    operator_greater_than shift and go to state 168
    operator_greater_than_equals shift and go to state 169
    operator_equals shift and go to state 170
    operator_not_equals shift and go to state 171
    operator_smallest shift and go to state 172
    operator_greatest shift and go to state 173
    operator_goodname shift and go to state 174
    [               shift and go to state 175
    operator_scan   shift and go to state 31
    operator_reduc  shift and go to state 32
    operator_bitnot shift and go to state 176
    operator_not    shift and go to state 177
    operator_inner  shift and go to state 47
    operator_reverse shift and go to state 178
    operator_sorted_incr shift and go to state 179
    operator_sorted_decr shift and go to state 180
    operator_s_combinator shift and go to state 181
    operator_s_combinator_2 shift and go to state 182
    operator_goodname2 shift and go to state 183

    OPERATOR                       shift and go to state 160

state 449

    (57) full_slice -> expr [ expr : expr : expr ] .

    =               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_add    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sub    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_mul    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_div    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_trudiv reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_pow    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_join   reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_split  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitand reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitor  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitxor reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitshiftleft reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitshiftright reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_and    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_or     reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_xor    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_contains reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_incr   reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_decr   reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_outer  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_rotate reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_apply  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_compose reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_over   reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_map    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_less_than reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_less_than_equals reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greater_than reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greater_than_equals reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_equals reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_not_equals reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_smallest reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_greatest reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_goodname reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    [               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_scan   reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_reduc  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_bitnot reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_not    reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_inner  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_reverse reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sorted_incr reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_sorted_decr reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_s_combinator reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_s_combinator_2 reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    operator_goodname2 reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    NEWLINE         reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    $end            reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    }               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    )               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    (               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    VAR             reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    FLOAT           reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    NUM             reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    STRING_3SQ      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    STRING_3DQ      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    STRING_SQ       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    STRING_DQ       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    true            reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    Null            reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    false           reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_type       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_num        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_bool       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_any        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_u64        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_u32        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_u16        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_u8         reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_i64        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_i32        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_i16        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_i8         reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_f32        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_f64        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_str        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_list       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_tuple      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_array      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_vector     reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_dict       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_generator  reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_linked_list reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_doubly_linked_list reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_deque      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_heap       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_fibonacci_heap reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_tree       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_trie       reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_stack      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_queue      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_binary_search_tree reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_bitset     reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_set        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_map        reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_range      reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_bad_struct reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    type_bad_struct2 reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    lambda          reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    {               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    ]               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    :               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)
    ,               reduce using rule 57 (full_slice -> expr [ expr : expr : expr ] .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ( in state 92 resolved as shift
WARNING: shift/reduce conflict for ( in state 93 resolved as shift
WARNING: shift/reduce conflict for ( in state 94 resolved as shift
WARNING: shift/reduce conflict for ( in state 95 resolved as shift
WARNING: shift/reduce conflict for ( in state 96 resolved as shift
WARNING: shift/reduce conflict for ( in state 97 resolved as shift
WARNING: shift/reduce conflict for ( in state 98 resolved as shift
WARNING: shift/reduce conflict for ( in state 99 resolved as shift
WARNING: shift/reduce conflict for ( in state 100 resolved as shift
WARNING: shift/reduce conflict for ( in state 101 resolved as shift
WARNING: shift/reduce conflict for ( in state 102 resolved as shift
WARNING: shift/reduce conflict for ( in state 103 resolved as shift
WARNING: shift/reduce conflict for ( in state 104 resolved as shift
WARNING: shift/reduce conflict for ( in state 105 resolved as shift
WARNING: shift/reduce conflict for ( in state 106 resolved as shift
WARNING: shift/reduce conflict for ( in state 107 resolved as shift
WARNING: shift/reduce conflict for ( in state 108 resolved as shift
WARNING: shift/reduce conflict for ( in state 109 resolved as shift
WARNING: shift/reduce conflict for ( in state 110 resolved as shift
WARNING: shift/reduce conflict for ( in state 111 resolved as shift
WARNING: shift/reduce conflict for ( in state 112 resolved as shift
WARNING: shift/reduce conflict for ( in state 113 resolved as shift
WARNING: shift/reduce conflict for ( in state 114 resolved as shift
WARNING: shift/reduce conflict for ( in state 115 resolved as shift
WARNING: shift/reduce conflict for ( in state 116 resolved as shift
WARNING: shift/reduce conflict for ( in state 117 resolved as shift
WARNING: shift/reduce conflict for ( in state 118 resolved as shift
WARNING: shift/reduce conflict for ( in state 119 resolved as shift
WARNING: shift/reduce conflict for ( in state 120 resolved as shift
WARNING: shift/reduce conflict for ( in state 121 resolved as shift
WARNING: shift/reduce conflict for ( in state 122 resolved as shift
WARNING: shift/reduce conflict for ( in state 123 resolved as shift
WARNING: shift/reduce conflict for ( in state 124 resolved as shift
WARNING: shift/reduce conflict for ( in state 125 resolved as shift
WARNING: shift/reduce conflict for ( in state 126 resolved as shift
WARNING: shift/reduce conflict for ( in state 127 resolved as shift
WARNING: shift/reduce conflict for ( in state 128 resolved as shift
WARNING: shift/reduce conflict for ( in state 189 resolved as shift
WARNING: shift/reduce conflict for operator_add in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_sub in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_mul in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_div in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_trudiv in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_pow in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_join in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_split in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitand in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitor in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitxor in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftleft in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitshiftright in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_and in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_or in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_xor in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_contains in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_incr in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_decr in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_outer in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_rotate in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_apply in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_compose in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_over in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_map in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_less_than in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_less_than_equals in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_greater_than_equals in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_equals in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_not_equals in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_smallest in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_greatest in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_goodname in state 433 resolved as shift
WARNING: shift/reduce conflict for [ in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_scan in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_reduc in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_bitnot in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_not in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_inner in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_reverse in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_incr in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_sorted_decr in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_s_combinator_2 in state 433 resolved as shift
WARNING: shift/reduce conflict for operator_goodname2 in state 433 resolved as shift
WARNING: shift/reduce conflict for , in state 442 resolved as shift
WARNING: reduce/reduce conflict in state 157 resolved using rule (expr -> expr operator_incr)
WARNING: rejected rule (OPERATOR -> operator_incr) in state 157
WARNING: reduce/reduce conflict in state 158 resolved using rule (expr -> expr operator_decr)
WARNING: rejected rule (OPERATOR -> operator_decr) in state 158
WARNING: reduce/reduce conflict in state 165 resolved using rule (expr -> expr operator_map)
WARNING: rejected rule (OPERATOR -> operator_map) in state 165
